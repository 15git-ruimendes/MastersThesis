package Model.APPS.PWM_SVM.v4_0_30.Templates;

import Model.APPS.PWM_SVM.v4_0_30.PWM_SVM

out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015-2020, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-02-20:
 *     - Initial version
 *
 *
 * @endcond
 *
 */
/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/

/**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/

#ifndef PWM_SVMCONF_H_
#define PWM_SVMCONF_H_

""");
String  appInst                   = null;
Integer ov_mod                    = 0;
Integer cur_trig                  = 0;
Integer xmc13_lut                 = 0;
Integer is_dc_link_current        = 0;
out.print("""
#define PWM_SVM_MAJOR_VERSION (${(PWM_SVM.version).findAll( /\d+/ )*.toInteger()[0]}U)
#define PWM_SVM_MINOR_VERSION (${(PWM_SVM.version).findAll( /\d+/ )*.toInteger()[1]}U)
#define PWM_SVM_PATCH_VERSION (${(PWM_SVM.version).findAll( /\d+/ )*.toInteger()[2]}U)
""")
for (Object appIns : appInstancesList ) {
	
	if(appIns.gcheck_overmodulation.value == true)
	{
		ov_mod = 1;
	}
	
	if(appIns.gcombo_externaltrigger.options.indexOf(appIns.gcombo_externaltrigger.value) != 0)
	{
		cur_trig = 1;
	}
	if(appIns.gcombo_externaltrigger.options.indexOf(appIns.gcombo_externaltrigger.value) == 1)
	{
		is_dc_link_current = 1;
	}
	if(((appIns.gcombo_segmenttimecalculation.options.indexOf(appIns.gcombo_segmenttimecalculation.value) == 1) &&
	   (daveEnv.project.selectedDevice.deviceId.family == "XMC1")) || 
       (daveEnv.project.selectedDevice.deviceId.family == "XMC4"))
	{
		xmc13_lut = 1;
	}
	
}


out.print("""
/*Macro to specify if over modulation feature is enabled */
#define PWM_SVM_IS_OVERMODULATION_ENABLE (${ov_mod}U)
/*Macro tells whether current trigger option is selected or not*/
#define PWM_SVM_IS_CURRENTTRIGGER_ENABLE (${cur_trig}U)
/*Macro tells whether phase current trigger option is selected or not*/
#define PWM_SVM_IS_LUT_ENABLE (${xmc13_lut}U)
/** Macro to specify if DC link current measurement is enabled */
#define PWM_SVM_IS_DC_LINK_ENABLE        (${is_dc_link_current}U)

/******************************************************************************/


#endif /* PWM_SVMCONF_H_ */

/**
	 * @}
	 */
 
/*CODE_BLOCK_END*/	
""");