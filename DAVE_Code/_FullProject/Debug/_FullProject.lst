
_FullProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062e0  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  2 .ram_code     00000448  10000800  0c0062e0  00010800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         000001c0  20000000  0c006728  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00007e78  200001c0  0c0068e8  000181c0  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  6 .debug_aranges 00001000  00000000  00000000  000181c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001ccfc  00000000  00000000  000191c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000033c6  00000000  00000000  00035ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000081ff  00000000  00000000  00039282  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00004410  00000000  00000000  00041484  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000b016  00000000  00000000  00045894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008aa4  00000000  00000000  000508aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000dc0  00000000  00000000  0005934e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000935  00000000  00000000  0005a10e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 49 2b 00 08 b1 02 00 08     ........I+......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006728 	.word	0x0c006728
 800024c:	20000000 	.word	0x20000000
 8000250:	000001c0 	.word	0x000001c0
 8000254:	0c0068e8 	.word	0x0c0068e8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c006728 	.word	0x0c006728
 8000264:	10000c48 	.word	0x10000c48
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0062e0 	.word	0x0c0062e0
 8000270:	10000800 	.word	0x10000800
 8000274:	00000448 	.word	0x00000448

08000278 <__copy_table_end__>:
 8000278:	200001c0 	.word	0x200001c0
 800027c:	00007e78 	.word	0x00007e78
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000c48 	.word	0x10000c48
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000290:	10000800 	.word	0x10000800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080056cd 	.word	0x080056cd
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08002d51 	.word	0x08002d51

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 f985 	bl	80025d4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 f9ed 	bl	80026a8 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 f9cc 	bl	8002694 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <XMC_GPIO_Init+0x144>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a39      	ldr	r2, [pc, #228]	; (80004f0 <XMC_GPIO_Init+0x148>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e042      	b.n	80004ac <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	b25b      	sxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	da3c      	bge.n	80004ac <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	409a      	lsls	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	08db      	lsrs	r3, r3, #3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3210      	adds	r2, #16
 8000452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4619      	mov	r1, r3
 8000460:	2307      	movs	r3, #7
 8000462:	408b      	lsls	r3, r1
 8000464:	43db      	mvns	r3, r3
 8000466:	ea02 0103 	and.w	r1, r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f100 0210 	add.w	r2, r0, #16
 8000470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000474:	7afb      	ldrb	r3, [r7, #11]
 8000476:	08db      	lsrs	r3, r3, #3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3210      	adds	r2, #16
 8000488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	4619      	mov	r1, r3
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	f003 0307 	and.w	r3, r3, #7
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	ea42 0103 	orr.w	r1, r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f100 0210 	add.w	r2, r0, #16
 80004a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004ac:	7afb      	ldrb	r3, [r7, #11]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	3204      	adds	r2, #4
 80004c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	ea42 0103 	orr.w	r1, r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1d02      	adds	r2, r0, #4
 80004de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	48028e00 	.word	0x48028e00
 80004f0:	48028f00 	.word	0x48028f00

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fede 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000ffc0 	.word	0x2000ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f891 	bl	80006b4 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fa53 	bl	8000a3c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 fa8b 	bl	8000ab8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 fa76 	bl	8000a94 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f8f5 	bl	80007a8 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa0e 	bl	80009f0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f903 	bl	80007e4 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f926 	bl	8000834 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f90d 	bl	800080c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f930 	bl	800085c <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 fa90 	bl	8000b28 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fab5 	bl	8000b78 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d109      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d017      	beq.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000630:	f000 fac6 	bl	8000bc0 <XMC_SCU_CLOCK_DisableSystemPll>
 8000634:	e014      	b.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000636:	f000 fab3 	bl	8000ba0 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8899      	ldrh	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000646:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800064c:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	462a      	mov	r2, r5
 800065a:	4623      	mov	r3, r4
 800065c:	f000 fac0 	bl	8000be0 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000668:	d103      	bne.n	8000672 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800066a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800066e:	f000 f821 	bl	80006b4 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000672:	f7ff fe2f 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}

0800067c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000690:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	461a      	mov	r2, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006a0:	4413      	add	r3, r2
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	50004414 	.word	0x50004414

080006b4 <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006bc:	4906      	ldr	r1, [pc, #24]	; (80006d8 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	50004600 	.word	0x50004600

080006dc <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006e4:	4906      	ldr	r1, [pc, #24]	; (8000700 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	50004600 	.word	0x50004600

08000704 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 800070c:	4906      	ldr	r1, [pc, #24]	; (8000728 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4313      	orrs	r3, r2
 800071a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	50004600 	.word	0x50004600

0800072c <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d108      	bne.n	800074e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000746:	f023 0301 	bic.w	r3, r3, #1
 800074a:	60d3      	str	r3, [r2, #12]
 800074c:	e007      	b.n	800075e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	60d3      	str	r3, [r2, #12]
  }
}
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	50004710 	.word	0x50004710

0800076c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000776:	bf00      	nop
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800077a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f8      	bne.n	8000778 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000786:	4907      	ldr	r1, [pc, #28]	; (80007a4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000790:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000792:	4313      	orrs	r3, r2
 8000794:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	50004000 	.word	0x50004000
 80007a4:	50004300 	.word	0x50004300

080007a8 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007b2:	bf00      	nop
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f8      	bne.n	80007b4 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ce:	4313      	orrs	r3, r2
 80007d0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	50004000 	.word	0x50004000
 80007e0:	50004300 	.word	0x50004300

080007e4 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007ec:	4906      	ldr	r1, [pc, #24]	; (8000808 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004600 	.word	0x50004600

0800080c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000814:	4906      	ldr	r1, [pc, #24]	; (8000830 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000818:	6a1b      	ldr	r3, [r3, #32]
 800081a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000822:	4313      	orrs	r3, r2
 8000824:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	50004600 	.word	0x50004600

08000834 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800084a:	4313      	orrs	r3, r2
 800084c:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	50004600 	.word	0x50004600

0800085c <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000864:	4906      	ldr	r1, [pc, #24]	; (8000880 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000872:	4313      	orrs	r3, r2
 8000874:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	50004600 	.word	0x50004600

08000884 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800088c:	4906      	ldr	r1, [pc, #24]	; (80008a8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800089a:	4313      	orrs	r3, r2
 800089c:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	50004600 	.word	0x50004600

080008ac <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008b4:	4906      	ldr	r1, [pc, #24]	; (80008d0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	50004600 	.word	0x50004600

080008d4 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008dc:	4906      	ldr	r1, [pc, #24]	; (80008f8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008ea:	4313      	orrs	r3, r2
 80008ec:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	50004600 	.word	0x50004600

080008fc <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	6053      	str	r3, [r2, #4]
}
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	50004600 	.word	0x50004600

0800091c <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800092a:	f023 0302 	bic.w	r3, r3, #2
 800092e:	6153      	str	r3, [r2, #20]
}
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004710 	.word	0x50004710

0800093c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000946:	4a28      	ldr	r2, [pc, #160]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000952:	bf00      	nop
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f9      	beq.n	8000954 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000960:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800096c:	491e      	ldr	r1, [pc, #120]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	3b01      	subs	r3, #1
 8000972:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800097a:	4313      	orrs	r3, r2
 800097c:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800097e:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000988:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f023 0310 	bic.w	r3, r3, #16
 8000994:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a0:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009a2:	bf00      	nop
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0f9      	beq.n	80009a4 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f023 0301 	bic.w	r3, r3, #1
 80009ba:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 80009bc:	bf00      	nop
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1f9      	bne.n	80009be <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009ca:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009d4:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 80009d8:	2208      	movs	r2, #8
 80009da:	60da      	str	r2, [r3, #12]
}
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	50004710 	.word	0x50004710
 80009ec:	50004160 	.word	0x50004160

080009f0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a04:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d10e      	bne.n	8000a2a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a16:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a18:	2064      	movs	r0, #100	; 0x64
 8000a1a:	f7ff fd77 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a1e:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a28:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f7ff fd6e 	bl	800050c <XMC_SCU_lDelay>
}
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	50004710 	.word	0x50004710

08000a3c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d109      	bne.n	8000a60 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a52:	bf00      	nop
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0f9      	beq.n	8000a54 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00a      	beq.n	8000a82 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a72:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a74:	bf00      	nop
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f9      	bne.n	8000a76 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	50004200 	.word	0x50004200
 8000a90:	50004400 	.word	0x50004400

08000a94 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf0c      	ite	eq
 8000aa4:	2301      	moveq	r3, #1
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	50004300 	.word	0x50004300

08000ab8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000abc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ac0:	f7ff fd52 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000ac4:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ace:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000ad0:	bf00      	nop
 8000ad2:	f7ff fd3d 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f8      	beq.n	8000ad2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000ae0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ae4:	f7ff fd40 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000aee:	bf00      	nop
 8000af0:	f7ff fd2e 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000af4:	4603      	mov	r3, r0
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f8      	beq.n	8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000afe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b02:	f7ff fd31 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b12:	bf00      	nop
 8000b14:	f7ff fd1c 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f8      	beq.n	8000b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	50004300 	.word	0x50004300

08000b28 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b2c:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b36:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b38:	4d0d      	ldr	r5, [pc, #52]	; (8000b70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b42:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b46:	f001 fda5 	bl	8002694 <OSCHP_GetFrequency>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8000b52:	0d1b      	lsrs	r3, r3, #20
 8000b54:	3b01      	subs	r3, #1
 8000b56:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b66:	6053      	str	r3, [r2, #4]
}
 8000b68:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	50004710 	.word	0x50004710
 8000b70:	50004700 	.word	0x50004700
 8000b74:	6b5fca6b 	.word	0x6b5fca6b

08000b78 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b84:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b88:	bf0c      	ite	eq
 8000b8a:	2301      	moveq	r3, #1
 8000b8c:	2300      	movne	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	50004710 	.word	0x50004710

08000ba0 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000ba4:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bae:	f023 0302 	bic.w	r3, r3, #2
 8000bb2:	6053      	str	r3, [r2, #4]
}
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	50004710 	.word	0x50004710

08000bc0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bc4:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	6053      	str	r3, [r2, #4]
}
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	50004710 	.word	0x50004710

08000be0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60ba      	str	r2, [r7, #8]
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4603      	mov	r3, r0
 8000bec:	81fb      	strh	r3, [r7, #14]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fd99 	bl	800072c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000bfa:	7b7b      	ldrb	r3, [r7, #13]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	f040 808b 	bne.w	8000d18 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d109      	bne.n	8000c1c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c08:	f001 fd44 	bl	8002694 <OSCHP_GetFrequency>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	4b54      	ldr	r3, [pc, #336]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000c10:	fba3 2302 	umull	r2, r3, r3, r2
 8000c14:	0c9b      	lsrs	r3, r3, #18
 8000c16:	059b      	lsls	r3, r3, #22
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e002      	b.n	8000c22 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c1c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c20:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	fb02 f203 	mul.w	r2, r2, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	4a4b      	ldr	r2, [pc, #300]	; (8000d64 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	0d9b      	lsrs	r3, r3, #22
 8000c3e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c40:	4a49      	ldr	r2, [pc, #292]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c42:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c4c:	bf00      	nop
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f9      	beq.n	8000c4e <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c5a:	4a43      	ldr	r2, [pc, #268]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c5c:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c66:	4940      	ldr	r1, [pc, #256]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c68:	4b3f      	ldr	r3, [pc, #252]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000c6e:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	3a01      	subs	r2, #1
 8000c74:	0212      	lsls	r2, r2, #8
 8000c76:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c7e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c86:	4313      	orrs	r3, r2
 8000c88:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c8a:	4a37      	ldr	r2, [pc, #220]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c8c:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c96:	4a34      	ldr	r2, [pc, #208]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c98:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f023 0310 	bic.w	r3, r3, #16
 8000ca0:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000ca2:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ca4:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cac:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000cae:	bf00      	nop
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f9      	beq.n	8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cbc:	4a2a      	ldr	r2, [pc, #168]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f023 0301 	bic.w	r3, r3, #1
 8000cc6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000cc8:	bf00      	nop
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f9      	bne.n	8000cca <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	4a25      	ldr	r2, [pc, #148]	; (8000d70 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	0d9b      	lsrs	r3, r3, #22
 8000ce2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000ce4:	6a3a      	ldr	r2, [r7, #32]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d202      	bcs.n	8000cf2 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000cec:	6938      	ldr	r0, [r7, #16]
 8000cee:	f000 f845 	bl	8000d7c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	085b      	lsrs	r3, r3, #1
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfc:	095b      	lsrs	r3, r3, #5
 8000cfe:	0d9b      	lsrs	r3, r3, #22
 8000d00:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d02:	6a3a      	ldr	r2, [r7, #32]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d202      	bcs.n	8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d0a:	6938      	ldr	r0, [r7, #16]
 8000d0c:	f000 f836 	bl	8000d7c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d10:	6a38      	ldr	r0, [r7, #32]
 8000d12:	f000 f833 	bl	8000d7c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d16:	e01c      	b.n	8000d52 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d18:	4913      	ldr	r1, [pc, #76]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d22:	6a3b      	ldr	r3, [r7, #32]
 8000d24:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d26:	4313      	orrs	r3, r2
 8000d28:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000d2a:	bf00      	nop
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f9      	beq.n	8000d2c <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d44:	bf00      	nop
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f9      	beq.n	8000d46 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000d54:	2205      	movs	r2, #5
 8000d56:	60da      	str	r2, [r3, #12]
}
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	431bde83 	.word	0x431bde83
 8000d64:	aaaaaaab 	.word	0xaaaaaaab
 8000d68:	50004710 	.word	0x50004710
 8000d6c:	f08080ff 	.word	0xf08080ff
 8000d70:	88888889 	.word	0x88888889
 8000d74:	b60b60b7 	.word	0xb60b60b7
 8000d78:	50004160 	.word	0x50004160

08000d7c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d84:	490b      	ldr	r1, [pc, #44]	; (8000db4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000d98:	bf00      	nop
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0320 	and.w	r3, r3, #32
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f9      	beq.n	8000d9a <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000da6:	2032      	movs	r0, #50	; 0x32
 8000da8:	f7ff fbb0 	bl	800050c <XMC_SCU_lDelay>
}
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	50004710 	.word	0x50004710

08000db8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc6:	60da      	str	r2, [r3, #12]
}
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <XMC_CCU4_lDeassertReset+0x4c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d103      	bne.n	8000dec <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000de4:	2004      	movs	r0, #4
 8000de6:	f7ff fc49 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000dea:	e016      	b.n	8000e1a <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <XMC_CCU4_lDeassertReset+0x50>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d103      	bne.n	8000dfc <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000df4:	2008      	movs	r0, #8
 8000df6:	f7ff fc41 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000dfa:	e00e      	b.n	8000e1a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <XMC_CCU4_lDeassertReset+0x54>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d103      	bne.n	8000e0c <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000e04:	2010      	movs	r0, #16
 8000e06:	f7ff fc39 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e0a:	e006      	b.n	8000e1a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <XMC_CCU4_lDeassertReset+0x58>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d102      	bne.n	8000e1a <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <XMC_CCU4_lDeassertReset+0x5c>)
 8000e16:	f7ff fc31 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	4000c000 	.word	0x4000c000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	40014000 	.word	0x40014000
 8000e2c:	48004000 	.word	0x48004000
 8000e30:	10000001 	.word	0x10000001

08000e34 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000e3c:	2010      	movs	r0, #16
 8000e3e:	f7ff fd5d 	bl	80008fc <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffc6 	bl	8000dd4 <XMC_CCU4_lDeassertReset>
#endif
}
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop

08000e50 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ffe9 	bl	8000e34 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa8 	bl	8000db8 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e74:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	039b      	lsls	r3, r3, #14
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	601a      	str	r2, [r3, #0]
}
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	795b      	ldrb	r3, [r3, #5]
 8000ea2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	051a      	lsls	r2, r3, #20
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	791b      	ldrb	r3, [r3, #4]
 8000eb2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	795b      	ldrb	r3, [r3, #5]
 8000ec2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	795b      	ldrb	r3, [r3, #5]
 8000ed2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	791b      	ldrb	r3, [r3, #4]
 8000ee2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	2b0b      	cmp	r3, #11
 8000f0c:	d836      	bhi.n	8000f7c <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f45 	.word	0x08000f45
 8000f18:	08000f45 	.word	0x08000f45
 8000f1c:	08000f4f 	.word	0x08000f4f
 8000f20:	08000f4f 	.word	0x08000f4f
 8000f24:	08000f7d 	.word	0x08000f7d
 8000f28:	08000f7d 	.word	0x08000f7d
 8000f2c:	08000f7d 	.word	0x08000f7d
 8000f30:	08000f7d 	.word	0x08000f7d
 8000f34:	08000f59 	.word	0x08000f59
 8000f38:	08000f65 	.word	0x08000f65
 8000f3c:	08000f71 	.word	0x08000f71
 8000f40:	08000f71 	.word	0x08000f71
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
      break;
 8000f4c:	e01b      	b.n	8000f86 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000f4e:	230c      	movs	r3, #12
 8000f50:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000f52:	2302      	movs	r3, #2
 8000f54:	617b      	str	r3, [r7, #20]
      break;
 8000f56:	e016      	b.n	8000f86 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000f58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	617b      	str	r3, [r7, #20]
      break;
 8000f62:	e010      	b.n	8000f86 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000f64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f68:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	617b      	str	r3, [r7, #20]
      break;
 8000f6e:	e00a      	b.n	8000f86 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000f70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f74:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000f76:	230c      	movs	r3, #12
 8000f78:	617b      	str	r3, [r7, #20]
      break;
 8000f7a:	e004      	b.n	8000f86 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
	  break;
 8000f84:	bf00      	nop
  }

  if (mask != 0)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f92:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8000f9e:	78ba      	ldrb	r2, [r7, #2]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fce:	60da      	str	r2, [r3, #12]
}
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	611a      	str	r2, [r3, #16]
}
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <XMC_CCU8_lDeassertReset+0x30>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d103      	bne.n	800100c <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8001004:	2080      	movs	r0, #128	; 0x80
 8001006:	f7ff fb39 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 800100a:	e007      	b.n	800101c <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <XMC_CCU8_lDeassertReset+0x34>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d103      	bne.n	800101c <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8001014:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001018:	f7ff fb30 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020000 	.word	0x40020000
 8001028:	40024000 	.word	0x40024000

0800102c <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001034:	2010      	movs	r0, #16
 8001036:	f7ff fc61 	bl	80008fc <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffda 	bl	8000ff4 <XMC_CCU8_lDeassertReset>
#endif
}
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop

08001048 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ffe9 	bl	800102c <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffb0 	bl	8000fc0 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800106c:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	039b      	lsls	r3, r3, #14
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	601a      	str	r2, [r3, #0]
}
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa4 	bl	8000fdc <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	7b5b      	ldrb	r3, [r3, #13]
 80010a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	051a      	lsls	r2, r3, #20
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	7b1b      	ldrb	r3, [r3, #12]
 80010b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	7b1b      	ldrb	r3, [r3, #12]
 80010c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	7b5b      	ldrb	r3, [r3, #13]
 80010d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f083 0214 	eor.w	r2, r3, #20
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop

080010f8 <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
 8001104:	4613      	mov	r3, r2
 8001106:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode",
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) || \
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f023 0303 	bic.w	r3, r3, #3
 8001114:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	4313      	orrs	r3, r2
 800111c:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	60fb      	str	r3, [r7, #12]

  if (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 800112a:	78bb      	ldrb	r3, [r7, #2]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d104      	bne.n	800113a <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	e003      	b.n	8001142 <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001140:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	615a      	str	r2, [r3, #20]
}
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
 8001160:	4613      	mov	r3, r2
 8001162:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) || \
             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if (synch_with_pwm == true)
 8001186:	78bb      	ldrb	r3, [r7, #2]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	e003      	b.n	800119e <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800119c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d104      	bne.n	80011ae <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e003      	b.n	80011b6 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	615a      	str	r2, [r3, #20]
}
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	460b      	mov	r3, r1
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	3b01      	subs	r3, #1
 80011da:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3310      	adds	r3, #16
 80011ea:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	461a      	mov	r2, r3
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	3316      	adds	r3, #22
 8001212:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	2201      	movs	r2, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	461a      	mov	r2, r3
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8001236:	7ffb      	ldrb	r3, [r7, #31]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	3319      	adds	r3, #25
 800123e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	78db      	ldrb	r3, [r3, #3]
 8001254:	461a      	mov	r2, r3
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8001262:	7ffb      	ldrb	r3, [r7, #31]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]
#endif
}
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80012a8:	887a      	ldrh	r2, [r7, #2]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
 80012c4:	4613      	mov	r3, r2
 80012c6:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 80012ce:	883a      	ldrh	r2, [r7, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80012d4:	e002      	b.n	80012dc <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 80012d6:	883a      	ldrh	r2, [r7, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>:
  slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
}

/* Configures status ST1, ST2 mapping to STy */
void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_STATUS_t channel)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel));

  slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	615a      	str	r2, [r3, #20]
  slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	075b      	lsls	r3, r3, #29
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	615a      	str	r2, [r3, #20]
}
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
 8001350:	4613      	mov	r3, r2
 8001352:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4619      	mov	r1, r3
 800135e:	2303      	movs	r3, #3
 8001360:	408b      	lsls	r3, r1
 8001362:	43db      	mvns	r3, r3
 8001364:	401a      	ands	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800136e:	78bb      	ldrb	r3, [r7, #2]
 8001370:	78f9      	ldrb	r1, [r7, #3]
 8001372:	0049      	lsls	r1, r1, #1
 8001374:	408b      	lsls	r3, r1
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001392:	783b      	ldrb	r3, [r7, #0]
 8001394:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 800139c:	78bb      	ldrb	r3, [r7, #2]
 800139e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80013c6:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001402:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001426:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop

0800143c <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001440:	2001      	movs	r0, #1
 8001442:	f7ff f91b 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001446:	bd80      	pop	{r7, pc}

08001448 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001452:	f7ff fff3 	bl	800143c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop

0800149c <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f240 731f 	movw	r3, #1823	; 0x71f
 80014b8:	4013      	ands	r3, r2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	6839      	ldr	r1, [r7, #0]
 80014be:	3128      	adds	r1, #40	; 0x28
 80014c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80014c4:	e007      	b.n	80014d6 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	3128      	adds	r1, #40	; 0x28
 80014d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	071f0000 	.word	0x071f0000

080014e4 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e017      	b.n	8001532 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800151a:	e000      	b.n	800151e <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 800151c:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f7      	bne.n	800151c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d9e4      	bls.n	8001502 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	08005718 	.word	0x08005718

08001548 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d903      	bls.n	8001562 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	3b04      	subs	r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e001      	b.n	8001566 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800156c:	f023 020f 	bic.w	r2, r3, #15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	2300      	movs	r3, #0
 80015a4:	f000 f828 	bl	80015f8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	6859      	ldr	r1, [r3, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	2300      	movs	r3, #0
 80015b2:	f000 f821 	bl	80015f8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	2200      	movs	r2, #0
 80015be:	2301      	movs	r3, #1
 80015c0:	f000 f81a 	bl	80015f8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	6899      	ldr	r1, [r3, #8]
 80015ca:	2201      	movs	r2, #1
 80015cc:	2301      	movs	r3, #1
 80015ce:	f000 f813 	bl	80015f8 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	6819      	ldr	r1, [r3, #0]
 80015ec:	f7ff fecc 	bl	8001388 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop

080015f8 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b08d      	sub	sp, #52	; 0x34
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d113      	bne.n	8001636 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 800160e:	2308      	movs	r3, #8
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001612:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 800161c:	231f      	movs	r3, #31
 800161e:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001620:	7a3b      	ldrb	r3, [r7, #8]
 8001622:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001626:	b2db      	uxtb	r3, r3
 8001628:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800162a:	7a7b      	ldrb	r3, [r7, #9]
 800162c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	76fb      	strb	r3, [r7, #27]
 8001634:	e013      	b.n	800165e <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001636:	2318      	movs	r3, #24
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800163a:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001640:	2310      	movs	r3, #16
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001644:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001648:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 800164a:	7abb      	ldrb	r3, [r7, #10]
 800164c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001650:	b2db      	uxtb	r3, r3
 8001652:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001654:	7afb      	ldrb	r3, [r7, #11]
 8001656:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	3228      	adds	r2, #40	; 0x28
 8001664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001668:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	43db      	mvns	r3, r3
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4013      	ands	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001674:	7efa      	ldrb	r2, [r7, #27]
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	43db      	mvns	r3, r3
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4013      	ands	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4313      	orrs	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	3228      	adds	r2, #40	; 0x28
 80016a0:	6979      	ldr	r1, [r7, #20]
 80016a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80016a6:	3734      	adds	r7, #52	; 0x34
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016c2:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]
 80016f6:	e009      	b.n	800170c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	4a39      	ldr	r2, [pc, #228]	; (80017e0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fe89 	bl	8001418 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	3301      	adds	r3, #1
 800170a:	75fb      	strb	r3, [r7, #23]
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d9f2      	bls.n	80016f8 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001728:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800172a:	2300      	movs	r3, #0
 800172c:	75fb      	strb	r3, [r7, #23]
 800172e:	e021      	b.n	8001774 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	4a2b      	ldr	r2, [pc, #172]	; (80017e0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800173c:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001744:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800174e:	b2db      	uxtb	r3, r3
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8001760:	7dfb      	ldrb	r3, [r7, #23]
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	3301      	adds	r3, #1
 8001772:	75fb      	strb	r3, [r7, #23]
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d9da      	bls.n	8001730 <XMC_VADC_GLOBAL_BackgroundInit+0x48>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d107      	bne.n	80017b8 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	75fb      	strb	r3, [r7, #23]
 80017bc:	e009      	b.n	80017d2 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fe14 	bl	80013f4 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	3301      	adds	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d9f2      	bls.n	80017be <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08005718 	.word	0x08005718

080017e4 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7a1b      	ldrb	r3, [r3, #8]
 80017f4:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fc:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2201      	movs	r2, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	4013      	ands	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4313      	orrs	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7a5b      	ldrb	r3, [r3, #9]
 8001828:	b25b      	sxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	db29      	blt.n	8001882 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d10a      	bne.n	800184e <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8001838:	2308      	movs	r3, #8
 800183a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001842:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800184c:	e00c      	b.n	8001868 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800185e:	f023 021f 	bic.w	r2, r3, #31
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	7a52      	ldrb	r2, [r2, #9]
 8001872:	b251      	sxtb	r1, r2
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	fa01 f202 	lsl.w	r2, r1, r2
 800187a:	431a      	orrs	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	431a      	orrs	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	3280      	adds	r2, #128	; 0x80
 800189e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80018a2:	3724      	adds	r7, #36	; 0x24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_init>:
  }
}

/* Init */
void _init(void)
{}
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	2201      	movs	r2, #1
 80018c8:	409a      	lsls	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60da      	str	r2, [r3, #12]
}
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	045b      	lsls	r3, r3, #17
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	615a      	str	r2, [r3, #20]
}
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop

080018fc <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	611a      	str	r2, [r3, #16]
}
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <XMC_CCU8_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t timer_val)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	671a      	str	r2, [r3, #112]	; 0x70
}
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR>
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	2201      	movs	r2, #1
 8001970:	409a      	lsls	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop

08001984 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 800198c:	4905      	ldr	r1, [pc, #20]	; (80019a4 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8001990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4313      	orrs	r3, r2
 8001996:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	50004000 	.word	0x50004000

080019a8 <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 80019b0:	4905      	ldr	r1, [pc, #20]	; (80019c8 <XMC_SCU_SetCcuTriggerLow+0x20>)
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <XMC_SCU_SetCcuTriggerLow+0x20>)
 80019b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4013      	ands	r3, r2
 80019bc:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	50004000 	.word	0x50004000

080019cc <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	2201      	movs	r2, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]
}
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019fe:	409a      	lsls	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]
}
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <PWM_SVM_lEnableEvent>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void PWM_SVM_lEnableEvent(PWM_SVM_t* const HandlePtr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /*Enable the slice 0 period match interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_periodmatch)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d106      	bne.n	8001a32 <PWM_SVM_lEnableEvent+0x22>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	f7ff ff81 	bl	8001934 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
  /*Enable the slice 0 trap interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_trapevent)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d106      	bne.n	8001a4c <PWM_SVM_lEnableEvent+0x3c>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	210a      	movs	r1, #10
 8001a48:	f7ff ff74 	bl	8001934 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_EVENT2);
  }
}
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop

08001a54 <PWM_SVM_InverterDisable>:
/**
 * This function disables the inverter
 */
void PWM_SVM_InverterDisable(PWM_SVM_t* const HandlePtr)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_SVM_InverterDisable:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	7cdb      	ldrb	r3, [r3, #19]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d109      	bne.n	8001a7a <PWM_SVM_InverterDisable+0x26>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	791b      	ldrb	r3, [r3, #4]
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff ffb9 	bl	80019ec <XMC_GPIO_SetOutputLow>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	7cdb      	ldrb	r3, [r3, #19]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d109      	bne.n	8001a98 <PWM_SVM_InverterDisable+0x44>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff ff9a 	bl	80019cc <XMC_GPIO_SetOutputHigh>
  }
}
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop

08001aa0 <PWM_SVM_InverterEnable>:
/**
 * This function Enables the inverter
 */
void PWM_SVM_InverterEnable(PWM_SVM_t* const HandlePtr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	7cdb      	ldrb	r3, [r3, #19]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d109      	bne.n	8001ac6 <PWM_SVM_InverterEnable+0x26>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	791b      	ldrb	r3, [r3, #4]
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff ff83 	bl	80019cc <XMC_GPIO_SetOutputHigh>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	7cdb      	ldrb	r3, [r3, #19]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d109      	bne.n	8001ae4 <PWM_SVM_InverterEnable+0x44>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff ff84 	bl	80019ec <XMC_GPIO_SetOutputLow>
  }
}
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop

08001aec <PWM_SVM_Init>:
/**
 * This function initializes the peripherals and SVM structure 
 * required for the SVM algorithm.
 */
PWM_SVM_STATUS_t PWM_SVM_Init(PWM_SVM_t* const HandlePtr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  uint32_t phase_count = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  PWM_SVM_STATUS_t status = (PWM_SVM_STATUS_t) PWM_SVM_STATUS_SUCCESS;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 8133 	bne.w	8001d78 <PWM_SVM_Init+0x28c>
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fc7c 	bl	8002414 <GLOBAL_CCU8_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73fb      	strb	r3, [r7, #15]
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	e016      	b.n	8001b54 <PWM_SVM_Init+0x68>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	3208      	adds	r2, #8
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	7919      	ldrb	r1, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	320e      	adds	r2, #14
 8001b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f7fe fc2d 	bl	80003a8 <XMC_GPIO_Init>
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	3301      	adds	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d9e5      	bls.n	8001b26 <PWM_SVM_Init+0x3a>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
          HandlePtr->pwmoutconfig_ptr[phase_count]);
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d11a      	bne.n	8001b9a <PWM_SVM_Init+0xae>
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	791a      	ldrb	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f7fe fc15 	bl	80003a8 <XMC_GPIO_Init>
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b88:	791a      	ldrb	r2, [r3, #4]
          HandlePtr->confighandle_ptr->trap_hwsel);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8001b8e:	7c9b      	ldrb	r3, [r3, #18]
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	f7ff fbd5 	bl	8001344 <XMC_GPIO_SetHardwareControl>
          HandlePtr->confighandle_ptr->trap_hwsel);
    }

    /*Configure io init for inverter enable pin output*/
    if (svmptr->inverter_pin > (PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_NOTREQUIRED)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	7cdb      	ldrb	r3, [r3, #19]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00c      	beq.n	8001bbc <PWM_SVM_Init+0xd0>
    {
      XMC_GPIO_Init(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	791a      	ldrb	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7fe fbf6 	bl	80003a8 <XMC_GPIO_Init>
          HandlePtr->inverterpinconfig_ptr);
    }

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff49 	bl	8001a54 <PWM_SVM_InverterDisable>

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e0a4      	b.n	8001d12 <PWM_SVM_Init+0x226>
    {
      XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->phase_configinit_ptr);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	3202      	adds	r2, #2
 8001bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7ff fa52 	bl	8001084 <XMC_CCU8_SLICE_CompareInit>

      /* configure dead time */
      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->deadtimeconfig_ptr);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	3202      	adds	r2, #2
 8001be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff fb78 	bl	80012e8 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure external start to event 0 */
      XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	3202      	adds	r2, #2
 8001bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c08:	4610      	mov	r0, r2
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f7ff fadb 	bl	80011c8 <XMC_CCU8_SLICE_ConfigureEvent>
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0, HandlePtr->startconfig_ptr);
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d121      	bne.n	8001c60 <PWM_SVM_Init+0x174>
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	3202      	adds	r2, #2
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	2103      	movs	r1, #3
 8001c30:	461a      	mov	r2, r3
 8001c32:	f7ff fac9 	bl	80011c8 <XMC_CCU8_SLICE_ConfigureEvent>
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	3202      	adds	r2, #2
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	7c5a      	ldrb	r2, [r3, #17]
            (bool)svmptr->trap_sync_pwm);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4608      	mov	r0, r1
 8001c58:	4611      	mov	r1, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f7ff fa7a 	bl	8001154 <XMC_CCU8_SLICE_TrapConfig>
            (bool)svmptr->trap_sync_pwm);
      }

      /* Program period  value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) HandlePtr->period);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	3202      	adds	r2, #2
 8001c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7ff fb10 	bl	800129c <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	3202      	adds	r2, #2
 8001c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f7ff fb13 	bl	80012b8 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	3202      	adds	r2, #2
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f7ff fb08 	bl	80012b8 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	3202      	adds	r2, #2
 8001cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb2:	6819      	ldr	r1, [r3, #0]
          HandlePtr->confighandle_ptr->phase_st_map[count]);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	4413      	add	r3, r2
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	791b      	ldrb	r3, [r3, #4]
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7ff fb26 	bl	8001314 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>
          HandlePtr->confighandle_ptr->phase_st_map[count]);

      /* Bind period match event to an NVIC node  */
      HandlePtr->phase_ptr[count]->slice_ptr->SRS |= svmptr->event_sr_selector[count];
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	3202      	adds	r2, #2
 8001cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	3102      	adds	r1, #2
 8001cda:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	300a      	adds	r0, #10
 8001cea:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	3202      	adds	r2, #2
 8001cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d02:	791b      	ldrb	r3, [r3, #4]
 8001d04:	4608      	mov	r0, r1
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7ff fdd6 	bl	80018b8 <XMC_CCU8_EnableClock>

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	f67f af57 	bls.w	8001bc8 <PWM_SVM_Init+0xdc>

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
    }

    PWM_SVM_lEnableEvent(HandlePtr);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fe78 	bl	8001a10 <PWM_SVM_lEnableEvent>
#if defined (MATH)
      /*Ungate Math coprocessor*/
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MATH);
#endif
    /*Enable the shadow transfer for all three slice*/
    XMC_CCU8_EnableShadowTransfer(HandlePtr->global_ptr, svmptr->shadow_transfer_mask);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7ff fde6 	bl	80018fc <XMC_CCU8_EnableShadowTransfer>

    /* update dead time variable*/
    HandlePtr->deadtime_rising_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_rising_edge_counter;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d34:	791b      	ldrb	r3, [r3, #4]
 8001d36:	461a      	mov	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    HandlePtr->deadtime_falling_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_falling_edge_counter;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d42:	795b      	ldrb	r3, [r3, #5]
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    HandlePtr->deadtime_div = (XMC_CCU8_SLICE_DTC_DIV_t) HandlePtr->deadtimeconfig_ptr->div;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    if ((PWM_SVM_STATUS_t) PWM_SVM_STATUS_FAILURE != status)
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d006      	beq.n	8001d74 <PWM_SVM_Init+0x288>
    {
      status = PWM_SVM_STATUS_SUCCESS;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
      HandlePtr->state = (PWM_SVM_STATE_t) PWM_SVM_INITIALIZED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8001d72:	e001      	b.n	8001d78 <PWM_SVM_Init+0x28c>
    }
    else
    {
      status = PWM_SVM_STATUS_FAILURE;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop

08001d84 <PWM_SVM_Start>:

/**
 * This function starts the CCU8 slices used to generate SVM.
 */
void PWM_SVM_Start(PWM_SVM_t* const HandlePtr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Start:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if (((PWM_SVM_STATE_t) PWM_SVM_INITIALIZED == HandlePtr->state)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <PWM_SVM_Start+0x28>
      || ((PWM_SVM_STATE_t) PWM_SVM_STOPPED == HandlePtr->state))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	f040 8133 	bne.w	8002012 <PWM_SVM_Start+0x28e>
  {
    HandlePtr->ta = 0U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
    HandlePtr->tb = 0U;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    HandlePtr->ta2 = 0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    HandlePtr->tb2 = 0U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    HandlePtr->v_ta = 0U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    HandlePtr->v_tb = 0U;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    HandlePtr->v_ta2 = 0U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    HandlePtr->v_tb2 = 0U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    HandlePtr->sector = 0U;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    HandlePtr->subsector = 0U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fe4f 	bl	8001aa0 <PWM_SVM_InverterEnable>

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e026      	b.n	8001e56 <PWM_SVM_Start+0xd2>
    {
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d113      	bne.n	8001e3a <PWM_SVM_Start+0xb6>
      {
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	3202      	adds	r2, #2
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	210a      	movs	r1, #10
 8001e22:	f7ff fd9d 	bl	8001960 <XMC_CCU8_SLICE_ClearEvent>
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	3202      	adds	r2, #2
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	210b      	movs	r1, #11
 8001e36:	f7ff fd93 	bl	8001960 <XMC_CCU8_SLICE_ClearEvent>
      }
      /* configure the Start trigger function*/
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	3202      	adds	r2, #2
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	2101      	movs	r1, #1
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f7ff f954 	bl	80010f8 <XMC_CCU8_SLICE_StartConfig>
    HandlePtr->subsector = 0U;

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3301      	adds	r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d9d5      	bls.n	8001e08 <PWM_SVM_Start+0x84>
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    if ((uint8_t) true == svmptr->enable_trap)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d129      	bne.n	8001eba <PWM_SVM_Start+0x136>
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	7d1b      	ldrb	r3, [r3, #20]
 8001e70:	4619      	mov	r1, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	7d1b      	ldrb	r3, [r3, #20]
 8001e76:	005b      	lsls	r3, r3, #1
    }

    if ((uint8_t) true == svmptr->enable_trap)
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7ff fd2b 	bl	80018d8 <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	7d5b      	ldrb	r3, [r3, #21]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	7d5b      	ldrb	r3, [r3, #21]
 8001e92:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8001e94:	430b      	orrs	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7ff fd1d 	bl	80018d8 <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	7d9b      	ldrb	r3, [r3, #22]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	7d9b      	ldrb	r3, [r3, #22]
 8001eae:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f7ff fd0f 	bl	80018d8 <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
    }

    /*enable module clock by clearing idle bit if any of current measurement is selected */
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	7c1b      	ldrb	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d075      	beq.n	8001fae <PWM_SVM_Start+0x22a>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f7ff f913 	bl	80010f8 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	7c1b      	ldrb	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d133      	bne.n	8001f42 <PWM_SVM_Start+0x1be>
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4608      	mov	r0, r1
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7ff fd0e 	bl	8001918 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8001f12:	4413      	add	r3, r2
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4608      	mov	r0, r1
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f7ff fcfd 	bl	8001918 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8001f34:	4413      	add	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7ff fcec 	bl	8001918 <XMC_CCU8_SLICE_SetTimerValue>
 8001f40:	e035      	b.n	8001fae <PWM_SVM_Start+0x22a>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	b29b      	uxth	r3, r3
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4608      	mov	r0, r1
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7ff fcd9 	bl	8001918 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f72:	b29b      	uxth	r3, r3
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8001f7e:	4413      	add	r3, r2
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	4608      	mov	r0, r1
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7ff fcc7 	bl	8001918 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	b29b      	uxth	r3, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8001fa2:	4413      	add	r3, r2
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4608      	mov	r0, r1
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7ff fcb5 	bl	8001918 <XMC_CCU8_SLICE_SetTimerValue>
                    + (uint16_t) svmptr->current_offset));
      }
    }

    /* synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerHigh((uint32_t)(svmptr->sync_start_mask));
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fce6 	bl	8001984 <XMC_SCU_SetCcuTriggerHigh>

    /* disable the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[0]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f7ff f898 	bl	80010f8 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f7ff f890 	bl	80010f8 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f7ff f888 	bl	80010f8 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	7c1b      	ldrb	r3, [r3, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <PWM_SVM_Start+0x27c>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f7ff f87c 	bl	80010f8 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    /* disable synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerLow((uint32_t)(svmptr->sync_start_mask));
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fccf 	bl	80019a8 <XMC_SCU_SetCcuTriggerLow>

    /* change the state to RUNNING*/
    HandlePtr->state = PWM_SVM_RUNNING;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }
}
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	2201      	movs	r2, #1
 8002028:	409a      	lsls	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60da      	str	r2, [r3, #12]
}
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	60da      	str	r2, [r3, #12]
}
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800205c:	887a      	ldrh	r2, [r7, #2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	611a      	str	r2, [r3, #16]
}
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop

080020a4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL));

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d14d      	bne.n	8002182 <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f9c0 	bl	8002470 <GLOBAL_CCU4_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d13f      	bne.n	800217a <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fec1 	bl	8000e8c <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 8002112:	b29b      	uxth	r3, r3
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7ff ff9a 	bl	8002050 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 8002124:	b29b      	uxth	r3, r3
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7ff ff9f 	bl	800206c <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f7ff ffa5 	bl	8002088 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f824 	bl	800218c <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6919      	ldr	r1, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	4608      	mov	r0, r1
 8002154:	4611      	mov	r1, r2
 8002156:	461a      	mov	r2, r3
 8002158:	f7fe f926 	bl	80003a8 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f878 	bl	8002264 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e003      	b.n	8002182 <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 8002182:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00f      	beq.n	80021be <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4618      	mov	r0, r3
 80021a4:	2100      	movs	r1, #0
 80021a6:	f7ff ff7d 	bl	80020a4 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80021b4:	4610      	mov	r0, r2
 80021b6:	2100      	movs	r1, #0
 80021b8:	461a      	mov	r2, r3
 80021ba:	f7fe fe9d 	bl	8000ef8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00f      	beq.n	80021e8 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4618      	mov	r0, r3
 80021ce:	2102      	movs	r1, #2
 80021d0:	f7ff ff68 	bl	80020a4 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80021de:	4610      	mov	r0, r2
 80021e0:	2102      	movs	r1, #2
 80021e2:	461a      	mov	r2, r3
 80021e4:	f7fe fe88 	bl	8000ef8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop

080021f0 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <PWM_lCCU4_Start+0x1c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002208:	2b04      	cmp	r3, #4
 800220a:	d111      	bne.n	8002230 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f7ff fefd 	bl	8002018 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff08 	bl	8002038 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2203      	movs	r2, #3
 800222c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop

08002238 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800224a:	2b00      	cmp	r3, #0
 800224c:	d104      	bne.n	8002258 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff3e 	bl	80020d0 <PWM_lCCU4_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8002258:	7bfb      	ldrb	r3, [r7, #15]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop

08002264 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffba 	bl	80021f0 <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002290:	0a1b      	lsrs	r3, r3, #8
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_EnableIRQ+0x34>)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	f002 021f 	and.w	r2, r2, #31
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	490d      	ldr	r1, [pc, #52]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	4909      	ldr	r1, [pc, #36]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
  }
}
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b06      	cmp	r3, #6
 8002348:	bf28      	it	cs
 800234a:	2306      	movcs	r3, #6
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3306      	adds	r3, #6
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b01      	subs	r3, #1
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2201      	movs	r2, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	401a      	ands	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	1e59      	subs	r1, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002380:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b25b      	sxtb	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff7e 	bl	80022a0 <__NVIC_EnableIRQ>
}
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop

080023ac <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	781c      	ldrb	r4, [r3, #0]
 80023b8:	f7ff ff64 	bl	8002284 <__NVIC_GetPriorityGrouping>
 80023bc:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80023c2:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	f7ff ffad 	bl	800232c <NVIC_EncodePriority>
 80023d2:	4602      	mov	r2, r0
 80023d4:	b263      	sxtb	r3, r4
 80023d6:	4618      	mov	r0, r3
 80023d8:	4611      	mov	r1, r2
 80023da:	f7ff ff7d 	bl	80022d8 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	78db      	ldrb	r3, [r3, #3]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffd2 	bl	8002390 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
 80023f6:	bf00      	nop

080023f8 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002406:	60da      	str	r2, [r3, #12]
}
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7b5b      	ldrb	r3, [r3, #13]
 8002420:	f083 0301 	eor.w	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00f      	beq.n	800244a <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7b1b      	ldrb	r3, [r3, #12]
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fe07 	bl	8001048 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ffda 	bl	80023f8 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002462:	60da      	str	r2, [r3, #12]
}
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7b5b      	ldrb	r3, [r3, #13]
 800247c:	f083 0301 	eor.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00f      	beq.n	80024a6 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7b1b      	ldrb	r3, [r3, #12]
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	f7fe fcdd 	bl	8000e50 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ffda 	bl	8002454 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	3310      	adds	r3, #16
 80024c4:	4619      	mov	r1, r3
 80024c6:	2301      	movs	r3, #1
 80024c8:	408b      	lsls	r3, r1
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7e1b      	ldrb	r3, [r3, #24]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d149      	bne.n	8002580 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7fe ffa6 	bl	8001448 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e02f      	b.n	8002562 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250a:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4608      	mov	r0, r1
 8002518:	4619      	mov	r1, r3
 800251a:	f7ff f839 	bl	8001590 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	2103      	movs	r1, #3
 800252c:	f7ff f8c0 	bl	80016b0 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	7a1b      	ldrb	r3, [r3, #8]
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4618      	mov	r0, r3
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	f7ff ffb0 	bl	80024b0 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002558:	2200      	movs	r2, #0
 800255a:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3301      	adds	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d9cc      	bls.n	8002502 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7e5b      	ldrb	r3, [r3, #25]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe ffb5 	bl	80014e4 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e1b      	ldrb	r3, [r3, #24]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7ff ffd6 	bl	800258c <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <SystemCoreSetup+0x94>)
 80025e4:	4a21      	ldr	r2, [pc, #132]	; (800266c <SystemCoreSetup+0x98>)
 80025e6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025e8:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80025ec:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80025ee:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <SystemCoreSetup+0x94>)
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <SystemCoreSetup+0x94>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80025fe:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <SystemCoreSetup+0x9c>)
 8002600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002604:	3314      	adds	r3, #20
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f023 030f 	bic.w	r3, r3, #15
 8002610:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f043 0303 	orr.w	r3, r3, #3
 8002618:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <SystemCoreSetup+0x9c>)
 800261c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002620:	3314      	adds	r3, #20
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8002626:	4a10      	ldr	r2, [pc, #64]	; (8002668 <SystemCoreSetup+0x94>)
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <SystemCoreSetup+0x94>)
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f023 0310 	bic.w	r3, r3, #16
 8002630:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8002632:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <SystemCoreSetup+0x94>)
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <SystemCoreSetup+0x94>)
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f023 0308 	bic.w	r3, r3, #8
 800263c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <SystemCoreSetup+0x94>)
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <SystemCoreSetup+0x94>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <SystemCoreSetup+0x94>)
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <SystemCoreSetup+0x94>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002654:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <SystemCoreSetup+0x94>)
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <SystemCoreSetup+0x94>)
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002660:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	e000ed00 	.word	0xe000ed00
 800266c:	08000000 	.word	0x08000000
 8002670:	58001000 	.word	0x58001000

08002674 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]

  return (status);
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <OSCHP_GetFrequency+0x10>)
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	00b71b00 	.word	0x00b71b00

080026a8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <SystemCoreClockSetup+0x54>)
 80026b0:	1d3c      	adds	r4, r7, #4
 80026b2:	461d      	mov	r5, r3
 80026b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b8:	682b      	ldr	r3, [r5, #0]
 80026ba:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd ff60 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f851 	bl	800076c <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7fe f806 	bl	80006dc <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80026d0:	2004      	movs	r0, #4
 80026d2:	f7fe f8d7 	bl	8000884 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 80026d6:	f7fe f921 	bl	800091c <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80026da:	2001      	movs	r0, #1
 80026dc:	2120      	movs	r1, #32
 80026de:	f7fe f92d 	bl	800093c <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe f80e 	bl	8000704 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7fe f8f3 	bl	80008d4 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7fe f8dc 	bl	80008ac <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bdb0      	pop	{r4, r5, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	080060e0 	.word	0x080060e0

08002700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800270c:	0a1b      	lsrs	r3, r3, #8
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db0b      	blt.n	8002746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272e:	4908      	ldr	r1, [pc, #32]	; (8002750 <__NVIC_EnableIRQ+0x34>)
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	79fa      	ldrb	r2, [r7, #7]
 8002738:	f002 021f 	and.w	r2, r2, #31
 800273c:	2001      	movs	r0, #1
 800273e:	fa00 f202 	lsl.w	r2, r0, r2
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100

08002754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	6039      	str	r1, [r7, #0]
 800275e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	2b00      	cmp	r3, #0
 8002766:	db0a      	blt.n	800277e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002768:	490d      	ldr	r1, [pc, #52]	; (80027a0 <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	0092      	lsls	r2, r2, #2
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	440b      	add	r3, r1
 8002778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800277c:	e00a      	b.n	8002794 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277e:	4909      	ldr	r1, [pc, #36]	; (80027a4 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	440b      	add	r3, r1
 8002792:	761a      	strb	r2, [r3, #24]
  }
}
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000e100 	.word	0xe000e100
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f1c3 0307 	rsb	r3, r3, #7
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	bf28      	it	cs
 80027c6:	2306      	movcs	r3, #6
 80027c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3306      	adds	r3, #6
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d902      	bls.n	80027d8 <NVIC_EncodePriority+0x30>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	e000      	b.n	80027da <NVIC_EncodePriority+0x32>
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2201      	movs	r2, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	1e5a      	subs	r2, r3, #1
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	401a      	ands	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2101      	movs	r1, #1
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	1e59      	subs	r1, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80027fc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop

0800280c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800281a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	3260      	adds	r2, #96	; 0x60
 8002842:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	ea42 0103 	orr.w	r1, r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	3260      	adds	r2, #96	; 0x60
 8002858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop

08002868 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	32a0      	adds	r2, #160	; 0xa0
 800287e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7e1b      	ldrb	r3, [r3, #24]
 8002898:	2b02      	cmp	r3, #2
 800289a:	f040 8099 	bne.w	80029d0 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fe1a 	bl	80024dc <GLOBAL_ADC_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	4610      	mov	r0, r2
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	2300      	movs	r3, #0
 80028be:	f7fe fded 	bl	800149c <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7fe ff0a 	bl	80016e8 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	e02e      	b.n	8002938 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e4:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	7b5b      	ldrb	r3, [r3, #13]
 80028ee:	4619      	mov	r1, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4610      	mov	r0, r2
 80028f6:	461a      	mov	r2, r3
 80028f8:	f7fe ff74 	bl	80017e4 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	789b      	ldrb	r3, [r3, #2]
 8002906:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
                                indexed->res_handle);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8002912:	4610      	mov	r0, r2
 8002914:	461a      	mov	r2, r3
 8002916:	f7ff ffa7 	bl	8002868 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8002924:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800292a:	4610      	mov	r0, r2
 800292c:	461a      	mov	r2, r3
 800292e:	f7ff ff7f 	bl	8002830 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	3301      	adds	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0cd      	beq.n	80028da <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	7a1b      	ldrb	r3, [r3, #8]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d02c      	beq.n	80029a8 <ADC_MEASUREMENT_Init+0x11c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d028      	beq.n	80029a8 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b2dc      	uxtb	r4, r3
 800295e:	f7ff fecf 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002962:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8002968:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	461a      	mov	r2, r3
 8002976:	f7ff ff17 	bl	80027a8 <NVIC_EncodePriority>
 800297a:	4602      	mov	r2, r0
 800297c:	b263      	sxtb	r3, r4
 800297e:	4618      	mov	r0, r3
 8002980:	4611      	mov	r1, r2
 8002982:	f7ff fee7 	bl	8002754 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7e5b      	ldrb	r3, [r3, #25]
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	f7fe fdd8 	bl	8001548 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff feba 	bl	800271c <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <ADC_MEASUREMENT_Init+0x12a>
    {
      (handle_ptr->mux_config)();
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7e9b      	ldrb	r3, [r3, #26]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff21 	bl	800280c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7bba      	ldrb	r2, [r7, #14]
 80029ce:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7e1b      	ldrb	r3, [r3, #24]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd90      	pop	{r4, r7, pc}

080029dc <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80029e2:	2300      	movs	r3, #0
 80029e4:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80029e6:	4815      	ldr	r0, [pc, #84]	; (8002a3c <DAVE_Init+0x60>)
 80029e8:	f7ff fe44 	bl	8002674 <CLOCK_XMC4_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <DAVE_Init+0x24>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 80029f6:	4812      	ldr	r0, [pc, #72]	; (8002a40 <DAVE_Init+0x64>)
 80029f8:	f7ff ff48 	bl	800288c <ADC_MEASUREMENT_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d104      	bne.n	8002a10 <DAVE_Init+0x34>
  {
	 /**  Initialization of PWM_SVM APP instance PWM_SVM_0 */
	 init_status = (DAVE_STATUS_t)PWM_SVM_Init(&PWM_SVM_0); 
 8002a06:	480f      	ldr	r0, [pc, #60]	; (8002a44 <DAVE_Init+0x68>)
 8002a08:	f7ff f870 	bl	8001aec <PWM_SVM_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <DAVE_Init+0x44>
  {
	 /**  Initialization of PWM APP instance PWM_0 */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_0); 
 8002a16:	480c      	ldr	r0, [pc, #48]	; (8002a48 <DAVE_Init+0x6c>)
 8002a18:	f7ff fc0e 	bl	8002238 <PWM_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d104      	bne.n	8002a30 <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8002a26:	4809      	ldr	r0, [pc, #36]	; (8002a4c <DAVE_Init+0x70>)
 8002a28:	f7ff fcc0 	bl	80023ac <INTERRUPT_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002a30:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200001c0 	.word	0x200001c0
 8002a40:	20000198 	.word	0x20000198
 8002a44:	2000000c 	.word	0x2000000c
 8002a48:	200000d8 	.word	0x200000d8
 8002a4c:	08006074 	.word	0x08006074

08002a50 <SpeedSensor>:
#include "FOC.h"

float SpeedSensor(float inA,float inB)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	static int counter = 0;
	static float RPM = 0;
	static float prevIa = 0;
	static float prevIb = 0;
	if(((prevIa>0 && inA < 0) || (prevIa < 0 && inA > 0))  && counter == 0)
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <SpeedSensor+0xe4>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a68:	dd06      	ble.n	8002a78 <SpeedSensor+0x28>
 8002a6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	d40e      	bmi.n	8002a96 <SpeedSensor+0x46>
 8002a78:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <SpeedSensor+0xe4>)
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	d50d      	bpl.n	8002aa4 <SpeedSensor+0x54>
 8002a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a94:	dd06      	ble.n	8002aa4 <SpeedSensor+0x54>
 8002a96:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <SpeedSensor+0xe8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <SpeedSensor+0x54>
	{
		counter = 0;
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <SpeedSensor+0xe8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
	}
	if(((prevIb>0 && inB < 0) || (prevIb < 0 && inB > 0)) && counter != 0){
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <SpeedSensor+0xec>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	dd06      	ble.n	8002ac2 <SpeedSensor+0x72>
 8002ab4:	edd7 7a00 	vldr	s15, [r7]
 8002ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac0:	d40e      	bmi.n	8002ae0 <SpeedSensor+0x90>
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <SpeedSensor+0xec>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad0:	d51d      	bpl.n	8002b0e <SpeedSensor+0xbe>
 8002ad2:	edd7 7a00 	vldr	s15, [r7]
 8002ad6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	dd16      	ble.n	8002b0e <SpeedSensor+0xbe>
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <SpeedSensor+0xe8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d012      	beq.n	8002b0e <SpeedSensor+0xbe>
		RPM = 1/(4*counter)*60*TICKS_PER_SECOND;
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <SpeedSensor+0xe8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	2201      	movs	r2, #1
 8002af0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <SpeedSensor+0xf0>)
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <SpeedSensor+0xf4>)
 8002b04:	edc3 7a00 	vstr	s15, [r3]
		counter = 0;
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <SpeedSensor+0xe8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
	}
	counter++;
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <SpeedSensor+0xe8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <SpeedSensor+0xe8>)
 8002b16:	6013      	str	r3, [r2, #0]
	prevIb = inB;
 8002b18:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <SpeedSensor+0xec>)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6013      	str	r3, [r2, #0]
	prevIa = inA;
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <SpeedSensor+0xe4>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6013      	str	r3, [r2, #0]
	return RPM;
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <SpeedSensor+0xf4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	200001c8 	.word	0x200001c8
 8002b38:	200001cc 	.word	0x200001cc
 8002b3c:	200001d0 	.word	0x200001d0
 8002b40:	000afc80 	.word	0x000afc80
 8002b44:	200001d4 	.word	0x200001d4

08002b48 <CCU43_1_IRQHandler>:
 * @params Controller_Var FOC structure, function will change IdRef value limited to ID_MIN
 */
void FieldWeakening(float RPM_Val, FOC Controller_Var);

void ControlLoop(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	Ia = sin(time*2*PI*50);
 8002b4c:	4b7a      	ldr	r3, [pc, #488]	; (8002d38 <CCU43_1_IRQHandler+0x1f0>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b56:	ee17 0a90 	vmov	r0, s15
 8002b5a:	f002 fa51 	bl	8005000 <__aeabi_f2d>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	a36a      	add	r3, pc, #424	; (adr r3, 8002d10 <CCU43_1_IRQHandler+0x1c8>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f002 fa9c 	bl	80050a8 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <CCU43_1_IRQHandler+0x1f4>)
 8002b7e:	f002 fa93 	bl	80050a8 <__aeabi_dmul>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f000 ff85 	bl	8003a98 <sin>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f002 fd49 	bl	800562c <__aeabi_d2f>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <CCU43_1_IRQHandler+0x1f8>)
 8002b9e:	601a      	str	r2, [r3, #0]
	Ib = sin(time*2*PI*50 + 0.5*PI);
 8002ba0:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <CCU43_1_IRQHandler+0x1f0>)
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002baa:	ee17 0a90 	vmov	r0, s15
 8002bae:	f002 fa27 	bl	8005000 <__aeabi_f2d>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	a355      	add	r3, pc, #340	; (adr r3, 8002d10 <CCU43_1_IRQHandler+0x1c8>)
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f002 fa72 	bl	80050a8 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <CCU43_1_IRQHandler+0x1f4>)
 8002bd2:	f002 fa69 	bl	80050a8 <__aeabi_dmul>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	a34e      	add	r3, pc, #312	; (adr r3, 8002d18 <CCU43_1_IRQHandler+0x1d0>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f002 f8ae 	bl	8004d44 <__adddf3>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f000 ff52 	bl	8003a98 <sin>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f002 fd16 	bl	800562c <__aeabi_d2f>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <CCU43_1_IRQHandler+0x1fc>)
 8002c04:	601a      	str	r2, [r3, #0]
	Ic = sin(time*2*PI*50 + 1.333333333333333*PI);
 8002c06:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <CCU43_1_IRQHandler+0x1f0>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c10:	ee17 0a90 	vmov	r0, s15
 8002c14:	f002 f9f4 	bl	8005000 <__aeabi_f2d>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	a33b      	add	r3, pc, #236	; (adr r3, 8002d10 <CCU43_1_IRQHandler+0x1c8>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f002 fa3f 	bl	80050a8 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4b41      	ldr	r3, [pc, #260]	; (8002d3c <CCU43_1_IRQHandler+0x1f4>)
 8002c38:	f002 fa36 	bl	80050a8 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	a336      	add	r3, pc, #216	; (adr r3, 8002d20 <CCU43_1_IRQHandler+0x1d8>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f002 f87b 	bl	8004d44 <__adddf3>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f000 ff1f 	bl	8003a98 <sin>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f002 fce3 	bl	800562c <__aeabi_d2f>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <CCU43_1_IRQHandler+0x200>)
 8002c6a:	601a      	str	r2, [r3, #0]

	RPM = SpeedSensor(Ia,Ib);
 8002c6c:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <CCU43_1_IRQHandler+0x1f8>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <CCU43_1_IRQHandler+0x1fc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7ff feea 	bl	8002a50 <SpeedSensor>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <CCU43_1_IRQHandler+0x204>)
 8002c80:	601a      	str	r2, [r3, #0]
	time += ControlLoopTime;
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <CCU43_1_IRQHandler+0x1f0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 f9ba 	bl	8005000 <__aeabi_f2d>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	a324      	add	r3, pc, #144	; (adr r3, 8002d28 <CCU43_1_IRQHandler+0x1e0>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f002 f853 	bl	8004d44 <__adddf3>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f002 fcc1 	bl	800562c <__aeabi_d2f>
 8002caa:	4602      	mov	r2, r0
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <CCU43_1_IRQHandler+0x1f0>)
 8002cae:	601a      	str	r2, [r3, #0]
	if(time*2*PI*50 >= 2*PI)
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <CCU43_1_IRQHandler+0x1f0>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cba:	ee17 0a90 	vmov	r0, s15
 8002cbe:	f002 f99f 	bl	8005000 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	a311      	add	r3, pc, #68	; (adr r3, 8002d10 <CCU43_1_IRQHandler+0x1c8>)
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	f002 f9ea 	bl	80050a8 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <CCU43_1_IRQHandler+0x1f4>)
 8002ce2:	f002 f9e1 	bl	80050a8 <__aeabi_dmul>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	a310      	add	r3, pc, #64	; (adr r3, 8002d30 <CCU43_1_IRQHandler+0x1e8>)
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f002 fc5e 	bl	80055b4 <__aeabi_dcmpge>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <CCU43_1_IRQHandler+0x1be>
		time = 0;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <CCU43_1_IRQHandler+0x1f0>)
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
	/*
	ClarkeTransform(0,Ia,Ib,Ic,0,0,0,&Controller);
	Controller.Theta = time*2*PI*50;
	ParkTransform(&Controller);*/
	ProbeScope_Sampling();
 8002d06:	f000 f8f1 	bl	8002eec <ProbeScope_Sampling>
}
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	f3af 8000 	nop.w
 8002d10:	54442eea 	.word	0x54442eea
 8002d14:	400921fb 	.word	0x400921fb
 8002d18:	54442eea 	.word	0x54442eea
 8002d1c:	3ff921fb 	.word	0x3ff921fb
 8002d20:	382d749b 	.word	0x382d749b
 8002d24:	4010c152 	.word	0x4010c152
 8002d28:	c3ece2a5 	.word	0xc3ece2a5
 8002d2c:	3f15d867 	.word	0x3f15d867
 8002d30:	54442eea 	.word	0x54442eea
 8002d34:	401921fb 	.word	0x401921fb
 8002d38:	200001d8 	.word	0x200001d8
 8002d3c:	40490000 	.word	0x40490000
 8002d40:	20007fc4 	.word	0x20007fc4
 8002d44:	20007fd0 	.word	0x20007fd0
 8002d48:	20007fd4 	.word	0x20007fd4
 8002d4c:	20007fcc 	.word	0x20007fcc

08002d50 <main>:

int main(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;
	status = DAVE_Init();
 8002d56:	f7ff fe41 	bl	80029dc <DAVE_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	/* Initialization of DAVE APPs  */
	if (status != DAVE_STATUS_SUCCESS)
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d000      	beq.n	8002d66 <main+0x16>
	{
		/* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");
		while (1U)
		{
		}
 8002d64:	e7fe      	b.n	8002d64 <main+0x14>
	}
	PWM_SVM_Start(&PWM_SVM_0);
 8002d66:	4806      	ldr	r0, [pc, #24]	; (8002d80 <main+0x30>)
 8002d68:	f7ff f80c 	bl	8001d84 <PWM_SVM_Start>
	ProbeScope_Init(SystemCoreClock / TICKS_PER_SECOND); /// for micrium uScope
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <main+0x34>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <main+0x38>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 f807 	bl	8002d8c <ProbeScope_Init>
	/* Placeholder for user application code. The while loop below can be replaced with user application code. */
	while (1U)
	{

	}
 8002d7e:	e7fe      	b.n	8002d7e <main+0x2e>
 8002d80:	2000000c 	.word	0x2000000c
 8002d84:	2000ffc0 	.word	0x2000ffc0
 8002d88:	057619f1 	.word	0x057619f1

08002d8c <ProbeScope_Init>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Init (uint32_t  sampling_clk_hz)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
    static  CPU_INT32U  temp = 0;


    ProbeScope_Ch1.En             = 0;
 8002d94:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <ProbeScope_Init+0xe8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
#if PROBE_SCOPE_MAX_CH >= 2       
    ProbeScope_Ch2.En             = 0;
 8002d9a:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <ProbeScope_Init+0xec>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 3       
    ProbeScope_Ch3.En             = 0;
 8002da0:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <ProbeScope_Init+0xf0>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 4       
    ProbeScope_Ch4.En             = 0;
 8002da6:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <ProbeScope_Init+0xf4>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 5       
    ProbeScope_Ch5.En             = 0;
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <ProbeScope_Init+0xf8>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 6       
    ProbeScope_Ch6.En             = 0;
 8002db2:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <ProbeScope_Init+0xfc>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 7       
    ProbeScope_Ch7.En             = 0;
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <ProbeScope_Init+0x100>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 8       
    ProbeScope_Ch8.En             = 0;
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <ProbeScope_Init+0x104>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
#endif

    ProbeScope_Mode               = PROBE_SCOPE_MODE_OFF;
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <ProbeScope_Init+0x108>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
    ProbeScope_State              = PROBE_SCOPE_STATE_START;
 8002dca:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <ProbeScope_Init+0x10c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
    ProbeScope_TrigChSel          = PROBE_SCOPE_CH1;                         // Default trigger channel
 8002dd0:	4b32      	ldr	r3, [pc, #200]	; (8002e9c <ProbeScope_Init+0x110>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
    ProbeScope_SampleIxPrev       = 0;
 8002dd6:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <ProbeScope_Init+0x114>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
    ProbeScope_SampleIxCur        = 0;
 8002ddc:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <ProbeScope_Init+0x118>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigFlag           = 0;
 8002de2:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <ProbeScope_Init+0x11c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigDispPos        = 0;
 8002de8:	4b30      	ldr	r3, [pc, #192]	; (8002eac <ProbeScope_Init+0x120>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOff        = 0;
 8002dee:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <ProbeScope_Init+0x124>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOffCtr     = 0;
 8002df4:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <ProbeScope_Init+0x128>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
    ProbeScope_DataRdyFlag        = 0;
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <ProbeScope_Init+0x12c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
    ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <ProbeScope_Init+0x120>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <ProbeScope_Init+0x130>)
 8002e06:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES;
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <ProbeScope_Init+0x134>)
 8002e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e0e:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigSlope          = PROBE_SCOPE_TRIG_POS;                    // We assume a positive going signal by default
 8002e10:	4b2c      	ldr	r3, [pc, #176]	; (8002ec4 <ProbeScope_Init+0x138>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
    temp                          = ProbeScopeDbg_MaxSamples;
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <ProbeScope_Init+0x13c>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <ProbeScope_Init+0x140>)
 8002e20:	601a      	str	r2, [r3, #0]
    temp                         += ProbeScopeDbg_MaxCh;
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <ProbeScope_Init+0x144>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <ProbeScope_Init+0x140>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a26      	ldr	r2, [pc, #152]	; (8002ecc <ProbeScope_Init+0x140>)
 8002e32:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_16BitEn;
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <ProbeScope_Init+0x148>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <ProbeScope_Init+0x140>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <ProbeScope_Init+0x140>)
 8002e40:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_32BitEn;
 8002e42:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <ProbeScope_Init+0x14c>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <ProbeScope_Init+0x140>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <ProbeScope_Init+0x140>)
 8002e4e:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplingClkDiv     =    1;
 8002e50:	4b22      	ldr	r3, [pc, #136]	; (8002edc <ProbeScope_Init+0x150>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkDivCtr  =    0;
 8002e56:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <ProbeScope_Init+0x154>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkHz      = sampling_clk_hz;
 8002e5c:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <ProbeScope_Init+0x158>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
    ProbeScope_InitFlag           =    1;
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <ProbeScope_Init+0x15c>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
}
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	200001dc 	.word	0x200001dc
 8002e78:	20001194 	.word	0x20001194
 8002e7c:	2000214c 	.word	0x2000214c
 8002e80:	20003104 	.word	0x20003104
 8002e84:	200040bc 	.word	0x200040bc
 8002e88:	20005074 	.word	0x20005074
 8002e8c:	2000602c 	.word	0x2000602c
 8002e90:	20006fe4 	.word	0x20006fe4
 8002e94:	20007f9c 	.word	0x20007f9c
 8002e98:	20007fbc 	.word	0x20007fbc
 8002e9c:	20007f9d 	.word	0x20007f9d
 8002ea0:	20007fa8 	.word	0x20007fa8
 8002ea4:	20007fac 	.word	0x20007fac
 8002ea8:	2000801c 	.word	0x2000801c
 8002eac:	20008028 	.word	0x20008028
 8002eb0:	2000802c 	.word	0x2000802c
 8002eb4:	20007fa0 	.word	0x20007fa0
 8002eb8:	20008034 	.word	0x20008034
 8002ebc:	20007fb0 	.word	0x20007fb0
 8002ec0:	20007fb4 	.word	0x20007fb4
 8002ec4:	20007fa4 	.word	0x20007fa4
 8002ec8:	200001b4 	.word	0x200001b4
 8002ecc:	20007fc0 	.word	0x20007fc0
 8002ed0:	200001b6 	.word	0x200001b6
 8002ed4:	200001b8 	.word	0x200001b8
 8002ed8:	200001bc 	.word	0x200001bc
 8002edc:	20007fb8 	.word	0x20007fb8
 8002ee0:	20007fba 	.word	0x20007fba
 8002ee4:	20008020 	.word	0x20008020
 8002ee8:	20008030 	.word	0x20008030

08002eec <ProbeScope_Sampling>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Sampling (void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
    switch (ProbeScope_Mode) {
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <ProbeScope_Sampling+0x40>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d817      	bhi.n	8002f28 <ProbeScope_Sampling+0x3c>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <ProbeScope_Sampling+0x14>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f17 	.word	0x08002f17
 8002f08:	08002f1d 	.word	0x08002f1d
 8002f0c:	08002f23 	.word	0x08002f23
        case PROBE_SCOPE_MODE_OFF:
             ProbeScope_ModeOff();
 8002f10:	f000 f80e 	bl	8002f30 <ProbeScope_ModeOff>
             break;
 8002f14:	e008      	b.n	8002f28 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_SINGLE:
             ProbeScope_ModeTrig();
 8002f16:	f000 f85d 	bl	8002fd4 <ProbeScope_ModeTrig>
             break;
 8002f1a:	e005      	b.n	8002f28 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_CONTINUOUS:
             ProbeScope_ModeContinuous();
 8002f1c:	f000 f81c 	bl	8002f58 <ProbeScope_ModeContinuous>
             break;
 8002f20:	e002      	b.n	8002f28 <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_TRIG:
             ProbeScope_ModeTrig(); 
 8002f22:	f000 f857 	bl	8002fd4 <ProbeScope_ModeTrig>
             break;
 8002f26:	bf00      	nop
    }
}
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20007f9c 	.word	0x20007f9c

08002f30 <ProbeScope_ModeOff>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeOff (void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                // Force Triggered mode state to START
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <ProbeScope_ModeOff+0x20>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
    if (ProbeScope_SamplingClkDiv == 0) {
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <ProbeScope_ModeOff+0x24>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <ProbeScope_ModeOff+0x18>
        ProbeScope_SamplingClkDiv =  1;
 8002f42:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <ProbeScope_ModeOff+0x24>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	801a      	strh	r2, [r3, #0]
    }
}
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	20007fbc 	.word	0x20007fbc
 8002f54:	20007fb8 	.word	0x20007fb8

08002f58 <ProbeScope_ModeContinuous>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeContinuous (void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
    if (ProbeScope_DataRdyFlag == 0) {                                          // Read one buffer's worth of data
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <ProbeScope_ModeContinuous+0x64>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d126      	bne.n	8002fb2 <ProbeScope_ModeContinuous+0x5a>
        ProbeScope_TrigFlag = 0;
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <ProbeScope_ModeContinuous+0x68>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
        if (ProbeScope_SamplingClkDivCtr > 1) {
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <ProbeScope_ModeContinuous+0x6c>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d906      	bls.n	8002f80 <ProbeScope_ModeContinuous+0x28>
            ProbeScope_SamplingClkDivCtr--;
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <ProbeScope_ModeContinuous+0x6c>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <ProbeScope_ModeContinuous+0x6c>)
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	e018      	b.n	8002fb2 <ProbeScope_ModeContinuous+0x5a>
        } else {
            if (ProbeScope_SamplingClkDiv == 0) {                               // Make sure clock divider is not 0
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <ProbeScope_ModeContinuous+0x70>)
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <ProbeScope_ModeContinuous+0x36>
                ProbeScope_SamplingClkDiv =  1;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <ProbeScope_ModeContinuous+0x70>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	801a      	strh	r2, [r3, #0]
            }
            ProbeScope_SamplingClkDivCtr  = ProbeScope_SamplingClkDiv;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <ProbeScope_ModeContinuous+0x70>)
 8002f90:	881a      	ldrh	r2, [r3, #0]
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <ProbeScope_ModeContinuous+0x6c>)
 8002f94:	801a      	strh	r2, [r3, #0]
            ProbeScope_SampleChAll();                                           // Get the first sample to create a 'previous' value for triggering
 8002f96:	f000 f8e5 	bl	8003164 <ProbeScope_SampleChAll>
            ProbeScope_SamplePosNext();                                         // Position to next sample
 8002f9a:	f000 fa0b 	bl	80033b4 <ProbeScope_SamplePosNext>
            if (ProbeScope_SampleIxCur == 0) {                                  // Read one buffer's worth of data
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <ProbeScope_ModeContinuous+0x74>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <ProbeScope_ModeContinuous+0x5a>
                ProbeScope_DataRdyFlag = 1;   
 8002fa6:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <ProbeScope_ModeContinuous+0x64>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
                ProbeScope_TrigFlag    = 1;
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <ProbeScope_ModeContinuous+0x68>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
            }
        }
    }
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                 // Force Triggered mode state to START
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <ProbeScope_ModeContinuous+0x78>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
}
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20008034 	.word	0x20008034
 8002fc0:	2000801c 	.word	0x2000801c
 8002fc4:	20007fba 	.word	0x20007fba
 8002fc8:	20007fb8 	.word	0x20007fb8
 8002fcc:	20007fac 	.word	0x20007fac
 8002fd0:	20007fbc 	.word	0x20007fbc

08002fd4 <ProbeScope_ModeTrig>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeTrig (void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
    if (ProbeScope_SamplingClkDivCtr > 1) {
 8002fd8:	4b55      	ldr	r3, [pc, #340]	; (8003130 <ProbeScope_ModeTrig+0x15c>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d906      	bls.n	8002fee <ProbeScope_ModeTrig+0x1a>
        ProbeScope_SamplingClkDivCtr--;
 8002fe0:	4b53      	ldr	r3, [pc, #332]	; (8003130 <ProbeScope_ModeTrig+0x15c>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	4b51      	ldr	r3, [pc, #324]	; (8003130 <ProbeScope_ModeTrig+0x15c>)
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	e09e      	b.n	800312c <ProbeScope_ModeTrig+0x158>
    } else { 
        if (ProbeScope_SamplingClkDiv == 0) {                                        // Make sure clock divider is not 0
 8002fee:	4b51      	ldr	r3, [pc, #324]	; (8003134 <ProbeScope_ModeTrig+0x160>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <ProbeScope_ModeTrig+0x28>
            ProbeScope_SamplingClkDiv =  1;
 8002ff6:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <ProbeScope_ModeTrig+0x160>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	801a      	strh	r2, [r3, #0]
        }
        ProbeScope_SamplingClkDivCtr = ProbeScope_SamplingClkDiv;
 8002ffc:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <ProbeScope_ModeTrig+0x160>)
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <ProbeScope_ModeTrig+0x15c>)
 8003002:	801a      	strh	r2, [r3, #0]
        switch (ProbeScope_State) {
 8003004:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <ProbeScope_ModeTrig+0x164>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b03      	cmp	r3, #3
 800300a:	f200 808b 	bhi.w	8003124 <ProbeScope_ModeTrig+0x150>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <ProbeScope_ModeTrig+0x40>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003025 	.word	0x08003025
 8003018:	08003061 	.word	0x08003061
 800301c:	080030a1 	.word	0x080030a1
 8003020:	080030e9 	.word	0x080030e9
            case PROBE_SCOPE_STATE_START:
                 ProbeScope_DataRdyFlag        = 0;
 8003024:	4b45      	ldr	r3, [pc, #276]	; (800313c <ProbeScope_ModeTrig+0x168>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigFlag           = 0;
 800302a:	4b45      	ldr	r3, [pc, #276]	; (8003140 <ProbeScope_ModeTrig+0x16c>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxPrev       = 0;
 8003030:	4b44      	ldr	r3, [pc, #272]	; (8003144 <ProbeScope_ModeTrig+0x170>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxCur        = 0;
 8003036:	4b44      	ldr	r3, [pc, #272]	; (8003148 <ProbeScope_ModeTrig+0x174>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigHoldOffCtr     = 0;
 800303c:	4b43      	ldr	r3, [pc, #268]	; (800314c <ProbeScope_ModeTrig+0x178>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPostTrigCtr = 0;
 8003042:	4b43      	ldr	r3, [pc, #268]	; (8003150 <ProbeScope_ModeTrig+0x17c>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;            // Minimum number of samples pre-trigger
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <ProbeScope_ModeTrig+0x180>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a42      	ldr	r2, [pc, #264]	; (8003158 <ProbeScope_ModeTrig+0x184>)
 800304e:	6013      	str	r3, [r2, #0]
                 ProbeScope_SampleChAll();                                          // Get the first sample to create a 'previous' value for triggering
 8003050:	f000 f888 	bl	8003164 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 8003054:	f000 f9ae 	bl	80033b4 <ProbeScope_SamplePosNext>
                 ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 8003058:	4b37      	ldr	r3, [pc, #220]	; (8003138 <ProbeScope_ModeTrig+0x164>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
                 break;
 800305e:	e065      	b.n	800312c <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 8003060:	f000 f880 	bl	8003164 <ProbeScope_SampleChAll>
                 if (ProbeScope_SamplesPreTrigCtr > 0) {                            // We need a minimum number of samples before the trigger
 8003064:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <ProbeScope_ModeTrig+0x184>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <ProbeScope_ModeTrig+0xa4>
                     ProbeScope_SamplesPreTrigCtr--;                               
 800306c:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <ProbeScope_ModeTrig+0x184>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3b01      	subs	r3, #1
 8003072:	4a39      	ldr	r2, [pc, #228]	; (8003158 <ProbeScope_ModeTrig+0x184>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e001      	b.n	800307c <ProbeScope_ModeTrig+0xa8>
                 } else {
                     ProbeScope_IsTrig();                                           // See if we detected the trigger
 8003078:	f000 f9b8 	bl	80033ec <ProbeScope_IsTrig>
                 }
                 ProbeScope_SamplePosNext();
 800307c:	f000 f99a 	bl	80033b4 <ProbeScope_SamplePosNext>
                 if (ProbeScope_TrigFlag == 1) {                                    // Remaining number of samples to collect before data available
 8003080:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <ProbeScope_ModeTrig+0x16c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d10a      	bne.n	800309e <ProbeScope_ModeTrig+0xca>
                     ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES - ProbeScope_TrigDispPos - 2;  
 8003088:	4b32      	ldr	r3, [pc, #200]	; (8003154 <ProbeScope_ModeTrig+0x180>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8003090:	3302      	adds	r3, #2
 8003092:	4a2f      	ldr	r2, [pc, #188]	; (8003150 <ProbeScope_ModeTrig+0x17c>)
 8003094:	6013      	str	r3, [r2, #0]
                     ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_POST_TRIG;
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <ProbeScope_ModeTrig+0x164>)
 8003098:	2202      	movs	r2, #2
 800309a:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 800309c:	e046      	b.n	800312c <ProbeScope_ModeTrig+0x158>
 800309e:	e045      	b.n	800312c <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_POST_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 80030a0:	f000 f860 	bl	8003164 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 80030a4:	f000 f986 	bl	80033b4 <ProbeScope_SamplePosNext>
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
 80030a8:	4b29      	ldr	r3, [pc, #164]	; (8003150 <ProbeScope_ModeTrig+0x17c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <ProbeScope_ModeTrig+0xe8>
                     ProbeScope_SamplesPostTrigCtr--;
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <ProbeScope_ModeTrig+0x17c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	4a26      	ldr	r2, [pc, #152]	; (8003150 <ProbeScope_ModeTrig+0x17c>)
 80030b8:	6013      	str	r3, [r2, #0]
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
                 }                                                                  
                 break;                                                             
 80030ba:	e037      	b.n	800312c <ProbeScope_ModeTrig+0x158>
                 ProbeScope_SampleChAll();                                          // Get the next sample
                 ProbeScope_SamplePosNext();
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
                     ProbeScope_SamplesPostTrigCtr--;
                 } else {
                     if (ProbeScope_Mode == PROBE_SCOPE_MODE_SINGLE) {
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <ProbeScope_ModeTrig+0x188>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d106      	bne.n	80030d2 <ProbeScope_ModeTrig+0xfe>
                         ProbeScope_Mode           = PROBE_SCOPE_MODE_OFF;
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <ProbeScope_ModeTrig+0x188>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_START;
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <ProbeScope_ModeTrig+0x164>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e006      	b.n	80030e0 <ProbeScope_ModeTrig+0x10c>
                     } else {
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
 80030d2:	4b23      	ldr	r3, [pc, #140]	; (8003160 <ProbeScope_ModeTrig+0x18c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <ProbeScope_ModeTrig+0x178>)
 80030d8:	6013      	str	r3, [r2, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <ProbeScope_ModeTrig+0x164>)
 80030dc:	2203      	movs	r2, #3
 80030de:	701a      	strb	r2, [r3, #0]
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
 80030e0:	4b16      	ldr	r3, [pc, #88]	; (800313c <ProbeScope_ModeTrig+0x168>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
                 }                                                                  
                 break;                                                             
 80030e6:	e021      	b.n	800312c <ProbeScope_ModeTrig+0x158>
                                                                                    
            case PROBE_SCOPE_STATE_DATA_RDY:                                        
                 if (ProbeScope_TrigHoldOffCtr > 0) {                               // Hold-off before beeing able to re-trigger
 80030e8:	4b18      	ldr	r3, [pc, #96]	; (800314c <ProbeScope_ModeTrig+0x178>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <ProbeScope_ModeTrig+0x128>
                     ProbeScope_TrigHoldOffCtr--;                                   
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <ProbeScope_ModeTrig+0x178>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <ProbeScope_ModeTrig+0x178>)
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e012      	b.n	8003122 <ProbeScope_ModeTrig+0x14e>
                 } else {                                                           
                     if (ProbeScope_DataRdyFlag == 0) {                             // Give Probe time to collect and display the waveform(s)
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <ProbeScope_ModeTrig+0x168>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10e      	bne.n	8003122 <ProbeScope_ModeTrig+0x14e>
                         ProbeScope_TrigFlag          = 0;
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <ProbeScope_ModeTrig+0x16c>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
                         ProbeScope_SamplesPreTrigCtr = ProbeScope_TrigDispPos;     // Minimum number of samples pre-trigger
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <ProbeScope_ModeTrig+0x180>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a12      	ldr	r2, [pc, #72]	; (8003158 <ProbeScope_ModeTrig+0x184>)
 8003110:	6013      	str	r3, [r2, #0]
                         ProbeScope_State             = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <ProbeScope_ModeTrig+0x164>)
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
                         ProbeScope_SampleChAll();                                  // Get the first sample to create a 'previous' value for triggering
 8003118:	f000 f824 	bl	8003164 <ProbeScope_SampleChAll>
                         ProbeScope_SamplePosNext();
 800311c:	f000 f94a 	bl	80033b4 <ProbeScope_SamplePosNext>
                     }
                 }
                 break;
 8003120:	e004      	b.n	800312c <ProbeScope_ModeTrig+0x158>
 8003122:	e003      	b.n	800312c <ProbeScope_ModeTrig+0x158>
                 
            default:
                 ProbeScope_State = PROBE_SCOPE_STATE_START;
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <ProbeScope_ModeTrig+0x164>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
                 break;
 800312a:	bf00      	nop
        }
    }
}
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20007fba 	.word	0x20007fba
 8003134:	20007fb8 	.word	0x20007fb8
 8003138:	20007fbc 	.word	0x20007fbc
 800313c:	20008034 	.word	0x20008034
 8003140:	2000801c 	.word	0x2000801c
 8003144:	20007fa8 	.word	0x20007fa8
 8003148:	20007fac 	.word	0x20007fac
 800314c:	20007fa0 	.word	0x20007fa0
 8003150:	20007fb4 	.word	0x20007fb4
 8003154:	20008028 	.word	0x20008028
 8003158:	20007fb0 	.word	0x20007fb0
 800315c:	20007f9c 	.word	0x20007f9c
 8003160:	2000802c 	.word	0x2000802c

08003164 <ProbeScope_SampleChAll>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleChAll (void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
    ProbeScope_SampleCh(&ProbeScope_Ch1);
 8003168:	480c      	ldr	r0, [pc, #48]	; (800319c <ProbeScope_SampleChAll+0x38>)
 800316a:	f000 f827 	bl	80031bc <ProbeScope_SampleCh>

#if PROBE_SCOPE_MAX_CH >= 2
    ProbeScope_SampleCh(&ProbeScope_Ch2);
 800316e:	480c      	ldr	r0, [pc, #48]	; (80031a0 <ProbeScope_SampleChAll+0x3c>)
 8003170:	f000 f824 	bl	80031bc <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 3                     
    ProbeScope_SampleCh(&ProbeScope_Ch3);
 8003174:	480b      	ldr	r0, [pc, #44]	; (80031a4 <ProbeScope_SampleChAll+0x40>)
 8003176:	f000 f821 	bl	80031bc <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 4                     
    ProbeScope_SampleCh(&ProbeScope_Ch4);
 800317a:	480b      	ldr	r0, [pc, #44]	; (80031a8 <ProbeScope_SampleChAll+0x44>)
 800317c:	f000 f81e 	bl	80031bc <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 5
    ProbeScope_SampleCh(&ProbeScope_Ch5);
 8003180:	480a      	ldr	r0, [pc, #40]	; (80031ac <ProbeScope_SampleChAll+0x48>)
 8003182:	f000 f81b 	bl	80031bc <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 6                     
    ProbeScope_SampleCh(&ProbeScope_Ch6);
 8003186:	480a      	ldr	r0, [pc, #40]	; (80031b0 <ProbeScope_SampleChAll+0x4c>)
 8003188:	f000 f818 	bl	80031bc <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 7                     
    ProbeScope_SampleCh(&ProbeScope_Ch7);
 800318c:	4809      	ldr	r0, [pc, #36]	; (80031b4 <ProbeScope_SampleChAll+0x50>)
 800318e:	f000 f815 	bl	80031bc <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 8                     
    ProbeScope_SampleCh(&ProbeScope_Ch8);
 8003192:	4809      	ldr	r0, [pc, #36]	; (80031b8 <ProbeScope_SampleChAll+0x54>)
 8003194:	f000 f812 	bl	80031bc <ProbeScope_SampleCh>
#endif                     
}
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200001dc 	.word	0x200001dc
 80031a0:	20001194 	.word	0x20001194
 80031a4:	2000214c 	.word	0x2000214c
 80031a8:	20003104 	.word	0x20003104
 80031ac:	200040bc 	.word	0x200040bc
 80031b0:	20005074 	.word	0x20005074
 80031b4:	2000602c 	.word	0x2000602c
 80031b8:	20006fe4 	.word	0x20006fe4

080031bc <ProbeScope_SampleCh>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleCh (PROBE_SCOPE_CH  *p_ch)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    PROBE_SCOPE_CH_SAMPLE   msk;                                    // Mask used to select desired bit when in bit mode.
    PROBE_SCOPE_CH_SAMPLE  *p_sample;                               // Pointer to where the sample will be stored


    if (p_ch->En == 1) {
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	f040 80eb 	bne.w	80033a4 <ProbeScope_SampleCh+0x1e8>
        p_sample = &p_ch->Samples[ProbeScope_SampleIxCur];          // Point to current position in sampling buffer
 80031ce:	4b78      	ldr	r3, [pc, #480]	; (80033b0 <ProbeScope_SampleCh+0x1f4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3306      	adds	r3, #6
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
        switch (p_ch->DataType) {
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	791b      	ldrb	r3, [r3, #4]
 80031e0:	2b06      	cmp	r3, #6
 80031e2:	f200 80df 	bhi.w	80033a4 <ProbeScope_SampleCh+0x1e8>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <ProbeScope_SampleCh+0x30>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003209 	.word	0x08003209
 80031f0:	0800324d 	.word	0x0800324d
 80031f4:	08003291 	.word	0x08003291
 80031f8:	080032d5 	.word	0x080032d5
 80031fc:	08003319 	.word	0x08003319
 8003200:	08003359 	.word	0x08003359
 8003204:	08003399 	.word	0x08003399
            case PROBE_SCOPE_INT08U:
                 if (p_ch->BitEn == 0) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <ProbeScope_SampleCh+0x60>
                     p_sample->Val08U     = *(CPU_INT08U *)p_ch->DataAddr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	e016      	b.n	800324a <ProbeScope_SampleCh+0x8e>
                 } else {
                     msk.Val08U           =  (CPU_INT08U)1 << p_ch->BitSel;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7b1b      	ldrb	r3, [r3, #12]
 8003220:	461a      	mov	r2, r3
 8003222:	2301      	movs	r3, #1
 8003224:	4093      	lsls	r3, r2
 8003226:	b2db      	uxtb	r3, r3
 8003228:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08U *)p_ch->DataAddr & msk.Val08U) {
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	7a3b      	ldrb	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <ProbeScope_SampleCh+0x86>
                         p_sample->Val08U = 1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e003      	b.n	800324a <ProbeScope_SampleCh+0x8e>
                     } else {
                         p_sample->Val08U = 0;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 8003248:	e0ac      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
 800324a:	e0ab      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT08S:
                 if (p_ch->BitEn == 0) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <ProbeScope_SampleCh+0xa4>
                     p_sample->Val08S     = *(CPU_INT08S *)p_ch->DataAddr;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e016      	b.n	800328e <ProbeScope_SampleCh+0xd2>
                 } else {
                     msk.Val08S           =  (CPU_INT08S)1 << p_ch->BitSel;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7b1b      	ldrb	r3, [r3, #12]
 8003264:	461a      	mov	r2, r3
 8003266:	2301      	movs	r3, #1
 8003268:	4093      	lsls	r3, r2
 800326a:	b2db      	uxtb	r3, r3
 800326c:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08S *)p_ch->DataAddr & msk.Val08S) {
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	7a3b      	ldrb	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <ProbeScope_SampleCh+0xca>
                         p_sample->Val08S = 1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e003      	b.n	800328e <ProbeScope_SampleCh+0xd2>
                     } else {
                         p_sample->Val08S = 0;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 800328c:	e08a      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
 800328e:	e089      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
                                  
#if PROBE_SCOPE_16_BIT_EN > 0                                   
            case PROBE_SCOPE_INT16U:
                 if (p_ch->BitEn == 0) {
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <ProbeScope_SampleCh+0xe8>
                     p_sample->Val16U     = *(CPU_INT16U *)p_ch->DataAddr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	881a      	ldrh	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	801a      	strh	r2, [r3, #0]
 80032a2:	e016      	b.n	80032d2 <ProbeScope_SampleCh+0x116>
                 } else {
                     msk.Val16U           =  (CPU_INT16U)1 << p_ch->BitSel;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7b1b      	ldrb	r3, [r3, #12]
 80032a8:	461a      	mov	r2, r3
 80032aa:	2301      	movs	r3, #1
 80032ac:	4093      	lsls	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16U *)p_ch->DataAddr & msk.Val16U) {
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <ProbeScope_SampleCh+0x10e>
                         p_sample->Val16U = 1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	801a      	strh	r2, [r3, #0]
 80032c8:	e003      	b.n	80032d2 <ProbeScope_SampleCh+0x116>
                     } else {
                         p_sample->Val16U = 0;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 80032d0:	e068      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
 80032d2:	e067      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT16S:
                 if (p_ch->BitEn == 0) {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <ProbeScope_SampleCh+0x12c>
                     p_sample->Val16S     = *(CPU_INT16S *)p_ch->DataAddr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	e016      	b.n	8003316 <ProbeScope_SampleCh+0x15a>
                 } else {
                     msk.Val16S           =  (CPU_INT16S)1 << p_ch->BitSel;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7b1b      	ldrb	r3, [r3, #12]
 80032ec:	461a      	mov	r2, r3
 80032ee:	2301      	movs	r3, #1
 80032f0:	4093      	lsls	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16S *)p_ch->DataAddr & msk.Val16S) {
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	881a      	ldrh	r2, [r3, #0]
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	4013      	ands	r3, r2
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <ProbeScope_SampleCh+0x152>
                         p_sample->Val16S = 1;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	801a      	strh	r2, [r3, #0]
 800330c:	e003      	b.n	8003316 <ProbeScope_SampleCh+0x15a>
                     } else {
                         p_sample->Val16S = 0;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8003314:	e046      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
 8003316:	e045      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
            case PROBE_SCOPE_INT32U:
                 if (p_ch->BitEn == 0) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <ProbeScope_SampleCh+0x170>
                     p_sample->Val32U     = *(CPU_INT32U *)p_ch->DataAddr;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e014      	b.n	8003356 <ProbeScope_SampleCh+0x19a>
                 } else {
                     msk.Val32U           =  (CPU_INT32U)1 << p_ch->BitSel;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7b1b      	ldrb	r3, [r3, #12]
 8003330:	461a      	mov	r2, r3
 8003332:	2301      	movs	r3, #1
 8003334:	4093      	lsls	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32U *)p_ch->DataAddr & msk.Val32U) {
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <ProbeScope_SampleCh+0x192>
                         p_sample->Val32U = 1;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e003      	b.n	8003356 <ProbeScope_SampleCh+0x19a>
                     } else {
                         p_sample->Val32U = 0;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8003354:	e026      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
 8003356:	e025      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT32S:
                 if (p_ch->BitEn == 0) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <ProbeScope_SampleCh+0x1b0>
                     p_sample->Val32S     = *(CPU_INT32S *)p_ch->DataAddr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e014      	b.n	8003396 <ProbeScope_SampleCh+0x1da>
                 } else {
                     msk.Val32S           =  (CPU_INT32S)1 << p_ch->BitSel;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	7b1b      	ldrb	r3, [r3, #12]
 8003370:	461a      	mov	r2, r3
 8003372:	2301      	movs	r3, #1
 8003374:	4093      	lsls	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32S *)p_ch->DataAddr & msk.Val32S) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <ProbeScope_SampleCh+0x1d2>
                         p_sample->Val32S = 1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e003      	b.n	8003396 <ProbeScope_SampleCh+0x1da>
                     } else {
                         p_sample->Val32S = 0;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8003394:	e006      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
 8003396:	e005      	b.n	80033a4 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_FP32:
                 p_sample->ValFP32  = *(CPU_FP32   *)p_ch->DataAddr;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	601a      	str	r2, [r3, #0]
                 break;
 80033a2:	bf00      	nop
#endif
        }                          
    }
}
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20007fac 	.word	0x20007fac

080033b4 <ProbeScope_SamplePosNext>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SamplePosNext (void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
    ProbeScope_SampleIxPrev = ProbeScope_SampleIxCur;              // Update the position of the previous sample
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <ProbeScope_SamplePosNext+0x30>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <ProbeScope_SamplePosNext+0x34>)
 80033be:	6013      	str	r3, [r2, #0]
    ProbeScope_SampleIxCur++;                                      // Position to where next sample will be placed
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <ProbeScope_SamplePosNext+0x30>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <ProbeScope_SamplePosNext+0x30>)
 80033c8:	6013      	str	r3, [r2, #0]
    if (ProbeScope_SampleIxCur >= PROBE_SCOPE_MAX_SAMPLES) {       // See if we need to wrap around
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <ProbeScope_SamplePosNext+0x30>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d2:	d302      	bcc.n	80033da <ProbeScope_SamplePosNext+0x26>
        ProbeScope_SampleIxCur = 0;                                // yes
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <ProbeScope_SamplePosNext+0x30>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
    }
}
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20007fac 	.word	0x20007fac
 80033e8:	20007fa8 	.word	0x20007fa8

080033ec <ProbeScope_IsTrig>:
*              Sets ProbeScope_TrigFlag to 0 when no trigger is detected
************************************************************************************************************************
*/

static  void  ProbeScope_IsTrig (void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
    PROBE_SCOPE_CH          *p_ch;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_prev;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_cur;
    

    switch (ProbeScope_TrigChSel) {
 80033f2:	4b90      	ldr	r3, [pc, #576]	; (8003634 <ProbeScope_IsTrig+0x248>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	2b07      	cmp	r3, #7
 80033fa:	d82b      	bhi.n	8003454 <ProbeScope_IsTrig+0x68>
 80033fc:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <ProbeScope_IsTrig+0x18>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003425 	.word	0x08003425
 8003408:	0800342b 	.word	0x0800342b
 800340c:	08003431 	.word	0x08003431
 8003410:	08003437 	.word	0x08003437
 8003414:	0800343d 	.word	0x0800343d
 8003418:	08003443 	.word	0x08003443
 800341c:	08003449 	.word	0x08003449
 8003420:	0800344f 	.word	0x0800344f
        case PROBE_SCOPE_CH1:
             p_ch = &ProbeScope_Ch1;
 8003424:	4b84      	ldr	r3, [pc, #528]	; (8003638 <ProbeScope_IsTrig+0x24c>)
 8003426:	60fb      	str	r3, [r7, #12]
             break;
 8003428:	e01a      	b.n	8003460 <ProbeScope_IsTrig+0x74>
             
#if PROBE_SCOPE_MAX_CH >= 2
        case PROBE_SCOPE_CH2:
             p_ch = &ProbeScope_Ch2;
 800342a:	4b84      	ldr	r3, [pc, #528]	; (800363c <ProbeScope_IsTrig+0x250>)
 800342c:	60fb      	str	r3, [r7, #12]
             break;
 800342e:	e017      	b.n	8003460 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 3
        case PROBE_SCOPE_CH3:
             p_ch = &ProbeScope_Ch3;
 8003430:	4b83      	ldr	r3, [pc, #524]	; (8003640 <ProbeScope_IsTrig+0x254>)
 8003432:	60fb      	str	r3, [r7, #12]
             break;
 8003434:	e014      	b.n	8003460 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 4
        case PROBE_SCOPE_CH4:
             p_ch = &ProbeScope_Ch4;
 8003436:	4b83      	ldr	r3, [pc, #524]	; (8003644 <ProbeScope_IsTrig+0x258>)
 8003438:	60fb      	str	r3, [r7, #12]
             break;
 800343a:	e011      	b.n	8003460 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 5
        case PROBE_SCOPE_CH5:
             p_ch = &ProbeScope_Ch5;
 800343c:	4b82      	ldr	r3, [pc, #520]	; (8003648 <ProbeScope_IsTrig+0x25c>)
 800343e:	60fb      	str	r3, [r7, #12]
             break;
 8003440:	e00e      	b.n	8003460 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 6
        case PROBE_SCOPE_CH6:
             p_ch = &ProbeScope_Ch6;
 8003442:	4b82      	ldr	r3, [pc, #520]	; (800364c <ProbeScope_IsTrig+0x260>)
 8003444:	60fb      	str	r3, [r7, #12]
             break;
 8003446:	e00b      	b.n	8003460 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 7
        case PROBE_SCOPE_CH7:
             p_ch = &ProbeScope_Ch7;
 8003448:	4b81      	ldr	r3, [pc, #516]	; (8003650 <ProbeScope_IsTrig+0x264>)
 800344a:	60fb      	str	r3, [r7, #12]
             break;
 800344c:	e008      	b.n	8003460 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 8
        case PROBE_SCOPE_CH8:
             p_ch = &ProbeScope_Ch8;
 800344e:	4b81      	ldr	r3, [pc, #516]	; (8003654 <ProbeScope_IsTrig+0x268>)
 8003450:	60fb      	str	r3, [r7, #12]
             break;
 8003452:	e005      	b.n	8003460 <ProbeScope_IsTrig+0x74>
#endif
             
        default:
             p_ch                 = &ProbeScope_Ch1;
 8003454:	4b78      	ldr	r3, [pc, #480]	; (8003638 <ProbeScope_IsTrig+0x24c>)
 8003456:	60fb      	str	r3, [r7, #12]
             ProbeScope_TrigChSel = PROBE_SCOPE_CH1;
 8003458:	4b76      	ldr	r3, [pc, #472]	; (8003634 <ProbeScope_IsTrig+0x248>)
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
             break;
 800345e:	bf00      	nop
    }         
    ProbeScope_TrigFlag = 0;
 8003460:	4b7d      	ldr	r3, [pc, #500]	; (8003658 <ProbeScope_IsTrig+0x26c>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
    if (p_ch->En == 1) {
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	f040 8308 	bne.w	8003a80 <ProbeScope_IsTrig+0x694>
        p_sample_prev = &p_ch->Samples[ProbeScope_SampleIxPrev];          // Point to previous position in sampling buffer
 8003470:	4b7a      	ldr	r3, [pc, #488]	; (800365c <ProbeScope_IsTrig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3306      	adds	r3, #6
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]
        p_sample_cur  = &p_ch->Samples[ProbeScope_SampleIxCur];           // Point to current  position in sampling buffer
 800347e:	4b78      	ldr	r3, [pc, #480]	; (8003660 <ProbeScope_IsTrig+0x274>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3306      	adds	r3, #6
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	607b      	str	r3, [r7, #4]
        if (ProbeScope_TrigSlope == PROBE_SCOPE_TRIG_POS) {
 800348c:	4b75      	ldr	r3, [pc, #468]	; (8003664 <ProbeScope_IsTrig+0x278>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	f040 8187 	bne.w	80037a4 <ProbeScope_IsTrig+0x3b8>
            switch (p_ch->DataType) {
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	791b      	ldrb	r3, [r3, #4]
 800349a:	2b06      	cmp	r3, #6
 800349c:	f200 82f0 	bhi.w	8003a80 <ProbeScope_IsTrig+0x694>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <ProbeScope_IsTrig+0xbc>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034c5 	.word	0x080034c5
 80034ac:	08003523 	.word	0x08003523
 80034b0:	0800358d 	.word	0x0800358d
 80034b4:	080035eb 	.word	0x080035eb
 80034b8:	0800368f 	.word	0x0800368f
 80034bc:	080036ed 	.word	0x080036ed
 80034c0:	0800374b 	.word	0x0800374b
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d119      	bne.n	8003500 <ProbeScope_IsTrig+0x114>
                         if (p_sample_prev->Val08U < p_sample_cur->Val08U) {
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d223      	bcs.n	8003520 <ProbeScope_IsTrig+0x134>
                             if (p_sample_prev->Val08U <= p_ch->TrigLevel.Val08U) {
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	7d1b      	ldrb	r3, [r3, #20]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d81d      	bhi.n	8003520 <ProbeScope_IsTrig+0x134>
                                 if (p_sample_cur->Val08U >= p_ch->TrigLevel.Val08U) {
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	7d1b      	ldrb	r3, [r3, #20]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d317      	bcc.n	8003520 <ProbeScope_IsTrig+0x134>
                                     ProbeScope_TrigFlag = 1;
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <ProbeScope_IsTrig+0x26c>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80034f6:	4b5a      	ldr	r3, [pc, #360]	; (8003660 <ProbeScope_IsTrig+0x274>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5b      	ldr	r2, [pc, #364]	; (8003668 <ProbeScope_IsTrig+0x27c>)
 80034fc:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80034fe:	e150      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U == 0) {
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <ProbeScope_IsTrig+0x134>
                             if (p_sample_cur->Val08U != 0) { 
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <ProbeScope_IsTrig+0x134>
                                 ProbeScope_TrigFlag = 1;
 8003510:	4b51      	ldr	r3, [pc, #324]	; (8003658 <ProbeScope_IsTrig+0x26c>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003516:	4b52      	ldr	r3, [pc, #328]	; (8003660 <ProbeScope_IsTrig+0x274>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a53      	ldr	r2, [pc, #332]	; (8003668 <ProbeScope_IsTrig+0x27c>)
 800351c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800351e:	e140      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
 8003520:	e13f      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d11f      	bne.n	800356a <ProbeScope_IsTrig+0x17e>
                         if (p_sample_prev->Val08S < p_sample_cur->Val08S) {
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	b252      	sxtb	r2, r2
 8003534:	b25b      	sxtb	r3, r3
 8003536:	429a      	cmp	r2, r3
 8003538:	da27      	bge.n	800358a <ProbeScope_IsTrig+0x19e>
                             if (p_sample_prev->Val08S <= p_ch->TrigLevel.Val08S) {
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	7d1b      	ldrb	r3, [r3, #20]
 8003542:	b252      	sxtb	r2, r2
 8003544:	b25b      	sxtb	r3, r3
 8003546:	429a      	cmp	r2, r3
 8003548:	dc1f      	bgt.n	800358a <ProbeScope_IsTrig+0x19e>
                                 if (p_sample_cur->Val08S >= p_ch->TrigLevel.Val08S) {
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	7d1b      	ldrb	r3, [r3, #20]
 8003552:	b252      	sxtb	r2, r2
 8003554:	b25b      	sxtb	r3, r3
 8003556:	429a      	cmp	r2, r3
 8003558:	db17      	blt.n	800358a <ProbeScope_IsTrig+0x19e>
                                     ProbeScope_TrigFlag = 1;
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <ProbeScope_IsTrig+0x26c>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003560:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <ProbeScope_IsTrig+0x274>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a40      	ldr	r2, [pc, #256]	; (8003668 <ProbeScope_IsTrig+0x27c>)
 8003566:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003568:	e11b      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S == 0) {
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10b      	bne.n	800358a <ProbeScope_IsTrig+0x19e>
                             if (p_sample_cur->Val08S != 0) { 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <ProbeScope_IsTrig+0x19e>
                                 ProbeScope_TrigFlag = 1;
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <ProbeScope_IsTrig+0x26c>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003580:	4b37      	ldr	r3, [pc, #220]	; (8003660 <ProbeScope_IsTrig+0x274>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a38      	ldr	r2, [pc, #224]	; (8003668 <ProbeScope_IsTrig+0x27c>)
 8003586:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003588:	e10b      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
 800358a:	e10a      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>

#if PROBE_SCOPE_16_BIT_EN > 0                                    
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d119      	bne.n	80035c8 <ProbeScope_IsTrig+0x1dc>
                         if (p_sample_prev->Val16U < p_sample_cur->Val16U) {
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	881a      	ldrh	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d223      	bcs.n	80035e8 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_prev->Val16U <= p_ch->TrigLevel.Val16U) {
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	881a      	ldrh	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8a9b      	ldrh	r3, [r3, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d81d      	bhi.n	80035e8 <ProbeScope_IsTrig+0x1fc>
                                 if (p_sample_cur->Val16U >= p_ch->TrigLevel.Val16U) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	881a      	ldrh	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8a9b      	ldrh	r3, [r3, #20]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d317      	bcc.n	80035e8 <ProbeScope_IsTrig+0x1fc>
                                     ProbeScope_TrigFlag = 1;
 80035b8:	4b27      	ldr	r3, [pc, #156]	; (8003658 <ProbeScope_IsTrig+0x26c>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80035be:	4b28      	ldr	r3, [pc, #160]	; (8003660 <ProbeScope_IsTrig+0x274>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a29      	ldr	r2, [pc, #164]	; (8003668 <ProbeScope_IsTrig+0x27c>)
 80035c4:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80035c6:	e0ec      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U == 0) {
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_cur->Val16U != 0) { 
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <ProbeScope_IsTrig+0x1fc>
                                 ProbeScope_TrigFlag = 1;
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <ProbeScope_IsTrig+0x26c>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <ProbeScope_IsTrig+0x274>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a21      	ldr	r2, [pc, #132]	; (8003668 <ProbeScope_IsTrig+0x27c>)
 80035e4:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80035e6:	e0dc      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
 80035e8:	e0db      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d13c      	bne.n	800366c <ProbeScope_IsTrig+0x280>
                         if (p_sample_prev->Val16S < p_sample_cur->Val16S) {
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b212      	sxth	r2, r2
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	429a      	cmp	r2, r3
 8003600:	da44      	bge.n	800368c <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_prev->Val16S <= p_ch->TrigLevel.Val16S) {
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	881a      	ldrh	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8a9b      	ldrh	r3, [r3, #20]
 800360a:	b212      	sxth	r2, r2
 800360c:	b21b      	sxth	r3, r3
 800360e:	429a      	cmp	r2, r3
 8003610:	dc3c      	bgt.n	800368c <ProbeScope_IsTrig+0x2a0>
                                 if (p_sample_cur->Val16S >= p_ch->TrigLevel.Val16S) {
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	881a      	ldrh	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8a9b      	ldrh	r3, [r3, #20]
 800361a:	b212      	sxth	r2, r2
 800361c:	b21b      	sxth	r3, r3
 800361e:	429a      	cmp	r2, r3
 8003620:	db34      	blt.n	800368c <ProbeScope_IsTrig+0x2a0>
                                     ProbeScope_TrigFlag = 1;
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <ProbeScope_IsTrig+0x26c>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003628:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <ProbeScope_IsTrig+0x274>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <ProbeScope_IsTrig+0x27c>)
 800362e:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003630:	e0b7      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
 8003632:	bf00      	nop
 8003634:	20007f9d 	.word	0x20007f9d
 8003638:	200001dc 	.word	0x200001dc
 800363c:	20001194 	.word	0x20001194
 8003640:	2000214c 	.word	0x2000214c
 8003644:	20003104 	.word	0x20003104
 8003648:	200040bc 	.word	0x200040bc
 800364c:	20005074 	.word	0x20005074
 8003650:	2000602c 	.word	0x2000602c
 8003654:	20006fe4 	.word	0x20006fe4
 8003658:	2000801c 	.word	0x2000801c
 800365c:	20007fa8 	.word	0x20007fa8
 8003660:	20007fac 	.word	0x20007fac
 8003664:	20007fa4 	.word	0x20007fa4
 8003668:	20008024 	.word	0x20008024
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S == 0) {
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_cur->Val16S != 0) { 
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <ProbeScope_IsTrig+0x2a0>
                                 ProbeScope_TrigFlag = 1;
 800367c:	4b86      	ldr	r3, [pc, #536]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003682:	4b86      	ldr	r3, [pc, #536]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a86      	ldr	r2, [pc, #536]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 8003688:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800368a:	e08a      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
 800368c:	e089      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d119      	bne.n	80036ca <ProbeScope_IsTrig+0x2de>
                         if (p_sample_prev->Val32U < p_sample_cur->Val32U) {
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d223      	bcs.n	80036ea <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_prev->Val32U <= p_ch->TrigLevel.Val32U) {
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d81d      	bhi.n	80036ea <ProbeScope_IsTrig+0x2fe>
                                 if (p_sample_cur->Val32U >= p_ch->TrigLevel.Val32U) {
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d317      	bcc.n	80036ea <ProbeScope_IsTrig+0x2fe>
                                     ProbeScope_TrigFlag = 1;
 80036ba:	4b77      	ldr	r3, [pc, #476]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80036c0:	4b76      	ldr	r3, [pc, #472]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a76      	ldr	r2, [pc, #472]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 80036c6:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80036c8:	e06b      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U == 0) {
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_cur->Val32U != 0) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <ProbeScope_IsTrig+0x2fe>
                                 ProbeScope_TrigFlag = 1;
 80036da:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80036e0:	4b6e      	ldr	r3, [pc, #440]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6e      	ldr	r2, [pc, #440]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 80036e6:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80036e8:	e05b      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
 80036ea:	e05a      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d119      	bne.n	8003728 <ProbeScope_IsTrig+0x33c>
                         if (p_sample_prev->Val32S < p_sample_cur->Val32S) {
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	da23      	bge.n	8003748 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_prev->Val32S <= p_ch->TrigLevel.Val32S) {
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	dc1d      	bgt.n	8003748 <ProbeScope_IsTrig+0x35c>
                                 if (p_sample_cur->Val32S >= p_ch->TrigLevel.Val32S) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	db17      	blt.n	8003748 <ProbeScope_IsTrig+0x35c>
                                     ProbeScope_TrigFlag = 1;
 8003718:	4b5f      	ldr	r3, [pc, #380]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800371e:	4b5f      	ldr	r3, [pc, #380]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a5f      	ldr	r2, [pc, #380]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 8003724:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003726:	e03c      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S == 0) {
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <ProbeScope_IsTrig+0x35c>
                             if (p_sample_cur->Val32S != 0) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <ProbeScope_IsTrig+0x35c>
                                 ProbeScope_TrigFlag = 1;
 8003738:	4b57      	ldr	r3, [pc, #348]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800373e:	4b57      	ldr	r3, [pc, #348]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a57      	ldr	r2, [pc, #348]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 8003744:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003746:	e02c      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
 8003748:	e02b      	b.n	80037a2 <ProbeScope_IsTrig+0x3b6>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	ed93 7a00 	vldr	s14, [r3]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	d400      	bmi.n	8003762 <ProbeScope_IsTrig+0x376>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003760:	e01e      	b.n	80037a0 <ProbeScope_IsTrig+0x3b4>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	ed93 7a00 	vldr	s14, [r3]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	edd3 7a05 	vldr	s15, [r3, #20]
 800376e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003776:	d900      	bls.n	800377a <ProbeScope_IsTrig+0x38e>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003778:	e012      	b.n	80037a0 <ProbeScope_IsTrig+0x3b4>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	ed93 7a00 	vldr	s14, [r3]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	edd3 7a05 	vldr	s15, [r3, #20]
 8003786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	da00      	bge.n	8003792 <ProbeScope_IsTrig+0x3a6>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003790:	e006      	b.n	80037a0 <ProbeScope_IsTrig+0x3b4>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8003792:	4b41      	ldr	r3, [pc, #260]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003798:	4b40      	ldr	r3, [pc, #256]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a40      	ldr	r2, [pc, #256]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 800379e:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80037a0:	bf00      	nop
 80037a2:	e16d      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
#endif
            }
        } else {
            switch (p_ch->DataType) {
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	791b      	ldrb	r3, [r3, #4]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	f200 8169 	bhi.w	8003a80 <ProbeScope_IsTrig+0x694>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <ProbeScope_IsTrig+0x3c8>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037d1 	.word	0x080037d1
 80037b8:	0800382f 	.word	0x0800382f
 80037bc:	080038a5 	.word	0x080038a5
 80037c0:	08003903 	.word	0x08003903
 80037c4:	0800396d 	.word	0x0800396d
 80037c8:	080039cb 	.word	0x080039cb
 80037cc:	08003a29 	.word	0x08003a29
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d119      	bne.n	800380c <ProbeScope_IsTrig+0x420>
                         if (p_sample_prev->Val08U > p_sample_cur->Val08U) {
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	781a      	ldrb	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d923      	bls.n	800382c <ProbeScope_IsTrig+0x440>
                             if (p_sample_prev->Val08U >= p_ch->TrigLevel.Val08U) {
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	7d1b      	ldrb	r3, [r3, #20]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d31d      	bcc.n	800382c <ProbeScope_IsTrig+0x440>
                                 if (p_sample_cur->Val08U <= p_ch->TrigLevel.Val08U) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	781a      	ldrb	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	7d1b      	ldrb	r3, [r3, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d817      	bhi.n	800382c <ProbeScope_IsTrig+0x440>
                                     ProbeScope_TrigFlag = 1;
 80037fc:	4b26      	ldr	r3, [pc, #152]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003802:	4b26      	ldr	r3, [pc, #152]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 8003808:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800380a:	e139      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U != 0) {
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <ProbeScope_IsTrig+0x440>
                             if (p_sample_cur->Val08U == 0) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d107      	bne.n	800382c <ProbeScope_IsTrig+0x440>
                                 ProbeScope_TrigFlag = 1;
 800381c:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003822:	4b1e      	ldr	r3, [pc, #120]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 8003828:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800382a:	e129      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
 800382c:	e128      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d11f      	bne.n	8003876 <ProbeScope_IsTrig+0x48a>
                         if (p_sample_prev->Val08S > p_sample_cur->Val08S) {
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b252      	sxtb	r2, r2
 8003840:	b25b      	sxtb	r3, r3
 8003842:	429a      	cmp	r2, r3
 8003844:	dd27      	ble.n	8003896 <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_prev->Val08S >= p_ch->TrigLevel.Val08S) {
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	7d1b      	ldrb	r3, [r3, #20]
 800384e:	b252      	sxtb	r2, r2
 8003850:	b25b      	sxtb	r3, r3
 8003852:	429a      	cmp	r2, r3
 8003854:	db1f      	blt.n	8003896 <ProbeScope_IsTrig+0x4aa>
                                 if (p_sample_cur->Val08S <= p_ch->TrigLevel.Val08S) {
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	7d1b      	ldrb	r3, [r3, #20]
 800385e:	b252      	sxtb	r2, r2
 8003860:	b25b      	sxtb	r3, r3
 8003862:	429a      	cmp	r2, r3
 8003864:	dc17      	bgt.n	8003896 <ProbeScope_IsTrig+0x4aa>
                                     ProbeScope_TrigFlag = 1;
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 8003872:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003874:	e104      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S != 0) {
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_cur->Val08S == 0) {
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <ProbeScope_IsTrig+0x4aa>
                                 ProbeScope_TrigFlag = 1;
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <ProbeScope_IsTrig+0x4ac>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <ProbeScope_IsTrig+0x4b0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a03      	ldr	r2, [pc, #12]	; (80038a0 <ProbeScope_IsTrig+0x4b4>)
 8003892:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003894:	e0f4      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
 8003896:	e0f3      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
 8003898:	2000801c 	.word	0x2000801c
 800389c:	20007fac 	.word	0x20007fac
 80038a0:	20008024 	.word	0x20008024
                                    
#if PROBE_SCOPE_16_BIT_EN > 0                                   
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d119      	bne.n	80038e0 <ProbeScope_IsTrig+0x4f4>
                         if (p_sample_prev->Val16U > p_sample_cur->Val16U) {
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	881a      	ldrh	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d923      	bls.n	8003900 <ProbeScope_IsTrig+0x514>
                             if (p_sample_prev->Val16U >= p_ch->TrigLevel.Val16U) {
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	881a      	ldrh	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8a9b      	ldrh	r3, [r3, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d31d      	bcc.n	8003900 <ProbeScope_IsTrig+0x514>
                                 if (p_sample_cur->Val16U <= p_ch->TrigLevel.Val16U) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	881a      	ldrh	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8a9b      	ldrh	r3, [r3, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d817      	bhi.n	8003900 <ProbeScope_IsTrig+0x514>
                                     ProbeScope_TrigFlag = 1;
 80038d0:	4b6e      	ldr	r3, [pc, #440]	; (8003a8c <ProbeScope_IsTrig+0x6a0>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80038d6:	4b6e      	ldr	r3, [pc, #440]	; (8003a90 <ProbeScope_IsTrig+0x6a4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6e      	ldr	r2, [pc, #440]	; (8003a94 <ProbeScope_IsTrig+0x6a8>)
 80038dc:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80038de:	e0cf      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U != 0) {
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <ProbeScope_IsTrig+0x514>
                             if (p_sample_cur->Val16U == 0) {
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d107      	bne.n	8003900 <ProbeScope_IsTrig+0x514>
                                 ProbeScope_TrigFlag = 1;
 80038f0:	4b66      	ldr	r3, [pc, #408]	; (8003a8c <ProbeScope_IsTrig+0x6a0>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80038f6:	4b66      	ldr	r3, [pc, #408]	; (8003a90 <ProbeScope_IsTrig+0x6a4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a66      	ldr	r2, [pc, #408]	; (8003a94 <ProbeScope_IsTrig+0x6a8>)
 80038fc:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80038fe:	e0bf      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
 8003900:	e0be      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d11f      	bne.n	800394a <ProbeScope_IsTrig+0x55e>
                         if (p_sample_prev->Val16S > p_sample_cur->Val16S) {
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b212      	sxth	r2, r2
 8003914:	b21b      	sxth	r3, r3
 8003916:	429a      	cmp	r2, r3
 8003918:	dd27      	ble.n	800396a <ProbeScope_IsTrig+0x57e>
                             if (p_sample_prev->Val16S >= p_ch->TrigLevel.Val16S) {
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	881a      	ldrh	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8a9b      	ldrh	r3, [r3, #20]
 8003922:	b212      	sxth	r2, r2
 8003924:	b21b      	sxth	r3, r3
 8003926:	429a      	cmp	r2, r3
 8003928:	db1f      	blt.n	800396a <ProbeScope_IsTrig+0x57e>
                                 if (p_sample_cur->Val16S <= p_ch->TrigLevel.Val16S) {
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	881a      	ldrh	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8a9b      	ldrh	r3, [r3, #20]
 8003932:	b212      	sxth	r2, r2
 8003934:	b21b      	sxth	r3, r3
 8003936:	429a      	cmp	r2, r3
 8003938:	dc17      	bgt.n	800396a <ProbeScope_IsTrig+0x57e>
                                     ProbeScope_TrigFlag = 1;
 800393a:	4b54      	ldr	r3, [pc, #336]	; (8003a8c <ProbeScope_IsTrig+0x6a0>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <ProbeScope_IsTrig+0x6a4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a53      	ldr	r2, [pc, #332]	; (8003a94 <ProbeScope_IsTrig+0x6a8>)
 8003946:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003948:	e09a      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S != 0) {
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <ProbeScope_IsTrig+0x57e>
                             if (p_sample_cur->Val16S == 0) {
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d107      	bne.n	800396a <ProbeScope_IsTrig+0x57e>
                                 ProbeScope_TrigFlag = 1;
 800395a:	4b4c      	ldr	r3, [pc, #304]	; (8003a8c <ProbeScope_IsTrig+0x6a0>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003960:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <ProbeScope_IsTrig+0x6a4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a4b      	ldr	r2, [pc, #300]	; (8003a94 <ProbeScope_IsTrig+0x6a8>)
 8003966:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003968:	e08a      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
 800396a:	e089      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                                                     
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d119      	bne.n	80039a8 <ProbeScope_IsTrig+0x5bc>
                         if (p_sample_prev->Val32U > p_sample_cur->Val32U) {                  
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d923      	bls.n	80039c8 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_prev->Val32U >= p_ch->TrigLevel.Val32U) {
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	429a      	cmp	r2, r3
 800398a:	d31d      	bcc.n	80039c8 <ProbeScope_IsTrig+0x5dc>
                                 if (p_sample_cur->Val32U <= p_ch->TrigLevel.Val32U) {
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	429a      	cmp	r2, r3
 8003996:	d817      	bhi.n	80039c8 <ProbeScope_IsTrig+0x5dc>
                                     ProbeScope_TrigFlag = 1;
 8003998:	4b3c      	ldr	r3, [pc, #240]	; (8003a8c <ProbeScope_IsTrig+0x6a0>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800399e:	4b3c      	ldr	r3, [pc, #240]	; (8003a90 <ProbeScope_IsTrig+0x6a4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a3c      	ldr	r2, [pc, #240]	; (8003a94 <ProbeScope_IsTrig+0x6a8>)
 80039a4:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80039a6:	e06b      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U != 0) {
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_cur->Val32U == 0) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d107      	bne.n	80039c8 <ProbeScope_IsTrig+0x5dc>
                                 ProbeScope_TrigFlag = 1;
 80039b8:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <ProbeScope_IsTrig+0x6a0>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80039be:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <ProbeScope_IsTrig+0x6a4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <ProbeScope_IsTrig+0x6a8>)
 80039c4:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80039c6:	e05b      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
 80039c8:	e05a      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d119      	bne.n	8003a06 <ProbeScope_IsTrig+0x61a>
                         if (p_sample_prev->Val32S > p_sample_cur->Val32S) {
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	dd23      	ble.n	8003a26 <ProbeScope_IsTrig+0x63a>
                             if (p_sample_prev->Val32S >= p_ch->TrigLevel.Val32S) {
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	db1d      	blt.n	8003a26 <ProbeScope_IsTrig+0x63a>
                                 if (p_sample_cur->Val32S <= p_ch->TrigLevel.Val32S) {
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	dc17      	bgt.n	8003a26 <ProbeScope_IsTrig+0x63a>
                                     ProbeScope_TrigFlag = 1;
 80039f6:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <ProbeScope_IsTrig+0x6a0>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <ProbeScope_IsTrig+0x6a4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <ProbeScope_IsTrig+0x6a8>)
 8003a02:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003a04:	e03c      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S != 0) {
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <ProbeScope_IsTrig+0x63a>
                             if (p_sample_cur->Val32S == 0) {
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d107      	bne.n	8003a26 <ProbeScope_IsTrig+0x63a>
                                 ProbeScope_TrigFlag = 1;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <ProbeScope_IsTrig+0x6a0>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <ProbeScope_IsTrig+0x6a4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <ProbeScope_IsTrig+0x6a8>)
 8003a22:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003a24:	e02c      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
 8003a26:	e02b      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	ed93 7a00 	vldr	s14, [r3]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	dc00      	bgt.n	8003a40 <ProbeScope_IsTrig+0x654>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003a3e:	e01f      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	ed93 7a00 	vldr	s14, [r3]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	da00      	bge.n	8003a58 <ProbeScope_IsTrig+0x66c>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003a56:	e013      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	ed93 7a00 	vldr	s14, [r3]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	d900      	bls.n	8003a70 <ProbeScope_IsTrig+0x684>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003a6e:	e007      	b.n	8003a80 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <ProbeScope_IsTrig+0x6a0>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <ProbeScope_IsTrig+0x6a4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a06      	ldr	r2, [pc, #24]	; (8003a94 <ProbeScope_IsTrig+0x6a8>)
 8003a7c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003a7e:	bf00      	nop
#endif                     
            }                          
        }
    }
}
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	2000801c 	.word	0x2000801c
 8003a90:	20007fac 	.word	0x20007fac
 8003a94:	20008024 	.word	0x20008024

08003a98 <sin>:
 8003a98:	b530      	push	{r4, r5, lr}
 8003a9a:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <sin+0x8c>)
 8003a9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	dd1c      	ble.n	8003ae0 <sin+0x48>
 8003aa6:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <sin+0x90>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	dd05      	ble.n	8003ab8 <sin+0x20>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	f001 f946 	bl	8004d40 <__aeabi_dsub>
 8003ab4:	b007      	add	sp, #28
 8003ab6:	bd30      	pop	{r4, r5, pc}
 8003ab8:	aa02      	add	r2, sp, #8
 8003aba:	f000 f839 	bl	8003b30 <__ieee754_rem_pio2>
 8003abe:	f000 0003 	and.w	r0, r0, #3
 8003ac2:	2801      	cmp	r0, #1
 8003ac4:	d01d      	beq.n	8003b02 <sin+0x6a>
 8003ac6:	2802      	cmp	r0, #2
 8003ac8:	d012      	beq.n	8003af0 <sin+0x58>
 8003aca:	b308      	cbz	r0, 8003b10 <sin+0x78>
 8003acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ad4:	f000 fa4c 	bl	8003f70 <__kernel_cos>
 8003ad8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003adc:	b007      	add	sp, #28
 8003ade:	bd30      	pop	{r4, r5, pc}
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f000 ff56 	bl	8004998 <__kernel_sin>
 8003aec:	b007      	add	sp, #28
 8003aee:	bd30      	pop	{r4, r5, pc}
 8003af0:	2401      	movs	r4, #1
 8003af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003af6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003afa:	9400      	str	r4, [sp, #0]
 8003afc:	f000 ff4c 	bl	8004998 <__kernel_sin>
 8003b00:	e7ea      	b.n	8003ad8 <sin+0x40>
 8003b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b0a:	f000 fa31 	bl	8003f70 <__kernel_cos>
 8003b0e:	e7d1      	b.n	8003ab4 <sin+0x1c>
 8003b10:	2401      	movs	r4, #1
 8003b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b1a:	9400      	str	r4, [sp, #0]
 8003b1c:	f000 ff3c 	bl	8004998 <__kernel_sin>
 8003b20:	e7c8      	b.n	8003ab4 <sin+0x1c>
 8003b22:	bf00      	nop
 8003b24:	3fe921fb 	.word	0x3fe921fb
 8003b28:	7fefffff 	.word	0x7fefffff
 8003b2c:	00000000 	.word	0x00000000

08003b30 <__ieee754_rem_pio2>:
 8003b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b34:	4b98      	ldr	r3, [pc, #608]	; (8003d98 <__ieee754_rem_pio2+0x268>)
 8003b36:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003b3a:	429c      	cmp	r4, r3
 8003b3c:	b08f      	sub	sp, #60	; 0x3c
 8003b3e:	4606      	mov	r6, r0
 8003b40:	460f      	mov	r7, r1
 8003b42:	468a      	mov	sl, r1
 8003b44:	4615      	mov	r5, r2
 8003b46:	f340 8082 	ble.w	8003c4e <__ieee754_rem_pio2+0x11e>
 8003b4a:	4b94      	ldr	r3, [pc, #592]	; (8003d9c <__ieee754_rem_pio2+0x26c>)
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	dc27      	bgt.n	8003ba0 <__ieee754_rem_pio2+0x70>
 8003b50:	2900      	cmp	r1, #0
 8003b52:	a387      	add	r3, pc, #540	; (adr r3, 8003d70 <__ieee754_rem_pio2+0x240>)
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f340 81a4 	ble.w	8003ea4 <__ieee754_rem_pio2+0x374>
 8003b5c:	f001 f8f0 	bl	8004d40 <__aeabi_dsub>
 8003b60:	4b8f      	ldr	r3, [pc, #572]	; (8003da0 <__ieee754_rem_pio2+0x270>)
 8003b62:	429c      	cmp	r4, r3
 8003b64:	4606      	mov	r6, r0
 8003b66:	460f      	mov	r7, r1
 8003b68:	f000 8088 	beq.w	8003c7c <__ieee754_rem_pio2+0x14c>
 8003b6c:	a382      	add	r3, pc, #520	; (adr r3, 8003d78 <__ieee754_rem_pio2+0x248>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f001 f8e5 	bl	8004d40 <__aeabi_dsub>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	e9c5 2300 	strd	r2, r3, [r5]
 8003b7e:	4630      	mov	r0, r6
 8003b80:	4639      	mov	r1, r7
 8003b82:	f001 f8dd 	bl	8004d40 <__aeabi_dsub>
 8003b86:	a37c      	add	r3, pc, #496	; (adr r3, 8003d78 <__ieee754_rem_pio2+0x248>)
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f001 f8d8 	bl	8004d40 <__aeabi_dsub>
 8003b90:	f04f 0b01 	mov.w	fp, #1
 8003b94:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003b98:	4658      	mov	r0, fp
 8003b9a:	b00f      	add	sp, #60	; 0x3c
 8003b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba0:	4b80      	ldr	r3, [pc, #512]	; (8003da4 <__ieee754_rem_pio2+0x274>)
 8003ba2:	429c      	cmp	r4, r3
 8003ba4:	f340 8088 	ble.w	8003cb8 <__ieee754_rem_pio2+0x188>
 8003ba8:	4b7f      	ldr	r3, [pc, #508]	; (8003da8 <__ieee754_rem_pio2+0x278>)
 8003baa:	429c      	cmp	r4, r3
 8003bac:	dc5b      	bgt.n	8003c66 <__ieee754_rem_pio2+0x136>
 8003bae:	ea4f 5b24 	mov.w	fp, r4, asr #20
 8003bb2:	f2ab 4b16 	subw	fp, fp, #1046	; 0x416
 8003bb6:	eba4 510b 	sub.w	r1, r4, fp, lsl #20
 8003bba:	4689      	mov	r9, r1
 8003bbc:	4680      	mov	r8, r0
 8003bbe:	f001 fd0d 	bl	80055dc <__aeabi_d2iz>
 8003bc2:	f001 fa0b 	bl	8004fdc <__aeabi_i2d>
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	460f      	mov	r7, r1
 8003bca:	4632      	mov	r2, r6
 8003bcc:	463b      	mov	r3, r7
 8003bce:	4640      	mov	r0, r8
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8003bd6:	f001 f8b3 	bl	8004d40 <__aeabi_dsub>
 8003bda:	2200      	movs	r2, #0
 8003bdc:	4b73      	ldr	r3, [pc, #460]	; (8003dac <__ieee754_rem_pio2+0x27c>)
 8003bde:	f001 fa63 	bl	80050a8 <__aeabi_dmul>
 8003be2:	4689      	mov	r9, r1
 8003be4:	4680      	mov	r8, r0
 8003be6:	f001 fcf9 	bl	80055dc <__aeabi_d2iz>
 8003bea:	f001 f9f7 	bl	8004fdc <__aeabi_i2d>
 8003bee:	4606      	mov	r6, r0
 8003bf0:	460f      	mov	r7, r1
 8003bf2:	4632      	mov	r2, r6
 8003bf4:	463b      	mov	r3, r7
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8003bfe:	f001 f89f 	bl	8004d40 <__aeabi_dsub>
 8003c02:	2200      	movs	r2, #0
 8003c04:	4b69      	ldr	r3, [pc, #420]	; (8003dac <__ieee754_rem_pio2+0x27c>)
 8003c06:	f001 fa4f 	bl	80050a8 <__aeabi_dmul>
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003c12:	f001 fcb1 	bl	8005578 <__aeabi_dcmpeq>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	f000 816d 	beq.w	8003ef6 <__ieee754_rem_pio2+0x3c6>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4630      	mov	r0, r6
 8003c20:	4639      	mov	r1, r7
 8003c22:	2200      	movs	r2, #0
 8003c24:	f001 fca8 	bl	8005578 <__aeabi_dcmpeq>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2302      	moveq	r3, #2
 8003c30:	2202      	movs	r2, #2
 8003c32:	495f      	ldr	r1, [pc, #380]	; (8003db0 <__ieee754_rem_pio2+0x280>)
 8003c34:	9200      	str	r2, [sp, #0]
 8003c36:	9101      	str	r1, [sp, #4]
 8003c38:	465a      	mov	r2, fp
 8003c3a:	a808      	add	r0, sp, #32
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	f000 fabf 	bl	80041c0 <__kernel_rem_pio2>
 8003c42:	f1ba 0f00 	cmp.w	sl, #0
 8003c46:	f2c0 814b 	blt.w	8003ee0 <__ieee754_rem_pio2+0x3b0>
 8003c4a:	4683      	mov	fp, r0
 8003c4c:	e007      	b.n	8003c5e <__ieee754_rem_pio2+0x12e>
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2300      	movs	r3, #0
 8003c52:	e9c5 6700 	strd	r6, r7, [r5]
 8003c56:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8003c5a:	f04f 0b00 	mov.w	fp, #0
 8003c5e:	4658      	mov	r0, fp
 8003c60:	b00f      	add	sp, #60	; 0x3c
 8003c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	f001 f869 	bl	8004d40 <__aeabi_dsub>
 8003c6e:	f04f 0b00 	mov.w	fp, #0
 8003c72:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003c76:	e9c5 0100 	strd	r0, r1, [r5]
 8003c7a:	e7f0      	b.n	8003c5e <__ieee754_rem_pio2+0x12e>
 8003c7c:	a340      	add	r3, pc, #256	; (adr r3, 8003d80 <__ieee754_rem_pio2+0x250>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	f001 f85d 	bl	8004d40 <__aeabi_dsub>
 8003c86:	a340      	add	r3, pc, #256	; (adr r3, 8003d88 <__ieee754_rem_pio2+0x258>)
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	4606      	mov	r6, r0
 8003c8e:	460f      	mov	r7, r1
 8003c90:	f001 f856 	bl	8004d40 <__aeabi_dsub>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	e9c5 2300 	strd	r2, r3, [r5]
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	4639      	mov	r1, r7
 8003ca0:	f001 f84e 	bl	8004d40 <__aeabi_dsub>
 8003ca4:	a338      	add	r3, pc, #224	; (adr r3, 8003d88 <__ieee754_rem_pio2+0x258>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f001 f849 	bl	8004d40 <__aeabi_dsub>
 8003cae:	f04f 0b01 	mov.w	fp, #1
 8003cb2:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003cb6:	e7d2      	b.n	8003c5e <__ieee754_rem_pio2+0x12e>
 8003cb8:	f000 ff26 	bl	8004b08 <fabs>
 8003cbc:	a334      	add	r3, pc, #208	; (adr r3, 8003d90 <__ieee754_rem_pio2+0x260>)
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	4606      	mov	r6, r0
 8003cc4:	460f      	mov	r7, r1
 8003cc6:	f001 f9ef 	bl	80050a8 <__aeabi_dmul>
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <__ieee754_rem_pio2+0x284>)
 8003cce:	f001 f839 	bl	8004d44 <__adddf3>
 8003cd2:	f001 fc83 	bl	80055dc <__aeabi_d2iz>
 8003cd6:	4683      	mov	fp, r0
 8003cd8:	f001 f980 	bl	8004fdc <__aeabi_i2d>
 8003cdc:	a324      	add	r3, pc, #144	; (adr r3, 8003d70 <__ieee754_rem_pio2+0x240>)
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ce6:	f001 f9df 	bl	80050a8 <__aeabi_dmul>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4630      	mov	r0, r6
 8003cf0:	4639      	mov	r1, r7
 8003cf2:	f001 f825 	bl	8004d40 <__aeabi_dsub>
 8003cf6:	a320      	add	r3, pc, #128	; (adr r3, 8003d78 <__ieee754_rem_pio2+0x248>)
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	460f      	mov	r7, r1
 8003d00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d04:	f001 f9d0 	bl	80050a8 <__aeabi_dmul>
 8003d08:	f1bb 0f1f 	cmp.w	fp, #31
 8003d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d10:	4630      	mov	r0, r6
 8003d12:	4639      	mov	r1, r7
 8003d14:	dc52      	bgt.n	8003dbc <__ieee754_rem_pio2+0x28c>
 8003d16:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <__ieee754_rem_pio2+0x288>)
 8003d18:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	d04b      	beq.n	8003dbc <__ieee754_rem_pio2+0x28c>
 8003d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d28:	f001 f80a 	bl	8004d40 <__aeabi_dsub>
 8003d2c:	4680      	mov	r8, r0
 8003d2e:	4689      	mov	r9, r1
 8003d30:	e9c5 8900 	strd	r8, r9, [r5]
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	4630      	mov	r0, r6
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	f001 f800 	bl	8004d40 <__aeabi_dsub>
 8003d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d44:	f000 fffc 	bl	8004d40 <__aeabi_dsub>
 8003d48:	f1ba 0f00 	cmp.w	sl, #0
 8003d4c:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003d50:	da85      	bge.n	8003c5e <__ieee754_rem_pio2+0x12e>
 8003d52:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
 8003d56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d5a:	f1cb 0b00 	rsb	fp, fp, #0
 8003d5e:	f8c5 8000 	str.w	r8, [r5]
 8003d62:	606c      	str	r4, [r5, #4]
 8003d64:	60a8      	str	r0, [r5, #8]
 8003d66:	60eb      	str	r3, [r5, #12]
 8003d68:	e779      	b.n	8003c5e <__ieee754_rem_pio2+0x12e>
 8003d6a:	bf00      	nop
 8003d6c:	f3af 8000 	nop.w
 8003d70:	54400000 	.word	0x54400000
 8003d74:	3ff921fb 	.word	0x3ff921fb
 8003d78:	1a626331 	.word	0x1a626331
 8003d7c:	3dd0b461 	.word	0x3dd0b461
 8003d80:	1a600000 	.word	0x1a600000
 8003d84:	3dd0b461 	.word	0x3dd0b461
 8003d88:	2e037073 	.word	0x2e037073
 8003d8c:	3ba3198a 	.word	0x3ba3198a
 8003d90:	6dc9c883 	.word	0x6dc9c883
 8003d94:	3fe45f30 	.word	0x3fe45f30
 8003d98:	3fe921fb 	.word	0x3fe921fb
 8003d9c:	4002d97b 	.word	0x4002d97b
 8003da0:	3ff921fb 	.word	0x3ff921fb
 8003da4:	413921fb 	.word	0x413921fb
 8003da8:	7fefffff 	.word	0x7fefffff
 8003dac:	41700000 	.word	0x41700000
 8003db0:	08006184 	.word	0x08006184
 8003db4:	3fe00000 	.word	0x3fe00000
 8003db8:	08006104 	.word	0x08006104
 8003dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dc0:	f000 ffbe 	bl	8004d40 <__aeabi_dsub>
 8003dc4:	1524      	asrs	r4, r4, #20
 8003dc6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003dca:	1ae3      	subs	r3, r4, r3
 8003dcc:	4680      	mov	r8, r0
 8003dce:	4689      	mov	r9, r1
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	e9c5 8900 	strd	r8, r9, [r5]
 8003dd6:	ddad      	ble.n	8003d34 <__ieee754_rem_pio2+0x204>
 8003dd8:	a35b      	add	r3, pc, #364	; (adr r3, 8003f48 <__ieee754_rem_pio2+0x418>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003de2:	f001 f961 	bl	80050a8 <__aeabi_dmul>
 8003de6:	4680      	mov	r8, r0
 8003de8:	4689      	mov	r9, r1
 8003dea:	4642      	mov	r2, r8
 8003dec:	464b      	mov	r3, r9
 8003dee:	4630      	mov	r0, r6
 8003df0:	4639      	mov	r1, r7
 8003df2:	f000 ffa5 	bl	8004d40 <__aeabi_dsub>
 8003df6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003dfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003dfe:	4630      	mov	r0, r6
 8003e00:	4639      	mov	r1, r7
 8003e02:	f000 ff9d 	bl	8004d40 <__aeabi_dsub>
 8003e06:	4642      	mov	r2, r8
 8003e08:	464b      	mov	r3, r9
 8003e0a:	f000 ff99 	bl	8004d40 <__aeabi_dsub>
 8003e0e:	a350      	add	r3, pc, #320	; (adr r3, 8003f50 <__ieee754_rem_pio2+0x420>)
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	4606      	mov	r6, r0
 8003e16:	460f      	mov	r7, r1
 8003e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e1c:	f001 f944 	bl	80050a8 <__aeabi_dmul>
 8003e20:	4632      	mov	r2, r6
 8003e22:	463b      	mov	r3, r7
 8003e24:	f000 ff8c 	bl	8004d40 <__aeabi_dsub>
 8003e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e34:	f000 ff84 	bl	8004d40 <__aeabi_dsub>
 8003e38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003e3c:	1ae4      	subs	r4, r4, r3
 8003e3e:	4680      	mov	r8, r0
 8003e40:	4689      	mov	r9, r1
 8003e42:	2c31      	cmp	r4, #49	; 0x31
 8003e44:	e9c5 8900 	strd	r8, r9, [r5]
 8003e48:	dd75      	ble.n	8003f36 <__ieee754_rem_pio2+0x406>
 8003e4a:	a344      	add	r3, pc, #272	; (adr r3, 8003f5c <__ieee754_rem_pio2+0x42c>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e54:	f001 f928 	bl	80050a8 <__aeabi_dmul>
 8003e58:	4680      	mov	r8, r0
 8003e5a:	4689      	mov	r9, r1
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e64:	f000 ff6c 	bl	8004d40 <__aeabi_dsub>
 8003e68:	4606      	mov	r6, r0
 8003e6a:	460f      	mov	r7, r1
 8003e6c:	4632      	mov	r2, r6
 8003e6e:	463b      	mov	r3, r7
 8003e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e74:	f000 ff64 	bl	8004d40 <__aeabi_dsub>
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	f000 ff60 	bl	8004d40 <__aeabi_dsub>
 8003e80:	a338      	add	r3, pc, #224	; (adr r3, 8003f64 <__ieee754_rem_pio2+0x434>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	4680      	mov	r8, r0
 8003e88:	4689      	mov	r9, r1
 8003e8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e8e:	f001 f90b 	bl	80050a8 <__aeabi_dmul>
 8003e92:	4642      	mov	r2, r8
 8003e94:	464b      	mov	r3, r9
 8003e96:	f000 ff53 	bl	8004d40 <__aeabi_dsub>
 8003e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	4639      	mov	r1, r7
 8003ea2:	e73f      	b.n	8003d24 <__ieee754_rem_pio2+0x1f4>
 8003ea4:	f000 ff4e 	bl	8004d44 <__adddf3>
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <__ieee754_rem_pio2+0x428>)
 8003eaa:	429c      	cmp	r4, r3
 8003eac:	4606      	mov	r6, r0
 8003eae:	460f      	mov	r7, r1
 8003eb0:	d023      	beq.n	8003efa <__ieee754_rem_pio2+0x3ca>
 8003eb2:	a323      	add	r3, pc, #140	; (adr r3, 8003f40 <__ieee754_rem_pio2+0x410>)
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f000 ff44 	bl	8004d44 <__adddf3>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	e9c5 2300 	strd	r2, r3, [r5]
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	f000 ff3a 	bl	8004d40 <__aeabi_dsub>
 8003ecc:	a31c      	add	r3, pc, #112	; (adr r3, 8003f40 <__ieee754_rem_pio2+0x410>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f000 ff37 	bl	8004d44 <__adddf3>
 8003ed6:	f04f 3bff 	mov.w	fp, #4294967295
 8003eda:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003ede:	e6be      	b.n	8003c5e <__ieee754_rem_pio2+0x12e>
 8003ee0:	686a      	ldr	r2, [r5, #4]
 8003ee2:	68eb      	ldr	r3, [r5, #12]
 8003ee4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003ee8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003eec:	f1c0 0b00 	rsb	fp, r0, #0
 8003ef0:	606a      	str	r2, [r5, #4]
 8003ef2:	60eb      	str	r3, [r5, #12]
 8003ef4:	e6b3      	b.n	8003c5e <__ieee754_rem_pio2+0x12e>
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e69a      	b.n	8003c30 <__ieee754_rem_pio2+0x100>
 8003efa:	a313      	add	r3, pc, #76	; (adr r3, 8003f48 <__ieee754_rem_pio2+0x418>)
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f000 ff20 	bl	8004d44 <__adddf3>
 8003f04:	a312      	add	r3, pc, #72	; (adr r3, 8003f50 <__ieee754_rem_pio2+0x420>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	460f      	mov	r7, r1
 8003f0e:	f000 ff19 	bl	8004d44 <__adddf3>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	e9c5 2300 	strd	r2, r3, [r5]
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	4639      	mov	r1, r7
 8003f1e:	f000 ff0f 	bl	8004d40 <__aeabi_dsub>
 8003f22:	a30b      	add	r3, pc, #44	; (adr r3, 8003f50 <__ieee754_rem_pio2+0x420>)
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f000 ff0c 	bl	8004d44 <__adddf3>
 8003f2c:	f04f 3bff 	mov.w	fp, #4294967295
 8003f30:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003f34:	e693      	b.n	8003c5e <__ieee754_rem_pio2+0x12e>
 8003f36:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8003f3a:	e6fb      	b.n	8003d34 <__ieee754_rem_pio2+0x204>
 8003f3c:	f3af 8000 	nop.w
 8003f40:	1a626331 	.word	0x1a626331
 8003f44:	3dd0b461 	.word	0x3dd0b461
 8003f48:	1a600000 	.word	0x1a600000
 8003f4c:	3dd0b461 	.word	0x3dd0b461
 8003f50:	2e037073 	.word	0x2e037073
 8003f54:	3ba3198a 	.word	0x3ba3198a
 8003f58:	3ff921fb 	.word	0x3ff921fb
 8003f5c:	2e000000 	.word	0x2e000000
 8003f60:	3ba3198a 	.word	0x3ba3198a
 8003f64:	252049c1 	.word	0x252049c1
 8003f68:	397b839a 	.word	0x397b839a
 8003f6c:	f3af 8000 	nop.w

08003f70 <__kernel_cos>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8003f78:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460f      	mov	r7, r1
 8003f82:	4692      	mov	sl, r2
 8003f84:	469b      	mov	fp, r3
 8003f86:	da6b      	bge.n	8004060 <__kernel_cos+0xf0>
 8003f88:	f001 fb28 	bl	80055dc <__aeabi_d2iz>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	f000 80ea 	beq.w	8004166 <__kernel_cos+0x1f6>
 8003f92:	4632      	mov	r2, r6
 8003f94:	463b      	mov	r3, r7
 8003f96:	4630      	mov	r0, r6
 8003f98:	4639      	mov	r1, r7
 8003f9a:	f001 f885 	bl	80050a8 <__aeabi_dmul>
 8003f9e:	a374      	add	r3, pc, #464	; (adr r3, 8004170 <__kernel_cos+0x200>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	460d      	mov	r5, r1
 8003fa8:	f001 f87e 	bl	80050a8 <__aeabi_dmul>
 8003fac:	a372      	add	r3, pc, #456	; (adr r3, 8004178 <__kernel_cos+0x208>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f000 fec7 	bl	8004d44 <__adddf3>
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	462b      	mov	r3, r5
 8003fba:	f001 f875 	bl	80050a8 <__aeabi_dmul>
 8003fbe:	a370      	add	r3, pc, #448	; (adr r3, 8004180 <__kernel_cos+0x210>)
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f000 febc 	bl	8004d40 <__aeabi_dsub>
 8003fc8:	4622      	mov	r2, r4
 8003fca:	462b      	mov	r3, r5
 8003fcc:	f001 f86c 	bl	80050a8 <__aeabi_dmul>
 8003fd0:	a36d      	add	r3, pc, #436	; (adr r3, 8004188 <__kernel_cos+0x218>)
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f000 feb5 	bl	8004d44 <__adddf3>
 8003fda:	4622      	mov	r2, r4
 8003fdc:	462b      	mov	r3, r5
 8003fde:	f001 f863 	bl	80050a8 <__aeabi_dmul>
 8003fe2:	a36b      	add	r3, pc, #428	; (adr r3, 8004190 <__kernel_cos+0x220>)
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f000 feaa 	bl	8004d40 <__aeabi_dsub>
 8003fec:	4622      	mov	r2, r4
 8003fee:	462b      	mov	r3, r5
 8003ff0:	f001 f85a 	bl	80050a8 <__aeabi_dmul>
 8003ff4:	a368      	add	r3, pc, #416	; (adr r3, 8004198 <__kernel_cos+0x228>)
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f000 fea3 	bl	8004d44 <__adddf3>
 8003ffe:	4622      	mov	r2, r4
 8004000:	462b      	mov	r3, r5
 8004002:	f001 f851 	bl	80050a8 <__aeabi_dmul>
 8004006:	e9cd 0100 	strd	r0, r1, [sp]
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	2200      	movs	r2, #0
 8004010:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <__kernel_cos+0x238>)
 8004012:	f001 f849 	bl	80050a8 <__aeabi_dmul>
 8004016:	e9dd 2300 	ldrd	r2, r3, [sp]
 800401a:	4680      	mov	r8, r0
 800401c:	4689      	mov	r9, r1
 800401e:	4620      	mov	r0, r4
 8004020:	4629      	mov	r1, r5
 8004022:	f001 f841 	bl	80050a8 <__aeabi_dmul>
 8004026:	4652      	mov	r2, sl
 8004028:	4604      	mov	r4, r0
 800402a:	460d      	mov	r5, r1
 800402c:	465b      	mov	r3, fp
 800402e:	4630      	mov	r0, r6
 8004030:	4639      	mov	r1, r7
 8004032:	f001 f839 	bl	80050a8 <__aeabi_dmul>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4620      	mov	r0, r4
 800403c:	4629      	mov	r1, r5
 800403e:	f000 fe7f 	bl	8004d40 <__aeabi_dsub>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4640      	mov	r0, r8
 8004048:	4649      	mov	r1, r9
 800404a:	f000 fe79 	bl	8004d40 <__aeabi_dsub>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	2000      	movs	r0, #0
 8004054:	4955      	ldr	r1, [pc, #340]	; (80041ac <__kernel_cos+0x23c>)
 8004056:	f000 fe73 	bl	8004d40 <__aeabi_dsub>
 800405a:	b005      	add	sp, #20
 800405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	f001 f820 	bl	80050a8 <__aeabi_dmul>
 8004068:	a341      	add	r3, pc, #260	; (adr r3, 8004170 <__kernel_cos+0x200>)
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	4604      	mov	r4, r0
 8004070:	460d      	mov	r5, r1
 8004072:	f001 f819 	bl	80050a8 <__aeabi_dmul>
 8004076:	a340      	add	r3, pc, #256	; (adr r3, 8004178 <__kernel_cos+0x208>)
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f000 fe62 	bl	8004d44 <__adddf3>
 8004080:	4622      	mov	r2, r4
 8004082:	462b      	mov	r3, r5
 8004084:	f001 f810 	bl	80050a8 <__aeabi_dmul>
 8004088:	a33d      	add	r3, pc, #244	; (adr r3, 8004180 <__kernel_cos+0x210>)
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f000 fe57 	bl	8004d40 <__aeabi_dsub>
 8004092:	4622      	mov	r2, r4
 8004094:	462b      	mov	r3, r5
 8004096:	f001 f807 	bl	80050a8 <__aeabi_dmul>
 800409a:	a33b      	add	r3, pc, #236	; (adr r3, 8004188 <__kernel_cos+0x218>)
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f000 fe50 	bl	8004d44 <__adddf3>
 80040a4:	4622      	mov	r2, r4
 80040a6:	462b      	mov	r3, r5
 80040a8:	f000 fffe 	bl	80050a8 <__aeabi_dmul>
 80040ac:	a338      	add	r3, pc, #224	; (adr r3, 8004190 <__kernel_cos+0x220>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f000 fe45 	bl	8004d40 <__aeabi_dsub>
 80040b6:	4622      	mov	r2, r4
 80040b8:	462b      	mov	r3, r5
 80040ba:	f000 fff5 	bl	80050a8 <__aeabi_dmul>
 80040be:	a336      	add	r3, pc, #216	; (adr r3, 8004198 <__kernel_cos+0x228>)
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f000 fe3e 	bl	8004d44 <__adddf3>
 80040c8:	462b      	mov	r3, r5
 80040ca:	4622      	mov	r2, r4
 80040cc:	f000 ffec 	bl	80050a8 <__aeabi_dmul>
 80040d0:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <__kernel_cos+0x240>)
 80040d2:	4599      	cmp	r9, r3
 80040d4:	e9cd 0100 	strd	r0, r1, [sp]
 80040d8:	dd97      	ble.n	800400a <__kernel_cos+0x9a>
 80040da:	4b36      	ldr	r3, [pc, #216]	; (80041b4 <__kernel_cos+0x244>)
 80040dc:	4599      	cmp	r9, r3
 80040de:	dc39      	bgt.n	8004154 <__kernel_cos+0x1e4>
 80040e0:	2200      	movs	r2, #0
 80040e2:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 80040e6:	2000      	movs	r0, #0
 80040e8:	4930      	ldr	r1, [pc, #192]	; (80041ac <__kernel_cos+0x23c>)
 80040ea:	4690      	mov	r8, r2
 80040ec:	4699      	mov	r9, r3
 80040ee:	f000 fe27 	bl	8004d40 <__aeabi_dsub>
 80040f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040f6:	4620      	mov	r0, r4
 80040f8:	4629      	mov	r1, r5
 80040fa:	2200      	movs	r2, #0
 80040fc:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <__kernel_cos+0x238>)
 80040fe:	f000 ffd3 	bl	80050a8 <__aeabi_dmul>
 8004102:	4642      	mov	r2, r8
 8004104:	464b      	mov	r3, r9
 8004106:	f000 fe1b 	bl	8004d40 <__aeabi_dsub>
 800410a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800410e:	4680      	mov	r8, r0
 8004110:	4689      	mov	r9, r1
 8004112:	4620      	mov	r0, r4
 8004114:	4629      	mov	r1, r5
 8004116:	f000 ffc7 	bl	80050a8 <__aeabi_dmul>
 800411a:	4652      	mov	r2, sl
 800411c:	4604      	mov	r4, r0
 800411e:	460d      	mov	r5, r1
 8004120:	465b      	mov	r3, fp
 8004122:	4630      	mov	r0, r6
 8004124:	4639      	mov	r1, r7
 8004126:	f000 ffbf 	bl	80050a8 <__aeabi_dmul>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4620      	mov	r0, r4
 8004130:	4629      	mov	r1, r5
 8004132:	f000 fe05 	bl	8004d40 <__aeabi_dsub>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4640      	mov	r0, r8
 800413c:	4649      	mov	r1, r9
 800413e:	f000 fdff 	bl	8004d40 <__aeabi_dsub>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800414a:	f000 fdf9 	bl	8004d40 <__aeabi_dsub>
 800414e:	b005      	add	sp, #20
 8004150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004154:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80041a0 <__kernel_cos+0x230>
 8004158:	f04f 0800 	mov.w	r8, #0
 800415c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004160:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80041b8 <__kernel_cos+0x248>
 8004164:	e7c7      	b.n	80040f6 <__kernel_cos+0x186>
 8004166:	4911      	ldr	r1, [pc, #68]	; (80041ac <__kernel_cos+0x23c>)
 8004168:	2000      	movs	r0, #0
 800416a:	b005      	add	sp, #20
 800416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004170:	be8838d4 	.word	0xbe8838d4
 8004174:	bda8fae9 	.word	0xbda8fae9
 8004178:	bdb4b1c4 	.word	0xbdb4b1c4
 800417c:	3e21ee9e 	.word	0x3e21ee9e
 8004180:	809c52ad 	.word	0x809c52ad
 8004184:	3e927e4f 	.word	0x3e927e4f
 8004188:	19cb1590 	.word	0x19cb1590
 800418c:	3efa01a0 	.word	0x3efa01a0
 8004190:	16c15177 	.word	0x16c15177
 8004194:	3f56c16c 	.word	0x3f56c16c
 8004198:	5555554c 	.word	0x5555554c
 800419c:	3fa55555 	.word	0x3fa55555
 80041a0:	00000000 	.word	0x00000000
 80041a4:	3fe70000 	.word	0x3fe70000
 80041a8:	3fe00000 	.word	0x3fe00000
 80041ac:	3ff00000 	.word	0x3ff00000
 80041b0:	3fd33332 	.word	0x3fd33332
 80041b4:	3fe90000 	.word	0x3fe90000
 80041b8:	3fd20000 	.word	0x3fd20000
 80041bc:	f3af 8000 	nop.w

080041c0 <__kernel_rem_pio2>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80041c8:	4cc6      	ldr	r4, [pc, #792]	; (80044e4 <__kernel_rem_pio2+0x324>)
 80041ca:	9ea4      	ldr	r6, [sp, #656]	; 0x290
 80041cc:	4dc6      	ldr	r5, [pc, #792]	; (80044e8 <__kernel_rem_pio2+0x328>)
 80041ce:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 80041d2:	9407      	str	r4, [sp, #28]
 80041d4:	4626      	mov	r6, r4
 80041d6:	1ed4      	subs	r4, r2, #3
 80041d8:	fb85 7504 	smull	r7, r5, r5, r4
 80041dc:	17e4      	asrs	r4, r4, #31
 80041de:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
 80041e2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80041e6:	461d      	mov	r5, r3
 80041e8:	930a      	str	r3, [sp, #40]	; 0x28
 80041ea:	43e3      	mvns	r3, r4
 80041ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80041f0:	3d01      	subs	r5, #1
 80041f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80041f6:	9306      	str	r3, [sp, #24]
 80041f8:	462b      	mov	r3, r5
 80041fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80041fc:	9500      	str	r5, [sp, #0]
 80041fe:	1b65      	subs	r5, r4, r5
 8004200:	199c      	adds	r4, r3, r6
 8004202:	9003      	str	r0, [sp, #12]
 8004204:	9108      	str	r1, [sp, #32]
 8004206:	d416      	bmi.n	8004236 <__kernel_rem_pio2+0x76>
 8004208:	442c      	add	r4, r5
 800420a:	3401      	adds	r4, #1
 800420c:	ae22      	add	r6, sp, #136	; 0x88
 800420e:	9fa5      	ldr	r7, [sp, #660]	; 0x294
 8004210:	e008      	b.n	8004224 <__kernel_rem_pio2+0x64>
 8004212:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8004216:	f000 fee1 	bl	8004fdc <__aeabi_i2d>
 800421a:	3501      	adds	r5, #1
 800421c:	42a5      	cmp	r5, r4
 800421e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004222:	d008      	beq.n	8004236 <__kernel_rem_pio2+0x76>
 8004224:	2d00      	cmp	r5, #0
 8004226:	daf4      	bge.n	8004212 <__kernel_rem_pio2+0x52>
 8004228:	3501      	adds	r5, #1
 800422a:	2000      	movs	r0, #0
 800422c:	2100      	movs	r1, #0
 800422e:	42a5      	cmp	r5, r4
 8004230:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004234:	d1f6      	bne.n	8004224 <__kernel_rem_pio2+0x64>
 8004236:	9b07      	ldr	r3, [sp, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	db2a      	blt.n	8004292 <__kernel_rem_pio2+0xd2>
 800423c:	9b07      	ldr	r3, [sp, #28]
 800423e:	f103 0a01 	add.w	sl, r3, #1
 8004242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004244:	af22      	add	r7, sp, #136	; 0x88
 8004246:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
 800424a:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
 800424e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8004252:	463d      	mov	r5, r7
 8004254:	9b00      	ldr	r3, [sp, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f2c0 8180 	blt.w	800455c <__kernel_rem_pio2+0x39c>
 800425c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004260:	eb05 040b 	add.w	r4, r5, fp
 8004264:	2600      	movs	r6, #0
 8004266:	2700      	movs	r7, #0
 8004268:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800426c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004270:	f000 ff1a 	bl	80050a8 <__aeabi_dmul>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4630      	mov	r0, r6
 800427a:	4639      	mov	r1, r7
 800427c:	f000 fd62 	bl	8004d44 <__adddf3>
 8004280:	42a5      	cmp	r5, r4
 8004282:	4606      	mov	r6, r0
 8004284:	460f      	mov	r7, r1
 8004286:	d1ef      	bne.n	8004268 <__kernel_rem_pio2+0xa8>
 8004288:	3508      	adds	r5, #8
 800428a:	4555      	cmp	r5, sl
 800428c:	e8e8 6702 	strd	r6, r7, [r8], #8
 8004290:	d1e0      	bne.n	8004254 <__kernel_rem_pio2+0x94>
 8004292:	9d07      	ldr	r5, [sp, #28]
 8004294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004296:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 800429a:	3b01      	subs	r3, #1
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	a80e      	add	r0, sp, #56	; 0x38
 80042a0:	1d19      	adds	r1, r3, #4
 80042a2:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80042a6:	4403      	add	r3, r0
 80042a8:	4401      	add	r1, r0
 80042aa:	930c      	str	r3, [sp, #48]	; 0x30
 80042ac:	00d3      	lsls	r3, r2, #3
 80042ae:	910d      	str	r1, [sp, #52]	; 0x34
 80042b0:	9305      	str	r3, [sp, #20]
 80042b2:	00ec      	lsls	r4, r5, #3
 80042b4:	ab9a      	add	r3, sp, #616	; 0x268
 80042b6:	4423      	add	r3, r4
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80042be:	dd28      	ble.n	8004312 <__kernel_rem_pio2+0x152>
 80042c0:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80042c4:	445c      	add	r4, fp
 80042c6:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 80042ca:	2200      	movs	r2, #0
 80042cc:	4b87      	ldr	r3, [pc, #540]	; (80044ec <__kernel_rem_pio2+0x32c>)
 80042ce:	4630      	mov	r0, r6
 80042d0:	4639      	mov	r1, r7
 80042d2:	f000 fee9 	bl	80050a8 <__aeabi_dmul>
 80042d6:	f001 f981 	bl	80055dc <__aeabi_d2iz>
 80042da:	f000 fe7f 	bl	8004fdc <__aeabi_i2d>
 80042de:	2200      	movs	r2, #0
 80042e0:	4b83      	ldr	r3, [pc, #524]	; (80044f0 <__kernel_rem_pio2+0x330>)
 80042e2:	4680      	mov	r8, r0
 80042e4:	4689      	mov	r9, r1
 80042e6:	f000 fedf 	bl	80050a8 <__aeabi_dmul>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4630      	mov	r0, r6
 80042f0:	4639      	mov	r1, r7
 80042f2:	f000 fd25 	bl	8004d40 <__aeabi_dsub>
 80042f6:	f001 f971 	bl	80055dc <__aeabi_d2iz>
 80042fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80042fe:	f84a 0f04 	str.w	r0, [sl, #4]!
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	f000 fd1d 	bl	8004d44 <__adddf3>
 800430a:	455c      	cmp	r4, fp
 800430c:	4606      	mov	r6, r0
 800430e:	460f      	mov	r7, r1
 8004310:	d1db      	bne.n	80042ca <__kernel_rem_pio2+0x10a>
 8004312:	9c06      	ldr	r4, [sp, #24]
 8004314:	4630      	mov	r0, r6
 8004316:	4639      	mov	r1, r7
 8004318:	4622      	mov	r2, r4
 800431a:	f000 fc81 	bl	8004c20 <scalbn>
 800431e:	2200      	movs	r2, #0
 8004320:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004324:	4606      	mov	r6, r0
 8004326:	460f      	mov	r7, r1
 8004328:	f000 febe 	bl	80050a8 <__aeabi_dmul>
 800432c:	f000 fbf0 	bl	8004b10 <floor>
 8004330:	2200      	movs	r2, #0
 8004332:	4b70      	ldr	r3, [pc, #448]	; (80044f4 <__kernel_rem_pio2+0x334>)
 8004334:	f000 feb8 	bl	80050a8 <__aeabi_dmul>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4630      	mov	r0, r6
 800433e:	4639      	mov	r1, r7
 8004340:	f000 fcfe 	bl	8004d40 <__aeabi_dsub>
 8004344:	460f      	mov	r7, r1
 8004346:	4606      	mov	r6, r0
 8004348:	f001 f948 	bl	80055dc <__aeabi_d2iz>
 800434c:	4680      	mov	r8, r0
 800434e:	f000 fe45 	bl	8004fdc <__aeabi_i2d>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4630      	mov	r0, r6
 8004358:	4639      	mov	r1, r7
 800435a:	f000 fcf1 	bl	8004d40 <__aeabi_dsub>
 800435e:	2c00      	cmp	r4, #0
 8004360:	4606      	mov	r6, r0
 8004362:	460f      	mov	r7, r1
 8004364:	f340 80e1 	ble.w	800452a <__kernel_rem_pio2+0x36a>
 8004368:	1e69      	subs	r1, r5, #1
 800436a:	ab0e      	add	r3, sp, #56	; 0x38
 800436c:	f1c4 0218 	rsb	r2, r4, #24
 8004370:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004374:	fa43 f002 	asr.w	r0, r3, r2
 8004378:	fa00 f902 	lsl.w	r9, r0, r2
 800437c:	f1c4 0217 	rsb	r2, r4, #23
 8004380:	ac0e      	add	r4, sp, #56	; 0x38
 8004382:	ebc9 0303 	rsb	r3, r9, r3
 8004386:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 800438a:	4480      	add	r8, r0
 800438c:	fa43 f902 	asr.w	r9, r3, r2
 8004390:	f1b9 0f00 	cmp.w	r9, #0
 8004394:	dd32      	ble.n	80043fc <__kernel_rem_pio2+0x23c>
 8004396:	2d00      	cmp	r5, #0
 8004398:	f108 0801 	add.w	r8, r8, #1
 800439c:	f340 8271 	ble.w	8004882 <__kernel_rem_pio2+0x6c2>
 80043a0:	2200      	movs	r2, #0
 80043a2:	4614      	mov	r4, r2
 80043a4:	a90d      	add	r1, sp, #52	; 0x34
 80043a6:	e007      	b.n	80043b8 <__kernel_rem_pio2+0x1f8>
 80043a8:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 80043ac:	b10b      	cbz	r3, 80043b2 <__kernel_rem_pio2+0x1f2>
 80043ae:	6008      	str	r0, [r1, #0]
 80043b0:	2401      	movs	r4, #1
 80043b2:	3201      	adds	r2, #1
 80043b4:	4295      	cmp	r5, r2
 80043b6:	dd0d      	ble.n	80043d4 <__kernel_rem_pio2+0x214>
 80043b8:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80043bc:	2c00      	cmp	r4, #0
 80043be:	d0f3      	beq.n	80043a8 <__kernel_rem_pio2+0x1e8>
 80043c0:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80043c4:	3201      	adds	r2, #1
 80043c6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80043ca:	4295      	cmp	r5, r2
 80043cc:	600b      	str	r3, [r1, #0]
 80043ce:	f04f 0401 	mov.w	r4, #1
 80043d2:	dcf1      	bgt.n	80043b8 <__kernel_rem_pio2+0x1f8>
 80043d4:	9b06      	ldr	r3, [sp, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	dd0d      	ble.n	80043f6 <__kernel_rem_pio2+0x236>
 80043da:	2b01      	cmp	r3, #1
 80043dc:	f000 80ad 	beq.w	800453a <__kernel_rem_pio2+0x37a>
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d108      	bne.n	80043f6 <__kernel_rem_pio2+0x236>
 80043e4:	1e6a      	subs	r2, r5, #1
 80043e6:	ab0e      	add	r3, sp, #56	; 0x38
 80043e8:	a90e      	add	r1, sp, #56	; 0x38
 80043ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80043f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80043f6:	f1b9 0f02 	cmp.w	r9, #2
 80043fa:	d07d      	beq.n	80044f8 <__kernel_rem_pio2+0x338>
 80043fc:	4630      	mov	r0, r6
 80043fe:	4639      	mov	r1, r7
 8004400:	2200      	movs	r2, #0
 8004402:	2300      	movs	r3, #0
 8004404:	f001 f8b8 	bl	8005578 <__aeabi_dcmpeq>
 8004408:	2800      	cmp	r0, #0
 800440a:	f000 80c3 	beq.w	8004594 <__kernel_rem_pio2+0x3d4>
 800440e:	9b07      	ldr	r3, [sp, #28]
 8004410:	f105 3aff 	add.w	sl, r5, #4294967295
 8004414:	4553      	cmp	r3, sl
 8004416:	dc0d      	bgt.n	8004434 <__kernel_rem_pio2+0x274>
 8004418:	ab0e      	add	r3, sp, #56	; 0x38
 800441a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800441c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004420:	2200      	movs	r2, #0
 8004422:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004426:	4283      	cmp	r3, r0
 8004428:	ea42 0201 	orr.w	r2, r2, r1
 800442c:	d1f9      	bne.n	8004422 <__kernel_rem_pio2+0x262>
 800442e:	2a00      	cmp	r2, #0
 8004430:	f040 820c 	bne.w	800484c <__kernel_rem_pio2+0x68c>
 8004434:	9b07      	ldr	r3, [sp, #28]
 8004436:	aa0e      	add	r2, sp, #56	; 0x38
 8004438:	3b01      	subs	r3, #1
 800443a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f040 821d 	bne.w	800487e <__kernel_rem_pio2+0x6be>
 8004444:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004446:	2301      	movs	r3, #1
 8004448:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800444c:	3301      	adds	r3, #1
 800444e:	2900      	cmp	r1, #0
 8004450:	d0fa      	beq.n	8004448 <__kernel_rem_pio2+0x288>
 8004452:	18eb      	adds	r3, r5, r3
 8004454:	f105 0a01 	add.w	sl, r5, #1
 8004458:	459a      	cmp	sl, r3
 800445a:	9309      	str	r3, [sp, #36]	; 0x24
 800445c:	dc40      	bgt.n	80044e0 <__kernel_rem_pio2+0x320>
 800445e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004462:	eb0a 0903 	add.w	r9, sl, r3
 8004466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004468:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 800446c:	4619      	mov	r1, r3
 800446e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004470:	f109 39ff 	add.w	r9, r9, #4294967295
 8004474:	4415      	add	r5, r2
 8004476:	eb01 0b02 	add.w	fp, r1, r2
 800447a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800447e:	ab22      	add	r3, sp, #136	; 0x88
 8004480:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8004484:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004488:	9304      	str	r3, [sp, #16]
 800448a:	ab72      	add	r3, sp, #456	; 0x1c8
 800448c:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8004490:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8004494:	f000 fda2 	bl	8004fdc <__aeabi_i2d>
 8004498:	9b00      	ldr	r3, [sp, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	e8e8 0102 	strd	r0, r1, [r8], #8
 80044a0:	f04f 0600 	mov.w	r6, #0
 80044a4:	f04f 0700 	mov.w	r7, #0
 80044a8:	db15      	blt.n	80044d6 <__kernel_rem_pio2+0x316>
 80044aa:	9b05      	ldr	r3, [sp, #20]
 80044ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80044b0:	eb08 0503 	add.w	r5, r8, r3
 80044b4:	4644      	mov	r4, r8
 80044b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80044ba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80044be:	f000 fdf3 	bl	80050a8 <__aeabi_dmul>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4630      	mov	r0, r6
 80044c8:	4639      	mov	r1, r7
 80044ca:	f000 fc3b 	bl	8004d44 <__adddf3>
 80044ce:	42ac      	cmp	r4, r5
 80044d0:	4606      	mov	r6, r0
 80044d2:	460f      	mov	r7, r1
 80044d4:	d1ef      	bne.n	80044b6 <__kernel_rem_pio2+0x2f6>
 80044d6:	9b04      	ldr	r3, [sp, #16]
 80044d8:	4598      	cmp	r8, r3
 80044da:	e8ea 6702 	strd	r6, r7, [sl], #8
 80044de:	d1d7      	bne.n	8004490 <__kernel_rem_pio2+0x2d0>
 80044e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80044e2:	e6e6      	b.n	80042b2 <__kernel_rem_pio2+0xf2>
 80044e4:	0800628c 	.word	0x0800628c
 80044e8:	2aaaaaab 	.word	0x2aaaaaab
 80044ec:	3e700000 	.word	0x3e700000
 80044f0:	41700000 	.word	0x41700000
 80044f4:	40200000 	.word	0x40200000
 80044f8:	4632      	mov	r2, r6
 80044fa:	463b      	mov	r3, r7
 80044fc:	2000      	movs	r0, #0
 80044fe:	49bb      	ldr	r1, [pc, #748]	; (80047ec <__kernel_rem_pio2+0x62c>)
 8004500:	f000 fc1e 	bl	8004d40 <__aeabi_dsub>
 8004504:	4606      	mov	r6, r0
 8004506:	460f      	mov	r7, r1
 8004508:	2c00      	cmp	r4, #0
 800450a:	f43f af77 	beq.w	80043fc <__kernel_rem_pio2+0x23c>
 800450e:	9a06      	ldr	r2, [sp, #24]
 8004510:	49b6      	ldr	r1, [pc, #728]	; (80047ec <__kernel_rem_pio2+0x62c>)
 8004512:	2000      	movs	r0, #0
 8004514:	f000 fb84 	bl	8004c20 <scalbn>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4630      	mov	r0, r6
 800451e:	4639      	mov	r1, r7
 8004520:	f000 fc0e 	bl	8004d40 <__aeabi_dsub>
 8004524:	4606      	mov	r6, r0
 8004526:	460f      	mov	r7, r1
 8004528:	e768      	b.n	80043fc <__kernel_rem_pio2+0x23c>
 800452a:	d110      	bne.n	800454e <__kernel_rem_pio2+0x38e>
 800452c:	1e6b      	subs	r3, r5, #1
 800452e:	aa0e      	add	r2, sp, #56	; 0x38
 8004530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004534:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004538:	e72a      	b.n	8004390 <__kernel_rem_pio2+0x1d0>
 800453a:	1e6a      	subs	r2, r5, #1
 800453c:	ab0e      	add	r3, sp, #56	; 0x38
 800453e:	a90e      	add	r1, sp, #56	; 0x38
 8004540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004544:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004548:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800454c:	e753      	b.n	80043f6 <__kernel_rem_pio2+0x236>
 800454e:	2200      	movs	r2, #0
 8004550:	4ba7      	ldr	r3, [pc, #668]	; (80047f0 <__kernel_rem_pio2+0x630>)
 8004552:	f001 f82f 	bl	80055b4 <__aeabi_dcmpge>
 8004556:	b950      	cbnz	r0, 800456e <__kernel_rem_pio2+0x3ae>
 8004558:	4681      	mov	r9, r0
 800455a:	e74f      	b.n	80043fc <__kernel_rem_pio2+0x23c>
 800455c:	3508      	adds	r5, #8
 800455e:	2600      	movs	r6, #0
 8004560:	2700      	movs	r7, #0
 8004562:	4555      	cmp	r5, sl
 8004564:	e8e8 6702 	strd	r6, r7, [r8], #8
 8004568:	f47f ae74 	bne.w	8004254 <__kernel_rem_pio2+0x94>
 800456c:	e691      	b.n	8004292 <__kernel_rem_pio2+0xd2>
 800456e:	2d00      	cmp	r5, #0
 8004570:	f108 0801 	add.w	r8, r8, #1
 8004574:	bfc8      	it	gt
 8004576:	f04f 0902 	movgt.w	r9, #2
 800457a:	f73f af11 	bgt.w	80043a0 <__kernel_rem_pio2+0x1e0>
 800457e:	4632      	mov	r2, r6
 8004580:	463b      	mov	r3, r7
 8004582:	2000      	movs	r0, #0
 8004584:	4999      	ldr	r1, [pc, #612]	; (80047ec <__kernel_rem_pio2+0x62c>)
 8004586:	f000 fbdb 	bl	8004d40 <__aeabi_dsub>
 800458a:	f04f 0902 	mov.w	r9, #2
 800458e:	4606      	mov	r6, r0
 8004590:	460f      	mov	r7, r1
 8004592:	e733      	b.n	80043fc <__kernel_rem_pio2+0x23c>
 8004594:	9b06      	ldr	r3, [sp, #24]
 8004596:	f8cd 900c 	str.w	r9, [sp, #12]
 800459a:	425a      	negs	r2, r3
 800459c:	4630      	mov	r0, r6
 800459e:	4639      	mov	r1, r7
 80045a0:	f8cd 8014 	str.w	r8, [sp, #20]
 80045a4:	f000 fb3c 	bl	8004c20 <scalbn>
 80045a8:	2200      	movs	r2, #0
 80045aa:	4b92      	ldr	r3, [pc, #584]	; (80047f4 <__kernel_rem_pio2+0x634>)
 80045ac:	4606      	mov	r6, r0
 80045ae:	460f      	mov	r7, r1
 80045b0:	f001 f800 	bl	80055b4 <__aeabi_dcmpge>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	f000 81e6 	beq.w	8004986 <__kernel_rem_pio2+0x7c6>
 80045ba:	2200      	movs	r2, #0
 80045bc:	4b8e      	ldr	r3, [pc, #568]	; (80047f8 <__kernel_rem_pio2+0x638>)
 80045be:	4630      	mov	r0, r6
 80045c0:	4639      	mov	r1, r7
 80045c2:	f000 fd71 	bl	80050a8 <__aeabi_dmul>
 80045c6:	f001 f809 	bl	80055dc <__aeabi_d2iz>
 80045ca:	4604      	mov	r4, r0
 80045cc:	f000 fd06 	bl	8004fdc <__aeabi_i2d>
 80045d0:	2200      	movs	r2, #0
 80045d2:	4b88      	ldr	r3, [pc, #544]	; (80047f4 <__kernel_rem_pio2+0x634>)
 80045d4:	f000 fd68 	bl	80050a8 <__aeabi_dmul>
 80045d8:	460b      	mov	r3, r1
 80045da:	4602      	mov	r2, r0
 80045dc:	4639      	mov	r1, r7
 80045de:	4630      	mov	r0, r6
 80045e0:	f000 fbae 	bl	8004d40 <__aeabi_dsub>
 80045e4:	f000 fffa 	bl	80055dc <__aeabi_d2iz>
 80045e8:	9b06      	ldr	r3, [sp, #24]
 80045ea:	3318      	adds	r3, #24
 80045ec:	f105 0a01 	add.w	sl, r5, #1
 80045f0:	9306      	str	r3, [sp, #24]
 80045f2:	ab0e      	add	r3, sp, #56	; 0x38
 80045f4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80045f8:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
 80045fc:	9a06      	ldr	r2, [sp, #24]
 80045fe:	497b      	ldr	r1, [pc, #492]	; (80047ec <__kernel_rem_pio2+0x62c>)
 8004600:	2000      	movs	r0, #0
 8004602:	f000 fb0d 	bl	8004c20 <scalbn>
 8004606:	f1ba 0f00 	cmp.w	sl, #0
 800460a:	4604      	mov	r4, r0
 800460c:	460d      	mov	r5, r1
 800460e:	f2c0 80c1 	blt.w	8004794 <__kernel_rem_pio2+0x5d4>
 8004612:	f10a 0301 	add.w	r3, sl, #1
 8004616:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800461a:	af72      	add	r7, sp, #456	; 0x1c8
 800461c:	aa0e      	add	r2, sp, #56	; 0x38
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8004624:	eb07 0608 	add.w	r6, r7, r8
 8004628:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 800462c:	f000 fcd6 	bl	8004fdc <__aeabi_i2d>
 8004630:	4622      	mov	r2, r4
 8004632:	462b      	mov	r3, r5
 8004634:	f000 fd38 	bl	80050a8 <__aeabi_dmul>
 8004638:	2200      	movs	r2, #0
 800463a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800463e:	4b6e      	ldr	r3, [pc, #440]	; (80047f8 <__kernel_rem_pio2+0x638>)
 8004640:	4620      	mov	r0, r4
 8004642:	4629      	mov	r1, r5
 8004644:	f000 fd30 	bl	80050a8 <__aeabi_dmul>
 8004648:	42be      	cmp	r6, r7
 800464a:	4604      	mov	r4, r0
 800464c:	460d      	mov	r5, r1
 800464e:	d1eb      	bne.n	8004628 <__kernel_rem_pio2+0x468>
 8004650:	f1a8 0808 	sub.w	r8, r8, #8
 8004654:	eb06 0308 	add.w	r3, r6, r8
 8004658:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 800465c:	f8cd a018 	str.w	sl, [sp, #24]
 8004660:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004664:	f8cd 9010 	str.w	r9, [sp, #16]
 8004668:	f04f 0800 	mov.w	r8, #0
 800466c:	469b      	mov	fp, r3
 800466e:	f1ba 0f00 	cmp.w	sl, #0
 8004672:	f2c0 808c 	blt.w	800478e <__kernel_rem_pio2+0x5ce>
 8004676:	f1b8 0f00 	cmp.w	r8, #0
 800467a:	f2c0 8088 	blt.w	800478e <__kernel_rem_pio2+0x5ce>
 800467e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80047fc <__kernel_rem_pio2+0x63c>
 8004682:	465d      	mov	r5, fp
 8004684:	2600      	movs	r6, #0
 8004686:	2700      	movs	r7, #0
 8004688:	2400      	movs	r4, #0
 800468a:	e001      	b.n	8004690 <__kernel_rem_pio2+0x4d0>
 800468c:	4544      	cmp	r4, r8
 800468e:	dc10      	bgt.n	80046b2 <__kernel_rem_pio2+0x4f2>
 8004690:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004694:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004698:	f000 fd06 	bl	80050a8 <__aeabi_dmul>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4630      	mov	r0, r6
 80046a2:	4639      	mov	r1, r7
 80046a4:	f000 fb4e 	bl	8004d44 <__adddf3>
 80046a8:	3401      	adds	r4, #1
 80046aa:	45a2      	cmp	sl, r4
 80046ac:	4606      	mov	r6, r0
 80046ae:	460f      	mov	r7, r1
 80046b0:	daec      	bge.n	800468c <__kernel_rem_pio2+0x4cc>
 80046b2:	9b04      	ldr	r3, [sp, #16]
 80046b4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80046b8:	e9c3 6700 	strd	r6, r7, [r3]
 80046bc:	9b00      	ldr	r3, [sp, #0]
 80046be:	f108 0801 	add.w	r8, r8, #1
 80046c2:	4598      	cmp	r8, r3
 80046c4:	f1ab 0b08 	sub.w	fp, fp, #8
 80046c8:	d1d1      	bne.n	800466e <__kernel_rem_pio2+0x4ae>
 80046ca:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80046cc:	f8dd a018 	ldr.w	sl, [sp, #24]
 80046d0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d835      	bhi.n	8004744 <__kernel_rem_pio2+0x584>
 80046d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80046dc:	0004003b 	.word	0x0004003b
 80046e0:	00d50004 	.word	0x00d50004
 80046e4:	9b00      	ldr	r3, [sp, #0]
 80046e6:	2000      	movs	r0, #0
 80046e8:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
 80046ec:	2100      	movs	r1, #0
 80046ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80046f2:	f000 fb27 	bl	8004d44 <__adddf3>
 80046f6:	454c      	cmp	r4, r9
 80046f8:	d1f9      	bne.n	80046ee <__kernel_rem_pio2+0x52e>
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8087 	beq.w	8004810 <__kernel_rem_pio2+0x650>
 8004702:	9d08      	ldr	r5, [sp, #32]
 8004704:	4602      	mov	r2, r0
 8004706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800470a:	e885 000c 	stmia.w	r5, {r2, r3}
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004716:	f000 fb13 	bl	8004d40 <__aeabi_dsub>
 800471a:	f1ba 0f00 	cmp.w	sl, #0
 800471e:	dd0b      	ble.n	8004738 <__kernel_rem_pio2+0x578>
 8004720:	ad4c      	add	r5, sp, #304	; 0x130
 8004722:	2401      	movs	r4, #1
 8004724:	3401      	adds	r4, #1
 8004726:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800472a:	f000 fb0b 	bl	8004d44 <__adddf3>
 800472e:	45a2      	cmp	sl, r4
 8004730:	daf8      	bge.n	8004724 <__kernel_rem_pio2+0x564>
 8004732:	9b03      	ldr	r3, [sp, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d078      	beq.n	800482a <__kernel_rem_pio2+0x66a>
 8004738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800473c:	9908      	ldr	r1, [sp, #32]
 800473e:	4602      	mov	r2, r0
 8004740:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004744:	9b05      	ldr	r3, [sp, #20]
 8004746:	f003 0007 	and.w	r0, r3, #7
 800474a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800474e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004752:	9b00      	ldr	r3, [sp, #0]
 8004754:	2000      	movs	r0, #0
 8004756:	2100      	movs	r1, #0
 8004758:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 800475c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004760:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8004764:	f000 faee 	bl	8004d44 <__adddf3>
 8004768:	f1ba 3fff 	cmp.w	sl, #4294967295
 800476c:	d1f6      	bne.n	800475c <__kernel_rem_pio2+0x59c>
 800476e:	9b03      	ldr	r3, [sp, #12]
 8004770:	4602      	mov	r2, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d065      	beq.n	8004842 <__kernel_rem_pio2+0x682>
 8004776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800477a:	9908      	ldr	r1, [sp, #32]
 800477c:	e9c1 2300 	strd	r2, r3, [r1]
 8004780:	9b05      	ldr	r3, [sp, #20]
 8004782:	f003 0007 	and.w	r0, r3, #7
 8004786:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478e:	2600      	movs	r6, #0
 8004790:	2700      	movs	r7, #0
 8004792:	e78e      	b.n	80046b2 <__kernel_rem_pio2+0x4f2>
 8004794:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004796:	2b03      	cmp	r3, #3
 8004798:	d8d4      	bhi.n	8004744 <__kernel_rem_pio2+0x584>
 800479a:	e8df f003 	tbb	[pc, r3]
 800479e:	314c      	.short	0x314c
 80047a0:	0231      	.short	0x0231
 80047a2:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 80047a6:	9b03      	ldr	r3, [sp, #12]
 80047a8:	2000      	movs	r0, #0
 80047aa:	2100      	movs	r1, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80d8 	beq.w	8004962 <__kernel_rem_pio2+0x7a2>
 80047b2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80047b6:	9f08      	ldr	r7, [sp, #32]
 80047b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80047bc:	f8d9 5000 	ldr.w	r5, [r9]
 80047c0:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80047c4:	6138      	str	r0, [r7, #16]
 80047c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	9b05      	ldr	r3, [sp, #20]
 80047ce:	603d      	str	r5, [r7, #0]
 80047d0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80047d4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80047d8:	f003 0007 	and.w	r0, r3, #7
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	60bc      	str	r4, [r7, #8]
 80047e0:	6179      	str	r1, [r7, #20]
 80047e2:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80047e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ea:	bf00      	nop
 80047ec:	3ff00000 	.word	0x3ff00000
 80047f0:	3fe00000 	.word	0x3fe00000
 80047f4:	41700000 	.word	0x41700000
 80047f8:	3e700000 	.word	0x3e700000
 80047fc:	080062a0 	.word	0x080062a0
 8004800:	9b03      	ldr	r3, [sp, #12]
 8004802:	2000      	movs	r0, #0
 8004804:	2100      	movs	r1, #0
 8004806:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 800480a:	2b00      	cmp	r3, #0
 800480c:	f47f af79 	bne.w	8004702 <__kernel_rem_pio2+0x542>
 8004810:	9b08      	ldr	r3, [sp, #32]
 8004812:	4602      	mov	r2, r0
 8004814:	e9c3 0100 	strd	r0, r1, [r3]
 8004818:	460b      	mov	r3, r1
 800481a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800481e:	f000 fa8f 	bl	8004d40 <__aeabi_dsub>
 8004822:	f1ba 0f00 	cmp.w	sl, #0
 8004826:	f73f af7b 	bgt.w	8004720 <__kernel_rem_pio2+0x560>
 800482a:	460b      	mov	r3, r1
 800482c:	9908      	ldr	r1, [sp, #32]
 800482e:	4602      	mov	r2, r0
 8004830:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004834:	e786      	b.n	8004744 <__kernel_rem_pio2+0x584>
 8004836:	9b03      	ldr	r3, [sp, #12]
 8004838:	2000      	movs	r0, #0
 800483a:	2100      	movs	r1, #0
 800483c:	4602      	mov	r2, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d199      	bne.n	8004776 <__kernel_rem_pio2+0x5b6>
 8004842:	460b      	mov	r3, r1
 8004844:	9908      	ldr	r1, [sp, #32]
 8004846:	e9c1 2300 	strd	r2, r3, [r1]
 800484a:	e799      	b.n	8004780 <__kernel_rem_pio2+0x5c0>
 800484c:	ab0e      	add	r3, sp, #56	; 0x38
 800484e:	9a06      	ldr	r2, [sp, #24]
 8004850:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8004854:	f8cd 900c 	str.w	r9, [sp, #12]
 8004858:	3a18      	subs	r2, #24
 800485a:	f8cd 8014 	str.w	r8, [sp, #20]
 800485e:	9206      	str	r2, [sp, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f47f aecb 	bne.w	80045fc <__kernel_rem_pio2+0x43c>
 8004866:	ab0e      	add	r3, sp, #56	; 0x38
 8004868:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800486c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004870:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004874:	3a18      	subs	r2, #24
 8004876:	2900      	cmp	r1, #0
 8004878:	d0f8      	beq.n	800486c <__kernel_rem_pio2+0x6ac>
 800487a:	9206      	str	r2, [sp, #24]
 800487c:	e6be      	b.n	80045fc <__kernel_rem_pio2+0x43c>
 800487e:	2301      	movs	r3, #1
 8004880:	e5e7      	b.n	8004452 <__kernel_rem_pio2+0x292>
 8004882:	2400      	movs	r4, #0
 8004884:	e5a6      	b.n	80043d4 <__kernel_rem_pio2+0x214>
 8004886:	f1ba 0f00 	cmp.w	sl, #0
 800488a:	dd8c      	ble.n	80047a6 <__kernel_rem_pio2+0x5e6>
 800488c:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 8004890:	eb09 0b08 	add.w	fp, r9, r8
 8004894:	f108 0c08 	add.w	ip, r8, #8
 8004898:	e9db 6700 	ldrd	r6, r7, [fp]
 800489c:	44cc      	add	ip, r9
 800489e:	f8cd 8010 	str.w	r8, [sp, #16]
 80048a2:	46e0      	mov	r8, ip
 80048a4:	ed3b 7b02 	vldmdb	fp!, {d7}
 80048a8:	4630      	mov	r0, r6
 80048aa:	ec53 2b17 	vmov	r2, r3, d7
 80048ae:	4639      	mov	r1, r7
 80048b0:	ed8d 7b00 	vstr	d7, [sp]
 80048b4:	f000 fa46 	bl	8004d44 <__adddf3>
 80048b8:	4604      	mov	r4, r0
 80048ba:	460d      	mov	r5, r1
 80048bc:	4622      	mov	r2, r4
 80048be:	462b      	mov	r3, r5
 80048c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048c4:	f000 fa3c 	bl	8004d40 <__aeabi_dsub>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4630      	mov	r0, r6
 80048ce:	4639      	mov	r1, r7
 80048d0:	f000 fa38 	bl	8004d44 <__adddf3>
 80048d4:	45cb      	cmp	fp, r9
 80048d6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80048da:	4626      	mov	r6, r4
 80048dc:	462f      	mov	r7, r5
 80048de:	e9cb 4500 	strd	r4, r5, [fp]
 80048e2:	d1df      	bne.n	80048a4 <__kernel_rem_pio2+0x6e4>
 80048e4:	f1ba 0f01 	cmp.w	sl, #1
 80048e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80048ec:	f77f af5b 	ble.w	80047a6 <__kernel_rem_pio2+0x5e6>
 80048f0:	eb09 0508 	add.w	r5, r9, r8
 80048f4:	f108 0408 	add.w	r4, r8, #8
 80048f8:	e9d5 ab00 	ldrd	sl, fp, [r5]
 80048fc:	444c      	add	r4, r9
 80048fe:	46a0      	mov	r8, r4
 8004900:	f50d 7c98 	add.w	ip, sp, #304	; 0x130
 8004904:	ed35 7b02 	vldmdb	r5!, {d7}
 8004908:	4652      	mov	r2, sl
 800490a:	465b      	mov	r3, fp
 800490c:	ec51 0b17 	vmov	r0, r1, d7
 8004910:	f8cd c010 	str.w	ip, [sp, #16]
 8004914:	ed8d 7b00 	vstr	d7, [sp]
 8004918:	f000 fa14 	bl	8004d44 <__adddf3>
 800491c:	4606      	mov	r6, r0
 800491e:	460f      	mov	r7, r1
 8004920:	4632      	mov	r2, r6
 8004922:	463b      	mov	r3, r7
 8004924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004928:	f000 fa0a 	bl	8004d40 <__aeabi_dsub>
 800492c:	4652      	mov	r2, sl
 800492e:	465b      	mov	r3, fp
 8004930:	f000 fa08 	bl	8004d44 <__adddf3>
 8004934:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004938:	4565      	cmp	r5, ip
 800493a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800493e:	46b2      	mov	sl, r6
 8004940:	46bb      	mov	fp, r7
 8004942:	e9c5 6700 	strd	r6, r7, [r5]
 8004946:	d1dd      	bne.n	8004904 <__kernel_rem_pio2+0x744>
 8004948:	2000      	movs	r0, #0
 800494a:	2100      	movs	r1, #0
 800494c:	ad4e      	add	r5, sp, #312	; 0x138
 800494e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004952:	f000 f9f7 	bl	8004d44 <__adddf3>
 8004956:	42ac      	cmp	r4, r5
 8004958:	d1f9      	bne.n	800494e <__kernel_rem_pio2+0x78e>
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f47f af28 	bne.w	80047b2 <__kernel_rem_pio2+0x5f2>
 8004962:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 8004966:	9f08      	ldr	r7, [sp, #32]
 8004968:	e9d9 4500 	ldrd	r4, r5, [r9]
 800496c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004970:	9b05      	ldr	r3, [sp, #20]
 8004972:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004976:	f003 0007 	and.w	r0, r3, #7
 800497a:	e9c7 4500 	strd	r4, r5, [r7]
 800497e:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004986:	4630      	mov	r0, r6
 8004988:	4639      	mov	r1, r7
 800498a:	f000 fe27 	bl	80055dc <__aeabi_d2iz>
 800498e:	ab0e      	add	r3, sp, #56	; 0x38
 8004990:	46aa      	mov	sl, r5
 8004992:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8004996:	e631      	b.n	80045fc <__kernel_rem_pio2+0x43c>

08004998 <__kernel_sin>:
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80049a0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80049a4:	b085      	sub	sp, #20
 80049a6:	4604      	mov	r4, r0
 80049a8:	460d      	mov	r5, r1
 80049aa:	4690      	mov	r8, r2
 80049ac:	4699      	mov	r9, r3
 80049ae:	da04      	bge.n	80049ba <__kernel_sin+0x22>
 80049b0:	f000 fe14 	bl	80055dc <__aeabi_d2iz>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	f000 8083 	beq.w	8004ac0 <__kernel_sin+0x128>
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	4620      	mov	r0, r4
 80049c0:	4629      	mov	r1, r5
 80049c2:	f000 fb71 	bl	80050a8 <__aeabi_dmul>
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	4606      	mov	r6, r0
 80049cc:	460f      	mov	r7, r1
 80049ce:	f000 fb6b 	bl	80050a8 <__aeabi_dmul>
 80049d2:	a342      	add	r3, pc, #264	; (adr r3, 8004adc <__kernel_sin+0x144>)
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	4682      	mov	sl, r0
 80049da:	468b      	mov	fp, r1
 80049dc:	4630      	mov	r0, r6
 80049de:	4639      	mov	r1, r7
 80049e0:	f000 fb62 	bl	80050a8 <__aeabi_dmul>
 80049e4:	a33f      	add	r3, pc, #252	; (adr r3, 8004ae4 <__kernel_sin+0x14c>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f000 f9a9 	bl	8004d40 <__aeabi_dsub>
 80049ee:	4632      	mov	r2, r6
 80049f0:	463b      	mov	r3, r7
 80049f2:	f000 fb59 	bl	80050a8 <__aeabi_dmul>
 80049f6:	a33d      	add	r3, pc, #244	; (adr r3, 8004aec <__kernel_sin+0x154>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f000 f9a2 	bl	8004d44 <__adddf3>
 8004a00:	4632      	mov	r2, r6
 8004a02:	463b      	mov	r3, r7
 8004a04:	f000 fb50 	bl	80050a8 <__aeabi_dmul>
 8004a08:	a33a      	add	r3, pc, #232	; (adr r3, 8004af4 <__kernel_sin+0x15c>)
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f000 f997 	bl	8004d40 <__aeabi_dsub>
 8004a12:	4632      	mov	r2, r6
 8004a14:	463b      	mov	r3, r7
 8004a16:	f000 fb47 	bl	80050a8 <__aeabi_dmul>
 8004a1a:	a338      	add	r3, pc, #224	; (adr r3, 8004afc <__kernel_sin+0x164>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f000 f990 	bl	8004d44 <__adddf3>
 8004a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a26:	e9cd 0100 	strd	r0, r1, [sp]
 8004a2a:	b39b      	cbz	r3, 8004a94 <__kernel_sin+0xfc>
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	4649      	mov	r1, r9
 8004a30:	2200      	movs	r2, #0
 8004a32:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <__kernel_sin+0x140>)
 8004a34:	f000 fb38 	bl	80050a8 <__aeabi_dmul>
 8004a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a40:	4650      	mov	r0, sl
 8004a42:	4659      	mov	r1, fp
 8004a44:	f000 fb30 	bl	80050a8 <__aeabi_dmul>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a50:	f000 f976 	bl	8004d40 <__aeabi_dsub>
 8004a54:	4632      	mov	r2, r6
 8004a56:	463b      	mov	r3, r7
 8004a58:	f000 fb26 	bl	80050a8 <__aeabi_dmul>
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	f000 f96e 	bl	8004d40 <__aeabi_dsub>
 8004a64:	a31a      	add	r3, pc, #104	; (adr r3, 8004ad0 <__kernel_sin+0x138>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	460f      	mov	r7, r1
 8004a6e:	4650      	mov	r0, sl
 8004a70:	4659      	mov	r1, fp
 8004a72:	f000 fb19 	bl	80050a8 <__aeabi_dmul>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	f000 f961 	bl	8004d44 <__adddf3>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4620      	mov	r0, r4
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f000 f959 	bl	8004d40 <__aeabi_dsub>
 8004a8e:	b005      	add	sp, #20
 8004a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a98:	4630      	mov	r0, r6
 8004a9a:	4639      	mov	r1, r7
 8004a9c:	f000 fb04 	bl	80050a8 <__aeabi_dmul>
 8004aa0:	a30b      	add	r3, pc, #44	; (adr r3, 8004ad0 <__kernel_sin+0x138>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f000 f94b 	bl	8004d40 <__aeabi_dsub>
 8004aaa:	4652      	mov	r2, sl
 8004aac:	465b      	mov	r3, fp
 8004aae:	f000 fafb 	bl	80050a8 <__aeabi_dmul>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	f000 f945 	bl	8004d44 <__adddf3>
 8004aba:	b005      	add	sp, #20
 8004abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	b005      	add	sp, #20
 8004ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w
 8004ad0:	55555549 	.word	0x55555549
 8004ad4:	3fc55555 	.word	0x3fc55555
 8004ad8:	3fe00000 	.word	0x3fe00000
 8004adc:	5acfd57c 	.word	0x5acfd57c
 8004ae0:	3de5d93a 	.word	0x3de5d93a
 8004ae4:	8a2b9ceb 	.word	0x8a2b9ceb
 8004ae8:	3e5ae5e6 	.word	0x3e5ae5e6
 8004aec:	57b1fe7d 	.word	0x57b1fe7d
 8004af0:	3ec71de3 	.word	0x3ec71de3
 8004af4:	19c161d5 	.word	0x19c161d5
 8004af8:	3f2a01a0 	.word	0x3f2a01a0
 8004afc:	1110f8a6 	.word	0x1110f8a6
 8004b00:	3f811111 	.word	0x3f811111
 8004b04:	f3af 8000 	nop.w

08004b08 <fabs>:
 8004b08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop

08004b10 <floor>:
 8004b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b14:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004b18:	f2a8 35ff 	subw	r5, r8, #1023	; 0x3ff
 8004b1c:	2d13      	cmp	r5, #19
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	460c      	mov	r4, r1
 8004b24:	4607      	mov	r7, r0
 8004b26:	4689      	mov	r9, r1
 8004b28:	4606      	mov	r6, r0
 8004b2a:	dc1d      	bgt.n	8004b68 <floor+0x58>
 8004b2c:	2d00      	cmp	r5, #0
 8004b2e:	db40      	blt.n	8004bb2 <floor+0xa2>
 8004b30:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8004c1c <floor+0x10c>
 8004b34:	fa48 f805 	asr.w	r8, r8, r5
 8004b38:	ea08 0e01 	and.w	lr, r8, r1
 8004b3c:	ea5e 0707 	orrs.w	r7, lr, r7
 8004b40:	d017      	beq.n	8004b72 <floor+0x62>
 8004b42:	a334      	add	r3, pc, #208	; (adr r3, 8004c14 <floor+0x104>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f000 f8fc 	bl	8004d44 <__adddf3>
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f000 fd3a 	bl	80055c8 <__aeabi_dcmpgt>
 8004b54:	b120      	cbz	r0, 8004b60 <floor+0x50>
 8004b56:	2c00      	cmp	r4, #0
 8004b58:	db3f      	blt.n	8004bda <floor+0xca>
 8004b5a:	ea29 0408 	bic.w	r4, r9, r8
 8004b5e:	2600      	movs	r6, #0
 8004b60:	4621      	mov	r1, r4
 8004b62:	4630      	mov	r0, r6
 8004b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b68:	2d33      	cmp	r5, #51	; 0x33
 8004b6a:	dd06      	ble.n	8004b7a <floor+0x6a>
 8004b6c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004b70:	d02f      	beq.n	8004bd2 <floor+0xc2>
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b7a:	f2a8 4e13 	subw	lr, r8, #1043	; 0x413
 8004b7e:	f04f 37ff 	mov.w	r7, #4294967295
 8004b82:	fa27 f70e 	lsr.w	r7, r7, lr
 8004b86:	4207      	tst	r7, r0
 8004b88:	d0f3      	beq.n	8004b72 <floor+0x62>
 8004b8a:	a322      	add	r3, pc, #136	; (adr r3, 8004c14 <floor+0x104>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f000 f8d8 	bl	8004d44 <__adddf3>
 8004b94:	2200      	movs	r2, #0
 8004b96:	2300      	movs	r3, #0
 8004b98:	f000 fd16 	bl	80055c8 <__aeabi_dcmpgt>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d0df      	beq.n	8004b60 <floor+0x50>
 8004ba0:	2c00      	cmp	r4, #0
 8004ba2:	db1f      	blt.n	8004be4 <floor+0xd4>
 8004ba4:	464c      	mov	r4, r9
 8004ba6:	ea26 0607 	bic.w	r6, r6, r7
 8004baa:	4621      	mov	r1, r4
 8004bac:	4630      	mov	r0, r6
 8004bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb2:	a318      	add	r3, pc, #96	; (adr r3, 8004c14 <floor+0x104>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f000 f8c4 	bl	8004d44 <__adddf3>
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f000 fd02 	bl	80055c8 <__aeabi_dcmpgt>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d0cb      	beq.n	8004b60 <floor+0x50>
 8004bc8:	2c00      	cmp	r4, #0
 8004bca:	db19      	blt.n	8004c00 <floor+0xf0>
 8004bcc:	2600      	movs	r6, #0
 8004bce:	4634      	mov	r4, r6
 8004bd0:	e7c6      	b.n	8004b60 <floor+0x50>
 8004bd2:	f000 f8b7 	bl	8004d44 <__adddf3>
 8004bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bde:	412b      	asrs	r3, r5
 8004be0:	4499      	add	r9, r3
 8004be2:	e7ba      	b.n	8004b5a <floor+0x4a>
 8004be4:	2d14      	cmp	r5, #20
 8004be6:	d008      	beq.n	8004bfa <floor+0xea>
 8004be8:	f5c8 6886 	rsb	r8, r8, #1072	; 0x430
 8004bec:	f108 0803 	add.w	r8, r8, #3
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	fa03 f308 	lsl.w	r3, r3, r8
 8004bf6:	199e      	adds	r6, r3, r6
 8004bf8:	d3d4      	bcc.n	8004ba4 <floor+0x94>
 8004bfa:	f109 0901 	add.w	r9, r9, #1
 8004bfe:	e7d1      	b.n	8004ba4 <floor+0x94>
 8004c00:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 8004c04:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <floor+0x100>)
 8004c06:	433a      	orrs	r2, r7
 8004c08:	bf18      	it	ne
 8004c0a:	461c      	movne	r4, r3
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	e7a7      	b.n	8004b60 <floor+0x50>
 8004c10:	bff00000 	.word	0xbff00000
 8004c14:	8800759c 	.word	0x8800759c
 8004c18:	7e37e43c 	.word	0x7e37e43c
 8004c1c:	000fffff 	.word	0x000fffff

08004c20 <scalbn>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004c26:	4604      	mov	r4, r0
 8004c28:	460d      	mov	r5, r1
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4617      	mov	r7, r2
 8004c2e:	bb16      	cbnz	r6, 8004c76 <scalbn+0x56>
 8004c30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c34:	4303      	orrs	r3, r0
 8004c36:	d032      	beq.n	8004c9e <scalbn+0x7e>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <scalbn+0xf8>)
 8004c3c:	f000 fa34 	bl	80050a8 <__aeabi_dmul>
 8004c40:	4a36      	ldr	r2, [pc, #216]	; (8004d1c <scalbn+0xfc>)
 8004c42:	4297      	cmp	r7, r2
 8004c44:	4604      	mov	r4, r0
 8004c46:	460d      	mov	r5, r1
 8004c48:	460b      	mov	r3, r1
 8004c4a:	db37      	blt.n	8004cbc <scalbn+0x9c>
 8004c4c:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004c50:	3e36      	subs	r6, #54	; 0x36
 8004c52:	443e      	add	r6, r7
 8004c54:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004c58:	4296      	cmp	r6, r2
 8004c5a:	dd15      	ble.n	8004c88 <scalbn+0x68>
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	462b      	mov	r3, r5
 8004c60:	a129      	add	r1, pc, #164	; (adr r1, 8004d08 <scalbn+0xe8>)
 8004c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c66:	f000 f85f 	bl	8004d28 <copysign>
 8004c6a:	a327      	add	r3, pc, #156	; (adr r3, 8004d08 <scalbn+0xe8>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f000 fa1a 	bl	80050a8 <__aeabi_dmul>
 8004c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c7a:	4296      	cmp	r6, r2
 8004c7c:	d024      	beq.n	8004cc8 <scalbn+0xa8>
 8004c7e:	443e      	add	r6, r7
 8004c80:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004c84:	4296      	cmp	r6, r2
 8004c86:	dce9      	bgt.n	8004c5c <scalbn+0x3c>
 8004c88:	2e00      	cmp	r6, #0
 8004c8a:	dd09      	ble.n	8004ca0 <scalbn+0x80>
 8004c8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c94:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8004c98:	4620      	mov	r0, r4
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca0:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8004ca4:	da15      	bge.n	8004cd2 <scalbn+0xb2>
 8004ca6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004caa:	429f      	cmp	r7, r3
 8004cac:	4622      	mov	r2, r4
 8004cae:	462b      	mov	r3, r5
 8004cb0:	dc1d      	bgt.n	8004cee <scalbn+0xce>
 8004cb2:	a117      	add	r1, pc, #92	; (adr r1, 8004d10 <scalbn+0xf0>)
 8004cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cb8:	f000 f836 	bl	8004d28 <copysign>
 8004cbc:	a314      	add	r3, pc, #80	; (adr r3, 8004d10 <scalbn+0xf0>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f000 f9f1 	bl	80050a8 <__aeabi_dmul>
 8004cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	f000 f83a 	bl	8004d44 <__adddf3>
 8004cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cda:	3636      	adds	r6, #54	; 0x36
 8004cdc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <scalbn+0x100>)
 8004ce8:	f000 f9de 	bl	80050a8 <__aeabi_dmul>
 8004cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cee:	a106      	add	r1, pc, #24	; (adr r1, 8004d08 <scalbn+0xe8>)
 8004cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cf4:	f000 f818 	bl	8004d28 <copysign>
 8004cf8:	a303      	add	r3, pc, #12	; (adr r3, 8004d08 <scalbn+0xe8>)
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	f000 f9d3 	bl	80050a8 <__aeabi_dmul>
 8004d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d04:	f3af 8000 	nop.w
 8004d08:	8800759c 	.word	0x8800759c
 8004d0c:	7e37e43c 	.word	0x7e37e43c
 8004d10:	c2f8f359 	.word	0xc2f8f359
 8004d14:	01a56e1f 	.word	0x01a56e1f
 8004d18:	43500000 	.word	0x43500000
 8004d1c:	ffff3cb0 	.word	0xffff3cb0
 8004d20:	3c900000 	.word	0x3c900000
 8004d24:	f3af 8000 	nop.w

08004d28 <copysign>:
 8004d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d2c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004d30:	ea43 0102 	orr.w	r1, r3, r2
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop

08004d38 <__aeabi_drsub>:
 8004d38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004d3c:	e002      	b.n	8004d44 <__adddf3>
 8004d3e:	bf00      	nop

08004d40 <__aeabi_dsub>:
 8004d40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004d44 <__adddf3>:
 8004d44:	b530      	push	{r4, r5, lr}
 8004d46:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004d4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004d4e:	ea94 0f05 	teq	r4, r5
 8004d52:	bf08      	it	eq
 8004d54:	ea90 0f02 	teqeq	r0, r2
 8004d58:	bf1f      	itttt	ne
 8004d5a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004d5e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004d62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004d66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004d6a:	f000 80e2 	beq.w	8004f32 <__adddf3+0x1ee>
 8004d6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004d72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004d76:	bfb8      	it	lt
 8004d78:	426d      	neglt	r5, r5
 8004d7a:	dd0c      	ble.n	8004d96 <__adddf3+0x52>
 8004d7c:	442c      	add	r4, r5
 8004d7e:	ea80 0202 	eor.w	r2, r0, r2
 8004d82:	ea81 0303 	eor.w	r3, r1, r3
 8004d86:	ea82 0000 	eor.w	r0, r2, r0
 8004d8a:	ea83 0101 	eor.w	r1, r3, r1
 8004d8e:	ea80 0202 	eor.w	r2, r0, r2
 8004d92:	ea81 0303 	eor.w	r3, r1, r3
 8004d96:	2d36      	cmp	r5, #54	; 0x36
 8004d98:	bf88      	it	hi
 8004d9a:	bd30      	pophi	{r4, r5, pc}
 8004d9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004da0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004da4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004da8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004dac:	d002      	beq.n	8004db4 <__adddf3+0x70>
 8004dae:	4240      	negs	r0, r0
 8004db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004db4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004db8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004dbc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004dc0:	d002      	beq.n	8004dc8 <__adddf3+0x84>
 8004dc2:	4252      	negs	r2, r2
 8004dc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004dc8:	ea94 0f05 	teq	r4, r5
 8004dcc:	f000 80a7 	beq.w	8004f1e <__adddf3+0x1da>
 8004dd0:	f1a4 0401 	sub.w	r4, r4, #1
 8004dd4:	f1d5 0e20 	rsbs	lr, r5, #32
 8004dd8:	db0d      	blt.n	8004df6 <__adddf3+0xb2>
 8004dda:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004dde:	fa22 f205 	lsr.w	r2, r2, r5
 8004de2:	1880      	adds	r0, r0, r2
 8004de4:	f141 0100 	adc.w	r1, r1, #0
 8004de8:	fa03 f20e 	lsl.w	r2, r3, lr
 8004dec:	1880      	adds	r0, r0, r2
 8004dee:	fa43 f305 	asr.w	r3, r3, r5
 8004df2:	4159      	adcs	r1, r3
 8004df4:	e00e      	b.n	8004e14 <__adddf3+0xd0>
 8004df6:	f1a5 0520 	sub.w	r5, r5, #32
 8004dfa:	f10e 0e20 	add.w	lr, lr, #32
 8004dfe:	2a01      	cmp	r2, #1
 8004e00:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004e04:	bf28      	it	cs
 8004e06:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004e0a:	fa43 f305 	asr.w	r3, r3, r5
 8004e0e:	18c0      	adds	r0, r0, r3
 8004e10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004e14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004e18:	d507      	bpl.n	8004e2a <__adddf3+0xe6>
 8004e1a:	f04f 0e00 	mov.w	lr, #0
 8004e1e:	f1dc 0c00 	rsbs	ip, ip, #0
 8004e22:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004e26:	eb6e 0101 	sbc.w	r1, lr, r1
 8004e2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004e2e:	d31b      	bcc.n	8004e68 <__adddf3+0x124>
 8004e30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004e34:	d30c      	bcc.n	8004e50 <__adddf3+0x10c>
 8004e36:	0849      	lsrs	r1, r1, #1
 8004e38:	ea5f 0030 	movs.w	r0, r0, rrx
 8004e3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004e40:	f104 0401 	add.w	r4, r4, #1
 8004e44:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004e48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004e4c:	f080 809a 	bcs.w	8004f84 <__adddf3+0x240>
 8004e50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004e54:	bf08      	it	eq
 8004e56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004e5a:	f150 0000 	adcs.w	r0, r0, #0
 8004e5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004e62:	ea41 0105 	orr.w	r1, r1, r5
 8004e66:	bd30      	pop	{r4, r5, pc}
 8004e68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004e6c:	4140      	adcs	r0, r0
 8004e6e:	eb41 0101 	adc.w	r1, r1, r1
 8004e72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004e76:	f1a4 0401 	sub.w	r4, r4, #1
 8004e7a:	d1e9      	bne.n	8004e50 <__adddf3+0x10c>
 8004e7c:	f091 0f00 	teq	r1, #0
 8004e80:	bf04      	itt	eq
 8004e82:	4601      	moveq	r1, r0
 8004e84:	2000      	moveq	r0, #0
 8004e86:	fab1 f381 	clz	r3, r1
 8004e8a:	bf08      	it	eq
 8004e8c:	3320      	addeq	r3, #32
 8004e8e:	f1a3 030b 	sub.w	r3, r3, #11
 8004e92:	f1b3 0220 	subs.w	r2, r3, #32
 8004e96:	da0c      	bge.n	8004eb2 <__adddf3+0x16e>
 8004e98:	320c      	adds	r2, #12
 8004e9a:	dd08      	ble.n	8004eae <__adddf3+0x16a>
 8004e9c:	f102 0c14 	add.w	ip, r2, #20
 8004ea0:	f1c2 020c 	rsb	r2, r2, #12
 8004ea4:	fa01 f00c 	lsl.w	r0, r1, ip
 8004ea8:	fa21 f102 	lsr.w	r1, r1, r2
 8004eac:	e00c      	b.n	8004ec8 <__adddf3+0x184>
 8004eae:	f102 0214 	add.w	r2, r2, #20
 8004eb2:	bfd8      	it	le
 8004eb4:	f1c2 0c20 	rsble	ip, r2, #32
 8004eb8:	fa01 f102 	lsl.w	r1, r1, r2
 8004ebc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004ec0:	bfdc      	itt	le
 8004ec2:	ea41 010c 	orrle.w	r1, r1, ip
 8004ec6:	4090      	lslle	r0, r2
 8004ec8:	1ae4      	subs	r4, r4, r3
 8004eca:	bfa2      	ittt	ge
 8004ecc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004ed0:	4329      	orrge	r1, r5
 8004ed2:	bd30      	popge	{r4, r5, pc}
 8004ed4:	ea6f 0404 	mvn.w	r4, r4
 8004ed8:	3c1f      	subs	r4, #31
 8004eda:	da1c      	bge.n	8004f16 <__adddf3+0x1d2>
 8004edc:	340c      	adds	r4, #12
 8004ede:	dc0e      	bgt.n	8004efe <__adddf3+0x1ba>
 8004ee0:	f104 0414 	add.w	r4, r4, #20
 8004ee4:	f1c4 0220 	rsb	r2, r4, #32
 8004ee8:	fa20 f004 	lsr.w	r0, r0, r4
 8004eec:	fa01 f302 	lsl.w	r3, r1, r2
 8004ef0:	ea40 0003 	orr.w	r0, r0, r3
 8004ef4:	fa21 f304 	lsr.w	r3, r1, r4
 8004ef8:	ea45 0103 	orr.w	r1, r5, r3
 8004efc:	bd30      	pop	{r4, r5, pc}
 8004efe:	f1c4 040c 	rsb	r4, r4, #12
 8004f02:	f1c4 0220 	rsb	r2, r4, #32
 8004f06:	fa20 f002 	lsr.w	r0, r0, r2
 8004f0a:	fa01 f304 	lsl.w	r3, r1, r4
 8004f0e:	ea40 0003 	orr.w	r0, r0, r3
 8004f12:	4629      	mov	r1, r5
 8004f14:	bd30      	pop	{r4, r5, pc}
 8004f16:	fa21 f004 	lsr.w	r0, r1, r4
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	bd30      	pop	{r4, r5, pc}
 8004f1e:	f094 0f00 	teq	r4, #0
 8004f22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004f26:	bf06      	itte	eq
 8004f28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004f2c:	3401      	addeq	r4, #1
 8004f2e:	3d01      	subne	r5, #1
 8004f30:	e74e      	b.n	8004dd0 <__adddf3+0x8c>
 8004f32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004f36:	bf18      	it	ne
 8004f38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004f3c:	d029      	beq.n	8004f92 <__adddf3+0x24e>
 8004f3e:	ea94 0f05 	teq	r4, r5
 8004f42:	bf08      	it	eq
 8004f44:	ea90 0f02 	teqeq	r0, r2
 8004f48:	d005      	beq.n	8004f56 <__adddf3+0x212>
 8004f4a:	ea54 0c00 	orrs.w	ip, r4, r0
 8004f4e:	bf04      	itt	eq
 8004f50:	4619      	moveq	r1, r3
 8004f52:	4610      	moveq	r0, r2
 8004f54:	bd30      	pop	{r4, r5, pc}
 8004f56:	ea91 0f03 	teq	r1, r3
 8004f5a:	bf1e      	ittt	ne
 8004f5c:	2100      	movne	r1, #0
 8004f5e:	2000      	movne	r0, #0
 8004f60:	bd30      	popne	{r4, r5, pc}
 8004f62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004f66:	d105      	bne.n	8004f74 <__adddf3+0x230>
 8004f68:	0040      	lsls	r0, r0, #1
 8004f6a:	4149      	adcs	r1, r1
 8004f6c:	bf28      	it	cs
 8004f6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004f72:	bd30      	pop	{r4, r5, pc}
 8004f74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004f78:	bf3c      	itt	cc
 8004f7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004f7e:	bd30      	popcc	{r4, r5, pc}
 8004f80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004f84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004f88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f8c:	f04f 0000 	mov.w	r0, #0
 8004f90:	bd30      	pop	{r4, r5, pc}
 8004f92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004f96:	bf1a      	itte	ne
 8004f98:	4619      	movne	r1, r3
 8004f9a:	4610      	movne	r0, r2
 8004f9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004fa0:	bf1c      	itt	ne
 8004fa2:	460b      	movne	r3, r1
 8004fa4:	4602      	movne	r2, r0
 8004fa6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004faa:	bf06      	itte	eq
 8004fac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004fb0:	ea91 0f03 	teqeq	r1, r3
 8004fb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004fb8:	bd30      	pop	{r4, r5, pc}
 8004fba:	bf00      	nop

08004fbc <__aeabi_ui2d>:
 8004fbc:	f090 0f00 	teq	r0, #0
 8004fc0:	bf04      	itt	eq
 8004fc2:	2100      	moveq	r1, #0
 8004fc4:	4770      	bxeq	lr
 8004fc6:	b530      	push	{r4, r5, lr}
 8004fc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004fcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004fd0:	f04f 0500 	mov.w	r5, #0
 8004fd4:	f04f 0100 	mov.w	r1, #0
 8004fd8:	e750      	b.n	8004e7c <__adddf3+0x138>
 8004fda:	bf00      	nop

08004fdc <__aeabi_i2d>:
 8004fdc:	f090 0f00 	teq	r0, #0
 8004fe0:	bf04      	itt	eq
 8004fe2:	2100      	moveq	r1, #0
 8004fe4:	4770      	bxeq	lr
 8004fe6:	b530      	push	{r4, r5, lr}
 8004fe8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004fec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004ff0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004ff4:	bf48      	it	mi
 8004ff6:	4240      	negmi	r0, r0
 8004ff8:	f04f 0100 	mov.w	r1, #0
 8004ffc:	e73e      	b.n	8004e7c <__adddf3+0x138>
 8004ffe:	bf00      	nop

08005000 <__aeabi_f2d>:
 8005000:	0042      	lsls	r2, r0, #1
 8005002:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005006:	ea4f 0131 	mov.w	r1, r1, rrx
 800500a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800500e:	bf1f      	itttt	ne
 8005010:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005014:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005018:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800501c:	4770      	bxne	lr
 800501e:	f092 0f00 	teq	r2, #0
 8005022:	bf14      	ite	ne
 8005024:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005028:	4770      	bxeq	lr
 800502a:	b530      	push	{r4, r5, lr}
 800502c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005030:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005034:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005038:	e720      	b.n	8004e7c <__adddf3+0x138>
 800503a:	bf00      	nop

0800503c <__aeabi_ul2d>:
 800503c:	ea50 0201 	orrs.w	r2, r0, r1
 8005040:	bf08      	it	eq
 8005042:	4770      	bxeq	lr
 8005044:	b530      	push	{r4, r5, lr}
 8005046:	f04f 0500 	mov.w	r5, #0
 800504a:	e00a      	b.n	8005062 <__aeabi_l2d+0x16>

0800504c <__aeabi_l2d>:
 800504c:	ea50 0201 	orrs.w	r2, r0, r1
 8005050:	bf08      	it	eq
 8005052:	4770      	bxeq	lr
 8005054:	b530      	push	{r4, r5, lr}
 8005056:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800505a:	d502      	bpl.n	8005062 <__aeabi_l2d+0x16>
 800505c:	4240      	negs	r0, r0
 800505e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005062:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005066:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800506a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800506e:	f43f aedc 	beq.w	8004e2a <__adddf3+0xe6>
 8005072:	f04f 0203 	mov.w	r2, #3
 8005076:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800507a:	bf18      	it	ne
 800507c:	3203      	addne	r2, #3
 800507e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005082:	bf18      	it	ne
 8005084:	3203      	addne	r2, #3
 8005086:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800508a:	f1c2 0320 	rsb	r3, r2, #32
 800508e:	fa00 fc03 	lsl.w	ip, r0, r3
 8005092:	fa20 f002 	lsr.w	r0, r0, r2
 8005096:	fa01 fe03 	lsl.w	lr, r1, r3
 800509a:	ea40 000e 	orr.w	r0, r0, lr
 800509e:	fa21 f102 	lsr.w	r1, r1, r2
 80050a2:	4414      	add	r4, r2
 80050a4:	e6c1      	b.n	8004e2a <__adddf3+0xe6>
 80050a6:	bf00      	nop

080050a8 <__aeabi_dmul>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80050ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80050b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80050b6:	bf1d      	ittte	ne
 80050b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80050bc:	ea94 0f0c 	teqne	r4, ip
 80050c0:	ea95 0f0c 	teqne	r5, ip
 80050c4:	f000 f8de 	bleq	8005284 <__aeabi_dmul+0x1dc>
 80050c8:	442c      	add	r4, r5
 80050ca:	ea81 0603 	eor.w	r6, r1, r3
 80050ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80050d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80050d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80050da:	bf18      	it	ne
 80050dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80050e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80050e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050e8:	d038      	beq.n	800515c <__aeabi_dmul+0xb4>
 80050ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80050ee:	f04f 0500 	mov.w	r5, #0
 80050f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80050f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80050fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80050fe:	f04f 0600 	mov.w	r6, #0
 8005102:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005106:	f09c 0f00 	teq	ip, #0
 800510a:	bf18      	it	ne
 800510c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005110:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005114:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005118:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800511c:	d204      	bcs.n	8005128 <__aeabi_dmul+0x80>
 800511e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005122:	416d      	adcs	r5, r5
 8005124:	eb46 0606 	adc.w	r6, r6, r6
 8005128:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800512c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005130:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005134:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005138:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800513c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005140:	bf88      	it	hi
 8005142:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005146:	d81e      	bhi.n	8005186 <__aeabi_dmul+0xde>
 8005148:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800514c:	bf08      	it	eq
 800514e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005152:	f150 0000 	adcs.w	r0, r0, #0
 8005156:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005160:	ea46 0101 	orr.w	r1, r6, r1
 8005164:	ea40 0002 	orr.w	r0, r0, r2
 8005168:	ea81 0103 	eor.w	r1, r1, r3
 800516c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005170:	bfc2      	ittt	gt
 8005172:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005176:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800517a:	bd70      	popgt	{r4, r5, r6, pc}
 800517c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005180:	f04f 0e00 	mov.w	lr, #0
 8005184:	3c01      	subs	r4, #1
 8005186:	f300 80ab 	bgt.w	80052e0 <__aeabi_dmul+0x238>
 800518a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800518e:	bfde      	ittt	le
 8005190:	2000      	movle	r0, #0
 8005192:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005196:	bd70      	pople	{r4, r5, r6, pc}
 8005198:	f1c4 0400 	rsb	r4, r4, #0
 800519c:	3c20      	subs	r4, #32
 800519e:	da35      	bge.n	800520c <__aeabi_dmul+0x164>
 80051a0:	340c      	adds	r4, #12
 80051a2:	dc1b      	bgt.n	80051dc <__aeabi_dmul+0x134>
 80051a4:	f104 0414 	add.w	r4, r4, #20
 80051a8:	f1c4 0520 	rsb	r5, r4, #32
 80051ac:	fa00 f305 	lsl.w	r3, r0, r5
 80051b0:	fa20 f004 	lsr.w	r0, r0, r4
 80051b4:	fa01 f205 	lsl.w	r2, r1, r5
 80051b8:	ea40 0002 	orr.w	r0, r0, r2
 80051bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80051c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80051c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80051c8:	fa21 f604 	lsr.w	r6, r1, r4
 80051cc:	eb42 0106 	adc.w	r1, r2, r6
 80051d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80051d4:	bf08      	it	eq
 80051d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	f1c4 040c 	rsb	r4, r4, #12
 80051e0:	f1c4 0520 	rsb	r5, r4, #32
 80051e4:	fa00 f304 	lsl.w	r3, r0, r4
 80051e8:	fa20 f005 	lsr.w	r0, r0, r5
 80051ec:	fa01 f204 	lsl.w	r2, r1, r4
 80051f0:	ea40 0002 	orr.w	r0, r0, r2
 80051f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80051f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80051fc:	f141 0100 	adc.w	r1, r1, #0
 8005200:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005204:	bf08      	it	eq
 8005206:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	f1c4 0520 	rsb	r5, r4, #32
 8005210:	fa00 f205 	lsl.w	r2, r0, r5
 8005214:	ea4e 0e02 	orr.w	lr, lr, r2
 8005218:	fa20 f304 	lsr.w	r3, r0, r4
 800521c:	fa01 f205 	lsl.w	r2, r1, r5
 8005220:	ea43 0302 	orr.w	r3, r3, r2
 8005224:	fa21 f004 	lsr.w	r0, r1, r4
 8005228:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800522c:	fa21 f204 	lsr.w	r2, r1, r4
 8005230:	ea20 0002 	bic.w	r0, r0, r2
 8005234:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005238:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800523c:	bf08      	it	eq
 800523e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	f094 0f00 	teq	r4, #0
 8005248:	d10f      	bne.n	800526a <__aeabi_dmul+0x1c2>
 800524a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800524e:	0040      	lsls	r0, r0, #1
 8005250:	eb41 0101 	adc.w	r1, r1, r1
 8005254:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005258:	bf08      	it	eq
 800525a:	3c01      	subeq	r4, #1
 800525c:	d0f7      	beq.n	800524e <__aeabi_dmul+0x1a6>
 800525e:	ea41 0106 	orr.w	r1, r1, r6
 8005262:	f095 0f00 	teq	r5, #0
 8005266:	bf18      	it	ne
 8005268:	4770      	bxne	lr
 800526a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800526e:	0052      	lsls	r2, r2, #1
 8005270:	eb43 0303 	adc.w	r3, r3, r3
 8005274:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005278:	bf08      	it	eq
 800527a:	3d01      	subeq	r5, #1
 800527c:	d0f7      	beq.n	800526e <__aeabi_dmul+0x1c6>
 800527e:	ea43 0306 	orr.w	r3, r3, r6
 8005282:	4770      	bx	lr
 8005284:	ea94 0f0c 	teq	r4, ip
 8005288:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800528c:	bf18      	it	ne
 800528e:	ea95 0f0c 	teqne	r5, ip
 8005292:	d00c      	beq.n	80052ae <__aeabi_dmul+0x206>
 8005294:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005298:	bf18      	it	ne
 800529a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800529e:	d1d1      	bne.n	8005244 <__aeabi_dmul+0x19c>
 80052a0:	ea81 0103 	eor.w	r1, r1, r3
 80052a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80052a8:	f04f 0000 	mov.w	r0, #0
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80052b2:	bf06      	itte	eq
 80052b4:	4610      	moveq	r0, r2
 80052b6:	4619      	moveq	r1, r3
 80052b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80052bc:	d019      	beq.n	80052f2 <__aeabi_dmul+0x24a>
 80052be:	ea94 0f0c 	teq	r4, ip
 80052c2:	d102      	bne.n	80052ca <__aeabi_dmul+0x222>
 80052c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80052c8:	d113      	bne.n	80052f2 <__aeabi_dmul+0x24a>
 80052ca:	ea95 0f0c 	teq	r5, ip
 80052ce:	d105      	bne.n	80052dc <__aeabi_dmul+0x234>
 80052d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80052d4:	bf1c      	itt	ne
 80052d6:	4610      	movne	r0, r2
 80052d8:	4619      	movne	r1, r3
 80052da:	d10a      	bne.n	80052f2 <__aeabi_dmul+0x24a>
 80052dc:	ea81 0103 	eor.w	r1, r1, r3
 80052e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80052e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80052e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052ec:	f04f 0000 	mov.w	r0, #0
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
 80052f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80052f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80052fa:	bd70      	pop	{r4, r5, r6, pc}

080052fc <__aeabi_ddiv>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005302:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005306:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800530a:	bf1d      	ittte	ne
 800530c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005310:	ea94 0f0c 	teqne	r4, ip
 8005314:	ea95 0f0c 	teqne	r5, ip
 8005318:	f000 f8a7 	bleq	800546a <__aeabi_ddiv+0x16e>
 800531c:	eba4 0405 	sub.w	r4, r4, r5
 8005320:	ea81 0e03 	eor.w	lr, r1, r3
 8005324:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800532c:	f000 8088 	beq.w	8005440 <__aeabi_ddiv+0x144>
 8005330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005334:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005338:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800533c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005340:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005344:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005348:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800534c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005350:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005354:	429d      	cmp	r5, r3
 8005356:	bf08      	it	eq
 8005358:	4296      	cmpeq	r6, r2
 800535a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800535e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005362:	d202      	bcs.n	800536a <__aeabi_ddiv+0x6e>
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	ea4f 0232 	mov.w	r2, r2, rrx
 800536a:	1ab6      	subs	r6, r6, r2
 800536c:	eb65 0503 	sbc.w	r5, r5, r3
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	ea4f 0232 	mov.w	r2, r2, rrx
 8005376:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800537a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800537e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005382:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005386:	bf22      	ittt	cs
 8005388:	1ab6      	subcs	r6, r6, r2
 800538a:	4675      	movcs	r5, lr
 800538c:	ea40 000c 	orrcs.w	r0, r0, ip
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	ea4f 0232 	mov.w	r2, r2, rrx
 8005396:	ebb6 0e02 	subs.w	lr, r6, r2
 800539a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800539e:	bf22      	ittt	cs
 80053a0:	1ab6      	subcs	r6, r6, r2
 80053a2:	4675      	movcs	r5, lr
 80053a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80053ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80053b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80053b6:	bf22      	ittt	cs
 80053b8:	1ab6      	subcs	r6, r6, r2
 80053ba:	4675      	movcs	r5, lr
 80053bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80053c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80053ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80053ce:	bf22      	ittt	cs
 80053d0:	1ab6      	subcs	r6, r6, r2
 80053d2:	4675      	movcs	r5, lr
 80053d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80053d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80053dc:	d018      	beq.n	8005410 <__aeabi_ddiv+0x114>
 80053de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80053e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80053e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80053ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80053ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80053f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80053f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80053fa:	d1c0      	bne.n	800537e <__aeabi_ddiv+0x82>
 80053fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005400:	d10b      	bne.n	800541a <__aeabi_ddiv+0x11e>
 8005402:	ea41 0100 	orr.w	r1, r1, r0
 8005406:	f04f 0000 	mov.w	r0, #0
 800540a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800540e:	e7b6      	b.n	800537e <__aeabi_ddiv+0x82>
 8005410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005414:	bf04      	itt	eq
 8005416:	4301      	orreq	r1, r0
 8005418:	2000      	moveq	r0, #0
 800541a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800541e:	bf88      	it	hi
 8005420:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005424:	f63f aeaf 	bhi.w	8005186 <__aeabi_dmul+0xde>
 8005428:	ebb5 0c03 	subs.w	ip, r5, r3
 800542c:	bf04      	itt	eq
 800542e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005432:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005436:	f150 0000 	adcs.w	r0, r0, #0
 800543a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005444:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005448:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800544c:	bfc2      	ittt	gt
 800544e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005452:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005456:	bd70      	popgt	{r4, r5, r6, pc}
 8005458:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800545c:	f04f 0e00 	mov.w	lr, #0
 8005460:	3c01      	subs	r4, #1
 8005462:	e690      	b.n	8005186 <__aeabi_dmul+0xde>
 8005464:	ea45 0e06 	orr.w	lr, r5, r6
 8005468:	e68d      	b.n	8005186 <__aeabi_dmul+0xde>
 800546a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800546e:	ea94 0f0c 	teq	r4, ip
 8005472:	bf08      	it	eq
 8005474:	ea95 0f0c 	teqeq	r5, ip
 8005478:	f43f af3b 	beq.w	80052f2 <__aeabi_dmul+0x24a>
 800547c:	ea94 0f0c 	teq	r4, ip
 8005480:	d10a      	bne.n	8005498 <__aeabi_ddiv+0x19c>
 8005482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005486:	f47f af34 	bne.w	80052f2 <__aeabi_dmul+0x24a>
 800548a:	ea95 0f0c 	teq	r5, ip
 800548e:	f47f af25 	bne.w	80052dc <__aeabi_dmul+0x234>
 8005492:	4610      	mov	r0, r2
 8005494:	4619      	mov	r1, r3
 8005496:	e72c      	b.n	80052f2 <__aeabi_dmul+0x24a>
 8005498:	ea95 0f0c 	teq	r5, ip
 800549c:	d106      	bne.n	80054ac <__aeabi_ddiv+0x1b0>
 800549e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80054a2:	f43f aefd 	beq.w	80052a0 <__aeabi_dmul+0x1f8>
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	e722      	b.n	80052f2 <__aeabi_dmul+0x24a>
 80054ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80054b0:	bf18      	it	ne
 80054b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80054b6:	f47f aec5 	bne.w	8005244 <__aeabi_dmul+0x19c>
 80054ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80054be:	f47f af0d 	bne.w	80052dc <__aeabi_dmul+0x234>
 80054c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80054c6:	f47f aeeb 	bne.w	80052a0 <__aeabi_dmul+0x1f8>
 80054ca:	e712      	b.n	80052f2 <__aeabi_dmul+0x24a>

080054cc <__gedf2>:
 80054cc:	f04f 3cff 	mov.w	ip, #4294967295
 80054d0:	e006      	b.n	80054e0 <__cmpdf2+0x4>
 80054d2:	bf00      	nop

080054d4 <__ledf2>:
 80054d4:	f04f 0c01 	mov.w	ip, #1
 80054d8:	e002      	b.n	80054e0 <__cmpdf2+0x4>
 80054da:	bf00      	nop

080054dc <__cmpdf2>:
 80054dc:	f04f 0c01 	mov.w	ip, #1
 80054e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80054e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80054e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80054ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80054f0:	bf18      	it	ne
 80054f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80054f6:	d01b      	beq.n	8005530 <__cmpdf2+0x54>
 80054f8:	b001      	add	sp, #4
 80054fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80054fe:	bf0c      	ite	eq
 8005500:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005504:	ea91 0f03 	teqne	r1, r3
 8005508:	bf02      	ittt	eq
 800550a:	ea90 0f02 	teqeq	r0, r2
 800550e:	2000      	moveq	r0, #0
 8005510:	4770      	bxeq	lr
 8005512:	f110 0f00 	cmn.w	r0, #0
 8005516:	ea91 0f03 	teq	r1, r3
 800551a:	bf58      	it	pl
 800551c:	4299      	cmppl	r1, r3
 800551e:	bf08      	it	eq
 8005520:	4290      	cmpeq	r0, r2
 8005522:	bf2c      	ite	cs
 8005524:	17d8      	asrcs	r0, r3, #31
 8005526:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800552a:	f040 0001 	orr.w	r0, r0, #1
 800552e:	4770      	bx	lr
 8005530:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005534:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005538:	d102      	bne.n	8005540 <__cmpdf2+0x64>
 800553a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800553e:	d107      	bne.n	8005550 <__cmpdf2+0x74>
 8005540:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005544:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005548:	d1d6      	bne.n	80054f8 <__cmpdf2+0x1c>
 800554a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800554e:	d0d3      	beq.n	80054f8 <__cmpdf2+0x1c>
 8005550:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop

08005558 <__aeabi_cdrcmple>:
 8005558:	4684      	mov	ip, r0
 800555a:	4610      	mov	r0, r2
 800555c:	4662      	mov	r2, ip
 800555e:	468c      	mov	ip, r1
 8005560:	4619      	mov	r1, r3
 8005562:	4663      	mov	r3, ip
 8005564:	e000      	b.n	8005568 <__aeabi_cdcmpeq>
 8005566:	bf00      	nop

08005568 <__aeabi_cdcmpeq>:
 8005568:	b501      	push	{r0, lr}
 800556a:	f7ff ffb7 	bl	80054dc <__cmpdf2>
 800556e:	2800      	cmp	r0, #0
 8005570:	bf48      	it	mi
 8005572:	f110 0f00 	cmnmi.w	r0, #0
 8005576:	bd01      	pop	{r0, pc}

08005578 <__aeabi_dcmpeq>:
 8005578:	f84d ed08 	str.w	lr, [sp, #-8]!
 800557c:	f7ff fff4 	bl	8005568 <__aeabi_cdcmpeq>
 8005580:	bf0c      	ite	eq
 8005582:	2001      	moveq	r0, #1
 8005584:	2000      	movne	r0, #0
 8005586:	f85d fb08 	ldr.w	pc, [sp], #8
 800558a:	bf00      	nop

0800558c <__aeabi_dcmplt>:
 800558c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005590:	f7ff ffea 	bl	8005568 <__aeabi_cdcmpeq>
 8005594:	bf34      	ite	cc
 8005596:	2001      	movcc	r0, #1
 8005598:	2000      	movcs	r0, #0
 800559a:	f85d fb08 	ldr.w	pc, [sp], #8
 800559e:	bf00      	nop

080055a0 <__aeabi_dcmple>:
 80055a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80055a4:	f7ff ffe0 	bl	8005568 <__aeabi_cdcmpeq>
 80055a8:	bf94      	ite	ls
 80055aa:	2001      	movls	r0, #1
 80055ac:	2000      	movhi	r0, #0
 80055ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80055b2:	bf00      	nop

080055b4 <__aeabi_dcmpge>:
 80055b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80055b8:	f7ff ffce 	bl	8005558 <__aeabi_cdrcmple>
 80055bc:	bf94      	ite	ls
 80055be:	2001      	movls	r0, #1
 80055c0:	2000      	movhi	r0, #0
 80055c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80055c6:	bf00      	nop

080055c8 <__aeabi_dcmpgt>:
 80055c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80055cc:	f7ff ffc4 	bl	8005558 <__aeabi_cdrcmple>
 80055d0:	bf34      	ite	cc
 80055d2:	2001      	movcc	r0, #1
 80055d4:	2000      	movcs	r0, #0
 80055d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80055da:	bf00      	nop

080055dc <__aeabi_d2iz>:
 80055dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80055e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80055e4:	d215      	bcs.n	8005612 <__aeabi_d2iz+0x36>
 80055e6:	d511      	bpl.n	800560c <__aeabi_d2iz+0x30>
 80055e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80055ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80055f0:	d912      	bls.n	8005618 <__aeabi_d2iz+0x3c>
 80055f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80055f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80055fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005602:	fa23 f002 	lsr.w	r0, r3, r2
 8005606:	bf18      	it	ne
 8005608:	4240      	negne	r0, r0
 800560a:	4770      	bx	lr
 800560c:	f04f 0000 	mov.w	r0, #0
 8005610:	4770      	bx	lr
 8005612:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005616:	d105      	bne.n	8005624 <__aeabi_d2iz+0x48>
 8005618:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800561c:	bf08      	it	eq
 800561e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005622:	4770      	bx	lr
 8005624:	f04f 0000 	mov.w	r0, #0
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop

0800562c <__aeabi_d2f>:
 800562c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005630:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005634:	bf24      	itt	cs
 8005636:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800563a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800563e:	d90d      	bls.n	800565c <__aeabi_d2f+0x30>
 8005640:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005644:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005648:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800564c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005650:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005654:	bf08      	it	eq
 8005656:	f020 0001 	biceq.w	r0, r0, #1
 800565a:	4770      	bx	lr
 800565c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005660:	d121      	bne.n	80056a6 <__aeabi_d2f+0x7a>
 8005662:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005666:	bfbc      	itt	lt
 8005668:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800566c:	4770      	bxlt	lr
 800566e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005672:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005676:	f1c2 0218 	rsb	r2, r2, #24
 800567a:	f1c2 0c20 	rsb	ip, r2, #32
 800567e:	fa10 f30c 	lsls.w	r3, r0, ip
 8005682:	fa20 f002 	lsr.w	r0, r0, r2
 8005686:	bf18      	it	ne
 8005688:	f040 0001 	orrne.w	r0, r0, #1
 800568c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005690:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005694:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005698:	ea40 000c 	orr.w	r0, r0, ip
 800569c:	fa23 f302 	lsr.w	r3, r3, r2
 80056a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056a4:	e7cc      	b.n	8005640 <__aeabi_d2f+0x14>
 80056a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80056aa:	d107      	bne.n	80056bc <__aeabi_d2f+0x90>
 80056ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80056b0:	bf1e      	ittt	ne
 80056b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80056b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80056ba:	4770      	bxne	lr
 80056bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80056c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80056c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4b0e      	ldr	r3, [pc, #56]	; (8005708 <__libc_init_array+0x3c>)
 80056d0:	4c0e      	ldr	r4, [pc, #56]	; (800570c <__libc_init_array+0x40>)
 80056d2:	1ae4      	subs	r4, r4, r3
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	2500      	movs	r5, #0
 80056d8:	461e      	mov	r6, r3
 80056da:	42a5      	cmp	r5, r4
 80056dc:	d004      	beq.n	80056e8 <__libc_init_array+0x1c>
 80056de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056e2:	4798      	blx	r3
 80056e4:	3501      	adds	r5, #1
 80056e6:	e7f8      	b.n	80056da <__libc_init_array+0xe>
 80056e8:	f7fc f8e0 	bl	80018ac <_init>
 80056ec:	4c08      	ldr	r4, [pc, #32]	; (8005710 <__libc_init_array+0x44>)
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <__libc_init_array+0x48>)
 80056f0:	1ae4      	subs	r4, r4, r3
 80056f2:	10a4      	asrs	r4, r4, #2
 80056f4:	2500      	movs	r5, #0
 80056f6:	461e      	mov	r6, r3
 80056f8:	42a5      	cmp	r5, r4
 80056fa:	d004      	beq.n	8005706 <__libc_init_array+0x3a>
 80056fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005700:	4798      	blx	r3
 8005702:	3501      	adds	r5, #1
 8005704:	e7f8      	b.n	80056f8 <__libc_init_array+0x2c>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	200001c0 	.word	0x200001c0
 800570c:	200001c0 	.word	0x200001c0
 8005710:	200001c0 	.word	0x200001c0
 8005714:	200001c0 	.word	0x200001c0

08005718 <g_xmc_vadc_group_array>:
 8005718:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08005728 <PWM_SVM_0_PhUHighPin>:
 8005728:	48028200 0000000b                       ...H....

08005730 <PWM_SVM_0_PhULowPin>:
 8005730:	48028100 00000005                       ...H....

08005738 <PWM_SVM_0_PhVHighPin>:
 8005738:	48028000 00000009                       ...H....

08005740 <PWM_SVM_0_PhVLowPin>:
 8005740:	48028200 00000006                       ...H....

08005748 <PWM_SVM_0_PhWHighPin>:
 8005748:	48028000 0000000a                       ...H....

08005750 <PWM_SVM_0_PhWLowPin>:
 8005750:	48028200 00000007                       ...H....

08005758 <PWM_SVM_0_PhUHiOutPinConf>:
 8005758:	00000098 00010000 00000000              ............

08005764 <PWM_SVM_0_PhULoOutPinConf>:
 8005764:	00000098 00010000 00000000              ............

08005770 <PWM_SVM_0_PhVHiOutPinConf>:
 8005770:	00000098 00010000 00000000              ............

0800577c <PWM_SVM_0_PhVLoOutPinConf>:
 800577c:	00000098 00010000 00000000              ............

08005788 <PWM_SVM_0_PhWHiOutPinConf>:
 8005788:	00000098 00010000 00000000              ............

08005794 <PWM_SVM_0_PhWLoOutPinConf>:
 8005794:	00000098 00010000 00000000              ............

080057a0 <PWM_SVM_0_InverterPin>:
 80057a0:	48028500 00000007                       ...H....

080057a8 <PWM_SVM_0_InvPinConf>:
 80057a8:	00000080 00010000 00000000              ............

080057b4 <PWM_SVM_0_TrapPin>:
 80057b4:	48028000 00000007                       ...H....

080057bc <PWM_SVM_0_TrapPinConf>:
 80057bc:	00000000 00010000 00000000              ............

080057c8 <PWM_SVM_0_TrapConfig>:
 80057c8:	00010000                                ....

080057cc <PWM_SVM_0_PhU>:
 80057cc:	40020300 00000002                       ...@....

080057d4 <PWM_SVM_0_PhV>:
 80057d4:	40020200 00000001                       ...@....

080057dc <PWM_SVM_0_PhW>:
 80057dc:	40020100 00000000                       ...@....

080057e4 <PWM_SVM_0_CurrentTrig>:
 80057e4:	40020100 00000000                       ...@....

080057ec <PWM_SVM_0_StartConfig>:
 80057ec:	00000107                                ....

080057f0 <PWM_SVM_0_TimerInitHandle>:
 80057f0:	00000001 00000000 00000014 00000000     ................

08005800 <PWM_SVM_0_TimerInit_CurrentTrig>:
 8005800:	20000001 0000000f 00000000 00000000     ... ............

08005810 <PWM_SVM_0_AppConfig>:
 8005810:	40020244 40020144 01010101 01010101     D..@D..@........
 8005820:	01020000 00040404 00004e20 07270e00     ........ N....'.
 8005830:	00000100 00000111 00000000 00000000     ................
	...
 8005848:	03938700 00000727 00bb0000 01000000     ....'...........
 8005858:	00000000                                ....

0800585c <Sinus60_tab>:
 800585c:	00210000 00640043 00a70086 00ea00c9     ..!.C.d.........
 800586c:	012d010c 0170014f 01b30192 01f601d5     ..-.O.p.........
 800587c:	02390218 027c025b 02bf029e 030202e1     ..9.[.|.........
 800588c:	03450324 03880367 03cb03aa 040e03ed     $.E.g...........
 800589c:	04510430 04940473 04d704b6 051a04f9     0.Q.s...........
 80058ac:	055d053b 05a0057e 05e305c1 06260604     ;.].~.........&.
 80058bc:	06690647 06ac068a 06ef06cd 07320710     G.i...........2.
 80058cc:	07740753 07b70796 07fa07d9 083d081c     S.t...........=.
 80058dc:	0880085f 08c308a1 090608e4 09490927     _...........'.I.
 80058ec:	098b096a 09ce09ad 0a1109f0 0a540a32     j...........2.T.
 80058fc:	0a970a75 0ad90ab8 0b1c0afb 0b5f0b3e     u...........>._.
 800590c:	0ba20b80 0be40bc3 0c270c06 0c6a0c49     ..........'.I.j.
 800591c:	0cad0c8b 0cef0cce 0d320d11 0d750d53     ..........2.S.u.
 800592c:	0db70d96 0dfa0dd9 0e3c0e1b 0e7f0e5e     ..........<.^...
 800593c:	0ec20ea0 0f040ee3 0f470f25 0f890f68     ........%.G.h...
 800594c:	0fcc0fab 100e0fed 10511030 10931072     ........0.Q.r...
 800595c:	10d610b4 111810f7 115b1139 119d117c     ........9.[.|...
 800596c:	11df11be 12221200 12641243 12a61285     ......".C.d.....
 800597c:	12e912c7 132b130a 136d134c 13af138e     ......+.L.m.....
 800598c:	13f213d0 14341413 14761455 14b81497     ......4.U.v.....
 800599c:	14fa14d9 153c151b 157e155d 15c0159f     ......<.].~.....
 80059ac:	160215e1 16441623 16861665 16c816a7     ....#.D.e.......
 80059bc:	170a16e9 174c172b 178e176d 17d017af     ....+.L.m.......
 80059cc:	181217f1 18541833 18951875 18d718b6     ....3.T.u.......
 80059dc:	191918f8 195b193a 199c197b 19de19bd     ....:.[.{.......
 80059ec:	1a2019ff 1a611a40 1aa31a82 1ae41ac3     .. .@.a.........
 80059fc:	1b261b05 1b671b46 1ba91b88 1bea1bc9     ..&.F.g.........
 8005a0c:	1c2b1c0b 1c6d1c4c 1cae1c8e 1cef1ccf     ..+.L.m.........
 8005a1c:	1d311d10 1d721d51 1db31d93 1df41dd4     ..1.Q.r.........
 8005a2c:	1e351e15 1e771e56 1eb81e97 1ef91ed8     ..5.V.w.........
 8005a3c:	1f3a1f19 1f7b1f5a 1fbc1f9b 1ffd1fdc     ..:.Z.{.........
 8005a4c:	203d201d 207e205e 20bf209f 210020df     . = ^ ~ . . . .!
 8005a5c:	21412120 21812161 21c221a2 220321e2      !A!a!.!.!.!.!."
 8005a6c:	22432223 22842263 22c422a4 230522e4     #"C"c".".".".".#
 8005a7c:	23452325 23862365 23c623a6 240623e6     %#E#e#.#.#.#.#.$
 8005a8c:	24472426 24872467 24c724a7 250724e7     &$G$g$.$.$.$.$.%
 8005a9c:	25472527 25872567 25c725a7 260725e7     '%G%g%.%.%.%.%.&
 8005aac:	26472627 26872667 26c726a7 270726e7     '&G&g&.&.&.&.&.'
 8005abc:	27472727 27872767 27c627a7 280627e6     ''G'g'.'.'.'.'.(
 8005acc:	28462826 28852866 28c528a5 290428e5     &(F(f(.(.(.(.(.)
 8005adc:	29442924 29832964 29c329a3 2a0229e2     $)D)d).).).).).*
 8005aec:	2a412a22 2a802a61 2ac02aa0 2aff2adf     "*A*a*.*.*.*.*.*
 8005afc:	2b3e2b1e 2b7d2b5d 2bbc2b9c 2bfb2bdb     .+>+]+}+.+.+.+.+
 8005b0c:	2c3a2c1a 2c792c59 2cb82c98 2cf62cd7     .,:,Y,y,.,.,.,.,
 8005b1c:	2d352d16 2d742d54 2db22d93 2df12dd2     .-5-T-t-.-.-.-.-
 8005b2c:	2e2f2e10 2e6e2e4f 2eac2e8d 2eeb2ecc     ../.O.n.........
 8005b3c:	2f292f0a 2f672f48 2fa62f86 2fe42fc5     ./)/H/g/././././
 8005b4c:	30223003 30603041 309e307f 30dc30bd     .0"0A0`0.0.0.0.0
 8005b5c:	311a30fb 31583139 31963177 31d331b4     .0.191X1w1.1.1.1
 8005b6c:	321131f2 324f3230 328c326d 32ca32ab     .1.202O2m2.2.2.2
 8005b7c:	330732e9 33453326 33823363 33bf33a1     .2.3&3E3c3.3.3.3
 8005b8c:	33fd33de 343a341b 34773458 34b43496     .3.3.4:4X4w4.4.4
 8005b9c:	34f134d3 352e3510 356b354d 35a8358a     .4.4.5.5M5k5.5.5
 8005bac:	35e535c6 36223603 365e3640 369b367d     .5.5.6"6@6^6}6.6
 8005bbc:	36d736b9 371436f6 37503732 378d376f     .6.6.6.727P7o7.7
 8005bcc:	37c937ab 380637e7 38423824 387e3860     .7.7.7.8$8B8`8~8
 8005bdc:	38ba389c 38f638d8 39323914 396e3950     .8.8.8.8.929P9n9
 8005bec:	39aa398c 39e639c8 3a213a04 3a5d3a3f     .9.9.9.9.:!:?:]:
 8005bfc:	3a993a7b 3ad43ab6 3b103af2 3b4b3b2d     {:.:.:.:.:.;-;K;
 8005c0c:	3b863b69 3bc23ba4 3bfd3bdf 3c383c1b     i;.;.;.;.;.;.<8<
 8005c1c:	3c733c56 3cae3c91 3ce93ccc 3d243d07     V<s<.<.<.<.<.=$=
 8005c2c:	3d5f3d42 3d9a3d7c 3dd53db7 3e0f3df2     B=_=|=.=.=.=.=.>
 8005c3c:	3e4a3e2c 3e843e67 3ebf3ea2 3ef93edc     ,>J>g>.>.>.>.>.>
 8005c4c:	3f333f16 3f6e3f51 3fa83f8b 3fe23fc5     .?3?Q?n?.?.?.?.?
 8005c5c:	401c3fff 40564039 40904073 40ca40ad     .?.@9@V@s@.@.@.@
 8005c6c:	410340e7 413d4120 4177415a 41b04194     .@.A A=AZAwA.A.A
 8005c7c:	41ea41cd 42234207 425d4240 42964279     .A.A.B#B@B]ByB.B
 8005c8c:	42cf42b2 430842ec 43414325 437a435e     .B.B.B.C%CAC^CzC
 8005c9c:	43b34397 43ec43d0 44254408 445d4441     .C.C.C.C.D%DAD]D
 8005cac:	4496447a 44cf44b2 450744eb 453f4523     zD.D.D.D.D.E#E?E
 8005cbc:	4578455c 45b04594 45e845cc 46204604     \ExE.E.E.E.E.F F
 8005ccc:	4658463c 46904674 46c846ac 470046e4     <FXFtF.F.F.F.F.G
 8005cdc:	4738471c 476f4754 47a7478b 47de47c3     .G8GTGoG.G.G.G.G
 8005cec:	481647fa 484d4832 48844869 48bc48a0     .G.H2HMHiH.H.H.H
 8005cfc:	48f348d7 492a490e 49614945 4998497c     .H.H.I*IEIaI|I.I
 8005d0c:	49ce49b3 4a0549ea 4a3c4a20 4a724a57     .I.I.I.J J<JWJrJ
 8005d1c:	4aa94a8e 4adf4ac4 4b154afa 4b4c4b31     .J.J.J.J.J.K1KLK
 8005d2c:	4b824b67 4bb84b9d 4bee4bd3 4c244c09     gK.K.K.K.K.K.L$L
 8005d3c:	4c5a4c3f 4c8f4c75 4cc54caa 4cfb4ce0     ?LZLuL.L.L.L.L.L
 8005d4c:	4d304d15 4d664d4b 4d9b4d80 4dd04db6     .M0MKMfM.M.M.M.M
 8005d5c:	4e054deb 4e3a4e20 4e6f4e55 4ea44e8a     .M.N N:NUNoN.N.N
 8005d6c:	4ed94ebf 4f0e4ef4 4f434f28 4f774f5d     .N.N.N.O(OCO]OwO
 8005d7c:	4fac4f91 4fe04fc6 50144ffa 5049502f     .O.O.O.O.O.P/PIP
 8005d8c:	507d5063 50b15097 50e550cb 511950ff     cP}P.P.P.P.P.P.Q
 8005d9c:	514d5133 51805166 51b4519a 51e751ce     3QMQfQ.Q.Q.Q.Q.Q
 8005dac:	521b5201 524e5235 52825268 52b5529b     .R.R5RNRhR.R.R.R
 8005dbc:	52e852ce 531b5301 534e5334 53815367     .R.R.S.S4SNSgS.S
 8005dcc:	53b3539a 53e653cd 541953ff 544b5432     .S.S.S.S.S.T2TKT
 8005ddc:	547d5464 54b05497 54e254c9 551454fb     dT}T.T.T.T.T.T.U
 8005dec:	5546552d 5578555f 55aa5591 55dc55c3     -UFU_UxU.U.U.U.U
 8005dfc:	560d55f4 563f5626 56705658 56a25689     .U.V&V?VXVpV.V.V
 8005e0c:	56d356ba 570456ec 5735571d 5766574e     .V.V.V.W.W5WNWfW
 8005e1c:	5797577f 57c857b0 57f957e0 58295811     .W.W.W.W.W.W.X)X
 8005e2c:	585a5842 588a5872 58bb58a3 58eb58d3     BXZXrX.X.X.X.X.X
 8005e3c:	591b5903 594b5933 597b5963 59ab5993     .Y.Y3YKYcY{Y.Y.Y
 8005e4c:	59db59c3 5a0a59f3 5a3a5a22 5a6a5a52     .Y.Y.Y.Z"Z:ZRZjZ
 8005e5c:	5a995a81 5ac85ab1 5af75ae0 5b275b0f     .Z.Z.Z.Z.Z.Z.['[
 8005e6c:	5b565b3e 5b845b6d 5bb35b9c 5be25bcb     >[V[m[.[.[.[.[.[
 8005e7c:	5c115bf9 5c3f5c28 5c6d5c56 5c9c5c85     .[.\(\?\V\m\.\.\
 8005e8c:	5cca5cb3 5cf85ce1 5d265d0f 5d545d3d     .\.\.\.\.]&]=]T]
 8005e9c:	5d825d6b 5db05d99 5ddd5dc6 5e0b5df4     k].].].].].].].^
 8005eac:	5e385e21 5e655e4f 5e935e7c 5ec05ea9     !^8^O^e^|^.^.^.^
 8005ebc:	5eed5ed6 5f1a5f03 5f465f30 5f735f5d     .^.^._._0_F_]_s_
 8005ecc:	5fa05f89 5fcc5fb6 5ff95fe2 6025600f     ._._._._._._.`%`
 8005edc:	6051603b 607d6067 60a96093 60d560bf     ;`Q`g`}`.`.`.`.`
 8005eec:	610160eb 612c6117 61586142 6184616e     .`.a.a,aBaXana.a
 8005efc:	61af6199 61da61c5 620561f0 6230621b     .a.a.a.a.a.b.b0b
 8005f0c:	625b6246 62866271 62b1629b 62db62c6     Fb[bqb.b.b.b.b.b
 8005f1c:	630662f1 6330631b 635b6346 63856370     .b.c.c0cFc[cpc.c
 8005f2c:	63af639a 63d963c4 640363ee 642d6418     .c.c.c.c.c.d.d-d
 8005f3c:	64566441 6480646b 64a96495 64d364be     AdVdkd.d.d.d.d.d
 8005f4c:	64fc64e7 65256510 654e6539 65776562     .d.d.e%e9eNebewe
 8005f5c:	65a0658b 65c865b4 65f165dd 66196605     .e.e.e.e.e.e.f.f
 8005f6c:	6642662e 666a6656 6692667e 66ba66a6     .fBfVfjf~f.f.f.f
 8005f7c:	66e266ce 670a66f6 6732671e 67596745     .f.f.f.g.g2gEgYg
 8005f8c:	6781676d 67a86794 67cf67bc 67f667e3     mg.g.g.g.g.g.g.g
 8005f9c:	681e680a 68446831 686b6858 6892687f     .h.h1hDhXhkh.h.h
 8005fac:	68b968a5 68df68cc 690568f2 692c6919     .h.h.h.h.h.i.i,i
 8005fbc:	6952693f 69786965 699e698b 69c469b1     ?iRieixi.i.i.i.i
 8005fcc:	69e969d6 6a0f69fc 6a346a22 6a5a6a47     .i.i.i.j"j4jGjZj
 8005fdc:	6a7f6a6c 6aa46a91 6ac96ab6 6aee6adb     lj.j.j.j.j.j.j.j
 8005fec:	6b136b00 6b376b25 6b5c6b4a 6b806b6e     .k.k%k7kJk\knk.k
 8005ffc:	6ba56b92 6bc96bb7 6bed6bdb 6c116bff     .k.k.k.k.k.k.k.l
 800600c:	6c356c23 6c586c47 6c7c6c6a 6ca06c8e     #l5lGlXljl|l.l.l
 800601c:	6cc36cb1 6ce66cd5 6d096cf8 6d2c6d1b     .l.l.l.l.l.m.m,m
 800602c:	6d4f6d3e 6d726d61 6d956d84 6db76da6     >mOmamrm.m.m.m.m
 800603c:	6dda6dc9 6dfc6deb 6e1e6e0d 6e416e30     .m.m.m.m.n.n0nAn
 800604c:	6e636e52 6e846e73 6ea66e95 6ec86eb7     Rncnsn.n.n.n.n.n
 800605c:	00006ed9                                .n..

08006060 <PWM_0_compare_config>:
	...

08006068 <PWM_0_gpio_out_config>:
 8006068:	00000098 00010000 00000004              ............

08006074 <INTERRUPT_0>:
 8006074:	01003f39                                9?..

08006078 <group_init_handle0>:
	...

0800608c <group_init_handle1>:
	...

080060a0 <group_init_handle2>:
	...

080060b4 <group_init_handle3>:
	...

080060c8 <global_config>:
 80060c8:	00000000 00000003 00000000 00000000     ................
	...
 80060e0:	01040250 00010000 00000000 00010000     P...............
 80060f0:	01010101                                ....

080060f4 <global_iclass_config>:
 80060f4:	00000000                                ....

080060f8 <backgnd_config>:
 80060f8:	00000005 00000000 00000000              ............

08006104 <npio2_hw>:
 8006104:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 8006114:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 8006124:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 8006134:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 8006144:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 8006154:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 8006164:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 8006174:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

08006184 <two_over_pi>:
 8006184:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 8006194:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 80061a4:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 80061b4:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 80061c4:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 80061d4:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 80061e4:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 80061f4:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 8006204:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 8006214:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 8006224:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 8006234:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 8006244:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 8006254:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 8006264:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 8006274:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 8006284:	0060e27b 00c08c6b                       {.`.k...

0800628c <init_jk>:
 800628c:	00000002 00000003 00000004 00000006     ................
 800629c:	00000000                                ....

080062a0 <PIo2>:
 80062a0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 80062b0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 80062c0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 80062d0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

Disassembly of section .ram_code:

10000800 <PWM_SVM_lSymCompValUpdate>:
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        (uint16_t)(HandlePtr->v_tb + (uint16_t)((uint16_t) HandlePtr->tb >> (uint16_t) 1) + (uint16_t) HandlePtr->ta));

}
static void PWM_SVM_lSymCompValUpdate(PWM_SVM_t* const HandlePtr)
{
10000800:	b480      	push	{r7}
10000802:	b083      	sub	sp, #12
10000804:	af00      	add	r7, sp, #0
10000806:	6078      	str	r0, [r7, #4]
  /*Update the compare register with appropriate value  based on sector*/
  switch ((HandlePtr->sector & 7U))
10000808:	687b      	ldr	r3, [r7, #4]
1000080a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1000080e:	f003 0307 	and.w	r3, r3, #7
10000812:	2b04      	cmp	r3, #4
10000814:	f200 8086 	bhi.w	10000924 <__initial_sp+0x124>
10000818:	a201      	add	r2, pc, #4	; (adr r2, 10000820 <__initial_sp+0x20>)
1000081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000081e:	bf00      	nop
10000820:	10000835 	.word	0x10000835
10000824:	10000865 	.word	0x10000865
10000828:	10000895 	.word	0x10000895
1000082c:	100008c5 	.word	0x100008c5
10000830:	100008f5 	.word	0x100008f5
    {
    case 0:/*sector 0*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000834:	687b      	ldr	r3, [r7, #4]
10000836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000838:	687a      	ldr	r2, [r7, #4]
1000083a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000083e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
10000840:	687b      	ldr	r3, [r7, #4]
10000842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000844:	687a      	ldr	r2, [r7, #4]
10000846:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000084a:	4611      	mov	r1, r2
1000084c:	687a      	ldr	r2, [r7, #4]
1000084e:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000852:	440a      	add	r2, r1
10000854:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000856:	687b      	ldr	r3, [r7, #4]
10000858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000085a:	687a      	ldr	r2, [r7, #4]
1000085c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000860:	601a      	str	r2, [r3, #0]
       break;
10000862:	e077      	b.n	10000954 <__initial_sp+0x154>
    case 1:/*sector 1*/
      *HandlePtr->phaseu_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->ta);
10000864:	687b      	ldr	r3, [r7, #4]
10000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000868:	687a      	ldr	r2, [r7, #4]
1000086a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000086e:	4611      	mov	r1, r2
10000870:	687a      	ldr	r2, [r7, #4]
10000872:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
10000876:	440a      	add	r2, r1
10000878:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb);
1000087a:	687b      	ldr	r3, [r7, #4]
1000087c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000087e:	687a      	ldr	r2, [r7, #4]
10000880:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000884:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000886:	687b      	ldr	r3, [r7, #4]
10000888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000088a:	687a      	ldr	r2, [r7, #4]
1000088c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000890:	601a      	str	r2, [r3, #0]
       break;
10000892:	e05f      	b.n	10000954 <__initial_sp+0x154>
    case 2:/*sector 2*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
10000894:	687b      	ldr	r3, [r7, #4]
10000896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000898:	687a      	ldr	r2, [r7, #4]
1000089a:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000089e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_tb;
100008a0:	687b      	ldr	r3, [r7, #4]
100008a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008a4:	687a      	ldr	r2, [r7, #4]
100008a6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008aa:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
100008ac:	687b      	ldr	r3, [r7, #4]
100008ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008b0:	687a      	ldr	r2, [r7, #4]
100008b2:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008b6:	4611      	mov	r1, r2
100008b8:	687a      	ldr	r2, [r7, #4]
100008ba:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
100008be:	440a      	add	r2, r1
100008c0:	601a      	str	r2, [r3, #0]
       break;
100008c2:	e047      	b.n	10000954 <__initial_sp+0x154>
    case 3:/*sector 3*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
100008c4:	687b      	ldr	r3, [r7, #4]
100008c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008c8:	687a      	ldr	r2, [r7, #4]
100008ca:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
100008ce:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t)( HandlePtr->v_tb+ HandlePtr->ta);
100008d0:	687b      	ldr	r3, [r7, #4]
100008d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008d4:	687a      	ldr	r2, [r7, #4]
100008d6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008da:	4611      	mov	r1, r2
100008dc:	687a      	ldr	r2, [r7, #4]
100008de:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
100008e2:	440a      	add	r2, r1
100008e4:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
100008e6:	687b      	ldr	r3, [r7, #4]
100008e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008ea:	687a      	ldr	r2, [r7, #4]
100008ec:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008f0:	601a      	str	r2, [r3, #0]
       break;
100008f2:	e02f      	b.n	10000954 <__initial_sp+0x154>
    case 4:/*sector 4*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->tb;
100008f4:	687b      	ldr	r3, [r7, #4]
100008f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008f8:	687a      	ldr	r2, [r7, #4]
100008fa:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008fe:	4611      	mov	r1, r2
10000900:	687a      	ldr	r2, [r7, #4]
10000902:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000906:	440a      	add	r2, r1
10000908:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
1000090a:	687b      	ldr	r3, [r7, #4]
1000090c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000090e:	687a      	ldr	r2, [r7, #4]
10000910:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000914:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
10000916:	687b      	ldr	r3, [r7, #4]
10000918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000091a:	687a      	ldr	r2, [r7, #4]
1000091c:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000920:	601a      	str	r2, [r3, #0]
       break;
10000922:	e017      	b.n	10000954 <__initial_sp+0x154>
    default:/*sector 5*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000924:	687b      	ldr	r3, [r7, #4]
10000926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000928:	687a      	ldr	r2, [r7, #4]
1000092a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000092e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
10000930:	687b      	ldr	r3, [r7, #4]
10000932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000934:	687a      	ldr	r2, [r7, #4]
10000936:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000093a:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->ta;
1000093c:	687b      	ldr	r3, [r7, #4]
1000093e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10000940:	687a      	ldr	r2, [r7, #4]
10000942:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000946:	4611      	mov	r1, r2
10000948:	687a      	ldr	r2, [r7, #4]
1000094a:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1000094e:	440a      	add	r2, r1
10000950:	601a      	str	r2, [r3, #0]
      break;
10000952:	bf00      	nop
    }
}
10000954:	370c      	adds	r7, #12
10000956:	46bd      	mov	sp, r7
10000958:	f85d 7b04 	ldr.w	r7, [sp], #4
1000095c:	4770      	bx	lr
1000095e:	bf00      	nop

10000960 <PWM_SVM_CalCmpValueSym7>:

/**
 * This function calculates the CCU8 slice compare valuefor Symmetric 7-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym7(PWM_SVM_t* const HandlePtr)
{
10000960:	b580      	push	{r7, lr}
10000962:	b082      	sub	sp, #8
10000964:	af00      	add	r7, sp, #0
10000966:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < (uint16_t) HandlePtr->tmin)
10000968:	687b      	ldr	r3, [r7, #4]
1000096a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1000096e:	687b      	ldr	r3, [r7, #4]
10000970:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000974:	429a      	cmp	r2, r3
10000976:	d205      	bcs.n	10000984 <PWM_SVM_CalCmpValueSym7+0x24>
  {
    HandlePtr->ta = (uint16_t) HandlePtr->tmin;
10000978:	687b      	ldr	r3, [r7, #4]
1000097a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000097e:	687b      	ldr	r3, [r7, #4]
10000980:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < (uint16_t) HandlePtr->tmin)
10000984:	687b      	ldr	r3, [r7, #4]
10000986:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
1000098a:	687b      	ldr	r3, [r7, #4]
1000098c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000990:	429a      	cmp	r2, r3
10000992:	d205      	bcs.n	100009a0 <PWM_SVM_CalCmpValueSym7+0x40>
  {
    HandlePtr->tb = (uint16_t) HandlePtr->tmin;
10000994:	687b      	ldr	r3, [r7, #4]
10000996:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000099a:	687b      	ldr	r3, [r7, #4]
1000099c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }

  HandlePtr->v_ta = (uint16_t)(((uint32_t) HandlePtr->period + (uint16_t) HandlePtr->ta) + (uint16_t) HandlePtr->tb)
100009a0:	687b      	ldr	r3, [r7, #4]
100009a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009a6:	b29a      	uxth	r2, r3
100009a8:	687b      	ldr	r3, [r7, #4]
100009aa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
100009ae:	4413      	add	r3, r2
100009b0:	b29a      	uxth	r2, r3
100009b2:	687b      	ldr	r3, [r7, #4]
100009b4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009b8:	4413      	add	r3, r2
100009ba:	b29b      	uxth	r3, r3
100009bc:	085b      	lsrs	r3, r3, #1
100009be:	b29a      	uxth	r2, r3
100009c0:	687b      	ldr	r3, [r7, #4]
100009c2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
                     >> (uint16_t) 1;
  HandlePtr->v_tb = (uint16_t)((uint16_t) HandlePtr->period - ((uint16_t) HandlePtr->ta + (uint16_t) HandlePtr->tb))
100009c6:	687b      	ldr	r3, [r7, #4]
100009c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009cc:	b29a      	uxth	r2, r3
100009ce:	687b      	ldr	r3, [r7, #4]
100009d0:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
100009d4:	687b      	ldr	r3, [r7, #4]
100009d6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009da:	440b      	add	r3, r1
100009dc:	b29b      	uxth	r3, r3
100009de:	1ad3      	subs	r3, r2, r3
100009e0:	b29b      	uxth	r3, r3
100009e2:	085b      	lsrs	r3, r3, #1
100009e4:	b29a      	uxth	r2, r3
100009e6:	687b      	ldr	r3, [r7, #4]
100009e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
100009ec:	6878      	ldr	r0, [r7, #4]
100009ee:	f7ff ff07 	bl	10000800 <PWM_SVM_lSymCompValUpdate>

}
100009f2:	3708      	adds	r7, #8
100009f4:	46bd      	mov	sp, r7
100009f6:	bd80      	pop	{r7, pc}

100009f8 <PWM_SVM_CalCmpValueSym5>:

/**
 * This function calculates the CCU8 slice compare value for Symmetric 5-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym5(PWM_SVM_t* const HandlePtr)
{
100009f8:	b580      	push	{r7, lr}
100009fa:	b082      	sub	sp, #8
100009fc:	af00      	add	r7, sp, #0
100009fe:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < HandlePtr->tmin)
10000a00:	687b      	ldr	r3, [r7, #4]
10000a02:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000a06:	687b      	ldr	r3, [r7, #4]
10000a08:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a0c:	429a      	cmp	r2, r3
10000a0e:	d205      	bcs.n	10000a1c <PWM_SVM_CalCmpValueSym5+0x24>
  {
    HandlePtr->ta = HandlePtr->tmin;
10000a10:	687b      	ldr	r3, [r7, #4]
10000a12:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a16:	687b      	ldr	r3, [r7, #4]
10000a18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < HandlePtr->tmin)
10000a1c:	687b      	ldr	r3, [r7, #4]
10000a1e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
10000a22:	687b      	ldr	r3, [r7, #4]
10000a24:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a28:	429a      	cmp	r2, r3
10000a2a:	d205      	bcs.n	10000a38 <PWM_SVM_CalCmpValueSym5+0x40>
  {
    HandlePtr->tb = HandlePtr->tmin;
10000a2c:	687b      	ldr	r3, [r7, #4]
10000a2e:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a32:	687b      	ldr	r3, [r7, #4]
10000a34:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }
  HandlePtr->v_ta = (uint16_t) HandlePtr->period + 1U;
10000a38:	687b      	ldr	r3, [r7, #4]
10000a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a3e:	b29b      	uxth	r3, r3
10000a40:	3301      	adds	r3, #1
10000a42:	b29a      	uxth	r2, r3
10000a44:	687b      	ldr	r3, [r7, #4]
10000a46:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  HandlePtr->v_tb = ((uint16_t) HandlePtr->period - HandlePtr->ta) - HandlePtr->tb;
10000a4a:	687b      	ldr	r3, [r7, #4]
10000a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a50:	b29a      	uxth	r2, r3
10000a52:	687b      	ldr	r3, [r7, #4]
10000a54:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000a58:	1ad3      	subs	r3, r2, r3
10000a5a:	b29a      	uxth	r2, r3
10000a5c:	687b      	ldr	r3, [r7, #4]
10000a5e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000a62:	1ad3      	subs	r3, r2, r3
10000a64:	b29a      	uxth	r2, r3
10000a66:	687b      	ldr	r3, [r7, #4]
10000a68:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
10000a6c:	6878      	ldr	r0, [r7, #4]
10000a6e:	f7ff fec7 	bl	10000800 <PWM_SVM_lSymCompValUpdate>
}
10000a72:	3708      	adds	r7, #8
10000a74:	46bd      	mov	sp, r7
10000a76:	bd80      	pop	{r7, pc}

10000a78 <PWM_SVM_TimecalcUsingLUT>:
#if(1U == PWM_SVM_IS_LUT_ENABLE)
/*
 * SVM Segment Time calculation using Look up table
 */
void PWM_SVM_TimecalcUsingLUT(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000a78:	b480      	push	{r7}
10000a7a:	b08b      	sub	sp, #44	; 0x2c
10000a7c:	af00      	add	r7, sp, #0
10000a7e:	60f8      	str	r0, [r7, #12]
10000a80:	460b      	mov	r3, r1
10000a82:	607a      	str	r2, [r7, #4]
10000a84:	817b      	strh	r3, [r7, #10]
  uint16_t ta_tb,ta;
  uint32_t Dividend_Sine, Divisor_Sine;        /*Ts x sin(θrel), sin(θrel)+sin(60°-θrel)*/
  XMC_ASSERT("PWM_SVM_lTimecalcUsingLUT:NULL Handle Pointer",
      (HandlePtr != (PWM_SVM_t *)NULL));

  angletemp = (uint32_t)((Angle & (uint32_t)0xFFFFFF) >> 14U) * 6U;
10000a86:	687b      	ldr	r3, [r7, #4]
10000a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
10000a8c:	0b9a      	lsrs	r2, r3, #14
10000a8e:	4613      	mov	r3, r2
10000a90:	005b      	lsls	r3, r3, #1
10000a92:	4413      	add	r3, r2
10000a94:	005b      	lsls	r3, r3, #1
10000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HandlePtr->sector_angle = (uint32_t)(angletemp & (uint32_t) 0x003FF);
10000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000a9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
10000a9e:	68fb      	ldr	r3, [r7, #12]
10000aa0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  HandlePtr->sector = (uint32_t)((angletemp >> 10U) & 7U);
10000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000aa6:	0a9b      	lsrs	r3, r3, #10
10000aa8:	f003 0207 	and.w	r2, r3, #7
10000aac:	68fb      	ldr	r3, [r7, #12]
10000aae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  if ((uint16_t)Amplitude > (HandlePtr->max_amplitude))
10000ab2:	68fb      	ldr	r3, [r7, #12]
10000ab4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ab8:	897a      	ldrh	r2, [r7, #10]
10000aba:	429a      	cmp	r2, r3
10000abc:	d903      	bls.n	10000ac6 <PWM_SVM_TimecalcUsingLUT+0x4e>
  {
    Amplitude = HandlePtr->max_amplitude;
10000abe:	68fb      	ldr	r3, [r7, #12]
10000ac0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ac4:	817b      	strh	r3, [r7, #10]
  }
  HandlePtr->tb = (uint16_t)((Amplitude* Sinus60_tab[1023U - HandlePtr->sector_angle])>> 15U);
10000ac6:	897a      	ldrh	r2, [r7, #10]
10000ac8:	68fb      	ldr	r3, [r7, #12]
10000aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ace:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000ad2:	3303      	adds	r3, #3
10000ad4:	4949      	ldr	r1, [pc, #292]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000ad6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
10000ada:	fb03 f302 	mul.w	r3, r3, r2
10000ade:	13db      	asrs	r3, r3, #15
10000ae0:	b29a      	uxth	r2, r3
10000ae2:	68fb      	ldr	r3, [r7, #12]
10000ae4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  HandlePtr->tb = (uint16_t)((HandlePtr->tb * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000ae8:	68fb      	ldr	r3, [r7, #12]
10000aea:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000aee:	461a      	mov	r2, r3
10000af0:	68fb      	ldr	r3, [r7, #12]
10000af2:	681b      	ldr	r3, [r3, #0]
10000af4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000af8:	fb03 f302 	mul.w	r3, r3, r2
10000afc:	129b      	asrs	r3, r3, #10
10000afe:	b29a      	uxth	r2, r3
10000b00:	68fb      	ldr	r3, [r7, #12]
10000b02:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  HandlePtr->ta = (uint16_t)((Amplitude* Sinus60_tab[HandlePtr->sector_angle])>> 15U);
10000b06:	897b      	ldrh	r3, [r7, #10]
10000b08:	68fa      	ldr	r2, [r7, #12]
10000b0a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b0e:	493b      	ldr	r1, [pc, #236]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b14:	fb02 f303 	mul.w	r3, r2, r3
10000b18:	13db      	asrs	r3, r3, #15
10000b1a:	b29a      	uxth	r2, r3
10000b1c:	68fb      	ldr	r3, [r7, #12]
10000b1e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  HandlePtr->ta = (uint16_t)((HandlePtr->ta * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000b22:	68fb      	ldr	r3, [r7, #12]
10000b24:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000b28:	461a      	mov	r2, r3
10000b2a:	68fb      	ldr	r3, [r7, #12]
10000b2c:	681b      	ldr	r3, [r3, #0]
10000b2e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000b32:	fb03 f302 	mul.w	r3, r3, r2
10000b36:	129b      	asrs	r3, r3, #10
10000b38:	b29a      	uxth	r2, r3
10000b3a:	68fb      	ldr	r3, [r7, #12]
10000b3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ta_tb = HandlePtr->ta + HandlePtr->tb;
10000b40:	68fb      	ldr	r3, [r7, #12]
10000b42:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000b46:	68fb      	ldr	r3, [r7, #12]
10000b48:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000b4c:	4413      	add	r3, r2
10000b4e:	847b      	strh	r3, [r7, #34]	; 0x22
  HandlePtr->t0 = (uint16_t)(HandlePtr->period - ta_tb);
10000b50:	68fb      	ldr	r3, [r7, #12]
10000b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b56:	b29a      	uxth	r2, r3
10000b58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10000b5a:	1ad3      	subs	r3, r2, r3
10000b5c:	b29a      	uxth	r2, r3
10000b5e:	68fb      	ldr	r3, [r7, #12]
10000b60:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  if (ta_tb > (HandlePtr->period))
10000b64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10000b66:	68fb      	ldr	r3, [r7, #12]
10000b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b6c:	429a      	cmp	r2, r3
10000b6e:	d93f      	bls.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
  {
    if (HandlePtr->over_modulation_enable == 1U)
10000b70:	68fb      	ldr	r3, [r7, #12]
10000b72:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
10000b76:	2b01      	cmp	r3, #1
10000b78:	d13a      	bne.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
      /* Above Ta and Tb are not used for SVM PWM.*/

      /* Calculate new T1 and T2 of maximum Vref on SVM Hexagon edges,
       * where T0 = 0 (i.e.: T1+T2 = PERIOD_REG). Relative angle θrel kept the same.
       */
      Dividend_Sine = HandlePtr->period * Sinus60_tab[HandlePtr->sector_angle];
10000b7a:	68fb      	ldr	r3, [r7, #12]
10000b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b80:	68fa      	ldr	r2, [r7, #12]
10000b82:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b86:	491d      	ldr	r1, [pc, #116]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b8c:	fb02 f303 	mul.w	r3, r2, r3
10000b90:	61fb      	str	r3, [r7, #28]
      Divisor_Sine  = Sinus60_tab[HandlePtr->sector_angle] + Sinus60_tab[1023U - HandlePtr->sector_angle];
10000b92:	68fb      	ldr	r3, [r7, #12]
10000b94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000b98:	4a18      	ldr	r2, [pc, #96]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000b9e:	4619      	mov	r1, r3
10000ba0:	68fb      	ldr	r3, [r7, #12]
10000ba2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ba6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000baa:	3303      	adds	r3, #3
10000bac:	4a13      	ldr	r2, [pc, #76]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000bb2:	440b      	add	r3, r1
10000bb4:	61bb      	str	r3, [r7, #24]
      /* Unsigned Div. Dividend << SHIFT_OVERMODULATION, Quotient >> SHIFT_OVERMODULATION, Divisor no shift.*/
      MATH->DIVCON = (0x00008004 | (PWM_SVM_SHIFT_OVERMODULATION << 16U) | (PWM_SVM_SHIFT_OVERMODULATION << 8U));
      MATH->DVD = Dividend_Sine;
      MATH->DVS = Divisor_Sine;
      #else
      ta = (uint16_t)(Dividend_Sine/Divisor_Sine);
10000bb6:	69fa      	ldr	r2, [r7, #28]
10000bb8:	69bb      	ldr	r3, [r7, #24]
10000bba:	fbb2 f3f3 	udiv	r3, r2, r3
10000bbe:	82fb      	strh	r3, [r7, #22]
      #endif
      /*###* CPU computes the following simultaneously when DIV #2 is computing ###*/
      HandlePtr->t0 = 0U;
10000bc0:	68fb      	ldr	r3, [r7, #12]
10000bc2:	2200      	movs	r2, #0
10000bc4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
      ta_tb = (uint16_t)HandlePtr->period;                /* Make sure below T0/2 >= 0.*/
10000bc8:	68fb      	ldr	r3, [r7, #12]
10000bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bce:	847b      	strh	r3, [r7, #34]	; 0x22
      #if defined (MATH)
      /*###* Results of DIV #2 for T2 of Over-Modulation ###*/
      while (MATH->DIVST) continue;          /* Wait if DIV is still running calculation.*/
      ta = MATH->QUOT;     /* Read DIV Quotient result. T2 = Ts x sin(theta) / (sin(theta)+sin(60-theta)).*/
      #endif
      HandlePtr->ta = ta;
10000bd0:	68fb      	ldr	r3, [r7, #12]
10000bd2:	8afa      	ldrh	r2, [r7, #22]
10000bd4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
      /* Ta + Tb = PERIOD_REG for Vref on SVM Hexagon edges.*/
      HandlePtr->tb = (uint16_t)(HandlePtr->period - HandlePtr->ta);
10000bd8:	68fb      	ldr	r3, [r7, #12]
10000bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bde:	b29a      	uxth	r2, r3
10000be0:	68fb      	ldr	r3, [r7, #12]
10000be2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000be6:	1ad3      	subs	r3, r2, r3
10000be8:	b29a      	uxth	r2, r3
10000bea:	68fb      	ldr	r3, [r7, #12]
10000bec:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

    }
  }
}
10000bf0:	372c      	adds	r7, #44	; 0x2c
10000bf2:	46bd      	mov	sp, r7
10000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bf8:	4770      	bx	lr
10000bfa:	bf00      	nop
10000bfc:	0800585c 	.word	0x0800585c

10000c00 <PWM_SVM_SVMUpdate>:
 * This is the SVM algorithm for sinusoidal commutation.
 * It updates the compare registers of the CCU8 slices as per calculated
 * duty cycle.
 */
void PWM_SVM_SVMUpdate(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000c00:	b580      	push	{r7, lr}
10000c02:	b086      	sub	sp, #24
10000c04:	af00      	add	r7, sp, #0
10000c06:	60f8      	str	r0, [r7, #12]
10000c08:	460b      	mov	r3, r1
10000c0a:	607a      	str	r2, [r7, #4]
10000c0c:	817b      	strh	r3, [r7, #10]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
10000c0e:	68fb      	ldr	r3, [r7, #12]
10000c10:	681b      	ldr	r3, [r3, #0]
10000c12:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_SVM_SVMUpdate:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));

  /*This function calculates segment time ta, tb using CORDIC or LUT as per UI configuration */
  HandlePtr->seg_time_calc_ptr(HandlePtr, (uint16_t) Amplitude, (uint32_t) Angle);
10000c14:	68fb      	ldr	r3, [r7, #12]
10000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10000c1a:	897a      	ldrh	r2, [r7, #10]
10000c1c:	68f8      	ldr	r0, [r7, #12]
10000c1e:	4611      	mov	r1, r2
10000c20:	687a      	ldr	r2, [r7, #4]
10000c22:	4798      	blx	r3
  /*This function calculates and updates compare values in compare register*/
  HandlePtr->svm_schemesel_ptr(HandlePtr);
10000c24:	68fb      	ldr	r3, [r7, #12]
10000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000c2a:	68f8      	ldr	r0, [r7, #12]
10000c2c:	4798      	blx	r3

  /*Enable the shadow transfer for all three slice*/
  HandlePtr->global_ptr->GCSS |= svmptr->shadow_transfer_mask;
10000c2e:	68fb      	ldr	r3, [r7, #12]
10000c30:	685b      	ldr	r3, [r3, #4]
10000c32:	68fa      	ldr	r2, [r7, #12]
10000c34:	6852      	ldr	r2, [r2, #4]
10000c36:	6911      	ldr	r1, [r2, #16]
10000c38:	697a      	ldr	r2, [r7, #20]
10000c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
10000c3c:	430a      	orrs	r2, r1
10000c3e:	611a      	str	r2, [r3, #16]
}
10000c40:	3718      	adds	r7, #24
10000c42:	46bd      	mov	sp, r7
10000c44:	bd80      	pop	{r7, pc}
10000c46:	bf00      	nop
