   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "cpu_core.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .rodata.CPU_CntLeadZerosTbl,"a",%progbits
  20              	 .align 2
  23              	CPU_CntLeadZerosTbl:
  24 0000 08       	 .byte 8
  25 0001 07       	 .byte 7
  26 0002 06       	 .byte 6
  27 0003 06       	 .byte 6
  28 0004 05       	 .byte 5
  29 0005 05       	 .byte 5
  30 0006 05       	 .byte 5
  31 0007 05       	 .byte 5
  32 0008 04       	 .byte 4
  33 0009 04       	 .byte 4
  34 000a 04       	 .byte 4
  35 000b 04       	 .byte 4
  36 000c 04       	 .byte 4
  37 000d 04       	 .byte 4
  38 000e 04       	 .byte 4
  39 000f 04       	 .byte 4
  40 0010 03       	 .byte 3
  41 0011 03       	 .byte 3
  42 0012 03       	 .byte 3
  43 0013 03       	 .byte 3
  44 0014 03       	 .byte 3
  45 0015 03       	 .byte 3
  46 0016 03       	 .byte 3
  47 0017 03       	 .byte 3
  48 0018 03       	 .byte 3
  49 0019 03       	 .byte 3
  50 001a 03       	 .byte 3
  51 001b 03       	 .byte 3
  52 001c 03       	 .byte 3
  53 001d 03       	 .byte 3
  54 001e 03       	 .byte 3
  55 001f 03       	 .byte 3
  56 0020 02       	 .byte 2
  57 0021 02       	 .byte 2
  58 0022 02       	 .byte 2
  59 0023 02       	 .byte 2
  60 0024 02       	 .byte 2
  61 0025 02       	 .byte 2
  62 0026 02       	 .byte 2
  63 0027 02       	 .byte 2
  64 0028 02       	 .byte 2
  65 0029 02       	 .byte 2
  66 002a 02       	 .byte 2
  67 002b 02       	 .byte 2
  68 002c 02       	 .byte 2
  69 002d 02       	 .byte 2
  70 002e 02       	 .byte 2
  71 002f 02       	 .byte 2
  72 0030 02       	 .byte 2
  73 0031 02       	 .byte 2
  74 0032 02       	 .byte 2
  75 0033 02       	 .byte 2
  76 0034 02       	 .byte 2
  77 0035 02       	 .byte 2
  78 0036 02       	 .byte 2
  79 0037 02       	 .byte 2
  80 0038 02       	 .byte 2
  81 0039 02       	 .byte 2
  82 003a 02       	 .byte 2
  83 003b 02       	 .byte 2
  84 003c 02       	 .byte 2
  85 003d 02       	 .byte 2
  86 003e 02       	 .byte 2
  87 003f 02       	 .byte 2
  88 0040 01       	 .byte 1
  89 0041 01       	 .byte 1
  90 0042 01       	 .byte 1
  91 0043 01       	 .byte 1
  92 0044 01       	 .byte 1
  93 0045 01       	 .byte 1
  94 0046 01       	 .byte 1
  95 0047 01       	 .byte 1
  96 0048 01       	 .byte 1
  97 0049 01       	 .byte 1
  98 004a 01       	 .byte 1
  99 004b 01       	 .byte 1
 100 004c 01       	 .byte 1
 101 004d 01       	 .byte 1
 102 004e 01       	 .byte 1
 103 004f 01       	 .byte 1
 104 0050 01       	 .byte 1
 105 0051 01       	 .byte 1
 106 0052 01       	 .byte 1
 107 0053 01       	 .byte 1
 108 0054 01       	 .byte 1
 109 0055 01       	 .byte 1
 110 0056 01       	 .byte 1
 111 0057 01       	 .byte 1
 112 0058 01       	 .byte 1
 113 0059 01       	 .byte 1
 114 005a 01       	 .byte 1
 115 005b 01       	 .byte 1
 116 005c 01       	 .byte 1
 117 005d 01       	 .byte 1
 118 005e 01       	 .byte 1
 119 005f 01       	 .byte 1
 120 0060 01       	 .byte 1
 121 0061 01       	 .byte 1
 122 0062 01       	 .byte 1
 123 0063 01       	 .byte 1
 124 0064 01       	 .byte 1
 125 0065 01       	 .byte 1
 126 0066 01       	 .byte 1
 127 0067 01       	 .byte 1
 128 0068 01       	 .byte 1
 129 0069 01       	 .byte 1
 130 006a 01       	 .byte 1
 131 006b 01       	 .byte 1
 132 006c 01       	 .byte 1
 133 006d 01       	 .byte 1
 134 006e 01       	 .byte 1
 135 006f 01       	 .byte 1
 136 0070 01       	 .byte 1
 137 0071 01       	 .byte 1
 138 0072 01       	 .byte 1
 139 0073 01       	 .byte 1
 140 0074 01       	 .byte 1
 141 0075 01       	 .byte 1
 142 0076 01       	 .byte 1
 143 0077 01       	 .byte 1
 144 0078 01       	 .byte 1
 145 0079 01       	 .byte 1
 146 007a 01       	 .byte 1
 147 007b 01       	 .byte 1
 148 007c 01       	 .byte 1
 149 007d 01       	 .byte 1
 150 007e 01       	 .byte 1
 151 007f 01       	 .byte 1
 152 0080 00       	 .byte 0
 153 0081 00       	 .byte 0
 154 0082 00       	 .byte 0
 155 0083 00       	 .byte 0
 156 0084 00       	 .byte 0
 157 0085 00       	 .byte 0
 158 0086 00       	 .byte 0
 159 0087 00       	 .byte 0
 160 0088 00       	 .byte 0
 161 0089 00       	 .byte 0
 162 008a 00       	 .byte 0
 163 008b 00       	 .byte 0
 164 008c 00       	 .byte 0
 165 008d 00       	 .byte 0
 166 008e 00       	 .byte 0
 167 008f 00       	 .byte 0
 168 0090 00       	 .byte 0
 169 0091 00       	 .byte 0
 170 0092 00       	 .byte 0
 171 0093 00       	 .byte 0
 172 0094 00       	 .byte 0
 173 0095 00       	 .byte 0
 174 0096 00       	 .byte 0
 175 0097 00       	 .byte 0
 176 0098 00       	 .byte 0
 177 0099 00       	 .byte 0
 178 009a 00       	 .byte 0
 179 009b 00       	 .byte 0
 180 009c 00       	 .byte 0
 181 009d 00       	 .byte 0
 182 009e 00       	 .byte 0
 183 009f 00       	 .byte 0
 184 00a0 00       	 .byte 0
 185 00a1 00       	 .byte 0
 186 00a2 00       	 .byte 0
 187 00a3 00       	 .byte 0
 188 00a4 00       	 .byte 0
 189 00a5 00       	 .byte 0
 190 00a6 00       	 .byte 0
 191 00a7 00       	 .byte 0
 192 00a8 00       	 .byte 0
 193 00a9 00       	 .byte 0
 194 00aa 00       	 .byte 0
 195 00ab 00       	 .byte 0
 196 00ac 00       	 .byte 0
 197 00ad 00       	 .byte 0
 198 00ae 00       	 .byte 0
 199 00af 00       	 .byte 0
 200 00b0 00       	 .byte 0
 201 00b1 00       	 .byte 0
 202 00b2 00       	 .byte 0
 203 00b3 00       	 .byte 0
 204 00b4 00       	 .byte 0
 205 00b5 00       	 .byte 0
 206 00b6 00       	 .byte 0
 207 00b7 00       	 .byte 0
 208 00b8 00       	 .byte 0
 209 00b9 00       	 .byte 0
 210 00ba 00       	 .byte 0
 211 00bb 00       	 .byte 0
 212 00bc 00       	 .byte 0
 213 00bd 00       	 .byte 0
 214 00be 00       	 .byte 0
 215 00bf 00       	 .byte 0
 216 00c0 00       	 .byte 0
 217 00c1 00       	 .byte 0
 218 00c2 00       	 .byte 0
 219 00c3 00       	 .byte 0
 220 00c4 00       	 .byte 0
 221 00c5 00       	 .byte 0
 222 00c6 00       	 .byte 0
 223 00c7 00       	 .byte 0
 224 00c8 00       	 .byte 0
 225 00c9 00       	 .byte 0
 226 00ca 00       	 .byte 0
 227 00cb 00       	 .byte 0
 228 00cc 00       	 .byte 0
 229 00cd 00       	 .byte 0
 230 00ce 00       	 .byte 0
 231 00cf 00       	 .byte 0
 232 00d0 00       	 .byte 0
 233 00d1 00       	 .byte 0
 234 00d2 00       	 .byte 0
 235 00d3 00       	 .byte 0
 236 00d4 00       	 .byte 0
 237 00d5 00       	 .byte 0
 238 00d6 00       	 .byte 0
 239 00d7 00       	 .byte 0
 240 00d8 00       	 .byte 0
 241 00d9 00       	 .byte 0
 242 00da 00       	 .byte 0
 243 00db 00       	 .byte 0
 244 00dc 00       	 .byte 0
 245 00dd 00       	 .byte 0
 246 00de 00       	 .byte 0
 247 00df 00       	 .byte 0
 248 00e0 00       	 .byte 0
 249 00e1 00       	 .byte 0
 250 00e2 00       	 .byte 0
 251 00e3 00       	 .byte 0
 252 00e4 00       	 .byte 0
 253 00e5 00       	 .byte 0
 254 00e6 00       	 .byte 0
 255 00e7 00       	 .byte 0
 256 00e8 00       	 .byte 0
 257 00e9 00       	 .byte 0
 258 00ea 00       	 .byte 0
 259 00eb 00       	 .byte 0
 260 00ec 00       	 .byte 0
 261 00ed 00       	 .byte 0
 262 00ee 00       	 .byte 0
 263 00ef 00       	 .byte 0
 264 00f0 00       	 .byte 0
 265 00f1 00       	 .byte 0
 266 00f2 00       	 .byte 0
 267 00f3 00       	 .byte 0
 268 00f4 00       	 .byte 0
 269 00f5 00       	 .byte 0
 270 00f6 00       	 .byte 0
 271 00f7 00       	 .byte 0
 272 00f8 00       	 .byte 0
 273 00f9 00       	 .byte 0
 274 00fa 00       	 .byte 0
 275 00fb 00       	 .byte 0
 276 00fc 00       	 .byte 0
 277 00fd 00       	 .byte 0
 278 00fe 00       	 .byte 0
 279 00ff 00       	 .byte 0
 280              	 .global CPU_EndiannessTest
 281              	 .section .rodata.CPU_EndiannessTest,"a",%progbits
 282              	 .align 2
 285              	CPU_EndiannessTest:
 286 0000 78563412 	 .word 305419896
 287              	 .section .text.CPU_Init,"ax",%progbits
 288              	 .align 2
 289              	 .global CPU_Init
 290              	 .thumb
 291              	 .thumb_func
 293              	CPU_Init:
 294              	.LFB0:
 295              	 .file 1 "../Dave/Generated/UCPROBE/cpu_core.c"
   1:../Dave/Generated/UCPROBE/cpu_core.c **** /*
   2:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
   3:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                uC/CPU
   4:../Dave/Generated/UCPROBE/cpu_core.c **** *                                    CPU CONFIGURATION & PORT LAYER
   5:../Dave/Generated/UCPROBE/cpu_core.c **** *
   6:../Dave/Generated/UCPROBE/cpu_core.c **** *                          (c) Copyright 2004-2015; Micrium, Inc.; Weston, FL
   7:../Dave/Generated/UCPROBE/cpu_core.c **** *
   8:../Dave/Generated/UCPROBE/cpu_core.c **** *               All rights reserved.  Protected by international copyright laws.
   9:../Dave/Generated/UCPROBE/cpu_core.c **** *
  10:../Dave/Generated/UCPROBE/cpu_core.c **** *               uC/CPU is provided in source form to registered licensees ONLY.  It is
  11:../Dave/Generated/UCPROBE/cpu_core.c **** *               illegal to distribute this source code to any third party unless you receive
  12:../Dave/Generated/UCPROBE/cpu_core.c **** *               written permission by an authorized Micrium representative.  Knowledge of
  13:../Dave/Generated/UCPROBE/cpu_core.c **** *               the source code may NOT be used to develop a similar product.
  14:../Dave/Generated/UCPROBE/cpu_core.c **** *
  15:../Dave/Generated/UCPROBE/cpu_core.c **** *               Please help us continue to provide the Embedded community with the finest
  16:../Dave/Generated/UCPROBE/cpu_core.c **** *               software available.  Your honesty is greatly appreciated.
  17:../Dave/Generated/UCPROBE/cpu_core.c **** *
  18:../Dave/Generated/UCPROBE/cpu_core.c **** *               You can find our product's user manual, API reference, release notes and
  19:../Dave/Generated/UCPROBE/cpu_core.c **** *               more information at https://doc.micrium.com.
  20:../Dave/Generated/UCPROBE/cpu_core.c **** *               You can contact us at www.micrium.com.
  21:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  22:../Dave/Generated/UCPROBE/cpu_core.c **** */
  23:../Dave/Generated/UCPROBE/cpu_core.c **** 
  24:../Dave/Generated/UCPROBE/cpu_core.c **** /*
  25:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  26:../Dave/Generated/UCPROBE/cpu_core.c **** *
  27:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           CORE CPU MODULE
  28:../Dave/Generated/UCPROBE/cpu_core.c **** *
  29:../Dave/Generated/UCPROBE/cpu_core.c **** * Filename      : cpu_core.c
  30:../Dave/Generated/UCPROBE/cpu_core.c **** * Version       : V1.30.02
  31:../Dave/Generated/UCPROBE/cpu_core.c **** * Programmer(s) : SR
  32:../Dave/Generated/UCPROBE/cpu_core.c **** *                 ITJ
  33:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  34:../Dave/Generated/UCPROBE/cpu_core.c **** */
  35:../Dave/Generated/UCPROBE/cpu_core.c **** 
  36:../Dave/Generated/UCPROBE/cpu_core.c **** 
  37:../Dave/Generated/UCPROBE/cpu_core.c **** /*
  38:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  39:../Dave/Generated/UCPROBE/cpu_core.c **** *                                            INCLUDE FILES
  40:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  41:../Dave/Generated/UCPROBE/cpu_core.c **** */
  42:../Dave/Generated/UCPROBE/cpu_core.c **** 
  43:../Dave/Generated/UCPROBE/cpu_core.c **** #define    MICRIUM_SOURCE
  44:../Dave/Generated/UCPROBE/cpu_core.c **** #define    CPU_CORE_MODULE
  45:../Dave/Generated/UCPROBE/cpu_core.c **** #include  "cpu_core.h"
  46:../Dave/Generated/UCPROBE/cpu_core.c **** 
  47:../Dave/Generated/UCPROBE/cpu_core.c **** #if defined(CPU_CFG_CACHE_MGMT_EN)
  48:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
  49:../Dave/Generated/UCPROBE/cpu_core.c **** #include  "cpu_cache.h"
  50:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
  51:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
  52:../Dave/Generated/UCPROBE/cpu_core.c **** 
  53:../Dave/Generated/UCPROBE/cpu_core.c **** 
  54:../Dave/Generated/UCPROBE/cpu_core.c **** /*
  55:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  56:../Dave/Generated/UCPROBE/cpu_core.c **** *                                            LOCAL DEFINES
  57:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  58:../Dave/Generated/UCPROBE/cpu_core.c **** */
  59:../Dave/Generated/UCPROBE/cpu_core.c **** 
  60:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* Pop cnt algorithm csts.         
  61:../Dave/Generated/UCPROBE/cpu_core.c **** #define CRC_UTIL_POPCNT_MASK01010101_32  0x55555555u
  62:../Dave/Generated/UCPROBE/cpu_core.c **** #define CRC_UTIL_POPCNT_MASK00110011_32  0x33333333u
  63:../Dave/Generated/UCPROBE/cpu_core.c **** #define CRC_UTIL_POPCNT_MASK00001111_32  0x0F0F0F0Fu
  64:../Dave/Generated/UCPROBE/cpu_core.c **** #define CRC_UTIL_POPCNT_POWERSOF256_32   0x01010101u
  65:../Dave/Generated/UCPROBE/cpu_core.c **** 
  66:../Dave/Generated/UCPROBE/cpu_core.c **** 
  67:../Dave/Generated/UCPROBE/cpu_core.c **** /*
  68:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  69:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           LOCAL CONSTANTS
  70:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  71:../Dave/Generated/UCPROBE/cpu_core.c **** */
  72:../Dave/Generated/UCPROBE/cpu_core.c **** 
  73:../Dave/Generated/UCPROBE/cpu_core.c **** 
  74:../Dave/Generated/UCPROBE/cpu_core.c **** /*
  75:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  76:../Dave/Generated/UCPROBE/cpu_core.c **** *                                          LOCAL DATA TYPES
  77:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  78:../Dave/Generated/UCPROBE/cpu_core.c **** */
  79:../Dave/Generated/UCPROBE/cpu_core.c **** 
  80:../Dave/Generated/UCPROBE/cpu_core.c **** 
  81:../Dave/Generated/UCPROBE/cpu_core.c **** /*
  82:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  83:../Dave/Generated/UCPROBE/cpu_core.c **** *                                            LOCAL TABLES
  84:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  85:../Dave/Generated/UCPROBE/cpu_core.c **** */
  86:../Dave/Generated/UCPROBE/cpu_core.c **** 
  87:../Dave/Generated/UCPROBE/cpu_core.c **** /*
  88:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
  89:../Dave/Generated/UCPROBE/cpu_core.c **** *                                  CPU COUNT LEAD ZEROs LOOKUP TABLE
  90:../Dave/Generated/UCPROBE/cpu_core.c **** *
  91:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s) : (1) Index into bit pattern table determines the number of leading zeros in an 8-bit val
  92:../Dave/Generated/UCPROBE/cpu_core.c **** *
  93:../Dave/Generated/UCPROBE/cpu_core.c **** *                         b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
  94:../Dave/Generated/UCPROBE/cpu_core.c **** *                         ---  ---  ---  ---  ---  ---  ---  ---    ---------------
  95:../Dave/Generated/UCPROBE/cpu_core.c **** *                          1    x    x    x    x    x    x    x            0
  96:../Dave/Generated/UCPROBE/cpu_core.c **** *                          0    1    x    x    x    x    x    x            1
  97:../Dave/Generated/UCPROBE/cpu_core.c **** *                          0    0    1    x    x    x    x    x            2
  98:../Dave/Generated/UCPROBE/cpu_core.c **** *                          0    0    0    1    x    x    x    x            3
  99:../Dave/Generated/UCPROBE/cpu_core.c **** *                          0    0    0    0    1    x    x    x            4
 100:../Dave/Generated/UCPROBE/cpu_core.c **** *                          0    0    0    0    0    1    x    x            5
 101:../Dave/Generated/UCPROBE/cpu_core.c **** *                          0    0    0    0    0    0    1    x            6
 102:../Dave/Generated/UCPROBE/cpu_core.c **** *                          0    0    0    0    0    0    0    1            7
 103:../Dave/Generated/UCPROBE/cpu_core.c **** *                          0    0    0    0    0    0    0    0            8
 104:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 105:../Dave/Generated/UCPROBE/cpu_core.c **** */
 106:../Dave/Generated/UCPROBE/cpu_core.c **** 
 107:../Dave/Generated/UCPROBE/cpu_core.c **** #if (!(defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) || \
 108:../Dave/Generated/UCPROBE/cpu_core.c ****       (CPU_CFG_DATA_SIZE_MAX > CPU_CFG_DATA_SIZE))
 109:../Dave/Generated/UCPROBE/cpu_core.c **** static  const  CPU_INT08U  CPU_CntLeadZerosTbl[256] = {                             /* Data vals : 
 110:../Dave/Generated/UCPROBE/cpu_core.c **** /*   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F   */
 111:../Dave/Generated/UCPROBE/cpu_core.c ****     8u,  7u,  6u,  6u,  5u,  5u,  5u,  5u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  /*   0x00 to 0x
 112:../Dave/Generated/UCPROBE/cpu_core.c ****     3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  /*   0x10 to 0x
 113:../Dave/Generated/UCPROBE/cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x20 to 0x
 114:../Dave/Generated/UCPROBE/cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x30 to 0x
 115:../Dave/Generated/UCPROBE/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x40 to 0x
 116:../Dave/Generated/UCPROBE/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x50 to 0x
 117:../Dave/Generated/UCPROBE/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x60 to 0x
 118:../Dave/Generated/UCPROBE/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x70 to 0x
 119:../Dave/Generated/UCPROBE/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x80 to 0x
 120:../Dave/Generated/UCPROBE/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x90 to 0x
 121:../Dave/Generated/UCPROBE/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xA0 to 0x
 122:../Dave/Generated/UCPROBE/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xB0 to 0x
 123:../Dave/Generated/UCPROBE/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xC0 to 0x
 124:../Dave/Generated/UCPROBE/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xD0 to 0x
 125:../Dave/Generated/UCPROBE/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xE0 to 0x
 126:../Dave/Generated/UCPROBE/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u   /*   0xF0 to 0x
 127:../Dave/Generated/UCPROBE/cpu_core.c **** };
 128:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 129:../Dave/Generated/UCPROBE/cpu_core.c **** 
 130:../Dave/Generated/UCPROBE/cpu_core.c **** 
 131:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 132:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 133:../Dave/Generated/UCPROBE/cpu_core.c **** *                                       LOCAL GLOBAL VARIABLES
 134:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 135:../Dave/Generated/UCPROBE/cpu_core.c **** */
 136:../Dave/Generated/UCPROBE/cpu_core.c **** 
 137:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_INT32U  const  CPU_EndiannessTest = 0x12345678LU;               /* Variable to test CPU endiann
 138:../Dave/Generated/UCPROBE/cpu_core.c **** 
 139:../Dave/Generated/UCPROBE/cpu_core.c **** 
 140:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 141:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 142:../Dave/Generated/UCPROBE/cpu_core.c **** *                                      LOCAL FUNCTION PROTOTYPES
 143:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 144:../Dave/Generated/UCPROBE/cpu_core.c **** */
 145:../Dave/Generated/UCPROBE/cpu_core.c **** 
 146:../Dave/Generated/UCPROBE/cpu_core.c **** #if    (CPU_CFG_NAME_EN   == DEF_ENABLED)                           /* ---------------- CPU NAME FN
 147:../Dave/Generated/UCPROBE/cpu_core.c **** static  void        CPU_NameInit         (void);
 148:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 149:../Dave/Generated/UCPROBE/cpu_core.c **** 
 150:../Dave/Generated/UCPROBE/cpu_core.c **** 
 151:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                     /* ----------------- CPU TS FNC
 152:../Dave/Generated/UCPROBE/cpu_core.c **** #if   ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 153:../Dave/Generated/UCPROBE/cpu_core.c ****        (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 154:../Dave/Generated/UCPROBE/cpu_core.c **** static  void        CPU_TS_Init          (void);
 155:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 156:../Dave/Generated/UCPROBE/cpu_core.c **** 
 157:../Dave/Generated/UCPROBE/cpu_core.c **** 
 158:../Dave/Generated/UCPROBE/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN                                     /* ---------- CPU INT DIS TIME 
 159:../Dave/Generated/UCPROBE/cpu_core.c **** static  void        CPU_IntDisMeasInit   (void);
 160:../Dave/Generated/UCPROBE/cpu_core.c **** 
 161:../Dave/Generated/UCPROBE/cpu_core.c **** static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc(CPU_TS_TMR  time_tot_cnts);
 162:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 163:../Dave/Generated/UCPROBE/cpu_core.c **** 
 164:../Dave/Generated/UCPROBE/cpu_core.c **** 
 165:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 166:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 167:../Dave/Generated/UCPROBE/cpu_core.c **** *                                     LOCAL CONFIGURATION ERRORS
 168:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 169:../Dave/Generated/UCPROBE/cpu_core.c **** */
 170:../Dave/Generated/UCPROBE/cpu_core.c **** 
 171:../Dave/Generated/UCPROBE/cpu_core.c **** 
 172:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 173:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 174:../Dave/Generated/UCPROBE/cpu_core.c **** *                                             CPU_Init()
 175:../Dave/Generated/UCPROBE/cpu_core.c **** *
 176:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : (1) Initialize CPU module :
 177:../Dave/Generated/UCPROBE/cpu_core.c **** *
 178:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (a) Initialize CPU timestamps
 179:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) Initialize CPU interrupts disabled time measurements
 180:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (c) Initialize CPU host name
 181:../Dave/Generated/UCPROBE/cpu_core.c **** *
 182:../Dave/Generated/UCPROBE/cpu_core.c **** *
 183:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 184:../Dave/Generated/UCPROBE/cpu_core.c **** *
 185:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : none.
 186:../Dave/Generated/UCPROBE/cpu_core.c **** *
 187:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Your Product's Application.
 188:../Dave/Generated/UCPROBE/cpu_core.c **** *
 189:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU initialization function & MAY be called by application/
 190:../Dave/Generated/UCPROBE/cpu_core.c **** *               initialization function(s).
 191:../Dave/Generated/UCPROBE/cpu_core.c **** *
 192:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (2) CPU_Init() MUST be called ... :
 193:../Dave/Generated/UCPROBE/cpu_core.c **** *
 194:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (a) ONLY ONCE from a product's application; ...
 195:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) BEFORE product's application calls any core CPU module function(s)
 196:../Dave/Generated/UCPROBE/cpu_core.c **** *
 197:../Dave/Generated/UCPROBE/cpu_core.c **** *               (3) The following initialization functions MUST be sequenced as follows :
 198:../Dave/Generated/UCPROBE/cpu_core.c **** *
 199:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (a) CPU_TS_Init()           SHOULD precede ALL calls to other CPU timestamp fun
 200:../Dave/Generated/UCPROBE/cpu_core.c **** *
 201:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) CPU_IntDisMeasInit()    SHOULD precede ALL calls to CPU_CRITICAL_ENTER()/CP
 202:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                   & other CPU interrupts disabled time measuremen
 203:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 204:../Dave/Generated/UCPROBE/cpu_core.c **** */
 205:../Dave/Generated/UCPROBE/cpu_core.c **** 
 206:../Dave/Generated/UCPROBE/cpu_core.c **** void  CPU_Init (void)
 207:../Dave/Generated/UCPROBE/cpu_core.c **** {
 296              	 .loc 1 207 0
 297              	 .cfi_startproc
 298              	 
 299              	 
 300              	 
 301 0000 80B4     	 push {r7}
 302              	.LCFI0:
 303              	 .cfi_def_cfa_offset 4
 304              	 .cfi_offset 7,-4
 305 0002 00AF     	 add r7,sp,#0
 306              	.LCFI1:
 307              	 .cfi_def_cfa_register 7
 208:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* --------------------- INIT TS --
 209:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 210:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 211:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_Init();                                              /* See Note #3a.                   
 212:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 213:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* -------------- INIT INT DIS TIME
 214:../Dave/Generated/UCPROBE/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 215:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_IntDisMeasInit();                                       /* See Note #3b.                   
 216:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 217:../Dave/Generated/UCPROBE/cpu_core.c **** 
 218:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* ------------------ INIT CPU NAME
 219:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 220:../Dave/Generated/UCPROBE/cpu_core.c ****      CPU_NameInit();
 221:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 222:../Dave/Generated/UCPROBE/cpu_core.c **** 
 223:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
 224:../Dave/Generated/UCPROBE/cpu_core.c ****      CPU_Cache_Init();
 225:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 226:../Dave/Generated/UCPROBE/cpu_core.c **** }
 308              	 .loc 1 226 0
 309 0004 BD46     	 mov sp,r7
 310              	.LCFI2:
 311              	 .cfi_def_cfa_register 13
 312              	 
 313 0006 5DF8047B 	 ldr r7,[sp],#4
 314              	.LCFI3:
 315              	 .cfi_restore 7
 316              	 .cfi_def_cfa_offset 0
 317 000a 7047     	 bx lr
 318              	 .cfi_endproc
 319              	.LFE0:
 321              	 .section .text.CPU_SW_Exception,"ax",%progbits
 322              	 .align 2
 323              	 .global CPU_SW_Exception
 324              	 .thumb
 325              	 .thumb_func
 327              	CPU_SW_Exception:
 328              	.LFB1:
 227:../Dave/Generated/UCPROBE/cpu_core.c **** 
 228:../Dave/Generated/UCPROBE/cpu_core.c **** 
 229:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 230:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 231:../Dave/Generated/UCPROBE/cpu_core.c **** *                                         CPU_SW_Exception()
 232:../Dave/Generated/UCPROBE/cpu_core.c **** *
 233:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Trap unrecoverable software exception.
 234:../Dave/Generated/UCPROBE/cpu_core.c **** *
 235:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 236:../Dave/Generated/UCPROBE/cpu_core.c **** *
 237:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : none.
 238:../Dave/Generated/UCPROBE/cpu_core.c **** *
 239:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : various.
 240:../Dave/Generated/UCPROBE/cpu_core.c **** *
 241:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) CPU_SW_Exception() deadlocks the current code execution -- whether multi-tasked
 242:../Dave/Generated/UCPROBE/cpu_core.c **** *                   -processed/-threaded or single-threaded -- when the current code execution cann
 243:../Dave/Generated/UCPROBE/cpu_core.c **** *                   gracefully recover or report a fault or exception condition.
 244:../Dave/Generated/UCPROBE/cpu_core.c **** *
 245:../Dave/Generated/UCPROBE/cpu_core.c **** *                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
 246:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 247:../Dave/Generated/UCPROBE/cpu_core.c **** */
 248:../Dave/Generated/UCPROBE/cpu_core.c **** 
 249:../Dave/Generated/UCPROBE/cpu_core.c **** void  CPU_SW_Exception (void)
 250:../Dave/Generated/UCPROBE/cpu_core.c **** {
 329              	 .loc 1 250 0
 330              	 .cfi_startproc
 331              	 
 332              	 
 333              	 
 334 0000 80B4     	 push {r7}
 335              	.LCFI4:
 336              	 .cfi_def_cfa_offset 4
 337              	 .cfi_offset 7,-4
 338 0002 00AF     	 add r7,sp,#0
 339              	.LCFI5:
 340              	 .cfi_def_cfa_register 7
 341              	.L3:
 251:../Dave/Generated/UCPROBE/cpu_core.c ****     while (DEF_ON) {
 252:../Dave/Generated/UCPROBE/cpu_core.c ****         ;
 253:../Dave/Generated/UCPROBE/cpu_core.c ****     }
 342              	 .loc 1 253 0 discriminator 1
 343 0004 FEE7     	 b .L3
 344              	 .cfi_endproc
 345              	.LFE1:
 347 0006 00BF     	 .section .text.CPU_CntLeadZeros08,"ax",%progbits
 348              	 .align 2
 349              	 .global CPU_CntLeadZeros08
 350              	 .thumb
 351              	 .thumb_func
 353              	CPU_CntLeadZeros08:
 354              	.LFB2:
 254:../Dave/Generated/UCPROBE/cpu_core.c **** }
 255:../Dave/Generated/UCPROBE/cpu_core.c **** 
 256:../Dave/Generated/UCPROBE/cpu_core.c **** 
 257:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 258:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 259:../Dave/Generated/UCPROBE/cpu_core.c **** *                                            CPU_NameClr()
 260:../Dave/Generated/UCPROBE/cpu_core.c **** *
 261:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Clear CPU Name.
 262:../Dave/Generated/UCPROBE/cpu_core.c **** *
 263:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 264:../Dave/Generated/UCPROBE/cpu_core.c **** *
 265:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : none.
 266:../Dave/Generated/UCPROBE/cpu_core.c **** *
 267:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_NameInit(),
 268:../Dave/Generated/UCPROBE/cpu_core.c **** *               Application.
 269:../Dave/Generated/UCPROBE/cpu_core.c **** *
 270:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 271:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
 272:../Dave/Generated/UCPROBE/cpu_core.c **** *
 273:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : none.
 274:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 275:../Dave/Generated/UCPROBE/cpu_core.c **** */
 276:../Dave/Generated/UCPROBE/cpu_core.c **** 
 277:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 278:../Dave/Generated/UCPROBE/cpu_core.c **** void  CPU_NameClr (void)
 279:../Dave/Generated/UCPROBE/cpu_core.c **** {
 280:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_SR_ALLOC();
 281:../Dave/Generated/UCPROBE/cpu_core.c **** 
 282:../Dave/Generated/UCPROBE/cpu_core.c **** 
 283:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_CRITICAL_ENTER();
 284:../Dave/Generated/UCPROBE/cpu_core.c ****     Mem_Clr((void     *)&CPU_Name[0],
 285:../Dave/Generated/UCPROBE/cpu_core.c ****             (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
 286:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_CRITICAL_EXIT();
 287:../Dave/Generated/UCPROBE/cpu_core.c **** }
 288:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 289:../Dave/Generated/UCPROBE/cpu_core.c **** 
 290:../Dave/Generated/UCPROBE/cpu_core.c **** 
 291:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 292:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 293:../Dave/Generated/UCPROBE/cpu_core.c **** *                                            CPU_NameGet()
 294:../Dave/Generated/UCPROBE/cpu_core.c **** *
 295:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Get CPU host name.
 296:../Dave/Generated/UCPROBE/cpu_core.c **** *
 297:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : p_name      Pointer to an ASCII character array that will receive the return CPU ho
 298:../Dave/Generated/UCPROBE/cpu_core.c **** *                               name ASCII string from this function (see Note #1).
 299:../Dave/Generated/UCPROBE/cpu_core.c **** *
 300:../Dave/Generated/UCPROBE/cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
 301:../Dave/Generated/UCPROBE/cpu_core.c **** *
 302:../Dave/Generated/UCPROBE/cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully returned
 303:../Dave/Generated/UCPROBE/cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 304:../Dave/Generated/UCPROBE/cpu_core.c **** *
 305:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : none.
 306:../Dave/Generated/UCPROBE/cpu_core.c **** *
 307:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
 308:../Dave/Generated/UCPROBE/cpu_core.c **** *
 309:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 310:../Dave/Generated/UCPROBE/cpu_core.c **** *               be called by application function(s).
 311:../Dave/Generated/UCPROBE/cpu_core.c **** *
 312:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) The size of the ASCII character array that will receive the return CPU host nam
 313:../Dave/Generated/UCPROBE/cpu_core.c **** *                   ASCII string :
 314:../Dave/Generated/UCPROBE/cpu_core.c **** *
 315:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (a) MUST   be greater than or equal to the current CPU host name's ASCII string
 316:../Dave/Generated/UCPROBE/cpu_core.c **** *                           size including the terminating NULL character;
 317:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) SHOULD be greater than or equal to CPU_CFG_NAME_SIZE
 318:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 319:../Dave/Generated/UCPROBE/cpu_core.c **** */
 320:../Dave/Generated/UCPROBE/cpu_core.c **** 
 321:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 322:../Dave/Generated/UCPROBE/cpu_core.c **** void  CPU_NameGet (CPU_CHAR  *p_name,
 323:../Dave/Generated/UCPROBE/cpu_core.c ****                    CPU_ERR   *p_err)
 324:../Dave/Generated/UCPROBE/cpu_core.c **** {
 325:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_SR_ALLOC();
 326:../Dave/Generated/UCPROBE/cpu_core.c **** 
 327:../Dave/Generated/UCPROBE/cpu_core.c **** 
 328:../Dave/Generated/UCPROBE/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 329:../Dave/Generated/UCPROBE/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 330:../Dave/Generated/UCPROBE/cpu_core.c ****     }
 331:../Dave/Generated/UCPROBE/cpu_core.c **** 
 332:../Dave/Generated/UCPROBE/cpu_core.c ****     if (p_name == (CPU_CHAR *)0) {
 333:../Dave/Generated/UCPROBE/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 334:../Dave/Generated/UCPROBE/cpu_core.c ****         return;
 335:../Dave/Generated/UCPROBE/cpu_core.c ****     }
 336:../Dave/Generated/UCPROBE/cpu_core.c **** 
 337:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_CRITICAL_ENTER();
 338:../Dave/Generated/UCPROBE/cpu_core.c ****    (void)Str_Copy_N(p_name,
 339:../Dave/Generated/UCPROBE/cpu_core.c ****                    &CPU_Name[0],
 340:../Dave/Generated/UCPROBE/cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 341:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_CRITICAL_EXIT();
 342:../Dave/Generated/UCPROBE/cpu_core.c **** 
 343:../Dave/Generated/UCPROBE/cpu_core.c ****    *p_err = CPU_ERR_NONE;
 344:../Dave/Generated/UCPROBE/cpu_core.c **** }
 345:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 346:../Dave/Generated/UCPROBE/cpu_core.c **** 
 347:../Dave/Generated/UCPROBE/cpu_core.c **** 
 348:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 349:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 350:../Dave/Generated/UCPROBE/cpu_core.c **** *                                            CPU_NameSet()
 351:../Dave/Generated/UCPROBE/cpu_core.c **** *
 352:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Set CPU host name.
 353:../Dave/Generated/UCPROBE/cpu_core.c **** *
 354:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : p_name      Pointer to CPU host name to set.
 355:../Dave/Generated/UCPROBE/cpu_core.c **** *
 356:../Dave/Generated/UCPROBE/cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
 357:../Dave/Generated/UCPROBE/cpu_core.c **** *
 358:../Dave/Generated/UCPROBE/cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully set.
 359:../Dave/Generated/UCPROBE/cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 360:../Dave/Generated/UCPROBE/cpu_core.c **** *                               CPU_ERR_NAME_SIZE               Invalid CPU host name size (see Not
 361:../Dave/Generated/UCPROBE/cpu_core.c **** *
 362:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : none.
 363:../Dave/Generated/UCPROBE/cpu_core.c **** *
 364:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
 365:../Dave/Generated/UCPROBE/cpu_core.c **** *
 366:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 367:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
 368:../Dave/Generated/UCPROBE/cpu_core.c **** *
 369:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) 'p_name' ASCII string size, including the terminating NULL character, MUST be l
 370:../Dave/Generated/UCPROBE/cpu_core.c **** *                    than or equal to CPU_CFG_NAME_SIZE.
 371:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 372:../Dave/Generated/UCPROBE/cpu_core.c **** */
 373:../Dave/Generated/UCPROBE/cpu_core.c **** 
 374:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 375:../Dave/Generated/UCPROBE/cpu_core.c **** void  CPU_NameSet (const  CPU_CHAR  *p_name,
 376:../Dave/Generated/UCPROBE/cpu_core.c ****                           CPU_ERR   *p_err)
 377:../Dave/Generated/UCPROBE/cpu_core.c **** {
 378:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_SIZE_T  len;
 379:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_SR_ALLOC();
 380:../Dave/Generated/UCPROBE/cpu_core.c **** 
 381:../Dave/Generated/UCPROBE/cpu_core.c **** 
 382:../Dave/Generated/UCPROBE/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 383:../Dave/Generated/UCPROBE/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 384:../Dave/Generated/UCPROBE/cpu_core.c ****     }
 385:../Dave/Generated/UCPROBE/cpu_core.c **** 
 386:../Dave/Generated/UCPROBE/cpu_core.c ****     if (p_name == (const CPU_CHAR *)0) {
 387:../Dave/Generated/UCPROBE/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 388:../Dave/Generated/UCPROBE/cpu_core.c ****         return;
 389:../Dave/Generated/UCPROBE/cpu_core.c ****     }
 390:../Dave/Generated/UCPROBE/cpu_core.c **** 
 391:../Dave/Generated/UCPROBE/cpu_core.c ****     len = Str_Len_N(p_name,
 392:../Dave/Generated/UCPROBE/cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 393:../Dave/Generated/UCPROBE/cpu_core.c ****     if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name
 394:../Dave/Generated/UCPROBE/cpu_core.c ****         CPU_CRITICAL_ENTER();
 395:../Dave/Generated/UCPROBE/cpu_core.c ****        (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host na
 396:../Dave/Generated/UCPROBE/cpu_core.c ****                          p_name,
 397:../Dave/Generated/UCPROBE/cpu_core.c ****                          CPU_CFG_NAME_SIZE);
 398:../Dave/Generated/UCPROBE/cpu_core.c ****         CPU_CRITICAL_EXIT();
 399:../Dave/Generated/UCPROBE/cpu_core.c ****        *p_err = CPU_ERR_NONE;
 400:../Dave/Generated/UCPROBE/cpu_core.c **** 
 401:../Dave/Generated/UCPROBE/cpu_core.c ****     } else {
 402:../Dave/Generated/UCPROBE/cpu_core.c ****        *p_err = CPU_ERR_NAME_SIZE;
 403:../Dave/Generated/UCPROBE/cpu_core.c ****     }
 404:../Dave/Generated/UCPROBE/cpu_core.c **** }
 405:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 406:../Dave/Generated/UCPROBE/cpu_core.c **** 
 407:../Dave/Generated/UCPROBE/cpu_core.c **** 
 408:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 409:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 410:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           CPU_TS_Get32()
 411:../Dave/Generated/UCPROBE/cpu_core.c **** *
 412:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Get current 32-bit CPU timestamp.
 413:../Dave/Generated/UCPROBE/cpu_core.c **** *
 414:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 415:../Dave/Generated/UCPROBE/cpu_core.c **** *
 416:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Current 32-bit CPU timestamp (in timestamp timer counts).
 417:../Dave/Generated/UCPROBE/cpu_core.c **** *
 418:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
 419:../Dave/Generated/UCPROBE/cpu_core.c **** *
 420:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 421:../Dave/Generated/UCPROBE/cpu_core.c **** *               be called by application function(s).
 422:../Dave/Generated/UCPROBE/cpu_core.c **** *
 423:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 424:../Dave/Generated/UCPROBE/cpu_core.c **** *                   either of the following equations :
 425:../Dave/Generated/UCPROBE/cpu_core.c **** *
 426:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
 427:../Dave/Generated/UCPROBE/cpu_core.c **** *
 428:../Dave/Generated/UCPROBE/cpu_core.c **** *                               where
 429:../Dave/Generated/UCPROBE/cpu_core.c **** *
 430:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 431:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Timer period            Timer's period in some units of
 432:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                               (fractional) seconds
 433:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 434:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                               units of (fractional) seconds
 435:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                               as the Timer period
 436:../Dave/Generated/UCPROBE/cpu_core.c **** *
 437:../Dave/Generated/UCPROBE/cpu_core.c **** *                                              Number timer counts
 438:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (b) Time measured  =  ---------------------
 439:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                Timer frequency
 440:../Dave/Generated/UCPROBE/cpu_core.c **** *
 441:../Dave/Generated/UCPROBE/cpu_core.c **** *                               where
 442:../Dave/Generated/UCPROBE/cpu_core.c **** *
 443:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 444:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 445:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                               of counts per second
 446:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 447:../Dave/Generated/UCPROBE/cpu_core.c **** *
 448:../Dave/Generated/UCPROBE/cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 449:../Dave/Generated/UCPROBE/cpu_core.c **** *
 450:../Dave/Generated/UCPROBE/cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 32-bit CPU timesta
 451:../Dave/Generated/UCPROBE/cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 452:../Dave/Generated/UCPROBE/cpu_core.c **** *                   timestamp timer count values into the higher-precision 32-bit CPU timestamp.
 453:../Dave/Generated/UCPROBE/cpu_core.c **** *
 454:../Dave/Generated/UCPROBE/cpu_core.c **** *               (3) After initialization, 'CPU_TS_32_Accum' & 'CPU_TS_32_TmrPrev' MUST ALWAYS
 455:../Dave/Generated/UCPROBE/cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 456:../Dave/Generated/UCPROBE/cpu_core.c **** *                   with critical sections.
 457:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 458:../Dave/Generated/UCPROBE/cpu_core.c **** */
 459:../Dave/Generated/UCPROBE/cpu_core.c **** 
 460:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
 461:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_TS32  CPU_TS_Get32 (void)
 462:../Dave/Generated/UCPROBE/cpu_core.c **** {
 463:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS32    ts;
 464:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)
 465:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 466:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 467:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_SR_ALLOC();
 468:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 469:../Dave/Generated/UCPROBE/cpu_core.c **** 
 470:../Dave/Generated/UCPROBE/cpu_core.c **** 
 471:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
 472:../Dave/Generated/UCPROBE/cpu_core.c ****     ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bi
 473:../Dave/Generated/UCPROBE/cpu_core.c **** 
 474:../Dave/Generated/UCPROBE/cpu_core.c **** #else
 475:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_DIS();
 476:../Dave/Generated/UCPROBE/cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 477:../Dave/Generated/UCPROBE/cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_32_TmrPrev); /* Calc      delta ts tmr cnts.
 478:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_32_Accum   += (CPU_TS32  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 479:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 480:../Dave/Generated/UCPROBE/cpu_core.c ****     ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
 481:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_EN();
 482:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 483:../Dave/Generated/UCPROBE/cpu_core.c **** 
 484:../Dave/Generated/UCPROBE/cpu_core.c ****     return (ts);
 485:../Dave/Generated/UCPROBE/cpu_core.c **** }
 486:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 487:../Dave/Generated/UCPROBE/cpu_core.c **** 
 488:../Dave/Generated/UCPROBE/cpu_core.c **** 
 489:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 490:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 491:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           CPU_TS_Get64()
 492:../Dave/Generated/UCPROBE/cpu_core.c **** *
 493:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Get current 64-bit CPU timestamp.
 494:../Dave/Generated/UCPROBE/cpu_core.c **** *
 495:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 496:../Dave/Generated/UCPROBE/cpu_core.c **** *
 497:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Current 64-bit CPU timestamp (in timestamp timer counts).
 498:../Dave/Generated/UCPROBE/cpu_core.c **** *
 499:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
 500:../Dave/Generated/UCPROBE/cpu_core.c **** *
 501:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 502:../Dave/Generated/UCPROBE/cpu_core.c **** *               be called by application function(s).
 503:../Dave/Generated/UCPROBE/cpu_core.c **** *
 504:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 505:../Dave/Generated/UCPROBE/cpu_core.c **** *                   either of the following equations :
 506:../Dave/Generated/UCPROBE/cpu_core.c **** *
 507:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
 508:../Dave/Generated/UCPROBE/cpu_core.c **** *
 509:../Dave/Generated/UCPROBE/cpu_core.c **** *                               where
 510:../Dave/Generated/UCPROBE/cpu_core.c **** *
 511:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 512:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Timer period            Timer's period in some units of
 513:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                               (fractional) seconds
 514:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 515:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                               units of (fractional) seconds
 516:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                               as the Timer period
 517:../Dave/Generated/UCPROBE/cpu_core.c **** *
 518:../Dave/Generated/UCPROBE/cpu_core.c **** *                                              Number timer counts
 519:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (b) Time measured  =  ---------------------
 520:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                Timer frequency
 521:../Dave/Generated/UCPROBE/cpu_core.c **** *
 522:../Dave/Generated/UCPROBE/cpu_core.c **** *                               where
 523:../Dave/Generated/UCPROBE/cpu_core.c **** *
 524:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 525:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 526:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                               of counts per second
 527:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 528:../Dave/Generated/UCPROBE/cpu_core.c **** *
 529:../Dave/Generated/UCPROBE/cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 530:../Dave/Generated/UCPROBE/cpu_core.c **** *
 531:../Dave/Generated/UCPROBE/cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 64-bit CPU timesta
 532:../Dave/Generated/UCPROBE/cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 533:../Dave/Generated/UCPROBE/cpu_core.c **** *                   timestamp timer count values into the higher-precision 64-bit CPU timestamp.
 534:../Dave/Generated/UCPROBE/cpu_core.c **** *
 535:../Dave/Generated/UCPROBE/cpu_core.c **** *               (3) After initialization, 'CPU_TS_64_Accum' & 'CPU_TS_64_TmrPrev' MUST ALWAYS
 536:../Dave/Generated/UCPROBE/cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 537:../Dave/Generated/UCPROBE/cpu_core.c **** *                   with critical sections.
 538:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 539:../Dave/Generated/UCPROBE/cpu_core.c **** */
 540:../Dave/Generated/UCPROBE/cpu_core.c **** 
 541:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_TS_64_EN == DEF_ENABLED)
 542:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_TS64  CPU_TS_Get64 (void)
 543:../Dave/Generated/UCPROBE/cpu_core.c **** {
 544:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS64    ts;
 545:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)
 546:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 547:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 548:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_SR_ALLOC();
 549:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 550:../Dave/Generated/UCPROBE/cpu_core.c **** 
 551:../Dave/Generated/UCPROBE/cpu_core.c **** 
 552:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_64)
 553:../Dave/Generated/UCPROBE/cpu_core.c ****     ts = (CPU_TS64)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 64-bi
 554:../Dave/Generated/UCPROBE/cpu_core.c **** 
 555:../Dave/Generated/UCPROBE/cpu_core.c **** #else
 556:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_DIS();
 557:../Dave/Generated/UCPROBE/cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 558:../Dave/Generated/UCPROBE/cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_64_TmrPrev); /* Calc      delta ts tmr cnts.
 559:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_64_Accum   += (CPU_TS64  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 560:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_64_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 561:../Dave/Generated/UCPROBE/cpu_core.c ****     ts                 = (CPU_TS64  ) CPU_TS_64_Accum;
 562:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_EN();
 563:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 564:../Dave/Generated/UCPROBE/cpu_core.c **** 
 565:../Dave/Generated/UCPROBE/cpu_core.c ****     return (ts);
 566:../Dave/Generated/UCPROBE/cpu_core.c **** }
 567:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 568:../Dave/Generated/UCPROBE/cpu_core.c **** 
 569:../Dave/Generated/UCPROBE/cpu_core.c **** 
 570:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 571:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 572:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           CPU_TS_Update()
 573:../Dave/Generated/UCPROBE/cpu_core.c **** *
 574:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Update current CPU timestamp(s).
 575:../Dave/Generated/UCPROBE/cpu_core.c **** *
 576:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 577:../Dave/Generated/UCPROBE/cpu_core.c **** *
 578:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : none.
 579:../Dave/Generated/UCPROBE/cpu_core.c **** *
 580:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application/BSP periodic time handler (see Note #1).
 581:../Dave/Generated/UCPROBE/cpu_core.c **** *
 582:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU timestamp BSP function & SHOULD be called only by appropriat
 583:../Dave/Generated/UCPROBE/cpu_core.c **** *               application/BSP function(s).
 584:../Dave/Generated/UCPROBE/cpu_core.c **** *
 585:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) (a) CPU timestamp(s) MUST be updated periodically by some application (or BSP) 
 586:../Dave/Generated/UCPROBE/cpu_core.c **** *                       handler in order to (adequately) maintain CPU timestamp(s)' time.
 587:../Dave/Generated/UCPROBE/cpu_core.c **** *
 588:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) CPU timestamp(s) MUST be updated more frequently than the CPU timestamp tim
 589:../Dave/Generated/UCPROBE/cpu_core.c **** *                       overflows; otherwise, CPU timestamp(s) will lose time.
 590:../Dave/Generated/UCPROBE/cpu_core.c **** *
 591:../Dave/Generated/UCPROBE/cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c2'.
 592:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 593:../Dave/Generated/UCPROBE/cpu_core.c **** */
 594:../Dave/Generated/UCPROBE/cpu_core.c **** 
 595:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_TS_EN == DEF_ENABLED)
 596:../Dave/Generated/UCPROBE/cpu_core.c **** void  CPU_TS_Update (void)
 597:../Dave/Generated/UCPROBE/cpu_core.c **** {
 598:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
 599:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
 600:../Dave/Generated/UCPROBE/cpu_core.c ****    (void)CPU_TS_Get32();
 601:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 602:../Dave/Generated/UCPROBE/cpu_core.c **** 
 603:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
 604:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
 605:../Dave/Generated/UCPROBE/cpu_core.c ****    (void)CPU_TS_Get64();
 606:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 607:../Dave/Generated/UCPROBE/cpu_core.c **** }
 608:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 609:../Dave/Generated/UCPROBE/cpu_core.c **** 
 610:../Dave/Generated/UCPROBE/cpu_core.c **** 
 611:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 612:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 613:../Dave/Generated/UCPROBE/cpu_core.c **** *                                         CPU_TS_TmrFreqGet()
 614:../Dave/Generated/UCPROBE/cpu_core.c **** *
 615:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Get CPU timestamp's timer frequency.
 616:../Dave/Generated/UCPROBE/cpu_core.c **** *
 617:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : p_err       Pointer to variable that will receive the return error code from this f
 618:../Dave/Generated/UCPROBE/cpu_core.c **** *
 619:../Dave/Generated/UCPROBE/cpu_core.c **** *                               CPU_ERR_NONE                    CPU timestamp's timer frequency suc
 620:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                                   returned.
 621:../Dave/Generated/UCPROBE/cpu_core.c **** *                               CPU_ERR_TS_FREQ_INVALID         CPU timestamp's timer frequency inv
 622:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                                   NOT yet configured.
 623:../Dave/Generated/UCPROBE/cpu_core.c **** *
 624:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : CPU timestamp's timer frequency (in Hertz), if NO error(s).
 625:../Dave/Generated/UCPROBE/cpu_core.c **** *
 626:../Dave/Generated/UCPROBE/cpu_core.c **** *               0,                                          otherwise.
 627:../Dave/Generated/UCPROBE/cpu_core.c **** *
 628:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
 629:../Dave/Generated/UCPROBE/cpu_core.c **** *
 630:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 631:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
 632:../Dave/Generated/UCPROBE/cpu_core.c **** *
 633:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : none.
 634:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 635:../Dave/Generated/UCPROBE/cpu_core.c **** */
 636:../Dave/Generated/UCPROBE/cpu_core.c **** 
 637:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 638:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
 639:../Dave/Generated/UCPROBE/cpu_core.c **** {
 640:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR_FREQ  freq_hz;
 641:../Dave/Generated/UCPROBE/cpu_core.c **** 
 642:../Dave/Generated/UCPROBE/cpu_core.c **** 
 643:../Dave/Generated/UCPROBE/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 644:../Dave/Generated/UCPROBE/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 645:../Dave/Generated/UCPROBE/cpu_core.c ****     }
 646:../Dave/Generated/UCPROBE/cpu_core.c **** 
 647:../Dave/Generated/UCPROBE/cpu_core.c ****     freq_hz =  CPU_TS_TmrFreq_Hz;
 648:../Dave/Generated/UCPROBE/cpu_core.c ****    *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
 649:../Dave/Generated/UCPROBE/cpu_core.c **** 
 650:../Dave/Generated/UCPROBE/cpu_core.c ****     return (freq_hz);
 651:../Dave/Generated/UCPROBE/cpu_core.c **** }
 652:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 653:../Dave/Generated/UCPROBE/cpu_core.c **** 
 654:../Dave/Generated/UCPROBE/cpu_core.c **** 
 655:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 656:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 657:../Dave/Generated/UCPROBE/cpu_core.c **** *                                         CPU_TS_TmrFreqSet()
 658:../Dave/Generated/UCPROBE/cpu_core.c **** *
 659:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Set CPU timestamp's timer frequency.
 660:../Dave/Generated/UCPROBE/cpu_core.c **** *
 661:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : freq_hz     Frequency (in Hertz) to set for CPU timestamp's timer.
 662:../Dave/Generated/UCPROBE/cpu_core.c **** *
 663:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : none.
 664:../Dave/Generated/UCPROBE/cpu_core.c **** *
 665:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_TS_TmrInit(),
 666:../Dave/Generated/UCPROBE/cpu_core.c **** *               Application/BSP initialization function(s).
 667:../Dave/Generated/UCPROBE/cpu_core.c **** *
 668:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module BSP function & SHOULD be called only by appropriate
 669:../Dave/Generated/UCPROBE/cpu_core.c **** *               application/BSP function(s) [see Note #1].
 670:../Dave/Generated/UCPROBE/cpu_core.c **** *
 671:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) (a) (1) CPU timestamp timer frequency is NOT required for internal CPU timestam
 672:../Dave/Generated/UCPROBE/cpu_core.c **** *                           operations but may OPTIONALLY be configured by CPU_TS_TmrInit() or othe
 673:../Dave/Generated/UCPROBE/cpu_core.c **** *                           application/BSP initialization functions.
 674:../Dave/Generated/UCPROBE/cpu_core.c **** *
 675:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (2) CPU timestamp timer frequency MAY be used with optional CPU_TSxx_to_uSe
 676:../Dave/Generated/UCPROBE/cpu_core.c **** *                           to convert CPU timestamps from timer counts into microseconds.
 677:../Dave/Generated/UCPROBE/cpu_core.c **** *
 678:../Dave/Generated/UCPROBE/cpu_core.c **** *                           See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2a
 679:../Dave/Generated/UCPROBE/cpu_core.c **** *
 680:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) CPU timestamp timer period SHOULD be less than the typical measured time bu
 681:../Dave/Generated/UCPROBE/cpu_core.c **** *                       be less than the maximum measured time; otherwise, timer resolution inadequ
 682:../Dave/Generated/UCPROBE/cpu_core.c **** *                       measure desired times.
 683:../Dave/Generated/UCPROBE/cpu_core.c **** *
 684:../Dave/Generated/UCPROBE/cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2b'.
 685:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 686:../Dave/Generated/UCPROBE/cpu_core.c **** */
 687:../Dave/Generated/UCPROBE/cpu_core.c **** 
 688:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 689:../Dave/Generated/UCPROBE/cpu_core.c **** void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
 690:../Dave/Generated/UCPROBE/cpu_core.c **** {
 691:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TmrFreq_Hz = freq_hz;
 692:../Dave/Generated/UCPROBE/cpu_core.c **** }
 693:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 694:../Dave/Generated/UCPROBE/cpu_core.c **** 
 695:../Dave/Generated/UCPROBE/cpu_core.c **** 
 696:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 697:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 698:../Dave/Generated/UCPROBE/cpu_core.c **** *                                     CPU_IntDisMeasMaxCurReset()
 699:../Dave/Generated/UCPROBE/cpu_core.c **** *
 700:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Reset current maximum interrupts disabled time.
 701:../Dave/Generated/UCPROBE/cpu_core.c **** *
 702:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 703:../Dave/Generated/UCPROBE/cpu_core.c **** *
 704:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Maximum interrupts disabled time (in CPU timestamp timer counts) before resetting.
 705:../Dave/Generated/UCPROBE/cpu_core.c **** *
 706:../Dave/Generated/UCPROBE/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 707:../Dave/Generated/UCPROBE/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 708:../Dave/Generated/UCPROBE/cpu_core.c **** *
 709:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
 710:../Dave/Generated/UCPROBE/cpu_core.c **** *
 711:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 712:../Dave/Generated/UCPROBE/cpu_core.c **** *               & MAY be called by application function(s).
 713:../Dave/Generated/UCPROBE/cpu_core.c **** *
 714:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 715:../Dave/Generated/UCPROBE/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 716:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 717:../Dave/Generated/UCPROBE/cpu_core.c **** */
 718:../Dave/Generated/UCPROBE/cpu_core.c **** 
 719:../Dave/Generated/UCPROBE/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 720:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
 721:../Dave/Generated/UCPROBE/cpu_core.c **** {
 722:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 723:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_SR_ALLOC();
 724:../Dave/Generated/UCPROBE/cpu_core.c **** 
 725:../Dave/Generated/UCPROBE/cpu_core.c **** 
 726:../Dave/Generated/UCPROBE/cpu_core.c ****     time_max_cnts             = CPU_IntDisMeasMaxCurGet();
 727:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_DIS();
 728:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_IntDisMeasMaxCur_cnts = 0u;
 729:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_EN();
 730:../Dave/Generated/UCPROBE/cpu_core.c **** 
 731:../Dave/Generated/UCPROBE/cpu_core.c ****     return (time_max_cnts);
 732:../Dave/Generated/UCPROBE/cpu_core.c **** }
 733:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 734:../Dave/Generated/UCPROBE/cpu_core.c **** 
 735:../Dave/Generated/UCPROBE/cpu_core.c **** 
 736:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 737:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 738:../Dave/Generated/UCPROBE/cpu_core.c **** *                                      CPU_IntDisMeasMaxCurGet()
 739:../Dave/Generated/UCPROBE/cpu_core.c **** *
 740:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Get current maximum interrupts disabled time.
 741:../Dave/Generated/UCPROBE/cpu_core.c **** *
 742:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 743:../Dave/Generated/UCPROBE/cpu_core.c **** *
 744:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Current maximum interrupts disabled time (in CPU timestamp timer counts).
 745:../Dave/Generated/UCPROBE/cpu_core.c **** *
 746:../Dave/Generated/UCPROBE/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 747:../Dave/Generated/UCPROBE/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 748:../Dave/Generated/UCPROBE/cpu_core.c **** *
 749:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_IntDisMeasMaxCurReset(),
 750:../Dave/Generated/UCPROBE/cpu_core.c **** *               Application.
 751:../Dave/Generated/UCPROBE/cpu_core.c **** *
 752:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 753:../Dave/Generated/UCPROBE/cpu_core.c **** *               & MAY be called by application function(s).
 754:../Dave/Generated/UCPROBE/cpu_core.c **** *
 755:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 756:../Dave/Generated/UCPROBE/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 757:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 758:../Dave/Generated/UCPROBE/cpu_core.c **** */
 759:../Dave/Generated/UCPROBE/cpu_core.c **** 
 760:../Dave/Generated/UCPROBE/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 761:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
 762:../Dave/Generated/UCPROBE/cpu_core.c **** {
 763:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 764:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 765:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_SR_ALLOC();
 766:../Dave/Generated/UCPROBE/cpu_core.c **** 
 767:../Dave/Generated/UCPROBE/cpu_core.c **** 
 768:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_DIS();
 769:../Dave/Generated/UCPROBE/cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
 770:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_EN();
 771:../Dave/Generated/UCPROBE/cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 772:../Dave/Generated/UCPROBE/cpu_core.c **** 
 773:../Dave/Generated/UCPROBE/cpu_core.c ****     return (time_max_cnts);
 774:../Dave/Generated/UCPROBE/cpu_core.c **** }
 775:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 776:../Dave/Generated/UCPROBE/cpu_core.c **** 
 777:../Dave/Generated/UCPROBE/cpu_core.c **** 
 778:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 779:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 780:../Dave/Generated/UCPROBE/cpu_core.c **** *                                       CPU_IntDisMeasMaxGet()
 781:../Dave/Generated/UCPROBE/cpu_core.c **** *
 782:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Get (non-resetable) maximum interrupts disabled time.
 783:../Dave/Generated/UCPROBE/cpu_core.c **** *
 784:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 785:../Dave/Generated/UCPROBE/cpu_core.c **** *
 786:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : (Non-resetable) maximum interrupts disabled time (in CPU timestamp timer counts).
 787:../Dave/Generated/UCPROBE/cpu_core.c **** *
 788:../Dave/Generated/UCPROBE/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 789:../Dave/Generated/UCPROBE/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 790:../Dave/Generated/UCPROBE/cpu_core.c **** *
 791:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_IntDisMeasInit(),
 792:../Dave/Generated/UCPROBE/cpu_core.c **** *               Application.
 793:../Dave/Generated/UCPROBE/cpu_core.c **** *
 794:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 795:../Dave/Generated/UCPROBE/cpu_core.c **** *               & MAY be called by application function(s).
 796:../Dave/Generated/UCPROBE/cpu_core.c **** *
 797:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMax_cnts' MUST ALWAYS be accessed
 798:../Dave/Generated/UCPROBE/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 799:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 800:../Dave/Generated/UCPROBE/cpu_core.c **** */
 801:../Dave/Generated/UCPROBE/cpu_core.c **** 
 802:../Dave/Generated/UCPROBE/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 803:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxGet (void)
 804:../Dave/Generated/UCPROBE/cpu_core.c **** {
 805:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 806:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 807:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_SR_ALLOC();
 808:../Dave/Generated/UCPROBE/cpu_core.c **** 
 809:../Dave/Generated/UCPROBE/cpu_core.c **** 
 810:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_DIS();
 811:../Dave/Generated/UCPROBE/cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMax_cnts;
 812:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT_EN();
 813:../Dave/Generated/UCPROBE/cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 814:../Dave/Generated/UCPROBE/cpu_core.c **** 
 815:../Dave/Generated/UCPROBE/cpu_core.c ****     return (time_max_cnts);
 816:../Dave/Generated/UCPROBE/cpu_core.c **** }
 817:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 818:../Dave/Generated/UCPROBE/cpu_core.c **** 
 819:../Dave/Generated/UCPROBE/cpu_core.c **** 
 820:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 821:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 822:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_IntDisMeasStart()
 823:../Dave/Generated/UCPROBE/cpu_core.c **** *
 824:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Start interrupts disabled time measurement.
 825:../Dave/Generated/UCPROBE/cpu_core.c **** *
 826:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 827:../Dave/Generated/UCPROBE/cpu_core.c **** *
 828:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : none.
 829:../Dave/Generated/UCPROBE/cpu_core.c **** *
 830:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_CRITICAL_ENTER().
 831:../Dave/Generated/UCPROBE/cpu_core.c **** *
 832:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is an INTERNAL CPU module function & MUST NOT be called by applicatio
 833:../Dave/Generated/UCPROBE/cpu_core.c **** *               function(s).
 834:../Dave/Generated/UCPROBE/cpu_core.c **** *
 835:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : none.
 836:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 837:../Dave/Generated/UCPROBE/cpu_core.c **** */
 838:../Dave/Generated/UCPROBE/cpu_core.c **** 
 839:../Dave/Generated/UCPROBE/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 840:../Dave/Generated/UCPROBE/cpu_core.c **** void  CPU_IntDisMeasStart (void)
 841:../Dave/Generated/UCPROBE/cpu_core.c **** {
 842:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_IntDisMeasCtr++;
 843:../Dave/Generated/UCPROBE/cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...  
 844:../Dave/Generated/UCPROBE/cpu_core.c ****         CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start tim
 845:../Dave/Generated/UCPROBE/cpu_core.c ****     }
 846:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_IntDisNestCtr++;
 847:../Dave/Generated/UCPROBE/cpu_core.c **** }
 848:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
 849:../Dave/Generated/UCPROBE/cpu_core.c **** 
 850:../Dave/Generated/UCPROBE/cpu_core.c **** 
 851:../Dave/Generated/UCPROBE/cpu_core.c **** /*
 852:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
 853:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_IntDisMeasStop()
 854:../Dave/Generated/UCPROBE/cpu_core.c **** *
 855:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Stop interrupts disabled time measurement.
 856:../Dave/Generated/UCPROBE/cpu_core.c **** *
 857:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : none.
 858:../Dave/Generated/UCPROBE/cpu_core.c **** *
 859:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : none.
 860:../Dave/Generated/UCPROBE/cpu_core.c **** *
 861:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_CRITICAL_EXIT().
 862:../Dave/Generated/UCPROBE/cpu_core.c **** *
 863:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is an INTERNAL CPU module function & MUST NOT be called by applicatio
 864:../Dave/Generated/UCPROBE/cpu_core.c **** *               function(s).
 865:../Dave/Generated/UCPROBE/cpu_core.c **** *
 866:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) (a) The total amount of time interrupts are disabled by system &/or application
 867:../Dave/Generated/UCPROBE/cpu_core.c **** *                       during critical sections is calculated by the following equations :
 868:../Dave/Generated/UCPROBE/cpu_core.c **** *
 869:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (1) When interrupts disabled time measurements are disabled :
 870:../Dave/Generated/UCPROBE/cpu_core.c **** *
 871:../Dave/Generated/UCPROBE/cpu_core.c **** *
 872:../Dave/Generated/UCPROBE/cpu_core.c **** *                               |   CRITICAL  |                           |   CRITICAL  |
 873:../Dave/Generated/UCPROBE/cpu_core.c **** *                               |<- SECTION ->|                           |<- SECTION ->|
 874:../Dave/Generated/UCPROBE/cpu_core.c **** *                               |    ENTER    |                           |    EXIT     |
 875:../Dave/Generated/UCPROBE/cpu_core.c **** *
 876:../Dave/Generated/UCPROBE/cpu_core.c **** *                            Disable                                    Enable
 877:../Dave/Generated/UCPROBE/cpu_core.c **** *                           Interrupts                                Interrupts
 878:../Dave/Generated/UCPROBE/cpu_core.c **** *
 879:../Dave/Generated/UCPROBE/cpu_core.c **** *                               ||           ||                           ||           ||
 880:../Dave/Generated/UCPROBE/cpu_core.c **** *                               ||           ||                           ||           ||
 881:../Dave/Generated/UCPROBE/cpu_core.c **** *                               ||       |   ||<------------------------->||       |   ||
 882:../Dave/Generated/UCPROBE/cpu_core.c **** *                               ||       |<->||             |             ||<----->|   ||
 883:../Dave/Generated/UCPROBE/cpu_core.c **** *                               ||       | | ||             |             ||   |   |   ||
 884:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        | |                |                  |   |
 885:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   interrupts            time                 interrupts
 886:../Dave/Generated/UCPROBE/cpu_core.c **** *                                    disabled                 interrupts       |enabled
 887:../Dave/Generated/UCPROBE/cpu_core.c **** *                                          |                   disabled        |
 888:../Dave/Generated/UCPROBE/cpu_core.c **** *                                          |              (via application)    |
 889:../Dave/Generated/UCPROBE/cpu_core.c **** *                                       time                                 time
 890:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           interrupts                           interrupts
 891:../Dave/Generated/UCPROBE/cpu_core.c **** *                                         disabled ovrhd                        enabled ovrhd
 892:../Dave/Generated/UCPROBE/cpu_core.c **** *
 893:../Dave/Generated/UCPROBE/cpu_core.c **** *
 894:../Dave/Generated/UCPROBE/cpu_core.c **** *                           (A) time            =  [ time            -  time           ]  -  time
 895:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   interrupts     [     interrupts         interrupts ]         to
 896:../Dave/Generated/UCPROBE/cpu_core.c **** *                                    disabled      [      enabled            disabled  ]         ov
 897:../Dave/Generated/UCPROBE/cpu_core.c **** *                               (via application)
 898:../Dave/Generated/UCPROBE/cpu_core.c **** *
 899:../Dave/Generated/UCPROBE/cpu_core.c **** *
 900:../Dave/Generated/UCPROBE/cpu_core.c **** *                           (B) time       =  time              +  time
 901:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   total         interrupts           interrupts
 902:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   ovrhd        enabled ovrhd       disabled ovrhd
 903:../Dave/Generated/UCPROBE/cpu_core.c **** *
 904:../Dave/Generated/UCPROBE/cpu_core.c **** *
 905:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   where
 906:../Dave/Generated/UCPROBE/cpu_core.c **** *
 907:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    time interrupts are disabled be
 908:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               interrupts              first critical section ente
 909:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                disabled               last  critical section exit
 910:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           (via application)           minus total overhead time)
 911:../Dave/Generated/UCPROBE/cpu_core.c **** *
 912:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    time when interrupts are disabl
 913:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               interrupts
 914:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                disabled
 915:../Dave/Generated/UCPROBE/cpu_core.c **** *
 916:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    time when interrupts are  enabl
 917:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               interrupts
 918:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                enabled
 919:../Dave/Generated/UCPROBE/cpu_core.c **** *
 920:../Dave/Generated/UCPROBE/cpu_core.c **** *
 921:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    total overhead time to disable/
 922:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               total                   interrupts during critical 
 923:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               ovrhd                   enter & exit
 924:../Dave/Generated/UCPROBE/cpu_core.c **** *
 925:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    total overhead time to disable 
 926:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               interrupts              during critical section ent
 927:../Dave/Generated/UCPROBE/cpu_core.c **** *                                             disabled ovrhd
 928:../Dave/Generated/UCPROBE/cpu_core.c **** *
 929:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    total overhead time to enable  
 930:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               interrupts              during critical section exi
 931:../Dave/Generated/UCPROBE/cpu_core.c **** *                                              enabled ovrhd
 932:../Dave/Generated/UCPROBE/cpu_core.c **** *
 933:../Dave/Generated/UCPROBE/cpu_core.c **** *
 934:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (2) When interrupts disabled time measurements are enabled :
 935:../Dave/Generated/UCPROBE/cpu_core.c **** *
 936:../Dave/Generated/UCPROBE/cpu_core.c **** *
 937:../Dave/Generated/UCPROBE/cpu_core.c **** *        |                                    |                           |                        
 938:../Dave/Generated/UCPROBE/cpu_core.c **** *        |<----- CRITICAL SECTION ENTER ----->|                           |<------- CRITICAL SECTIO
 939:../Dave/Generated/UCPROBE/cpu_core.c **** *        |                                    |                           |                        
 940:../Dave/Generated/UCPROBE/cpu_core.c **** *
 941:../Dave/Generated/UCPROBE/cpu_core.c **** *                   Time                                                 Time
 942:../Dave/Generated/UCPROBE/cpu_core.c **** *     Disable    Measurement                                          Measurement                  
 943:../Dave/Generated/UCPROBE/cpu_core.c **** *    Interrupts     Start                                                Stop                    In
 944:../Dave/Generated/UCPROBE/cpu_core.c **** *
 945:../Dave/Generated/UCPROBE/cpu_core.c **** *        ||           |                      ||                           ||                       
 946:../Dave/Generated/UCPROBE/cpu_core.c **** *        ||           |                      ||                           ||                       
 947:../Dave/Generated/UCPROBE/cpu_core.c **** *        ||           |        |             ||<------------------------->||               |       
 948:../Dave/Generated/UCPROBE/cpu_core.c **** *        ||       |   |        |<----------->||             |             ||<------------->|       
 949:../Dave/Generated/UCPROBE/cpu_core.c **** *        ||       |   |        |      |      ||             |             ||       |       |       
 950:../Dave/Generated/UCPROBE/cpu_core.c **** *                 |            |      |                     |                      |       |       
 951:../Dave/Generated/UCPROBE/cpu_core.c **** *            interrupts       get     |                   time                     |      get      
 952:../Dave/Generated/UCPROBE/cpu_core.c **** *             disabled    start time  |                       interrupts           |   stop time   
 953:../Dave/Generated/UCPROBE/cpu_core.c **** *                            meas     |                        disabled            |     meas
 954:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   time                  (via application)      time
 955:../Dave/Generated/UCPROBE/cpu_core.c **** *                                       start meas                                   stop meas
 956:../Dave/Generated/UCPROBE/cpu_core.c **** *                                         ovrhd                                        ovrhd
 957:../Dave/Generated/UCPROBE/cpu_core.c **** *
 958:../Dave/Generated/UCPROBE/cpu_core.c **** *
 959:../Dave/Generated/UCPROBE/cpu_core.c **** *                           (A) time            =  [ time       -  time      ]  -  time
 960:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   interrupts     [      stop         start ]         total meas
 961:../Dave/Generated/UCPROBE/cpu_core.c **** *                                    disabled      [      meas         meas  ]           ovrhd
 962:../Dave/Generated/UCPROBE/cpu_core.c **** *                               (via application)
 963:../Dave/Generated/UCPROBE/cpu_core.c **** *
 964:../Dave/Generated/UCPROBE/cpu_core.c **** *
 965:../Dave/Generated/UCPROBE/cpu_core.c **** *                           (B) time            =  time            +  time
 966:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   total meas         start meas         stop meas
 967:../Dave/Generated/UCPROBE/cpu_core.c **** *                                     ovrhd              ovrhd              ovrhd
 968:../Dave/Generated/UCPROBE/cpu_core.c **** *
 969:../Dave/Generated/UCPROBE/cpu_core.c **** *
 970:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   where
 971:../Dave/Generated/UCPROBE/cpu_core.c **** *
 972:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    time interrupts are disabled be
 973:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               interrupts              critical section enter & la
 974:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                disabled               section exit (i.e. minus me
 975:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           (via application)           overhead time; however, thi
 976:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                                       include any overhead time t
 977:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                                       or enable interrupts during
 978:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                                       section enter & exit)
 979:../Dave/Generated/UCPROBE/cpu_core.c **** *
 980:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    time of disable interrupts star
 981:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               start                   measurement (in timer count
 982:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               meas
 983:../Dave/Generated/UCPROBE/cpu_core.c **** *
 984:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    time of disable interrupts stop
 985:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               stop                    measurement (in timer count
 986:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               meas
 987:../Dave/Generated/UCPROBE/cpu_core.c **** *
 988:../Dave/Generated/UCPROBE/cpu_core.c **** *
 989:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    total overhead time to start/st
 990:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               total meas              interrupts time measurement
 991:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                 ovrhd                 counts)
 992:../Dave/Generated/UCPROBE/cpu_core.c **** *
 993:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    total overhead time after getti
 994:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               start meas              time until end of start mea
 995:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                 ovrhd                 function  (in timer counts)
 996:../Dave/Generated/UCPROBE/cpu_core.c **** *
 997:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           time                    total overhead time from beginn
 998:../Dave/Generated/UCPROBE/cpu_core.c **** *                                               stop meas               measurement function until 
 999:../Dave/Generated/UCPROBE/cpu_core.c **** *                                                 ovrhd                 stop time (in timer counts)
1000:../Dave/Generated/UCPROBE/cpu_core.c **** *
1001:../Dave/Generated/UCPROBE/cpu_core.c **** *
1002:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) (1) (A) In order to correctly handle unsigned subtraction overflows of star
1003:../Dave/Generated/UCPROBE/cpu_core.c **** *                               from stop times, CPU timestamp timer count values MUST be returned 
1004:../Dave/Generated/UCPROBE/cpu_core.c **** *                               word-size-configurable 'CPU_TS_TMR' data type.
1005:../Dave/Generated/UCPROBE/cpu_core.c **** *
1006:../Dave/Generated/UCPROBE/cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2a
1007:../Dave/Generated/UCPROBE/cpu_core.c **** *
1008:../Dave/Generated/UCPROBE/cpu_core.c **** *                           (B) Since unsigned subtraction of start times from stop times assumes i
1009:../Dave/Generated/UCPROBE/cpu_core.c **** *                               values, timestamp timer count values MUST increase with each time c
1010:../Dave/Generated/UCPROBE/cpu_core.c **** *
1011:../Dave/Generated/UCPROBE/cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2b
1012:../Dave/Generated/UCPROBE/cpu_core.c **** *
1013:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (2) (A) To expedite & reduce interrupts disabled time measurement overhead;
1014:../Dave/Generated/UCPROBE/cpu_core.c **** *                               subtraction of start times from stop times is performed.
1015:../Dave/Generated/UCPROBE/cpu_core.c **** *
1016:../Dave/Generated/UCPROBE/cpu_core.c **** *                           (B) The final calculations to subtract the interrupts disabled time mea
1017:../Dave/Generated/UCPROBE/cpu_core.c **** *                               overhead is performed asynchronously in appropriate API functions.
1018:../Dave/Generated/UCPROBE/cpu_core.c **** *
1019:../Dave/Generated/UCPROBE/cpu_core.c **** *                               See also 'CPU_IntDisMeasMaxCalc()  Note #1b'.
1020:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1021:../Dave/Generated/UCPROBE/cpu_core.c **** */
1022:../Dave/Generated/UCPROBE/cpu_core.c **** 
1023:../Dave/Generated/UCPROBE/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
1024:../Dave/Generated/UCPROBE/cpu_core.c **** void  CPU_IntDisMeasStop (void)
1025:../Dave/Generated/UCPROBE/cpu_core.c **** {
1026:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_TS_TMR  time_ints_disd_cnts;
1027:../Dave/Generated/UCPROBE/cpu_core.c **** 
1028:../Dave/Generated/UCPROBE/cpu_core.c **** 
1029:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_IntDisNestCtr--;
1030:../Dave/Generated/UCPROBE/cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,    
1031:../Dave/Generated/UCPROBE/cpu_core.c ****         CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop tim
1032:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                     /* ... calc ints dis'd tot  tim
1033:../Dave/Generated/UCPROBE/cpu_core.c ****         time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
1034:../Dave/Generated/UCPROBE/cpu_core.c ****                                   CPU_IntDisMeasStart_cnts;
1035:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                     /* Calc max ints dis'd times.  
1036:../Dave/Generated/UCPROBE/cpu_core.c ****         if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
1037:../Dave/Generated/UCPROBE/cpu_core.c ****             CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
1038:../Dave/Generated/UCPROBE/cpu_core.c ****         }
1039:../Dave/Generated/UCPROBE/cpu_core.c ****         if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
1040:../Dave/Generated/UCPROBE/cpu_core.c ****             CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
1041:../Dave/Generated/UCPROBE/cpu_core.c ****         }
1042:../Dave/Generated/UCPROBE/cpu_core.c ****     }
1043:../Dave/Generated/UCPROBE/cpu_core.c **** }
1044:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1045:../Dave/Generated/UCPROBE/cpu_core.c **** 
1046:../Dave/Generated/UCPROBE/cpu_core.c **** 
1047:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1048:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1049:../Dave/Generated/UCPROBE/cpu_core.c **** *                                         CPU_CntLeadZeros()
1050:../Dave/Generated/UCPROBE/cpu_core.c **** *
1051:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a data value
1052:../Dave/Generated/UCPROBE/cpu_core.c **** *
1053:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1054:../Dave/Generated/UCPROBE/cpu_core.c **** *
1055:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val', if NO error(s).
1056:../Dave/Generated/UCPROBE/cpu_core.c **** *
1057:../Dave/Generated/UCPROBE/cpu_core.c **** *               DEF_INT_CPU_U_MAX_VAL,                                              otherwise.
1058:../Dave/Generated/UCPROBE/cpu_core.c **** *
1059:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_CntTrailZeros(),
1060:../Dave/Generated/UCPROBE/cpu_core.c **** *               Application.
1061:../Dave/Generated/UCPROBE/cpu_core.c **** *
1062:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1063:../Dave/Generated/UCPROBE/cpu_core.c **** *               be called by application function(s).
1064:../Dave/Generated/UCPROBE/cpu_core.c **** *
1065:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
1066:../Dave/Generated/UCPROBE/cpu_core.c **** *
1067:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (1)  8-bits
1068:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (2) 16-bits
1069:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (3) 32-bits
1070:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (4) 64-bits
1071:../Dave/Generated/UCPROBE/cpu_core.c **** *
1072:../Dave/Generated/UCPROBE/cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
1073:../Dave/Generated/UCPROBE/cpu_core.c **** *
1074:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) (1) For  8-bit values :
1075:../Dave/Generated/UCPROBE/cpu_core.c **** *
1076:../Dave/Generated/UCPROBE/cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
1077:../Dave/Generated/UCPROBE/cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ---------------
1078:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   1    x    x    x    x    x    x    x            0
1079:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   0    1    x    x    x    x    x    x            1
1080:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   0    0    1    x    x    x    x    x            2
1081:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   0    0    0    1    x    x    x    x            3
1082:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   0    0    0    0    1    x    x    x            4
1083:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   0    0    0    0    0    1    x    x            5
1084:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   0    0    0    0    0    0    1    x            6
1085:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   0    0    0    0    0    0    0    1            7
1086:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1087:../Dave/Generated/UCPROBE/cpu_core.c **** *
1088:../Dave/Generated/UCPROBE/cpu_core.c **** *
1089:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (2) For 16-bit values :
1090:../Dave/Generated/UCPROBE/cpu_core.c **** *
1091:../Dave/Generated/UCPROBE/cpu_core.c **** *                             b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1092:../Dave/Generated/UCPROBE/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1093:../Dave/Generated/UCPROBE/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1094:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1095:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1096:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1097:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1098:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         1    x    x    x    x           11
1099:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    1    x    x    x           12
1100:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    1    x    x           13
1101:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    0    1    x           14
1102:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    0    0    1           15
1103:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    0    0    0           16
1104:../Dave/Generated/UCPROBE/cpu_core.c **** *
1105:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (3) For 32-bit values :
1106:../Dave/Generated/UCPROBE/cpu_core.c **** *
1107:../Dave/Generated/UCPROBE/cpu_core.c **** *                             b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1108:../Dave/Generated/UCPROBE/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1109:../Dave/Generated/UCPROBE/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1110:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1111:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1112:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1113:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1114:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         1    x    x    x    x           27
1115:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    1    x    x    x           28
1116:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    1    x    x           29
1117:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    0    1    x           30
1118:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    0    0    1           31
1119:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    0    0    0           32
1120:../Dave/Generated/UCPROBE/cpu_core.c **** *
1121:../Dave/Generated/UCPROBE/cpu_core.c **** *
1122:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (4) For 64-bit values :
1123:../Dave/Generated/UCPROBE/cpu_core.c **** *
1124:../Dave/Generated/UCPROBE/cpu_core.c **** *                             b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1125:../Dave/Generated/UCPROBE/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1126:../Dave/Generated/UCPROBE/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1127:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1128:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1129:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1130:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1131:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         1    x    x    x    x           59
1132:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    1    x    x    x           60
1133:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    1    x    x           61
1134:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    0    1    x           62
1135:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    0    0    1           63
1136:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0         0    0    0    0    0           64
1137:../Dave/Generated/UCPROBE/cpu_core.c **** *
1138:../Dave/Generated/UCPROBE/cpu_core.c **** *
1139:../Dave/Generated/UCPROBE/cpu_core.c **** *                       See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1140:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1141:../Dave/Generated/UCPROBE/cpu_core.c **** */
1142:../Dave/Generated/UCPROBE/cpu_core.c **** 
1143:../Dave/Generated/UCPROBE/cpu_core.c **** #ifndef   CPU_CFG_LEAD_ZEROS_ASM_PRESENT
1144:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros (CPU_DATA  val)
1145:../Dave/Generated/UCPROBE/cpu_core.c **** {
1146:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1147:../Dave/Generated/UCPROBE/cpu_core.c **** 
1148:../Dave/Generated/UCPROBE/cpu_core.c **** 
1149:../Dave/Generated/UCPROBE/cpu_core.c **** #if   (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_08)
1150:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros08((CPU_INT08U)val);
1151:../Dave/Generated/UCPROBE/cpu_core.c **** 
1152:../Dave/Generated/UCPROBE/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_16)
1153:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros16((CPU_INT16U)val);
1154:../Dave/Generated/UCPROBE/cpu_core.c **** 
1155:../Dave/Generated/UCPROBE/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_32)
1156:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros32((CPU_INT32U)val);
1157:../Dave/Generated/UCPROBE/cpu_core.c **** 
1158:../Dave/Generated/UCPROBE/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_64)
1159:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros64((CPU_INT64U)val);
1160:../Dave/Generated/UCPROBE/cpu_core.c **** 
1161:../Dave/Generated/UCPROBE/cpu_core.c **** #else                                                           /* See Note #1a.                   
1162:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros = DEF_INT_CPU_U_MAX_VAL;
1163:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1164:../Dave/Generated/UCPROBE/cpu_core.c **** 
1165:../Dave/Generated/UCPROBE/cpu_core.c **** 
1166:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_lead_zeros);
1167:../Dave/Generated/UCPROBE/cpu_core.c **** }
1168:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1169:../Dave/Generated/UCPROBE/cpu_core.c **** 
1170:../Dave/Generated/UCPROBE/cpu_core.c **** 
1171:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1172:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1173:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_CntLeadZeros08()
1174:../Dave/Generated/UCPROBE/cpu_core.c **** *
1175:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in an 8-bit dat
1176:../Dave/Generated/UCPROBE/cpu_core.c **** *
1177:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1178:../Dave/Generated/UCPROBE/cpu_core.c **** *
1179:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1180:../Dave/Generated/UCPROBE/cpu_core.c **** *
1181:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1182:../Dave/Generated/UCPROBE/cpu_core.c **** *               CPU_CntTrailZeros08(),
1183:../Dave/Generated/UCPROBE/cpu_core.c **** *               Application.
1184:../Dave/Generated/UCPROBE/cpu_core.c **** *
1185:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1186:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
1187:../Dave/Generated/UCPROBE/cpu_core.c **** *
1188:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1189:../Dave/Generated/UCPROBE/cpu_core.c **** *
1190:../Dave/Generated/UCPROBE/cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
1191:../Dave/Generated/UCPROBE/cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ---------------
1192:../Dave/Generated/UCPROBE/cpu_core.c **** *                                1    x    x    x    x    x    x    x            0
1193:../Dave/Generated/UCPROBE/cpu_core.c **** *                                0    1    x    x    x    x    x    x            1
1194:../Dave/Generated/UCPROBE/cpu_core.c **** *                                0    0    1    x    x    x    x    x            2
1195:../Dave/Generated/UCPROBE/cpu_core.c **** *                                0    0    0    1    x    x    x    x            3
1196:../Dave/Generated/UCPROBE/cpu_core.c **** *                                0    0    0    0    1    x    x    x            4
1197:../Dave/Generated/UCPROBE/cpu_core.c **** *                                0    0    0    0    0    1    x    x            5
1198:../Dave/Generated/UCPROBE/cpu_core.c **** *                                0    0    0    0    0    0    1    x            6
1199:../Dave/Generated/UCPROBE/cpu_core.c **** *                                0    0    0    0    0    0    0    1            7
1200:../Dave/Generated/UCPROBE/cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1201:../Dave/Generated/UCPROBE/cpu_core.c **** *
1202:../Dave/Generated/UCPROBE/cpu_core.c **** *
1203:../Dave/Generated/UCPROBE/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1204:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1205:../Dave/Generated/UCPROBE/cpu_core.c **** */
1206:../Dave/Generated/UCPROBE/cpu_core.c **** 
1207:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
1208:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val)
1209:../Dave/Generated/UCPROBE/cpu_core.c **** {
 355              	 .loc 1 1209 0
 356              	 .cfi_startproc
 357              	 
 358              	 
 359 0000 80B5     	 push {r7,lr}
 360              	.LCFI6:
 361              	 .cfi_def_cfa_offset 8
 362              	 .cfi_offset 7,-8
 363              	 .cfi_offset 14,-4
 364 0002 84B0     	 sub sp,sp,#16
 365              	.LCFI7:
 366              	 .cfi_def_cfa_offset 24
 367 0004 00AF     	 add r7,sp,#0
 368              	.LCFI8:
 369              	 .cfi_def_cfa_register 7
 370 0006 0346     	 mov r3,r0
 371 0008 FB71     	 strb r3,[r7,#7]
1210:../Dave/Generated/UCPROBE/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1211:../Dave/Generated/UCPROBE/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1212:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  ix;
1213:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1214:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1215:../Dave/Generated/UCPROBE/cpu_core.c **** 
1216:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* ---------- ASM-O
1217:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1218:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1219:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 372              	 .loc 1 1219 0
 373 000a FB79     	 ldrb r3,[r7,#7]
 374 000c 1846     	 mov r0,r3
 375 000e FFF7FEFF 	 bl CPU_CntLeadZeros
 376 0012 F860     	 str r0,[r7,#12]
1220:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
 377              	 .loc 1 1220 0
 378 0014 FB68     	 ldr r3,[r7,#12]
 379 0016 183B     	 subs r3,r3,#24
 380 0018 FB60     	 str r3,[r7,#12]
1221:../Dave/Generated/UCPROBE/cpu_core.c **** 
1222:../Dave/Generated/UCPROBE/cpu_core.c **** 
1223:../Dave/Generated/UCPROBE/cpu_core.c **** #else                                                                           /* ----------- C-OP
1224:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* Chk bits [07:00]
1225:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1226:../Dave/Generated/UCPROBE/cpu_core.c ****     ix              = (CPU_DATA)(val);                                          /* .. lookup tbl ix
1227:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);                      /* .. plus nbr msb 
1228:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1229:../Dave/Generated/UCPROBE/cpu_core.c **** 
1230:../Dave/Generated/UCPROBE/cpu_core.c **** 
1231:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_lead_zeros);
 381              	 .loc 1 1231 0
 382 001a FB68     	 ldr r3,[r7,#12]
1232:../Dave/Generated/UCPROBE/cpu_core.c **** }
 383              	 .loc 1 1232 0
 384 001c 1846     	 mov r0,r3
 385 001e 1037     	 adds r7,r7,#16
 386              	.LCFI9:
 387              	 .cfi_def_cfa_offset 8
 388 0020 BD46     	 mov sp,r7
 389              	.LCFI10:
 390              	 .cfi_def_cfa_register 13
 391              	 
 392 0022 80BD     	 pop {r7,pc}
 393              	 .cfi_endproc
 394              	.LFE2:
 396              	 .section .text.CPU_CntLeadZeros16,"ax",%progbits
 397              	 .align 2
 398              	 .global CPU_CntLeadZeros16
 399              	 .thumb
 400              	 .thumb_func
 402              	CPU_CntLeadZeros16:
 403              	.LFB3:
1233:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1234:../Dave/Generated/UCPROBE/cpu_core.c **** 
1235:../Dave/Generated/UCPROBE/cpu_core.c **** 
1236:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1237:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1238:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_CntLeadZeros16()
1239:../Dave/Generated/UCPROBE/cpu_core.c **** *
1240:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 16-bit dat
1241:../Dave/Generated/UCPROBE/cpu_core.c **** *
1242:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1243:../Dave/Generated/UCPROBE/cpu_core.c **** *
1244:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1245:../Dave/Generated/UCPROBE/cpu_core.c **** *
1246:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1247:../Dave/Generated/UCPROBE/cpu_core.c **** *               CPU_CntTrailZeros16(),
1248:../Dave/Generated/UCPROBE/cpu_core.c **** *               Application.
1249:../Dave/Generated/UCPROBE/cpu_core.c **** *
1250:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1251:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
1252:../Dave/Generated/UCPROBE/cpu_core.c **** *
1253:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1254:../Dave/Generated/UCPROBE/cpu_core.c **** *
1255:../Dave/Generated/UCPROBE/cpu_core.c **** *                          b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1256:../Dave/Generated/UCPROBE/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1257:../Dave/Generated/UCPROBE/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1258:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1259:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1260:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1261:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1262:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         1    x    x    x    x           11
1263:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    1    x    x    x           12
1264:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    1    x    x           13
1265:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    0    1    x           14
1266:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    0    0    1           15
1267:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    0    0    0           16
1268:../Dave/Generated/UCPROBE/cpu_core.c **** *
1269:../Dave/Generated/UCPROBE/cpu_core.c **** *
1270:../Dave/Generated/UCPROBE/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1271:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1272:../Dave/Generated/UCPROBE/cpu_core.c **** */
1273:../Dave/Generated/UCPROBE/cpu_core.c **** 
1274:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1275:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val)
1276:../Dave/Generated/UCPROBE/cpu_core.c **** {
 404              	 .loc 1 1276 0
 405              	 .cfi_startproc
 406              	 
 407              	 
 408 0000 80B5     	 push {r7,lr}
 409              	.LCFI11:
 410              	 .cfi_def_cfa_offset 8
 411              	 .cfi_offset 7,-8
 412              	 .cfi_offset 14,-4
 413 0002 84B0     	 sub sp,sp,#16
 414              	.LCFI12:
 415              	 .cfi_def_cfa_offset 24
 416 0004 00AF     	 add r7,sp,#0
 417              	.LCFI13:
 418              	 .cfi_def_cfa_register 7
 419 0006 0346     	 mov r3,r0
 420 0008 FB80     	 strh r3,[r7,#6]
1277:../Dave/Generated/UCPROBE/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1278:../Dave/Generated/UCPROBE/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1279:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  ix;
1280:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1281:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1282:../Dave/Generated/UCPROBE/cpu_core.c **** 
1283:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* ---------- ASM-O
1284:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1285:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1286:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 421              	 .loc 1 1286 0
 422 000a FB88     	 ldrh r3,[r7,#6]
 423 000c 1846     	 mov r0,r3
 424 000e FFF7FEFF 	 bl CPU_CntLeadZeros
 425 0012 F860     	 str r0,[r7,#12]
1287:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
 426              	 .loc 1 1287 0
 427 0014 FB68     	 ldr r3,[r7,#12]
 428 0016 103B     	 subs r3,r3,#16
 429 0018 FB60     	 str r3,[r7,#12]
1288:../Dave/Generated/UCPROBE/cpu_core.c **** 
1289:../Dave/Generated/UCPROBE/cpu_core.c **** 
1290:../Dave/Generated/UCPROBE/cpu_core.c **** #else                                                                           /* ----------- C-OP
1291:../Dave/Generated/UCPROBE/cpu_core.c ****     if (val > 0x00FFu) {                                                        /* Chk bits [15:08]
1292:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1293:../Dave/Generated/UCPROBE/cpu_core.c ****         ix             = (CPU_DATA)((CPU_DATA)val >> 8u);                       /* .. lookup tbl ix
1294:../Dave/Generated/UCPROBE/cpu_core.c ****         nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);                   /* .. plus nbr msb 
1295:../Dave/Generated/UCPROBE/cpu_core.c **** 
1296:../Dave/Generated/UCPROBE/cpu_core.c ****     } else {                                                                    /* Chk bits [07:00]
1297:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1298:../Dave/Generated/UCPROBE/cpu_core.c ****         ix             = (CPU_DATA)(val);                                       /* .. lookup tbl ix
1299:../Dave/Generated/UCPROBE/cpu_core.c ****         nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] +  8u);   /* .. plus nbr msb 
1300:../Dave/Generated/UCPROBE/cpu_core.c ****     }
1301:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1302:../Dave/Generated/UCPROBE/cpu_core.c **** 
1303:../Dave/Generated/UCPROBE/cpu_core.c **** 
1304:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_lead_zeros);
 430              	 .loc 1 1304 0
 431 001a FB68     	 ldr r3,[r7,#12]
1305:../Dave/Generated/UCPROBE/cpu_core.c **** }
 432              	 .loc 1 1305 0
 433 001c 1846     	 mov r0,r3
 434 001e 1037     	 adds r7,r7,#16
 435              	.LCFI14:
 436              	 .cfi_def_cfa_offset 8
 437 0020 BD46     	 mov sp,r7
 438              	.LCFI15:
 439              	 .cfi_def_cfa_register 13
 440              	 
 441 0022 80BD     	 pop {r7,pc}
 442              	 .cfi_endproc
 443              	.LFE3:
 445              	 .section .text.CPU_CntLeadZeros32,"ax",%progbits
 446              	 .align 2
 447              	 .global CPU_CntLeadZeros32
 448              	 .thumb
 449              	 .thumb_func
 451              	CPU_CntLeadZeros32:
 452              	.LFB4:
1306:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1307:../Dave/Generated/UCPROBE/cpu_core.c **** 
1308:../Dave/Generated/UCPROBE/cpu_core.c **** 
1309:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1310:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1311:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_CntLeadZeros32()
1312:../Dave/Generated/UCPROBE/cpu_core.c **** *
1313:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 32-bit dat
1314:../Dave/Generated/UCPROBE/cpu_core.c **** *
1315:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1316:../Dave/Generated/UCPROBE/cpu_core.c **** *
1317:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1318:../Dave/Generated/UCPROBE/cpu_core.c **** *
1319:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1320:../Dave/Generated/UCPROBE/cpu_core.c **** *               CPU_CntTrailZeros32(),
1321:../Dave/Generated/UCPROBE/cpu_core.c **** *               Application.
1322:../Dave/Generated/UCPROBE/cpu_core.c **** *
1323:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1324:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
1325:../Dave/Generated/UCPROBE/cpu_core.c **** *
1326:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1327:../Dave/Generated/UCPROBE/cpu_core.c **** *
1328:../Dave/Generated/UCPROBE/cpu_core.c **** *                          b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1329:../Dave/Generated/UCPROBE/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1330:../Dave/Generated/UCPROBE/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1331:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1332:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1333:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1334:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1335:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         1    x    x    x    x           27
1336:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    1    x    x    x           28
1337:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    1    x    x           29
1338:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    0    1    x           30
1339:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    0    0    1           31
1340:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    0    0    0           32
1341:../Dave/Generated/UCPROBE/cpu_core.c **** *
1342:../Dave/Generated/UCPROBE/cpu_core.c **** *
1343:../Dave/Generated/UCPROBE/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1344:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1345:../Dave/Generated/UCPROBE/cpu_core.c **** */
1346:../Dave/Generated/UCPROBE/cpu_core.c **** 
1347:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1348:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val)
1349:../Dave/Generated/UCPROBE/cpu_core.c **** {
 453              	 .loc 1 1349 0
 454              	 .cfi_startproc
 455              	 
 456              	 
 457 0000 80B5     	 push {r7,lr}
 458              	.LCFI16:
 459              	 .cfi_def_cfa_offset 8
 460              	 .cfi_offset 7,-8
 461              	 .cfi_offset 14,-4
 462 0002 84B0     	 sub sp,sp,#16
 463              	.LCFI17:
 464              	 .cfi_def_cfa_offset 24
 465 0004 00AF     	 add r7,sp,#0
 466              	.LCFI18:
 467              	 .cfi_def_cfa_register 7
 468 0006 7860     	 str r0,[r7,#4]
1350:../Dave/Generated/UCPROBE/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1351:../Dave/Generated/UCPROBE/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1352:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  ix;
1353:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1354:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1355:../Dave/Generated/UCPROBE/cpu_core.c **** 
1356:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* ---------- ASM-O
1357:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1358:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1359:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 469              	 .loc 1 1359 0
 470 0008 7868     	 ldr r0,[r7,#4]
 471 000a FFF7FEFF 	 bl CPU_CntLeadZeros
 472 000e F860     	 str r0,[r7,#12]
1360:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
1361:../Dave/Generated/UCPROBE/cpu_core.c **** 
1362:../Dave/Generated/UCPROBE/cpu_core.c **** 
1363:../Dave/Generated/UCPROBE/cpu_core.c **** #else                                                                           /* ----------- C-OP
1364:../Dave/Generated/UCPROBE/cpu_core.c ****     if (val > 0x0000FFFFu) {
1365:../Dave/Generated/UCPROBE/cpu_core.c ****         if (val > 0x00FFFFFFu) {                                                /* Chk bits [31:24]
1366:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1367:../Dave/Generated/UCPROBE/cpu_core.c ****             ix             = (CPU_DATA)((CPU_DATA)(val >> 24u));                /* .. lookup tbl ix
1368:../Dave/Generated/UCPROBE/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);               /* .. plus nbr msb 
1369:../Dave/Generated/UCPROBE/cpu_core.c **** 
1370:../Dave/Generated/UCPROBE/cpu_core.c ****         } else {                                                                /* Chk bits [23:16]
1371:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1372:../Dave/Generated/UCPROBE/cpu_core.c ****             ix             = (CPU_DATA)((CPU_DATA)(val >> 16u));                /* .. lookup tbl ix
1373:../Dave/Generated/UCPROBE/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] +  8u);/* .. plus nbr msb
1374:../Dave/Generated/UCPROBE/cpu_core.c ****         }
1375:../Dave/Generated/UCPROBE/cpu_core.c **** 
1376:../Dave/Generated/UCPROBE/cpu_core.c ****     } else {
1377:../Dave/Generated/UCPROBE/cpu_core.c ****         if (val > 0x000000FFu) {                                                /* Chk bits [15:08]
1378:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1379:../Dave/Generated/UCPROBE/cpu_core.c ****             ix             = (CPU_DATA)((CPU_DATA)(val >>  8u));                /* .. lookup tbl ix
1380:../Dave/Generated/UCPROBE/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] + 16u);/* .. plus nbr msb
1381:../Dave/Generated/UCPROBE/cpu_core.c **** 
1382:../Dave/Generated/UCPROBE/cpu_core.c ****         } else {                                                                /* Chk bits [07:00]
1383:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1384:../Dave/Generated/UCPROBE/cpu_core.c ****             ix             = (CPU_DATA)((CPU_DATA)(val >>  0u));                /* .. lookup tbl ix
1385:../Dave/Generated/UCPROBE/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] + 24u);/* .. plus nbr msb
1386:../Dave/Generated/UCPROBE/cpu_core.c ****         }
1387:../Dave/Generated/UCPROBE/cpu_core.c ****     }
1388:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1389:../Dave/Generated/UCPROBE/cpu_core.c **** 
1390:../Dave/Generated/UCPROBE/cpu_core.c **** 
1391:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_lead_zeros);
 473              	 .loc 1 1391 0
 474 0010 FB68     	 ldr r3,[r7,#12]
1392:../Dave/Generated/UCPROBE/cpu_core.c **** }
 475              	 .loc 1 1392 0
 476 0012 1846     	 mov r0,r3
 477 0014 1037     	 adds r7,r7,#16
 478              	.LCFI19:
 479              	 .cfi_def_cfa_offset 8
 480 0016 BD46     	 mov sp,r7
 481              	.LCFI20:
 482              	 .cfi_def_cfa_register 13
 483              	 
 484 0018 80BD     	 pop {r7,pc}
 485              	 .cfi_endproc
 486              	.LFE4:
 488 001a 00BF     	 .section .text.CPU_CntLeadZeros64,"ax",%progbits
 489              	 .align 2
 490              	 .global CPU_CntLeadZeros64
 491              	 .thumb
 492              	 .thumb_func
 494              	CPU_CntLeadZeros64:
 495              	.LFB5:
1393:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1394:../Dave/Generated/UCPROBE/cpu_core.c **** 
1395:../Dave/Generated/UCPROBE/cpu_core.c **** 
1396:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1397:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1398:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_CntLeadZeros64()
1399:../Dave/Generated/UCPROBE/cpu_core.c **** *
1400:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 64-bit dat
1401:../Dave/Generated/UCPROBE/cpu_core.c **** *
1402:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1403:../Dave/Generated/UCPROBE/cpu_core.c **** *
1404:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1405:../Dave/Generated/UCPROBE/cpu_core.c **** *
1406:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1407:../Dave/Generated/UCPROBE/cpu_core.c **** *               CPU_CntTrailZeros64(),
1408:../Dave/Generated/UCPROBE/cpu_core.c **** *               Application.
1409:../Dave/Generated/UCPROBE/cpu_core.c **** *
1410:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1411:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
1412:../Dave/Generated/UCPROBE/cpu_core.c **** *
1413:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1414:../Dave/Generated/UCPROBE/cpu_core.c **** *
1415:../Dave/Generated/UCPROBE/cpu_core.c **** *                          b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1416:../Dave/Generated/UCPROBE/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1417:../Dave/Generated/UCPROBE/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1418:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1419:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1420:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1421:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1422:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         1    x    x    x    x           59
1423:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    1    x    x    x           60
1424:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    1    x    x           61
1425:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    0    1    x           62
1426:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    0    0    1           63
1427:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0         0    0    0    0    0           64
1428:../Dave/Generated/UCPROBE/cpu_core.c **** *
1429:../Dave/Generated/UCPROBE/cpu_core.c **** *
1430:../Dave/Generated/UCPROBE/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1431:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1432:../Dave/Generated/UCPROBE/cpu_core.c **** */
1433:../Dave/Generated/UCPROBE/cpu_core.c **** 
1434:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
1435:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val)
1436:../Dave/Generated/UCPROBE/cpu_core.c **** {
 496              	 .loc 1 1436 0
 497              	 .cfi_startproc
 498              	 
 499              	 
 500              	 
 501 0000 2DE9B00F 	 push {r4,r5,r7,r8,r9,r10,fp}
 502              	.LCFI21:
 503              	 .cfi_def_cfa_offset 28
 504              	 .cfi_offset 4,-28
 505              	 .cfi_offset 5,-24
 506              	 .cfi_offset 7,-20
 507              	 .cfi_offset 8,-16
 508              	 .cfi_offset 9,-12
 509              	 .cfi_offset 10,-8
 510              	 .cfi_offset 11,-4
 511 0004 8DB0     	 sub sp,sp,#52
 512              	.LCFI22:
 513              	 .cfi_def_cfa_offset 80
 514 0006 00AF     	 add r7,sp,#0
 515              	.LCFI23:
 516              	 .cfi_def_cfa_register 7
 517 0008 C7E90801 	 strd r0,[r7,#32]
1437:../Dave/Generated/UCPROBE/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1438:../Dave/Generated/UCPROBE/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
1439:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  ix;
1440:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1441:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1442:../Dave/Generated/UCPROBE/cpu_core.c **** 
1443:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* ---------- ASM-O
1444:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1445:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
1446:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
1447:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCTET_NBR_BITS;
1448:../Dave/Generated/UCPROBE/cpu_core.c **** 
1449:../Dave/Generated/UCPROBE/cpu_core.c **** 
1450:../Dave/Generated/UCPROBE/cpu_core.c **** #else                                                                           /* ----------- C-OP
1451:../Dave/Generated/UCPROBE/cpu_core.c ****     if (val > 0x00000000FFFFFFFFu) {
 518              	 .loc 1 1451 0
 519 000c D7E90823 	 ldrd r2,[r7,#32]
 520 0010 012B     	 cmp r3,#1
 521 0012 08BF     	 it eq
 522 0014 002A     	 cmpeq r2,#0
 523 0016 55D3     	 bcc .L11
1452:../Dave/Generated/UCPROBE/cpu_core.c ****         if (val > 0x0000FFFFFFFFFFFFu) {
 524              	 .loc 1 1452 0
 525 0018 D7E90823 	 ldrd r2,[r7,#32]
 526 001c 4FF0FF30 	 mov r0,#-1
 527 0020 4FF6FF71 	 movw r1,#65535
 528 0024 9942     	 cmp r1,r3
 529 0026 08BF     	 it eq
 530 0028 9042     	 cmpeq r0,r2
 531 002a 26D2     	 bcs .L12
1453:../Dave/Generated/UCPROBE/cpu_core.c ****             if (val > 0x00FFFFFFFFFFFFFFu) {                                    /* Chk bits [63:56]
 532              	 .loc 1 1453 0
 533 002c D7E90823 	 ldrd r2,[r7,#32]
 534 0030 4FF0FF30 	 mov r0,#-1
 535 0034 6FF07F41 	 mvn r1,#-16777216
 536 0038 9942     	 cmp r1,r3
 537 003a 08BF     	 it eq
 538 003c 9042     	 cmpeq r0,r2
 539 003e 0DD2     	 bcs .L13
1454:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1455:../Dave/Generated/UCPROBE/cpu_core.c ****                 ix             = (CPU_DATA)((CPU_INT64U)val >> 56u);            /* .. lookup tbl ix
 540              	 .loc 1 1455 0
 541 0040 D7E90823 	 ldrd r2,[r7,#32]
 542 0044 1B0E     	 lsrs r3,r3,#24
 543 0046 BB61     	 str r3,[r7,#24]
 544 0048 0023     	 movs r3,#0
 545 004a FB61     	 str r3,[r7,#28]
 546 004c BB69     	 ldr r3,[r7,#24]
 547 004e BB62     	 str r3,[r7,#40]
1456:../Dave/Generated/UCPROBE/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);           /* .. plus nbr msb 
 548              	 .loc 1 1456 0
 549 0050 4A4A     	 ldr r2,.L23
 550 0052 BB6A     	 ldr r3,[r7,#40]
 551 0054 1344     	 add r3,r3,r2
 552 0056 1B78     	 ldrb r3,[r3]
 553 0058 FB62     	 str r3,[r7,#44]
 554 005a 87E0     	 b .L17
 555              	.L13:
1457:../Dave/Generated/UCPROBE/cpu_core.c **** 
1458:../Dave/Generated/UCPROBE/cpu_core.c ****             } else {                                                            /* Chk bits [55:48]
1459:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1460:../Dave/Generated/UCPROBE/cpu_core.c ****                 ix             = (CPU_DATA)((CPU_INT64U)val >> 48u);            /* .. lookup tbl ix
 556              	 .loc 1 1460 0
 557 005c D7E90823 	 ldrd r2,[r7,#32]
 558 0060 1B0C     	 lsrs r3,r3,#16
 559 0062 3B61     	 str r3,[r7,#16]
 560 0064 0023     	 movs r3,#0
 561 0066 7B61     	 str r3,[r7,#20]
 562 0068 3B69     	 ldr r3,[r7,#16]
 563 006a BB62     	 str r3,[r7,#40]
1461:../Dave/Generated/UCPROBE/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] +  8u);/* .. plus n
 564              	 .loc 1 1461 0
 565 006c 434A     	 ldr r2,.L23
 566 006e BB6A     	 ldr r3,[r7,#40]
 567 0070 1344     	 add r3,r3,r2
 568 0072 1B78     	 ldrb r3,[r3]
 569 0074 0833     	 adds r3,r3,#8
 570 0076 FB62     	 str r3,[r7,#44]
 571 0078 78E0     	 b .L17
 572              	.L12:
1462:../Dave/Generated/UCPROBE/cpu_core.c ****             }
1463:../Dave/Generated/UCPROBE/cpu_core.c **** 
1464:../Dave/Generated/UCPROBE/cpu_core.c ****         } else {
1465:../Dave/Generated/UCPROBE/cpu_core.c ****             if (val > 0x000000FFFFFFFFFFu) {                                    /* Chk bits [47:40]
 573              	 .loc 1 1465 0
 574 007a D7E90823 	 ldrd r2,[r7,#32]
 575 007e B3F5807F 	 cmp r3,#256
 576 0082 08BF     	 it eq
 577 0084 002A     	 cmpeq r2,#0
 578 0086 0ED3     	 bcc .L16
1466:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1467:../Dave/Generated/UCPROBE/cpu_core.c ****                 ix             = (CPU_DATA)((CPU_INT64U)val >> 40u);            /* .. lookup tbl ix
 579              	 .loc 1 1467 0
 580 0088 D7E90823 	 ldrd r2,[r7,#32]
 581 008c 1B0A     	 lsrs r3,r3,#8
 582 008e BB60     	 str r3,[r7,#8]
 583 0090 0023     	 movs r3,#0
 584 0092 FB60     	 str r3,[r7,#12]
 585 0094 BB68     	 ldr r3,[r7,#8]
 586 0096 BB62     	 str r3,[r7,#40]
1468:../Dave/Generated/UCPROBE/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 16u);/* .. plus n
 587              	 .loc 1 1468 0
 588 0098 384A     	 ldr r2,.L23
 589 009a BB6A     	 ldr r3,[r7,#40]
 590 009c 1344     	 add r3,r3,r2
 591 009e 1B78     	 ldrb r3,[r3]
 592 00a0 1033     	 adds r3,r3,#16
 593 00a2 FB62     	 str r3,[r7,#44]
 594 00a4 62E0     	 b .L17
 595              	.L16:
1469:../Dave/Generated/UCPROBE/cpu_core.c **** 
1470:../Dave/Generated/UCPROBE/cpu_core.c ****             } else {                                                            /* Chk bits [39:32]
1471:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1472:../Dave/Generated/UCPROBE/cpu_core.c ****                 ix             = (CPU_DATA)((CPU_INT64U)val >> 32u);            /* .. lookup tbl ix
 596              	 .loc 1 1472 0
 597 00a6 D7E90823 	 ldrd r2,[r7,#32]
 598 00aa 1B00     	 movs r3,r3
 599 00ac 3B60     	 str r3,[r7]
 600 00ae 0023     	 movs r3,#0
 601 00b0 7B60     	 str r3,[r7,#4]
 602 00b2 3B68     	 ldr r3,[r7]
 603 00b4 BB62     	 str r3,[r7,#40]
1473:../Dave/Generated/UCPROBE/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 24u);/* .. plus n
 604              	 .loc 1 1473 0
 605 00b6 314A     	 ldr r2,.L23
 606 00b8 BB6A     	 ldr r3,[r7,#40]
 607 00ba 1344     	 add r3,r3,r2
 608 00bc 1B78     	 ldrb r3,[r3]
 609 00be 1833     	 adds r3,r3,#24
 610 00c0 FB62     	 str r3,[r7,#44]
 611 00c2 53E0     	 b .L17
 612              	.L11:
1474:../Dave/Generated/UCPROBE/cpu_core.c ****             }
1475:../Dave/Generated/UCPROBE/cpu_core.c ****         }
1476:../Dave/Generated/UCPROBE/cpu_core.c **** 
1477:../Dave/Generated/UCPROBE/cpu_core.c ****     } else {
1478:../Dave/Generated/UCPROBE/cpu_core.c ****         if (val > 0x000000000000FFFFu) {
 613              	 .loc 1 1478 0
 614 00c4 D7E90823 	 ldrd r2,[r7,#32]
 615 00c8 4FF6FF70 	 movw r0,#65535
 616 00cc 4FF00001 	 mov r1,#0
 617 00d0 9942     	 cmp r1,r3
 618 00d2 08BF     	 it eq
 619 00d4 9042     	 cmpeq r0,r2
 620 00d6 2BD2     	 bcs .L18
1479:../Dave/Generated/UCPROBE/cpu_core.c ****             if (val > 0x0000000000FFFFFFu) {                                    /* Chk bits [31:24]
 621              	 .loc 1 1479 0
 622 00d8 D7E90823 	 ldrd r2,[r7,#32]
 623 00dc 6FF07F40 	 mvn r0,#-16777216
 624 00e0 4FF00001 	 mov r1,#0
 625 00e4 9942     	 cmp r1,r3
 626 00e6 08BF     	 it eq
 627 00e8 9042     	 cmpeq r0,r2
 628 00ea 10D2     	 bcs .L19
1480:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1481:../Dave/Generated/UCPROBE/cpu_core.c ****                 ix             = (CPU_DATA)((CPU_INT64U)val >> 24u);              /* .. lookup tbl 
 629              	 .loc 1 1481 0
 630 00ec D7E90823 	 ldrd r2,[r7,#32]
 631 00f0 4FEA126A 	 lsr r10,r2,#24
 632 00f4 4AEA032A 	 orr r10,r10,r3,lsl#8
 633 00f8 4FEA136B 	 lsr fp,r3,#24
 634 00fc 5346     	 mov r3,r10
 635 00fe BB62     	 str r3,[r7,#40]
1482:../Dave/Generated/UCPROBE/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 32u);/* .. plus n
 636              	 .loc 1 1482 0
 637 0100 1E4A     	 ldr r2,.L23
 638 0102 BB6A     	 ldr r3,[r7,#40]
 639 0104 1344     	 add r3,r3,r2
 640 0106 1B78     	 ldrb r3,[r3]
 641 0108 2033     	 adds r3,r3,#32
 642 010a FB62     	 str r3,[r7,#44]
 643 010c 2EE0     	 b .L17
 644              	.L19:
1483:../Dave/Generated/UCPROBE/cpu_core.c **** 
1484:../Dave/Generated/UCPROBE/cpu_core.c ****             } else {                                                            /* Chk bits [23:16]
1485:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1486:../Dave/Generated/UCPROBE/cpu_core.c ****                 ix             = (CPU_DATA)((CPU_INT64U)val >> 16u);            /* .. lookup tbl ix
 645              	 .loc 1 1486 0
 646 010e D7E90823 	 ldrd r2,[r7,#32]
 647 0112 4FEA1248 	 lsr r8,r2,#16
 648 0116 48EA0348 	 orr r8,r8,r3,lsl#16
 649 011a 4FEA1349 	 lsr r9,r3,#16
 650 011e 4346     	 mov r3,r8
 651 0120 BB62     	 str r3,[r7,#40]
1487:../Dave/Generated/UCPROBE/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 40u);/* .. plus n
 652              	 .loc 1 1487 0
 653 0122 164A     	 ldr r2,.L23
 654 0124 BB6A     	 ldr r3,[r7,#40]
 655 0126 1344     	 add r3,r3,r2
 656 0128 1B78     	 ldrb r3,[r3]
 657 012a 2833     	 adds r3,r3,#40
 658 012c FB62     	 str r3,[r7,#44]
 659 012e 1DE0     	 b .L17
 660              	.L18:
1488:../Dave/Generated/UCPROBE/cpu_core.c ****             }
1489:../Dave/Generated/UCPROBE/cpu_core.c **** 
1490:../Dave/Generated/UCPROBE/cpu_core.c ****         } else {
1491:../Dave/Generated/UCPROBE/cpu_core.c ****             if (val > 0x00000000000000FFu) {                                    /* Chk bits [15:08]
 661              	 .loc 1 1491 0
 662 0130 D7E90823 	 ldrd r2,[r7,#32]
 663 0134 002B     	 cmp r3,#0
 664 0136 08BF     	 it eq
 665 0138 B2F5807F 	 cmpeq r2,#256
 666 013c 0ED3     	 bcc .L21
1492:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1493:../Dave/Generated/UCPROBE/cpu_core.c ****                 ix             = (CPU_DATA)((CPU_INT64U)val >>  8u);            /* .. lookup tbl ix
 667              	 .loc 1 1493 0
 668 013e D7E90823 	 ldrd r2,[r7,#32]
 669 0142 140A     	 lsrs r4,r2,#8
 670 0144 44EA0364 	 orr r4,r4,r3,lsl#24
 671 0148 1D0A     	 lsrs r5,r3,#8
 672 014a 2346     	 mov r3,r4
 673 014c BB62     	 str r3,[r7,#40]
1494:../Dave/Generated/UCPROBE/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 48u);/* .. plus n
 674              	 .loc 1 1494 0
 675 014e 0B4A     	 ldr r2,.L23
 676 0150 BB6A     	 ldr r3,[r7,#40]
 677 0152 1344     	 add r3,r3,r2
 678 0154 1B78     	 ldrb r3,[r3]
 679 0156 3033     	 adds r3,r3,#48
 680 0158 FB62     	 str r3,[r7,#44]
 681 015a 07E0     	 b .L17
 682              	.L21:
1495:../Dave/Generated/UCPROBE/cpu_core.c **** 
1496:../Dave/Generated/UCPROBE/cpu_core.c ****             } else {                                                            /* Chk bits [07:00]
1497:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1498:../Dave/Generated/UCPROBE/cpu_core.c ****                 ix             = (CPU_DATA)(val);                               /* .. lookup tbl ix
 683              	 .loc 1 1498 0
 684 015c 3B6A     	 ldr r3,[r7,#32]
 685 015e BB62     	 str r3,[r7,#40]
1499:../Dave/Generated/UCPROBE/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 56u);/* .. plus n
 686              	 .loc 1 1499 0
 687 0160 064A     	 ldr r2,.L23
 688 0162 BB6A     	 ldr r3,[r7,#40]
 689 0164 1344     	 add r3,r3,r2
 690 0166 1B78     	 ldrb r3,[r3]
 691 0168 3833     	 adds r3,r3,#56
 692 016a FB62     	 str r3,[r7,#44]
 693              	.L17:
1500:../Dave/Generated/UCPROBE/cpu_core.c ****             }
1501:../Dave/Generated/UCPROBE/cpu_core.c ****         }
1502:../Dave/Generated/UCPROBE/cpu_core.c ****     }
1503:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1504:../Dave/Generated/UCPROBE/cpu_core.c **** 
1505:../Dave/Generated/UCPROBE/cpu_core.c **** 
1506:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_lead_zeros);
 694              	 .loc 1 1506 0
 695 016c FB6A     	 ldr r3,[r7,#44]
1507:../Dave/Generated/UCPROBE/cpu_core.c **** }
 696              	 .loc 1 1507 0
 697 016e 1846     	 mov r0,r3
 698 0170 3437     	 adds r7,r7,#52
 699              	.LCFI24:
 700              	 .cfi_def_cfa_offset 28
 701 0172 BD46     	 mov sp,r7
 702              	.LCFI25:
 703              	 .cfi_def_cfa_register 13
 704              	 
 705 0174 BDE8B00F 	 pop {r4,r5,r7,r8,r9,r10,fp}
 706              	.LCFI26:
 707              	 .cfi_restore 11
 708              	 .cfi_restore 10
 709              	 .cfi_restore 9
 710              	 .cfi_restore 8
 711              	 .cfi_restore 7
 712              	 .cfi_restore 5
 713              	 .cfi_restore 4
 714              	 .cfi_def_cfa_offset 0
 715 0178 7047     	 bx lr
 716              	.L24:
 717 017a 00BF     	 .align 2
 718              	.L23:
 719 017c 00000000 	 .word CPU_CntLeadZerosTbl
 720              	 .cfi_endproc
 721              	.LFE5:
 723              	 .section .text.CPU_CntTrailZeros08,"ax",%progbits
 724              	 .align 2
 725              	 .global CPU_CntTrailZeros08
 726              	 .thumb
 727              	 .thumb_func
 729              	CPU_CntTrailZeros08:
 730              	.LFB6:
1508:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1509:../Dave/Generated/UCPROBE/cpu_core.c **** 
1510:../Dave/Generated/UCPROBE/cpu_core.c **** 
1511:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1512:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1513:../Dave/Generated/UCPROBE/cpu_core.c **** *                                         CPU_CntTrailZeros()
1514:../Dave/Generated/UCPROBE/cpu_core.c **** *
1515:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a data val
1516:../Dave/Generated/UCPROBE/cpu_core.c **** *
1517:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1518:../Dave/Generated/UCPROBE/cpu_core.c **** *
1519:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1520:../Dave/Generated/UCPROBE/cpu_core.c **** *
1521:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
1522:../Dave/Generated/UCPROBE/cpu_core.c **** *
1523:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1524:../Dave/Generated/UCPROBE/cpu_core.c **** *               be called by application function(s).
1525:../Dave/Generated/UCPROBE/cpu_core.c **** *
1526:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
1527:../Dave/Generated/UCPROBE/cpu_core.c **** *
1528:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (1)  8-bits
1529:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (2) 16-bits
1530:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (3) 32-bits
1531:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (4) 64-bits
1532:../Dave/Generated/UCPROBE/cpu_core.c **** *
1533:../Dave/Generated/UCPROBE/cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
1534:../Dave/Generated/UCPROBE/cpu_core.c **** *
1535:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) (1) For  8-bit values :
1536:../Dave/Generated/UCPROBE/cpu_core.c **** *
1537:../Dave/Generated/UCPROBE/cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1538:../Dave/Generated/UCPROBE/cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1539:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   x    x    x    x    x    x    x    1            0
1540:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   x    x    x    x    x    x    1    0            1
1541:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   x    x    x    x    x    1    0    0            2
1542:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   x    x    x    x    1    0    0    0            3
1543:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   x    x    x    1    0    0    0    0            4
1544:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   x    x    1    0    0    0    0    0            5
1545:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   x    1    0    0    0    0    0    0            6
1546:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   1    0    0    0    0    0    0    0            7
1547:../Dave/Generated/UCPROBE/cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1548:../Dave/Generated/UCPROBE/cpu_core.c **** *
1549:../Dave/Generated/UCPROBE/cpu_core.c **** *
1550:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (2) For 16-bit values :
1551:../Dave/Generated/UCPROBE/cpu_core.c **** *
1552:../Dave/Generated/UCPROBE/cpu_core.c **** *                             b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1553:../Dave/Generated/UCPROBE/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1554:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1555:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1556:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1557:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1558:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1559:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    1         0    0    0           11
1560:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    1    0         0    0    0           12
1561:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    1    0    0         0    0    0           13
1562:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    1    0    0    0         0    0    0           14
1563:../Dave/Generated/UCPROBE/cpu_core.c **** *                              1    0    0    0    0         0    0    0           15
1564:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0    0    0         0    0    0           16
1565:../Dave/Generated/UCPROBE/cpu_core.c **** *
1566:../Dave/Generated/UCPROBE/cpu_core.c **** *
1567:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (3) For 32-bit values :
1568:../Dave/Generated/UCPROBE/cpu_core.c **** *
1569:../Dave/Generated/UCPROBE/cpu_core.c **** *                             b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1570:../Dave/Generated/UCPROBE/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1571:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1572:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1573:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1574:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1575:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1576:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    1         0    0    0           27
1577:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    1    0         0    0    0           28
1578:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    1    0    0         0    0    0           29
1579:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    1    0    0    0         0    0    0           30
1580:../Dave/Generated/UCPROBE/cpu_core.c **** *                              1    0    0    0    0         0    0    0           31
1581:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0    0    0         0    0    0           32
1582:../Dave/Generated/UCPROBE/cpu_core.c **** *
1583:../Dave/Generated/UCPROBE/cpu_core.c **** *
1584:../Dave/Generated/UCPROBE/cpu_core.c **** *                       (4) For 64-bit values :
1585:../Dave/Generated/UCPROBE/cpu_core.c **** *
1586:../Dave/Generated/UCPROBE/cpu_core.c **** *                             b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1587:../Dave/Generated/UCPROBE/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1588:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1589:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1590:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1591:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1592:../Dave/Generated/UCPROBE/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1593:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    x    1         0    0    0           59
1594:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    x    1    0         0    0    0           60
1595:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    x    1    0    0         0    0    0           61
1596:../Dave/Generated/UCPROBE/cpu_core.c **** *                              x    1    0    0    0         0    0    0           62
1597:../Dave/Generated/UCPROBE/cpu_core.c **** *                              1    0    0    0    0         0    0    0           63
1598:../Dave/Generated/UCPROBE/cpu_core.c **** *                              0    0    0    0    0         0    0    0           64
1599:../Dave/Generated/UCPROBE/cpu_core.c **** *
1600:../Dave/Generated/UCPROBE/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1601:../Dave/Generated/UCPROBE/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1602:../Dave/Generated/UCPROBE/cpu_core.c **** *
1603:../Dave/Generated/UCPROBE/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1604:../Dave/Generated/UCPROBE/cpu_core.c **** *
1605:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (a) CPU_CntTrailZeros()'s final conditional statement calculates 'val's number 
1606:../Dave/Generated/UCPROBE/cpu_core.c **** *                       trailing zeros based on its return data size, 'CPU_CFG_DATA_SIZE', & 'val's
1607:../Dave/Generated/UCPROBE/cpu_core.c **** *                       calculated number of lead zeros ONLY if the initial 'val' is non-'0' :
1608:../Dave/Generated/UCPROBE/cpu_core.c **** *
1609:../Dave/Generated/UCPROBE/cpu_core.c **** *                           if (val != 0u) {
1610:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) -
1611:../Dave/Generated/UCPROBE/cpu_core.c **** *                           } else {
1612:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1613:../Dave/Generated/UCPROBE/cpu_core.c **** *                           }
1614:../Dave/Generated/UCPROBE/cpu_core.c **** *
1615:../Dave/Generated/UCPROBE/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1616:../Dave/Generated/UCPROBE/cpu_core.c **** *                       execute the final 'if' statement.
1617:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1618:../Dave/Generated/UCPROBE/cpu_core.c **** */
1619:../Dave/Generated/UCPROBE/cpu_core.c **** 
1620:../Dave/Generated/UCPROBE/cpu_core.c **** #ifndef   CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
1621:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros (CPU_DATA  val)
1622:../Dave/Generated/UCPROBE/cpu_core.c **** {
1623:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  val_bit_mask;
1624:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1625:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA  nbr_trail_zeros;
1626:../Dave/Generated/UCPROBE/cpu_core.c **** 
1627:../Dave/Generated/UCPROBE/cpu_core.c **** 
1628:../Dave/Generated/UCPROBE/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
1629:../Dave/Generated/UCPROBE/cpu_core.c ****         return (CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS);
1630:../Dave/Generated/UCPROBE/cpu_core.c ****     }
1631:../Dave/Generated/UCPROBE/cpu_core.c **** 
1632:../Dave/Generated/UCPROBE/cpu_core.c **** 
1633:../Dave/Generated/UCPROBE/cpu_core.c ****     val_bit_mask    = val & ((CPU_DATA)~val + 1u);              /* Zero/clr all bits EXCEPT least-s
1634:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros(val_bit_mask);           /* Cnt  nbr lead  0s.              
1635:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1636:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_trail_zeros = ((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1637:../Dave/Generated/UCPROBE/cpu_core.c **** 
1638:../Dave/Generated/UCPROBE/cpu_core.c **** 
1639:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_trail_zeros);
1640:../Dave/Generated/UCPROBE/cpu_core.c **** }
1641:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1642:../Dave/Generated/UCPROBE/cpu_core.c **** 
1643:../Dave/Generated/UCPROBE/cpu_core.c **** 
1644:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1645:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1646:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_CntTrailZeros08()
1647:../Dave/Generated/UCPROBE/cpu_core.c **** *
1648:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in an 8-bit d
1649:../Dave/Generated/UCPROBE/cpu_core.c **** *
1650:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1651:../Dave/Generated/UCPROBE/cpu_core.c **** *
1652:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1653:../Dave/Generated/UCPROBE/cpu_core.c **** *
1654:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
1655:../Dave/Generated/UCPROBE/cpu_core.c **** *
1656:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1657:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
1658:../Dave/Generated/UCPROBE/cpu_core.c **** *
1659:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1660:../Dave/Generated/UCPROBE/cpu_core.c **** *
1661:../Dave/Generated/UCPROBE/cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1662:../Dave/Generated/UCPROBE/cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1663:../Dave/Generated/UCPROBE/cpu_core.c **** *                                x    x    x    x    x    x    x    1            0
1664:../Dave/Generated/UCPROBE/cpu_core.c **** *                                x    x    x    x    x    x    1    0            1
1665:../Dave/Generated/UCPROBE/cpu_core.c **** *                                x    x    x    x    x    1    0    0            2
1666:../Dave/Generated/UCPROBE/cpu_core.c **** *                                x    x    x    x    1    0    0    0            3
1667:../Dave/Generated/UCPROBE/cpu_core.c **** *                                x    x    x    1    0    0    0    0            4
1668:../Dave/Generated/UCPROBE/cpu_core.c **** *                                x    x    1    0    0    0    0    0            5
1669:../Dave/Generated/UCPROBE/cpu_core.c **** *                                x    1    0    0    0    0    0    0            6
1670:../Dave/Generated/UCPROBE/cpu_core.c **** *                                1    0    0    0    0    0    0    0            7
1671:../Dave/Generated/UCPROBE/cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1672:../Dave/Generated/UCPROBE/cpu_core.c **** *
1673:../Dave/Generated/UCPROBE/cpu_core.c **** *
1674:../Dave/Generated/UCPROBE/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1675:../Dave/Generated/UCPROBE/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1676:../Dave/Generated/UCPROBE/cpu_core.c **** *
1677:../Dave/Generated/UCPROBE/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1678:../Dave/Generated/UCPROBE/cpu_core.c **** *
1679:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1680:../Dave/Generated/UCPROBE/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1681:../Dave/Generated/UCPROBE/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros08()'s  8-bit retu
1682:../Dave/Generated/UCPROBE/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1683:../Dave/Generated/UCPROBE/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros08()'s return data size :
1684:../Dave/Generated/UCPROBE/cpu_core.c **** *
1685:../Dave/Generated/UCPROBE/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1686:../Dave/Generated/UCPROBE/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_08  * DEF_OCTET_NBR_BITS)) {
1687:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCT
1688:../Dave/Generated/UCPROBE/cpu_core.c **** *                           }
1689:../Dave/Generated/UCPROBE/cpu_core.c **** *
1690:../Dave/Generated/UCPROBE/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0'  8-
1691:../Dave/Generated/UCPROBE/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to  8 bit
1692:../Dave/Generated/UCPROBE/cpu_core.c **** *
1693:../Dave/Generated/UCPROBE/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1694:../Dave/Generated/UCPROBE/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1695:../Dave/Generated/UCPROBE/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and  8-bit data value bit
1696:../Dave/Generated/UCPROBE/cpu_core.c **** *
1697:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) For CPU_CntTrailZeros08()'s C implementation, the final conditional stateme
1698:../Dave/Generated/UCPROBE/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros08()'s
1699:../Dave/Generated/UCPROBE/cpu_core.c **** *                        8-bit return data size & 'val's calculated number of lead zeros ONLY if th
1700:../Dave/Generated/UCPROBE/cpu_core.c **** *                       initial 'val' is non-'0' :
1701:../Dave/Generated/UCPROBE/cpu_core.c **** *
1702:../Dave/Generated/UCPROBE/cpu_core.c **** *                           if (val != 0u) {
1703:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - 
1704:../Dave/Generated/UCPROBE/cpu_core.c **** *                           } else {
1705:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1706:../Dave/Generated/UCPROBE/cpu_core.c **** *                           }
1707:../Dave/Generated/UCPROBE/cpu_core.c **** *
1708:../Dave/Generated/UCPROBE/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1709:../Dave/Generated/UCPROBE/cpu_core.c **** *                       execute the final 'if' statement.
1710:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1711:../Dave/Generated/UCPROBE/cpu_core.c **** */
1712:../Dave/Generated/UCPROBE/cpu_core.c **** 
1713:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
1714:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val)
1715:../Dave/Generated/UCPROBE/cpu_core.c **** {
 731              	 .loc 1 1715 0
 732              	 .cfi_startproc
 733              	 
 734              	 
 735 0000 80B5     	 push {r7,lr}
 736              	.LCFI27:
 737              	 .cfi_def_cfa_offset 8
 738              	 .cfi_offset 7,-8
 739              	 .cfi_offset 14,-4
 740 0002 84B0     	 sub sp,sp,#16
 741              	.LCFI28:
 742              	 .cfi_def_cfa_offset 24
 743 0004 00AF     	 add r7,sp,#0
 744              	.LCFI29:
 745              	 .cfi_def_cfa_register 7
 746 0006 0346     	 mov r3,r0
 747 0008 FB71     	 strb r3,[r7,#7]
1716:../Dave/Generated/UCPROBE/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1717:../Dave/Generated/UCPROBE/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1718:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT08U  val_bit_mask;
1719:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1720:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1721:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1722:../Dave/Generated/UCPROBE/cpu_core.c **** 
1723:../Dave/Generated/UCPROBE/cpu_core.c **** 
1724:../Dave/Generated/UCPROBE/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 748              	 .loc 1 1724 0
 749 000a FB79     	 ldrb r3,[r7,#7]
 750 000c 002B     	 cmp r3,#0
 751 000e 01D1     	 bne .L26
1725:../Dave/Generated/UCPROBE/cpu_core.c ****         return (CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS);
 752              	 .loc 1 1725 0
 753 0010 0823     	 movs r3,#8
 754 0012 05E0     	 b .L27
 755              	.L26:
1726:../Dave/Generated/UCPROBE/cpu_core.c ****     }
1727:../Dave/Generated/UCPROBE/cpu_core.c **** 
1728:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1729:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1730:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1731:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 756              	 .loc 1 1731 0
 757 0014 FB79     	 ldrb r3,[r7,#7]
 758 0016 1846     	 mov r0,r3
 759 0018 FFF7FEFF 	 bl CPU_CntTrailZeros
 760 001c F860     	 str r0,[r7,#12]
1732:../Dave/Generated/UCPROBE/cpu_core.c **** 
1733:../Dave/Generated/UCPROBE/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1734:../Dave/Generated/UCPROBE/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT08U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1735:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros08(val_bit_mask);         /* Cnt  nbr lead  0s.              
1736:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1737:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1738:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1739:../Dave/Generated/UCPROBE/cpu_core.c **** 
1740:../Dave/Generated/UCPROBE/cpu_core.c **** 
1741:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_trail_zeros);
 761              	 .loc 1 1741 0
 762 001e FB68     	 ldr r3,[r7,#12]
 763              	.L27:
1742:../Dave/Generated/UCPROBE/cpu_core.c **** }
 764              	 .loc 1 1742 0
 765 0020 1846     	 mov r0,r3
 766 0022 1037     	 adds r7,r7,#16
 767              	.LCFI30:
 768              	 .cfi_def_cfa_offset 8
 769 0024 BD46     	 mov sp,r7
 770              	.LCFI31:
 771              	 .cfi_def_cfa_register 13
 772              	 
 773 0026 80BD     	 pop {r7,pc}
 774              	 .cfi_endproc
 775              	.LFE6:
 777              	 .section .text.CPU_CntTrailZeros16,"ax",%progbits
 778              	 .align 2
 779              	 .global CPU_CntTrailZeros16
 780              	 .thumb
 781              	 .thumb_func
 783              	CPU_CntTrailZeros16:
 784              	.LFB7:
1743:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1744:../Dave/Generated/UCPROBE/cpu_core.c **** 
1745:../Dave/Generated/UCPROBE/cpu_core.c **** 
1746:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1747:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1748:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_CntTrailZeros16()
1749:../Dave/Generated/UCPROBE/cpu_core.c **** *
1750:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 16-bit d
1751:../Dave/Generated/UCPROBE/cpu_core.c **** *
1752:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1753:../Dave/Generated/UCPROBE/cpu_core.c **** *
1754:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1755:../Dave/Generated/UCPROBE/cpu_core.c **** *
1756:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
1757:../Dave/Generated/UCPROBE/cpu_core.c **** *
1758:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1759:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
1760:../Dave/Generated/UCPROBE/cpu_core.c **** *
1761:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1762:../Dave/Generated/UCPROBE/cpu_core.c **** *
1763:../Dave/Generated/UCPROBE/cpu_core.c **** *                          b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1764:../Dave/Generated/UCPROBE/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1765:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1766:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1767:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1768:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1769:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1770:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    1         0    0    0           11
1771:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    1    0         0    0    0           12
1772:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    1    0    0         0    0    0           13
1773:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    1    0    0    0         0    0    0           14
1774:../Dave/Generated/UCPROBE/cpu_core.c **** *                           1    0    0    0    0         0    0    0           15
1775:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0    0    0         0    0    0           16
1776:../Dave/Generated/UCPROBE/cpu_core.c **** *
1777:../Dave/Generated/UCPROBE/cpu_core.c **** *
1778:../Dave/Generated/UCPROBE/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1779:../Dave/Generated/UCPROBE/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1780:../Dave/Generated/UCPROBE/cpu_core.c **** *
1781:../Dave/Generated/UCPROBE/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1782:../Dave/Generated/UCPROBE/cpu_core.c **** *
1783:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1784:../Dave/Generated/UCPROBE/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1785:../Dave/Generated/UCPROBE/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros16()'s 16-bit retu
1786:../Dave/Generated/UCPROBE/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1787:../Dave/Generated/UCPROBE/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros16()'s return data size :
1788:../Dave/Generated/UCPROBE/cpu_core.c **** *
1789:../Dave/Generated/UCPROBE/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1790:../Dave/Generated/UCPROBE/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_16  * DEF_OCTET_NBR_BITS)) {
1791:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCT
1792:../Dave/Generated/UCPROBE/cpu_core.c **** *                           }
1793:../Dave/Generated/UCPROBE/cpu_core.c **** *
1794:../Dave/Generated/UCPROBE/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 16-
1795:../Dave/Generated/UCPROBE/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 16 bit
1796:../Dave/Generated/UCPROBE/cpu_core.c **** *
1797:../Dave/Generated/UCPROBE/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1798:../Dave/Generated/UCPROBE/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1799:../Dave/Generated/UCPROBE/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 16-bit data value bit
1800:../Dave/Generated/UCPROBE/cpu_core.c **** *
1801:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) For CPU_CntTrailZeros16()'s C implementation, the final conditional stateme
1802:../Dave/Generated/UCPROBE/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros16()'s
1803:../Dave/Generated/UCPROBE/cpu_core.c **** *                       16-bit return data size & 'val's calculated number of lead zeros ONLY if th
1804:../Dave/Generated/UCPROBE/cpu_core.c **** *                       initial 'val' is non-'0' :
1805:../Dave/Generated/UCPROBE/cpu_core.c **** *
1806:../Dave/Generated/UCPROBE/cpu_core.c **** *                           if (val != 0u) {
1807:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - 
1808:../Dave/Generated/UCPROBE/cpu_core.c **** *                           } else {
1809:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1810:../Dave/Generated/UCPROBE/cpu_core.c **** *                           }
1811:../Dave/Generated/UCPROBE/cpu_core.c **** *
1812:../Dave/Generated/UCPROBE/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1813:../Dave/Generated/UCPROBE/cpu_core.c **** *                       execute the final 'if' statement.
1814:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1815:../Dave/Generated/UCPROBE/cpu_core.c **** */
1816:../Dave/Generated/UCPROBE/cpu_core.c **** 
1817:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1818:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val)
1819:../Dave/Generated/UCPROBE/cpu_core.c **** {
 785              	 .loc 1 1819 0
 786              	 .cfi_startproc
 787              	 
 788              	 
 789 0000 80B5     	 push {r7,lr}
 790              	.LCFI32:
 791              	 .cfi_def_cfa_offset 8
 792              	 .cfi_offset 7,-8
 793              	 .cfi_offset 14,-4
 794 0002 84B0     	 sub sp,sp,#16
 795              	.LCFI33:
 796              	 .cfi_def_cfa_offset 24
 797 0004 00AF     	 add r7,sp,#0
 798              	.LCFI34:
 799              	 .cfi_def_cfa_register 7
 800 0006 0346     	 mov r3,r0
 801 0008 FB80     	 strh r3,[r7,#6]
1820:../Dave/Generated/UCPROBE/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1821:../Dave/Generated/UCPROBE/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1822:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT16U  val_bit_mask;
1823:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1824:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1825:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1826:../Dave/Generated/UCPROBE/cpu_core.c **** 
1827:../Dave/Generated/UCPROBE/cpu_core.c **** 
1828:../Dave/Generated/UCPROBE/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 802              	 .loc 1 1828 0
 803 000a FB88     	 ldrh r3,[r7,#6]
 804 000c 002B     	 cmp r3,#0
 805 000e 01D1     	 bne .L29
1829:../Dave/Generated/UCPROBE/cpu_core.c ****         return (CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS);
 806              	 .loc 1 1829 0
 807 0010 1023     	 movs r3,#16
 808 0012 05E0     	 b .L30
 809              	.L29:
1830:../Dave/Generated/UCPROBE/cpu_core.c ****     }
1831:../Dave/Generated/UCPROBE/cpu_core.c **** 
1832:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1833:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1834:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1835:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 810              	 .loc 1 1835 0
 811 0014 FB88     	 ldrh r3,[r7,#6]
 812 0016 1846     	 mov r0,r3
 813 0018 FFF7FEFF 	 bl CPU_CntTrailZeros
 814 001c F860     	 str r0,[r7,#12]
1836:../Dave/Generated/UCPROBE/cpu_core.c **** 
1837:../Dave/Generated/UCPROBE/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1838:../Dave/Generated/UCPROBE/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT16U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1839:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros16(val_bit_mask);         /* Cnt  nbr lead  0s.              
1840:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1841:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1842:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1843:../Dave/Generated/UCPROBE/cpu_core.c **** 
1844:../Dave/Generated/UCPROBE/cpu_core.c **** 
1845:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_trail_zeros);
 815              	 .loc 1 1845 0
 816 001e FB68     	 ldr r3,[r7,#12]
 817              	.L30:
1846:../Dave/Generated/UCPROBE/cpu_core.c **** }
 818              	 .loc 1 1846 0
 819 0020 1846     	 mov r0,r3
 820 0022 1037     	 adds r7,r7,#16
 821              	.LCFI35:
 822              	 .cfi_def_cfa_offset 8
 823 0024 BD46     	 mov sp,r7
 824              	.LCFI36:
 825              	 .cfi_def_cfa_register 13
 826              	 
 827 0026 80BD     	 pop {r7,pc}
 828              	 .cfi_endproc
 829              	.LFE7:
 831              	 .section .text.CPU_CntTrailZeros32,"ax",%progbits
 832              	 .align 2
 833              	 .global CPU_CntTrailZeros32
 834              	 .thumb
 835              	 .thumb_func
 837              	CPU_CntTrailZeros32:
 838              	.LFB8:
1847:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1848:../Dave/Generated/UCPROBE/cpu_core.c **** 
1849:../Dave/Generated/UCPROBE/cpu_core.c **** 
1850:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1851:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1852:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_CntTrailZeros32()
1853:../Dave/Generated/UCPROBE/cpu_core.c **** *
1854:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 32-bit d
1855:../Dave/Generated/UCPROBE/cpu_core.c **** *
1856:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1857:../Dave/Generated/UCPROBE/cpu_core.c **** *
1858:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1859:../Dave/Generated/UCPROBE/cpu_core.c **** *
1860:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
1861:../Dave/Generated/UCPROBE/cpu_core.c **** *
1862:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1863:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
1864:../Dave/Generated/UCPROBE/cpu_core.c **** *
1865:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1866:../Dave/Generated/UCPROBE/cpu_core.c **** *
1867:../Dave/Generated/UCPROBE/cpu_core.c **** *                          b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1868:../Dave/Generated/UCPROBE/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1869:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1870:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1871:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1872:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1873:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1874:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    1         0    0    0           27
1875:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    1    0         0    0    0           28
1876:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    1    0    0         0    0    0           29
1877:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    1    0    0    0         0    0    0           30
1878:../Dave/Generated/UCPROBE/cpu_core.c **** *                           1    0    0    0    0         0    0    0           31
1879:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0    0    0         0    0    0           32
1880:../Dave/Generated/UCPROBE/cpu_core.c **** *
1881:../Dave/Generated/UCPROBE/cpu_core.c **** *
1882:../Dave/Generated/UCPROBE/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1883:../Dave/Generated/UCPROBE/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1884:../Dave/Generated/UCPROBE/cpu_core.c **** *
1885:../Dave/Generated/UCPROBE/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1886:../Dave/Generated/UCPROBE/cpu_core.c **** *
1887:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1888:../Dave/Generated/UCPROBE/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1889:../Dave/Generated/UCPROBE/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros32()'s 32-bit retu
1890:../Dave/Generated/UCPROBE/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1891:../Dave/Generated/UCPROBE/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros32()'s return data size :
1892:../Dave/Generated/UCPROBE/cpu_core.c **** *
1893:../Dave/Generated/UCPROBE/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1894:../Dave/Generated/UCPROBE/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_32  * DEF_OCTET_NBR_BITS)) {
1895:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCT
1896:../Dave/Generated/UCPROBE/cpu_core.c **** *                           }
1897:../Dave/Generated/UCPROBE/cpu_core.c **** *
1898:../Dave/Generated/UCPROBE/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 32-
1899:../Dave/Generated/UCPROBE/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 32 bit
1900:../Dave/Generated/UCPROBE/cpu_core.c **** *
1901:../Dave/Generated/UCPROBE/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1902:../Dave/Generated/UCPROBE/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1903:../Dave/Generated/UCPROBE/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 32-bit data value bit
1904:../Dave/Generated/UCPROBE/cpu_core.c **** *
1905:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) For CPU_CntTrailZeros32()'s C implementation, the final conditional stateme
1906:../Dave/Generated/UCPROBE/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros32()'s
1907:../Dave/Generated/UCPROBE/cpu_core.c **** *                       32-bit return data size & 'val's calculated number of lead zeros ONLY if th
1908:../Dave/Generated/UCPROBE/cpu_core.c **** *                       initial 'val' is non-'0' :
1909:../Dave/Generated/UCPROBE/cpu_core.c **** *
1910:../Dave/Generated/UCPROBE/cpu_core.c **** *                           if (val != 0u) {
1911:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - 
1912:../Dave/Generated/UCPROBE/cpu_core.c **** *                           } else {
1913:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1914:../Dave/Generated/UCPROBE/cpu_core.c **** *                           }
1915:../Dave/Generated/UCPROBE/cpu_core.c **** *
1916:../Dave/Generated/UCPROBE/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1917:../Dave/Generated/UCPROBE/cpu_core.c **** *                       execute the final 'if' statement.
1918:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1919:../Dave/Generated/UCPROBE/cpu_core.c **** */
1920:../Dave/Generated/UCPROBE/cpu_core.c **** 
1921:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1922:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val)
1923:../Dave/Generated/UCPROBE/cpu_core.c **** {
 839              	 .loc 1 1923 0
 840              	 .cfi_startproc
 841              	 
 842              	 
 843 0000 80B5     	 push {r7,lr}
 844              	.LCFI37:
 845              	 .cfi_def_cfa_offset 8
 846              	 .cfi_offset 7,-8
 847              	 .cfi_offset 14,-4
 848 0002 84B0     	 sub sp,sp,#16
 849              	.LCFI38:
 850              	 .cfi_def_cfa_offset 24
 851 0004 00AF     	 add r7,sp,#0
 852              	.LCFI39:
 853              	 .cfi_def_cfa_register 7
 854 0006 7860     	 str r0,[r7,#4]
1924:../Dave/Generated/UCPROBE/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1925:../Dave/Generated/UCPROBE/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1926:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT32U  val_bit_mask;
1927:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1928:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1929:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1930:../Dave/Generated/UCPROBE/cpu_core.c **** 
1931:../Dave/Generated/UCPROBE/cpu_core.c **** 
1932:../Dave/Generated/UCPROBE/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 855              	 .loc 1 1932 0
 856 0008 7B68     	 ldr r3,[r7,#4]
 857 000a 002B     	 cmp r3,#0
 858 000c 01D1     	 bne .L32
1933:../Dave/Generated/UCPROBE/cpu_core.c ****         return (CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS);
 859              	 .loc 1 1933 0
 860 000e 2023     	 movs r3,#32
 861 0010 04E0     	 b .L33
 862              	.L32:
1934:../Dave/Generated/UCPROBE/cpu_core.c ****     }
1935:../Dave/Generated/UCPROBE/cpu_core.c **** 
1936:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1937:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1938:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1939:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 863              	 .loc 1 1939 0
 864 0012 7868     	 ldr r0,[r7,#4]
 865 0014 FFF7FEFF 	 bl CPU_CntTrailZeros
 866 0018 F860     	 str r0,[r7,#12]
1940:../Dave/Generated/UCPROBE/cpu_core.c **** 
1941:../Dave/Generated/UCPROBE/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1942:../Dave/Generated/UCPROBE/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT32U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1943:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros32(val_bit_mask);         /* Cnt  nbr lead  0s.              
1944:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1945:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1946:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1947:../Dave/Generated/UCPROBE/cpu_core.c **** 
1948:../Dave/Generated/UCPROBE/cpu_core.c **** 
1949:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_trail_zeros);
 867              	 .loc 1 1949 0
 868 001a FB68     	 ldr r3,[r7,#12]
 869              	.L33:
1950:../Dave/Generated/UCPROBE/cpu_core.c **** }
 870              	 .loc 1 1950 0
 871 001c 1846     	 mov r0,r3
 872 001e 1037     	 adds r7,r7,#16
 873              	.LCFI40:
 874              	 .cfi_def_cfa_offset 8
 875 0020 BD46     	 mov sp,r7
 876              	.LCFI41:
 877              	 .cfi_def_cfa_register 13
 878              	 
 879 0022 80BD     	 pop {r7,pc}
 880              	 .cfi_endproc
 881              	.LFE8:
 883              	 .section .text.CPU_CntTrailZeros64,"ax",%progbits
 884              	 .align 2
 885              	 .global CPU_CntTrailZeros64
 886              	 .thumb
 887              	 .thumb_func
 889              	CPU_CntTrailZeros64:
 890              	.LFB9:
1951:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
1952:../Dave/Generated/UCPROBE/cpu_core.c **** 
1953:../Dave/Generated/UCPROBE/cpu_core.c **** 
1954:../Dave/Generated/UCPROBE/cpu_core.c **** /*
1955:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
1956:../Dave/Generated/UCPROBE/cpu_core.c **** *                                        CPU_CntTrailZeros64()
1957:../Dave/Generated/UCPROBE/cpu_core.c **** *
1958:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 64-bit d
1959:../Dave/Generated/UCPROBE/cpu_core.c **** *
1960:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1961:../Dave/Generated/UCPROBE/cpu_core.c **** *
1962:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1963:../Dave/Generated/UCPROBE/cpu_core.c **** *
1964:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : Application.
1965:../Dave/Generated/UCPROBE/cpu_core.c **** *
1966:../Dave/Generated/UCPROBE/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1967:../Dave/Generated/UCPROBE/cpu_core.c **** *               called by application function(s).
1968:../Dave/Generated/UCPROBE/cpu_core.c **** *
1969:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1970:../Dave/Generated/UCPROBE/cpu_core.c **** *
1971:../Dave/Generated/UCPROBE/cpu_core.c **** *                          b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1972:../Dave/Generated/UCPROBE/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1973:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1974:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1975:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1976:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1977:../Dave/Generated/UCPROBE/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1978:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    x    1         0    0    0           59
1979:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    x    1    0         0    0    0           60
1980:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    x    1    0    0         0    0    0           61
1981:../Dave/Generated/UCPROBE/cpu_core.c **** *                           x    1    0    0    0         0    0    0           62
1982:../Dave/Generated/UCPROBE/cpu_core.c **** *                           1    0    0    0    0         0    0    0           63
1983:../Dave/Generated/UCPROBE/cpu_core.c **** *                           0    0    0    0    0         0    0    0           64
1984:../Dave/Generated/UCPROBE/cpu_core.c **** *
1985:../Dave/Generated/UCPROBE/cpu_core.c **** *
1986:../Dave/Generated/UCPROBE/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1987:../Dave/Generated/UCPROBE/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1988:../Dave/Generated/UCPROBE/cpu_core.c **** *
1989:../Dave/Generated/UCPROBE/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1990:../Dave/Generated/UCPROBE/cpu_core.c **** *
1991:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1992:../Dave/Generated/UCPROBE/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1993:../Dave/Generated/UCPROBE/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros64()'s 64-bit retu
1994:../Dave/Generated/UCPROBE/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1995:../Dave/Generated/UCPROBE/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros64()'s return data size :
1996:../Dave/Generated/UCPROBE/cpu_core.c **** *
1997:../Dave/Generated/UCPROBE/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1998:../Dave/Generated/UCPROBE/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_64  * DEF_OCTET_NBR_BITS)) {
1999:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCT
2000:../Dave/Generated/UCPROBE/cpu_core.c **** *                           }
2001:../Dave/Generated/UCPROBE/cpu_core.c **** *
2002:../Dave/Generated/UCPROBE/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 64-
2003:../Dave/Generated/UCPROBE/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 64 bit
2004:../Dave/Generated/UCPROBE/cpu_core.c **** *
2005:../Dave/Generated/UCPROBE/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
2006:../Dave/Generated/UCPROBE/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
2007:../Dave/Generated/UCPROBE/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 64-bit data value bit
2008:../Dave/Generated/UCPROBE/cpu_core.c **** *
2009:../Dave/Generated/UCPROBE/cpu_core.c **** *                   (b) For CPU_CntTrailZeros64()'s C implementation, the final conditional stateme
2010:../Dave/Generated/UCPROBE/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros64()'s
2011:../Dave/Generated/UCPROBE/cpu_core.c **** *                       64-bit return data size & 'val's calculated number of lead zeros ONLY if th
2012:../Dave/Generated/UCPROBE/cpu_core.c **** *                       initial 'val' is non-'0' :
2013:../Dave/Generated/UCPROBE/cpu_core.c **** *
2014:../Dave/Generated/UCPROBE/cpu_core.c **** *                           if (val != 0u) {
2015:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - 
2016:../Dave/Generated/UCPROBE/cpu_core.c **** *                           } else {
2017:../Dave/Generated/UCPROBE/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
2018:../Dave/Generated/UCPROBE/cpu_core.c **** *                           }
2019:../Dave/Generated/UCPROBE/cpu_core.c **** *
2020:../Dave/Generated/UCPROBE/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
2021:../Dave/Generated/UCPROBE/cpu_core.c **** *                       execute the final 'if' statement.
2022:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
2023:../Dave/Generated/UCPROBE/cpu_core.c **** */
2024:../Dave/Generated/UCPROBE/cpu_core.c **** 
2025:../Dave/Generated/UCPROBE/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
2026:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val)
2027:../Dave/Generated/UCPROBE/cpu_core.c **** {
 891              	 .loc 1 2027 0
 892              	 .cfi_startproc
 893              	 
 894              	 
 895 0000 80B5     	 push {r7,lr}
 896              	.LCFI42:
 897              	 .cfi_def_cfa_offset 8
 898              	 .cfi_offset 7,-8
 899              	 .cfi_offset 14,-4
 900 0002 86B0     	 sub sp,sp,#24
 901              	.LCFI43:
 902              	 .cfi_def_cfa_offset 32
 903 0004 00AF     	 add r7,sp,#0
 904              	.LCFI44:
 905              	 .cfi_def_cfa_register 7
 906 0006 C7E90001 	 strd r0,[r7]
2028:../Dave/Generated/UCPROBE/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
2029:../Dave/Generated/UCPROBE/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
2030:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT64U  val_bit_mask;
2031:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
2032:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
2033:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
2034:../Dave/Generated/UCPROBE/cpu_core.c **** 
2035:../Dave/Generated/UCPROBE/cpu_core.c **** 
2036:../Dave/Generated/UCPROBE/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 907              	 .loc 1 2036 0
 908 000a D7E90023 	 ldrd r2,[r7]
 909 000e 1343     	 orrs r3,r2,r3
 910 0010 01D1     	 bne .L35
2037:../Dave/Generated/UCPROBE/cpu_core.c ****         return (CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS);
 911              	 .loc 1 2037 0
 912 0012 4023     	 movs r3,#64
 913 0014 16E0     	 b .L36
 914              	.L35:
2038:../Dave/Generated/UCPROBE/cpu_core.c ****     }
2039:../Dave/Generated/UCPROBE/cpu_core.c **** 
2040:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
2041:../Dave/Generated/UCPROBE/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
2042:../Dave/Generated/UCPROBE/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
2043:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
2044:../Dave/Generated/UCPROBE/cpu_core.c **** 
2045:../Dave/Generated/UCPROBE/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
2046:../Dave/Generated/UCPROBE/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT64U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
 915              	 .loc 1 2046 0
 916 0016 D7E90023 	 ldrd r2,[r7]
 917 001a 5042     	 rsbs r0,r2,#0
 918 001c 63EB4301 	 sbc r1,r3,r3,lsl#1
 919 0020 D7E90023 	 ldrd r2,[r7]
 920 0024 02EA0002 	 and r2,r2,r0
 921 0028 03EA0103 	 and r3,r3,r1
 922 002c C7E90423 	 strd r2,[r7,#16]
2047:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.              
 923              	 .loc 1 2047 0
 924 0030 D7E90401 	 ldrd r0,[r7,#16]
 925 0034 FFF7FEFF 	 bl CPU_CntLeadZeros64
 926 0038 F860     	 str r0,[r7,#12]
2048:../Dave/Generated/UCPROBE/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
2049:../Dave/Generated/UCPROBE/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
 927              	 .loc 1 2049 0
 928 003a FB68     	 ldr r3,[r7,#12]
 929 003c C3F13F03 	 rsb r3,r3,#63
 930 0040 BB60     	 str r3,[r7,#8]
2050:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
2051:../Dave/Generated/UCPROBE/cpu_core.c **** 
2052:../Dave/Generated/UCPROBE/cpu_core.c **** 
2053:../Dave/Generated/UCPROBE/cpu_core.c ****     return (nbr_trail_zeros);
 931              	 .loc 1 2053 0
 932 0042 BB68     	 ldr r3,[r7,#8]
 933              	.L36:
2054:../Dave/Generated/UCPROBE/cpu_core.c **** }
 934              	 .loc 1 2054 0
 935 0044 1846     	 mov r0,r3
 936 0046 1837     	 adds r7,r7,#24
 937              	.LCFI45:
 938              	 .cfi_def_cfa_offset 8
 939 0048 BD46     	 mov sp,r7
 940              	.LCFI46:
 941              	 .cfi_def_cfa_register 13
 942              	 
 943 004a 80BD     	 pop {r7,pc}
 944              	 .cfi_endproc
 945              	.LFE9:
 947              	 .section .text.CPU_PopCnt32,"ax",%progbits
 948              	 .align 2
 949              	 .global CPU_PopCnt32
 950              	 .thumb
 951              	 .thumb_func
 953              	CPU_PopCnt32:
 954              	.LFB10:
2055:../Dave/Generated/UCPROBE/cpu_core.c **** #endif
2056:../Dave/Generated/UCPROBE/cpu_core.c **** 
2057:../Dave/Generated/UCPROBE/cpu_core.c **** 
2058:../Dave/Generated/UCPROBE/cpu_core.c **** /*
2059:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
2060:../Dave/Generated/UCPROBE/cpu_core.c **** *                                           CRCUtil_PopCnt_32()
2061:../Dave/Generated/UCPROBE/cpu_core.c **** *
2062:../Dave/Generated/UCPROBE/cpu_core.c **** * Description : Compute population count (hamming weight) for value (number of bits set).
2063:../Dave/Generated/UCPROBE/cpu_core.c **** *
2064:../Dave/Generated/UCPROBE/cpu_core.c **** * Argument(s) : value           Value to compute population count on.
2065:../Dave/Generated/UCPROBE/cpu_core.c **** *
2066:../Dave/Generated/UCPROBE/cpu_core.c **** *
2067:../Dave/Generated/UCPROBE/cpu_core.c **** * Return(s)   : value's population count.
2068:../Dave/Generated/UCPROBE/cpu_core.c **** *
2069:../Dave/Generated/UCPROBE/cpu_core.c **** * Caller(s)   : various.
2070:../Dave/Generated/UCPROBE/cpu_core.c **** *
2071:../Dave/Generated/UCPROBE/cpu_core.c **** * Note(s)     : (1) Algorithm taken from http://en.wikipedia.org/wiki/Hamming_weight
2072:../Dave/Generated/UCPROBE/cpu_core.c **** ***************************************************************************************************
2073:../Dave/Generated/UCPROBE/cpu_core.c **** */
2074:../Dave/Generated/UCPROBE/cpu_core.c **** 
2075:../Dave/Generated/UCPROBE/cpu_core.c **** CPU_INT08U  CPU_PopCnt32 (CPU_INT32U  value)
2076:../Dave/Generated/UCPROBE/cpu_core.c **** {
 955              	 .loc 1 2076 0
 956              	 .cfi_startproc
 957              	 
 958              	 
 959              	 
 960 0000 80B4     	 push {r7}
 961              	.LCFI47:
 962              	 .cfi_def_cfa_offset 4
 963              	 .cfi_offset 7,-4
 964 0002 87B0     	 sub sp,sp,#28
 965              	.LCFI48:
 966              	 .cfi_def_cfa_offset 32
 967 0004 00AF     	 add r7,sp,#0
 968              	.LCFI49:
 969              	 .cfi_def_cfa_register 7
 970 0006 7860     	 str r0,[r7,#4]
2077:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT32U  even_cnt;
2078:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT32U  odd_cnt;
2079:../Dave/Generated/UCPROBE/cpu_core.c ****     CPU_INT32U  result;
2080:../Dave/Generated/UCPROBE/cpu_core.c **** 
2081:../Dave/Generated/UCPROBE/cpu_core.c **** 
2082:../Dave/Generated/UCPROBE/cpu_core.c ****     odd_cnt  = (value >> 1u) & CRC_UTIL_POPCNT_MASK01010101_32; /* 2-bits pieces.                  
 971              	 .loc 1 2082 0
 972 0008 7B68     	 ldr r3,[r7,#4]
 973 000a 5B08     	 lsrs r3,r3,#1
 974 000c 03F05533 	 and r3,r3,#1431655765
 975 0010 7B61     	 str r3,[r7,#20]
2083:../Dave/Generated/UCPROBE/cpu_core.c ****     result   =  value - odd_cnt;                                /* Same result as result=odd_cnt+(v
 976              	 .loc 1 2083 0
 977 0012 7A68     	 ldr r2,[r7,#4]
 978 0014 7B69     	 ldr r3,[r7,#20]
 979 0016 D31A     	 subs r3,r2,r3
 980 0018 3B61     	 str r3,[r7,#16]
2084:../Dave/Generated/UCPROBE/cpu_core.c **** 
2085:../Dave/Generated/UCPROBE/cpu_core.c ****     even_cnt =  result & CRC_UTIL_POPCNT_MASK00110011_32;       /* 4-bits pieces.                  
 981              	 .loc 1 2085 0
 982 001a 3B69     	 ldr r3,[r7,#16]
 983 001c 03F03333 	 and r3,r3,#858993459
 984 0020 FB60     	 str r3,[r7,#12]
2086:../Dave/Generated/UCPROBE/cpu_core.c ****     odd_cnt  = (result >> 2u) & CRC_UTIL_POPCNT_MASK00110011_32;
 985              	 .loc 1 2086 0
 986 0022 3B69     	 ldr r3,[r7,#16]
 987 0024 9B08     	 lsrs r3,r3,#2
 988 0026 03F03333 	 and r3,r3,#858993459
 989 002a 7B61     	 str r3,[r7,#20]
2087:../Dave/Generated/UCPROBE/cpu_core.c ****     result   =  even_cnt + odd_cnt;
 990              	 .loc 1 2087 0
 991 002c FA68     	 ldr r2,[r7,#12]
 992 002e 7B69     	 ldr r3,[r7,#20]
 993 0030 1344     	 add r3,r3,r2
 994 0032 3B61     	 str r3,[r7,#16]
2088:../Dave/Generated/UCPROBE/cpu_core.c **** 
2089:../Dave/Generated/UCPROBE/cpu_core.c ****     even_cnt =  result & CRC_UTIL_POPCNT_MASK00001111_32;       /* 8-bits pieces.                  
 995              	 .loc 1 2089 0
 996 0034 3B69     	 ldr r3,[r7,#16]
 997 0036 03F00F33 	 and r3,r3,#252645135
 998 003a FB60     	 str r3,[r7,#12]
2090:../Dave/Generated/UCPROBE/cpu_core.c ****     odd_cnt  = (result >> 4u) & CRC_UTIL_POPCNT_MASK00001111_32;
 999              	 .loc 1 2090 0
 1000 003c 3B69     	 ldr r3,[r7,#16]
 1001 003e 1B09     	 lsrs r3,r3,#4
 1002 0040 03F00F33 	 and r3,r3,#252645135
 1003 0044 7B61     	 str r3,[r7,#20]
2091:../Dave/Generated/UCPROBE/cpu_core.c ****     result   =  even_cnt + odd_cnt;
 1004              	 .loc 1 2091 0
 1005 0046 FA68     	 ldr r2,[r7,#12]
 1006 0048 7B69     	 ldr r3,[r7,#20]
 1007 004a 1344     	 add r3,r3,r2
 1008 004c 3B61     	 str r3,[r7,#16]
2092:../Dave/Generated/UCPROBE/cpu_core.c **** 
2093:../Dave/Generated/UCPROBE/cpu_core.c ****     result = (result * CRC_UTIL_POPCNT_POWERSOF256_32) >> 24u;
 1009              	 .loc 1 2093 0
 1010 004e 3A69     	 ldr r2,[r7,#16]
 1011 0050 1346     	 mov r3,r2
 1012 0052 1B02     	 lsls r3,r3,#8
 1013 0054 1344     	 add r3,r3,r2
 1014 0056 1A04     	 lsls r2,r3,#16
 1015 0058 1344     	 add r3,r3,r2
 1016 005a 1B0E     	 lsrs r3,r3,#24
 1017 005c 3B61     	 str r3,[r7,#16]
2094:../Dave/Generated/UCPROBE/cpu_core.c **** 
2095:../Dave/Generated/UCPROBE/cpu_core.c ****     return (result);
 1018              	 .loc 1 2095 0
 1019 005e 3B69     	 ldr r3,[r7,#16]
 1020 0060 DBB2     	 uxtb r3,r3
2096:../Dave/Generated/UCPROBE/cpu_core.c **** }
 1021              	 .loc 1 2096 0
 1022 0062 1846     	 mov r0,r3
 1023 0064 1C37     	 adds r7,r7,#28
 1024              	.LCFI50:
 1025              	 .cfi_def_cfa_offset 4
 1026 0066 BD46     	 mov sp,r7
 1027              	.LCFI51:
 1028              	 .cfi_def_cfa_register 13
 1029              	 
 1030 0068 5DF8047B 	 ldr r7,[sp],#4
 1031              	.LCFI52:
 1032              	 .cfi_restore 7
 1033              	 .cfi_def_cfa_offset 0
 1034 006c 7047     	 bx lr
 1035              	 .cfi_endproc
 1036              	.LFE10:
 1038 006e 00BF     	 .text
 1039              	.Letext0:
 1040              	 .file 2 "../Dave/Generated/UCPROBE/cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 cpu_core.c
    {standard input}:20     .rodata.CPU_CntLeadZerosTbl:00000000 $d
    {standard input}:23     .rodata.CPU_CntLeadZerosTbl:00000000 CPU_CntLeadZerosTbl
    {standard input}:285    .rodata.CPU_EndiannessTest:00000000 CPU_EndiannessTest
    {standard input}:282    .rodata.CPU_EndiannessTest:00000000 $d
    {standard input}:288    .text.CPU_Init:00000000 $t
    {standard input}:293    .text.CPU_Init:00000000 CPU_Init
    {standard input}:322    .text.CPU_SW_Exception:00000000 $t
    {standard input}:327    .text.CPU_SW_Exception:00000000 CPU_SW_Exception
    {standard input}:348    .text.CPU_CntLeadZeros08:00000000 $t
    {standard input}:353    .text.CPU_CntLeadZeros08:00000000 CPU_CntLeadZeros08
    {standard input}:397    .text.CPU_CntLeadZeros16:00000000 $t
    {standard input}:402    .text.CPU_CntLeadZeros16:00000000 CPU_CntLeadZeros16
    {standard input}:446    .text.CPU_CntLeadZeros32:00000000 $t
    {standard input}:451    .text.CPU_CntLeadZeros32:00000000 CPU_CntLeadZeros32
    {standard input}:489    .text.CPU_CntLeadZeros64:00000000 $t
    {standard input}:494    .text.CPU_CntLeadZeros64:00000000 CPU_CntLeadZeros64
    {standard input}:719    .text.CPU_CntLeadZeros64:0000017c $d
    {standard input}:724    .text.CPU_CntTrailZeros08:00000000 $t
    {standard input}:729    .text.CPU_CntTrailZeros08:00000000 CPU_CntTrailZeros08
    {standard input}:778    .text.CPU_CntTrailZeros16:00000000 $t
    {standard input}:783    .text.CPU_CntTrailZeros16:00000000 CPU_CntTrailZeros16
    {standard input}:832    .text.CPU_CntTrailZeros32:00000000 $t
    {standard input}:837    .text.CPU_CntTrailZeros32:00000000 CPU_CntTrailZeros32
    {standard input}:884    .text.CPU_CntTrailZeros64:00000000 $t
    {standard input}:889    .text.CPU_CntTrailZeros64:00000000 CPU_CntTrailZeros64
    {standard input}:948    .text.CPU_PopCnt32:00000000 $t
    {standard input}:953    .text.CPU_PopCnt32:00000000 CPU_PopCnt32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CPU_CntLeadZeros
CPU_CntTrailZeros
