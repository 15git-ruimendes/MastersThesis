   1              	# 1 "../Dave/Generated/UCPROBE/cpu_a.S"
   1              	/**************************************************************************************************
   0              	
   0              	
   0              	
   2              	                                                 uC/CPU
   3              	                                     CPU CONFIGURATION & PORT LAYER
   4              	
   5              	                           (c) Copyright 2004-2015; Micrium, Inc.; Weston, FL
   6              	
   7              	                All rights reserved.  Protected by international copyright laws.
   8              	
   9              	                uC/CPU is provided in source form to registered licensees ONLY.  It is
  10              	                illegal to distribute this source code to any third party unless you receive
  11              	                written permission by an authorized Micrium representative.  Knowledge of
  12              	                the source code may NOT be used to develop a similar product.
  13              	
  14              	                Please help us continue to provide the Embedded community with the finest
  15              	                software available.  Your honesty is greatly appreciated.
  16              	
  17              	                You can find our product's user manual, API reference, release notes and
  18              	                more information at https://doc.micrium.com.
  19              	                You can contact us at www.micrium.com.
  20              	***************************************************************************************************
  21              	
  22              	#if defined(__GNUC__)
  23              	/**************************************************************************************************
  24              	
  25              	                                             CPU PORT FILE
  26              	
  27              	                                             ARM-Cortex-M4
  28              	                                             GNU C Compiler
  29              	
  30              	  Filename      : cpu_a.asm
  31              	  Version       : V1.30.02.00
  32              	  Programmer(s) : JJL
  33              	***************************************************************************************************
  34              	
  35              	
  36              	/**************************************************************************************************
  37              	                                            PUBLIC FUNCTIONS
  38              	***************************************************************************************************
  39              	
  40              	        .global  CPU_IntDis
  41              	        .global  CPU_IntEn
  42              	
  43              	        .global  CPU_SR_Save
  44              	        .global  CPU_SR_Restore
  45              	
  46              	        .global  CPU_WaitForInt
  47              	        .global  CPU_WaitForExcept
  48              	
  49              	
  50              	        .global  CPU_CntLeadZeros
  51              	        .global  CPU_CntTrailZeros
  52              	        .global  CPU_RevBits
  53              	
  54              	
  55              	/**************************************************************************************************
  56              	                                       CODE GENERATION DIRECTIVES
  57              	***************************************************************************************************
  58              	
  59              	.text
  60              	.align 2
  61              	.syntax unified
  62              	
  63              	
  64              	/**************************************************************************************************
  65              	                                     DISABLE and ENABLE INTERRUPTS
  66              	
  67              	  Description: Disable/Enable interrupts.
  68              	
  69              	  Prototypes : void  CPU_IntDis(void);
  70              	               void  CPU_IntEn (void);
  71              	***************************************************************************************************
  72              	
  73              	.thumb_func
  74              	CPU_IntDis:
  75 0000 72B6     	        CPSID   I
  76 0002 7047     	        BX      LR
  77              	
  78              	.thumb_func
  79              	CPU_IntEn:
  80 0004 62B6     	        CPSIE   I
  81 0006 7047     	        BX      LR
  82              	
  83              	
  84              	/**************************************************************************************************
  85              	                                       CRITICAL SECTION FUNCTIONS
  86              	
  87              	  Description : Disable/Enable interrupts by preserving the state of interrupts.  Generally speakin
  88              	                state of the interrupt disable flag is stored in the local variable 'cpu_sr' & inte
  89              	                are then disabled ('cpu_sr' is allocated in all functions that need to disable inte
  90              	                The previous interrupt state is restored by copying 'cpu_sr' into the CPU's status 
  91              	
  92              	  Prototypes  : CPU_SR  CPU_SR_Save   (void);
  93              	                void    CPU_SR_Restore(CPU_SR  cpu_sr);
  94              	
  95              	  Note(s)     : (1) These functions are used in general like this :
  96              	
  97              	                        void  Task (void  *p_arg)
  98              	                        {
  99              	                            CPU_SR_ALLOC();                     // Allocate storage for CPU status 
 100              	                                :
 101              	                                :
 102              	                            CPU_CRITICAL_ENTER();               // cpu_sr = CPU_SR_Save();
 103              	                                :
 104              	                                :
 105              	                            CPU_CRITICAL_EXIT();                // CPU_SR_Restore(cpu_sr);
 106              	                                :
 107              	                        }
 108              	***************************************************************************************************
 109              	
 110              	.thumb_func
 111              	CPU_SR_Save:
 112 0008 EFF31080 	        MRS     R0, PRIMASK                     // Set prio int mask to mask all (except faults)
 113 000c 72B6     	        CPSID   I
 114 000e 7047     	        BX      LR
 115              	
 116              	.thumb_func
 117              	CPU_SR_Restore:                                  // See Note #2.
 118 0010 80F31088 	        MSR     PRIMASK, R0
 119 0014 7047     	        BX      LR
 120              	
 121              	
 122              	/**************************************************************************************************
 123              	                                          WAIT FOR INTERRUPT
 124              	
 125              	  Description : Enters sleep state, which will be exited when an interrupt is received.
 126              	
 127              	  Prototypes  : void  CPU_WaitForInt (void)
 128              	
 129              	  Argument(s) : none.
 130              	***************************************************************************************************
 131              	
 132              	.thumb_func
 133              	CPU_WaitForInt:
 134 0016 30BF     	        WFI                                     // Wait for interrupt
 135 0018 7047     	        BX      LR
 136              	
 137              	
 138              	/**************************************************************************************************
 139              	                                          WAIT FOR EXCEPTION
 140              	
 141              	  Description : Enters sleep state, which will be exited when an exception is received.
 142              	
 143              	  Prototypes  : void  CPU_WaitForExcept (void)
 144              	
 145              	  Argument(s) : none.
 146              	***************************************************************************************************
 147              	
 148              	.thumb_func
 149              	CPU_WaitForExcept:
 150 001a 20BF     	        WFE                                     // Wait for exception
 151 001c 7047     	        BX      LR
 152              	
 153              	
 154              	/**************************************************************************************************
 155              	                                          CPU_CntLeadZeros()
 156              	                                         COUNT LEADING ZEROS
 157              	
 158              	  Description : Counts the number of contiguous, most-significant, leading zero bits before the
 159              	                    first binary one bit in a data value.
 160              	
 161              	  Prototype   : CPU_DATA  CPU_CntLeadZeros(CPU_DATA  val);
 162              	
 163              	  Argument(s) : val         Data value to count leading zero bits.
 164              	
 165              	  Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
 166              	
 167              	  Caller(s)   : Application.
 168              	
 169              	                This function is an INTERNAL CPU module function but MAY be called by application
 170              	                function(s).
 171              	
 172              	  Note(s)     : (1) (a) Supports 32-bit data value size as configured by 'CPU_DATA' (see 'cpu.h
 173              	                        CPU WORD CONFIGURATION  Note #1').
 174              	
 175              	                    (b) For 32-bit values :
 176              	
 177              	                              b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
 178              	                              ---  ---  ---       ---  ---  ---  ---  ---    ---------------
 179              	                               1    x    x         x    x    x    x    x            0
 180              	                               0    1    x         x    x    x    x    x            1
 181              	                               0    0    1         x    x    x    x    x            2
 182              	                               :    :    :         :    :    :    :    :            :
 183              	                               :    :    :         :    :    :    :    :            :
 184              	                               0    0    0         1    x    x    x    x           27
 185              	                               0    0    0         0    1    x    x    x           28
 186              	                               0    0    0         0    0    1    x    x           29
 187              	                               0    0    0         0    0    0    1    x           30
 188              	                               0    0    0         0    0    0    0    1           31
 189              	                               0    0    0         0    0    0    0    0           32
 190              	
 191              	
 192              	                (2) MUST be defined in 'cpu_a.asm' (or 'cpu_c.c') if CPU_CFG_LEAD_ZEROS_ASM_PRESENT
 193              	                    #define'd in 'cpu_cfg.h' or 'cpu.h'.
 194              	***************************************************************************************************
 195              	
 196              	.thumb_func
 197              	CPU_CntLeadZeros:
 198 001e B0FA80F0 	        CLZ     R0, R0                          // Count leading zeros
 199 0022 7047     	        BX      LR
 200              	
 201              	
 202              	/**************************************************************************************************
 203              	                                          CPU_CntTrailZeros()
 204              	                                         COUNT TRAILING ZEROS
 205              	
 206              	  Description : Counts the number of contiguous, least-significant, trailing zero bits before the
 207              	                    first binary one bit in a data value.
 208              	
 209              	  Prototype   : CPU_DATA  CPU_CntTrailZeros(CPU_DATA  val);
 210              	
 211              	  Argument(s) : val         Data value to count trailing zero bits.
 212              	
 213              	  Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
 214              	
 215              	  Caller(s)   : Application.
 216              	
 217              	                This function is an INTERNAL CPU module function but MAY be called by application
 218              	                function(s).
 219              	
 220              	  Note(s)     : (1) (a) Supports 32-bit data value size as configured by 'CPU_DATA' (see 'cpu.h
 221              	                        CPU WORD CONFIGURATION  Note #1').
 222              	
 223              	                    (b) For 32-bit values :
 224              	
 225              	                              b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
 226              	                              ---  ---  ---  ---  ---       ---  ---  ---    ----------------
 227              	                               x    x    x    x    x         x    x    1            0
 228              	                               x    x    x    x    x         x    1    0            1
 229              	                               x    x    x    x    x         1    0    0            2
 230              	                               :    :    :    :    :         :    :    :            :
 231              	                               :    :    :    :    :         :    :    :            :
 232              	                               x    x    x    x    1         0    0    0           27
 233              	                               x    x    x    1    0         0    0    0           28
 234              	                               x    x    1    0    0         0    0    0           29
 235              	                               x    1    0    0    0         0    0    0           30
 236              	                               1    0    0    0    0         0    0    0           31
 237              	                               0    0    0    0    0         0    0    0           32
 238              	
 239              	
 240              	                (2) MUST be defined in 'cpu_a.asm' (or 'cpu_c.c') if CPU_CFG_TRAIL_ZEROS_ASM_PRESEN
 241              	                    #define'd in 'cpu_cfg.h' or 'cpu.h'.
 242              	***************************************************************************************************
 243              	
 244              	.thumb_func
 245              	CPU_CntTrailZeros:
 246 0024 90FAA0F0 	        RBIT    R0, R0                          // Reverse bits
 247 0028 B0FA80F0 	        CLZ     R0, R0                          // Count trailing zeros
 248 002c 7047     	        BX      LR
 249              	
 250              	
 251              	/**************************************************************************************************
 252              	                                             CPU_RevBits()
 253              	                                             REVERSE BITS
 254              	
 255              	  Description : Reverses the bits in a data value.
 256              	
 257              	  Prototypes  : CPU_DATA  CPU_RevBits(CPU_DATA  val);
 258              	
 259              	  Argument(s) : val         Data value to reverse bits.
 260              	
 261              	  Return(s)   : Value with all bits in 'val' reversed (see Note #1).
 262              	
 263              	  Caller(s)   : Application.
 264              	
 265              	                This function is an INTERNAL CPU module function but MAY be called by application f
 266              	
 267              	  Note(s)     : (1) The final, reversed data value for 'val' is such that :
 268              	
 269              	                        'val's final bit  0       =  'val's original bit  N
 270              	                        'val's final bit  1       =  'val's original bit (N - 1)
 271              	                        'val's final bit  2       =  'val's original bit (N - 2)
 272              	
 273              	                                ...                           ...
 274              	
 275              	                        'val's final bit (N - 2)  =  'val's original bit  2
 276              	                        'val's final bit (N - 1)  =  'val's original bit  1
 277              	                        'val's final bit  N       =  'val's original bit  0
 278              	***************************************************************************************************
 279              	
 280              	.thumb_func
 281              	CPU_RevBits:
 282 002e 90FAA0F0 	        RBIT    R0, R0                          // Reverse bits
 283 0032 7047     	        BX      LR
 284              	
 285              	
 286              	/**************************************************************************************************
 287              	                                      CPU ASSEMBLY PORT FILE END
 288              	***************************************************************************************************
 289              	
 290              	.end
DEFINED SYMBOLS
../Dave/Generated/UCPROBE/cpu_a.S:74     .text:00000000 CPU_IntDis
../Dave/Generated/UCPROBE/cpu_a.S:79     .text:00000004 CPU_IntEn
../Dave/Generated/UCPROBE/cpu_a.S:111    .text:00000008 CPU_SR_Save
../Dave/Generated/UCPROBE/cpu_a.S:117    .text:00000010 CPU_SR_Restore
../Dave/Generated/UCPROBE/cpu_a.S:133    .text:00000016 CPU_WaitForInt
../Dave/Generated/UCPROBE/cpu_a.S:149    .text:0000001a CPU_WaitForExcept
../Dave/Generated/UCPROBE/cpu_a.S:197    .text:0000001e CPU_CntLeadZeros
../Dave/Generated/UCPROBE/cpu_a.S:245    .text:00000024 CPU_CntTrailZeros
../Dave/Generated/UCPROBE/cpu_a.S:281    .text:0000002e CPU_RevBits
../Dave/Generated/UCPROBE/cpu_a.S:60     .text:00000000 $t
                   .debug_aranges:0000000c $d

NO UNDEFINED SYMBOLS
