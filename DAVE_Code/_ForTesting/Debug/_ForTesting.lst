
_ForTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005be8  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  2 .ram_code     00000448  10000800  0c005be8  00010800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000204  20000000  0c006030  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00008b64  20000204  0c006234  00018204  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  6 .debug_aranges 00001258  00000000  00000000  00018208  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00024c1f  00000000  00000000  00019460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000043d3  00000000  00000000  0003e07f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000097a2  00000000  00000000  00042452  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00004a04  00000000  00000000  0004bbf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000d411  00000000  00000000  000505f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009aa2  00000000  00000000  0005da09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f78  00000000  00000000  000674ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000960  00000000  00000000  00068423  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 f9 33 00 08 b1 02 00 08     .........3......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006030 	.word	0x0c006030
 800024c:	20000000 	.word	0x20000000
 8000250:	00000204 	.word	0x00000204
 8000254:	0c006234 	.word	0x0c006234
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c006030 	.word	0x0c006030
 8000264:	10000c48 	.word	0x10000c48
 8000268:	00000000 	.word	0x00000000
 800026c:	0c005be8 	.word	0x0c005be8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000448 	.word	0x00000448

08000278 <__copy_table_end__>:
 8000278:	20000204 	.word	0x20000204
 800027c:	00008b64 	.word	0x00008b64
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000c48 	.word	0x10000c48
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000290:	10000800 	.word	0x10000800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800468d 	.word	0x0800468d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08003519 	.word	0x08003519

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 fabd 	bl	8002844 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 fc33 	bl	8002b34 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 fc12 	bl	8002b20 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <XMC_ERU_Enable+0x20>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d103      	bne.n	80003c0 <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003bc:	f000 f970 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40044000 	.word	0x40044000

080003cc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	460b      	mov	r3, r1
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003da:	7afb      	ldrb	r3, [r7, #11]
 80003dc:	089b      	lsrs	r3, r3, #2
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	089b      	lsrs	r3, r3, #2
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	3204      	adds	r2, #4
 80003ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	f003 0303 	and.w	r3, r3, #3
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4619      	mov	r1, r3
 80003fc:	23f8      	movs	r3, #248	; 0xf8
 80003fe:	408b      	lsls	r3, r1
 8000400:	43db      	mvns	r3, r3
 8000402:	ea02 0103 	and.w	r1, r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	1d02      	adds	r2, r0, #4
 800040a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	4619      	mov	r1, r3
 8000418:	2303      	movs	r3, #3
 800041a:	408b      	lsls	r3, r1
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	4a3a      	ldr	r2, [pc, #232]	; (8000510 <XMC_GPIO_Init+0x144>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d003      	beq.n	8000434 <XMC_GPIO_Init+0x68>
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	4a39      	ldr	r2, [pc, #228]	; (8000514 <XMC_GPIO_Init+0x148>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d10a      	bne.n	800044a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	401a      	ands	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	661a      	str	r2, [r3, #96]	; 0x60
 8000448:	e042      	b.n	80004d0 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	b25b      	sxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	da3c      	bge.n	80004d0 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	7afb      	ldrb	r3, [r7, #11]
 800045c:	409a      	lsls	r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000462:	7afb      	ldrb	r3, [r7, #11]
 8000464:	08db      	lsrs	r3, r3, #3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	7afb      	ldrb	r3, [r7, #11]
 800046c:	08db      	lsrs	r3, r3, #3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3210      	adds	r2, #16
 8000476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4619      	mov	r1, r3
 8000484:	2307      	movs	r3, #7
 8000486:	408b      	lsls	r3, r1
 8000488:	43db      	mvns	r3, r3
 800048a:	ea02 0103 	and.w	r1, r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f100 0210 	add.w	r2, r0, #16
 8000494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	08db      	lsrs	r3, r3, #3
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	08db      	lsrs	r3, r3, #3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3210      	adds	r2, #16
 80004ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	7a1b      	ldrb	r3, [r3, #8]
 80004b4:	4619      	mov	r1, r3
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	f003 0307 	and.w	r3, r3, #7
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	ea42 0103 	orr.w	r1, r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	f100 0210 	add.w	r2, r0, #16
 80004cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004d0:	7afb      	ldrb	r3, [r7, #11]
 80004d2:	089b      	lsrs	r3, r3, #2
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	089b      	lsrs	r3, r3, #2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3204      	adds	r2, #4
 80004e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	7afb      	ldrb	r3, [r7, #11]
 80004f0:	f003 0303 	and.w	r3, r3, #3
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	ea42 0103 	orr.w	r1, r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	1d02      	adds	r2, r0, #4
 8000502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	48028e00 	.word	0x48028e00
 8000514:	48028f00 	.word	0x48028f00

08000518 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <XMC_SCU_GetMirrorStatus+0x14>)
 800051e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000522:	4618      	mov	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	50004000 	.word	0x50004000

08000530 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000538:	f7ff fecc 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <XMC_SCU_lDelay+0x3c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <XMC_SCU_lDelay+0x40>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0c9a      	lsrs	r2, r3, #18
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e003      	b.n	800055e <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000556:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	d3f7      	bcc.n	8000556 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000ffc0 	.word	0x2000ffc0
 8000570:	431bde83 	.word	0x431bde83

08000574 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800057a:	685b      	ldr	r3, [r3, #4]
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	50004074 	.word	0x50004074

0800058c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	60d3      	str	r3, [r2, #12]
}
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	50004074 	.word	0x50004074

080005a8 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 f8b5 	bl	8000720 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005b6:	f000 fa77 	bl	8000aa8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	79db      	ldrb	r3, [r3, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00a      	beq.n	80005d8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005c2:	f000 faaf 	bl	8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005c6:	bf00      	nop
 80005c8:	f000 fa9a 	bl	8000b00 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f083 0301 	eor.w	r3, r3, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f7      	bne.n	80005c8 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7a5b      	ldrb	r3, [r3, #9]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f919 	bl	8000814 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005e2:	bf00      	nop
 80005e4:	f7ff ff98 	bl	8000518 <XMC_SCU_GetMirrorStatus>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1fa      	bne.n	80005e4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	7a1b      	ldrb	r3, [r3, #8]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fa32 	bl	8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7c1b      	ldrb	r3, [r3, #16]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f927 	bl	8000850 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	7c5b      	ldrb	r3, [r3, #17]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f94a 	bl	80008a0 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7c9b      	ldrb	r3, [r3, #18]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f931 	bl	8000878 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	7cdb      	ldrb	r3, [r3, #19]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f954 	bl	80008c8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	799b      	ldrb	r3, [r3, #6]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00a      	beq.n	800063e <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000628:	f000 fab4 	bl	8000b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 800062c:	bf00      	nop
 800062e:	f000 fad9 	bl	8000be4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000632:	4603      	mov	r3, r0
 8000634:	f083 0301 	eor.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f7      	bne.n	800062e <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78db      	ldrb	r3, [r3, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d109      	bne.n	800065a <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	799b      	ldrb	r3, [r3, #6]
 800064a:	f083 0301 	eor.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d017      	beq.n	8000684 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000654:	f000 faea 	bl	8000c2c <XMC_SCU_CLOCK_DisableSystemPll>
 8000658:	e014      	b.n	8000684 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800065a:	f000 fad7 	bl	8000c0c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	8899      	ldrh	r1, [r3, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800066a:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000670:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4608      	mov	r0, r1
 800067a:	4611      	mov	r1, r2
 800067c:	462a      	mov	r2, r5
 800067e:	4623      	mov	r3, r4
 8000680:	f000 fae4 	bl	8000c4c <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800068c:	d103      	bne.n	8000696 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800068e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000692:	f000 f845 	bl	8000720 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000696:	f7ff fe1d 	bl	80002d4 <SystemCoreClockUpdate>
}
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bdb0      	pop	{r4, r5, r7, pc}

080006a0 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	0f1b      	lsrs	r3, r3, #28
 80006ac:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006b4:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006c4:	4413      	add	r3, r2
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	601a      	str	r2, [r3, #0]
}
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	50004414 	.word	0x50004414

080006d8 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	0f1b      	lsrs	r3, r3, #28
 80006e4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006ec:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006fc:	4413      	add	r3, r2
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4013      	ands	r3, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	bf14      	ite	ne
 8000708:	2301      	movne	r3, #1
 800070a:	2300      	moveq	r3, #0
 800070c:	b2db      	uxtb	r3, r3
}
 800070e:	4618      	mov	r0, r3
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	5000440c 	.word	0x5000440c

08000720 <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000728:	4906      	ldr	r1, [pc, #24]	; (8000744 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4313      	orrs	r3, r2
 8000736:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	50004600 	.word	0x50004600

08000748 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000750:	4906      	ldr	r1, [pc, #24]	; (800076c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	50004600 	.word	0x50004600

08000770 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000778:	4906      	ldr	r1, [pc, #24]	; (8000794 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4313      	orrs	r3, r2
 8000786:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	50004600 	.word	0x50004600

08000798 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d108      	bne.n	80007ba <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	60d3      	str	r3, [r2, #12]
 80007b8:	e007      	b.n	80007ca <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007ba:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	60d3      	str	r3, [r2, #12]
  }
}
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	50004710 	.word	0x50004710

080007d8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007e2:	bf00      	nop
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1f8      	bne.n	80007e4 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007f2:	4907      	ldr	r1, [pc, #28]	; (8000810 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007fe:	4313      	orrs	r3, r2
 8000800:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	50004000 	.word	0x50004000
 8000810:	50004300 	.word	0x50004300

08000814 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800081e:	bf00      	nop
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000822:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f8      	bne.n	8000820 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800082e:	4907      	ldr	r1, [pc, #28]	; (800084c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000838:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800083a:	4313      	orrs	r3, r2
 800083c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	50004000 	.word	0x50004000
 800084c:	50004300 	.word	0x50004300

08000850 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000866:	4313      	orrs	r3, r2
 8000868:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	50004600 	.word	0x50004600

08000878 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000884:	6a1b      	ldr	r3, [r3, #32]
 8000886:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800088e:	4313      	orrs	r3, r2
 8000890:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	50004600 	.word	0x50004600

080008a0 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008b6:	4313      	orrs	r3, r2
 80008b8:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	50004600 	.word	0x50004600

080008c8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008de:	4313      	orrs	r3, r2
 80008e0:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	50004600 	.word	0x50004600

080008f0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000906:	4313      	orrs	r3, r2
 8000908:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	50004600 	.word	0x50004600

08000918 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800092e:	4313      	orrs	r3, r2
 8000930:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	50004600 	.word	0x50004600

08000940 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000956:	4313      	orrs	r3, r2
 8000958:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	50004600 	.word	0x50004600

08000968 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	6053      	str	r3, [r2, #4]
}
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	50004600 	.word	0x50004600

08000988 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000996:	f023 0302 	bic.w	r3, r3, #2
 800099a:	6153      	str	r3, [r2, #20]
}
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	50004710 	.word	0x50004710

080009a8 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009b2:	4a28      	ldr	r2, [pc, #160]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80009be:	bf00      	nop
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0f9      	beq.n	80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009d8:	491e      	ldr	r1, [pc, #120]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	3b01      	subs	r3, #1
 80009de:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009e6:	4313      	orrs	r3, r2
 80009e8:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009ea:	4a1a      	ldr	r2, [pc, #104]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f023 0310 	bic.w	r3, r3, #16
 8000a00:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a02:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a0e:	bf00      	nop
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0f9      	beq.n	8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f023 0301 	bic.w	r3, r3, #1
 8000a26:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000a28:	bf00      	nop
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f9      	bne.n	8000a2a <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a40:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000a44:	2208      	movs	r2, #8
 8000a46:	60da      	str	r2, [r3, #12]
}
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	50004710 	.word	0x50004710
 8000a58:	50004160 	.word	0x50004160

08000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a70:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d10e      	bne.n	8000a96 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a82:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a84:	2064      	movs	r0, #100	; 0x64
 8000a86:	f7ff fd53 	bl	8000530 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a8a:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a94:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a96:	2064      	movs	r0, #100	; 0x64
 8000a98:	f7ff fd4a 	bl	8000530 <XMC_SCU_lDelay>
}
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	50004710 	.word	0x50004710

08000aa8 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d109      	bne.n	8000acc <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000abe:	bf00      	nop
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0f9      	beq.n	8000ac0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d00a      	beq.n	8000aee <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ade:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000ae0:	bf00      	nop
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f9      	bne.n	8000ae2 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	50004200 	.word	0x50004200
 8000afc:	50004400 	.word	0x50004400

08000b00 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf0c      	ite	eq
 8000b10:	2301      	moveq	r3, #1
 8000b12:	2300      	movne	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	50004300 	.word	0x50004300

08000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b28:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b2c:	f7ff fd2e 	bl	800058c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b30:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b3a:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b3c:	bf00      	nop
 8000b3e:	f7ff fd19 	bl	8000574 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f8      	beq.n	8000b3e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000b4c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b50:	f7ff fd1c 	bl	800058c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b56:	2208      	movs	r2, #8
 8000b58:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b5a:	bf00      	nop
 8000b5c:	f7ff fd0a 	bl	8000574 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f8      	beq.n	8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b6a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b6e:	f7ff fd0d 	bl	800058c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b7e:	bf00      	nop
 8000b80:	f7ff fcf8 	bl	8000574 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f8      	beq.n	8000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	50004300 	.word	0x50004300

08000b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b98:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba2:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ba4:	4d0d      	ldr	r5, [pc, #52]	; (8000bdc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000bae:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000bb2:	f001 ffb5 	bl	8002b20 <OSCHP_GetFrequency>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000bba:	fba3 2302 	umull	r2, r3, r3, r2
 8000bbe:	0d1b      	lsrs	r3, r3, #20
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000bc4:	4323      	orrs	r3, r4
 8000bc6:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000bc8:	4a03      	ldr	r2, [pc, #12]	; (8000bd8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bca:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bd2:	6053      	str	r3, [r2, #4]
}
 8000bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	50004710 	.word	0x50004710
 8000bdc:	50004700 	.word	0x50004700
 8000be0:	6b5fca6b 	.word	0x6b5fca6b

08000be4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000bf0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000bf4:	bf0c      	ite	eq
 8000bf6:	2301      	moveq	r3, #1
 8000bf8:	2300      	movne	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	50004710 	.word	0x50004710

08000c0c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c10:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1a:	f023 0302 	bic.w	r3, r3, #2
 8000c1e:	6053      	str	r3, [r2, #4]
}
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	50004710 	.word	0x50004710

08000c2c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	6053      	str	r3, [r2, #4]
}
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	50004710 	.word	0x50004710

08000c4c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4603      	mov	r3, r0
 8000c58:	81fb      	strh	r3, [r7, #14]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fd99 	bl	8000798 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c66:	7b7b      	ldrb	r3, [r7, #13]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	f040 808b 	bne.w	8000d84 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d109      	bne.n	8000c88 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c74:	f001 ff54 	bl	8002b20 <OSCHP_GetFrequency>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8000c80:	0c9b      	lsrs	r3, r3, #18
 8000c82:	059b      	lsls	r3, r3, #22
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e002      	b.n	8000c8e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c88:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c8c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	fb02 f203 	mul.w	r2, r2, r3
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	4a4b      	ldr	r2, [pc, #300]	; (8000dd0 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	091b      	lsrs	r3, r3, #4
 8000ca8:	0d9b      	lsrs	r3, r3, #22
 8000caa:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cac:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cae:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cb8:	bf00      	nop
 8000cba:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f9      	beq.n	8000cba <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cc6:	4a43      	ldr	r2, [pc, #268]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cc8:	4b42      	ldr	r3, [pc, #264]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cd2:	4940      	ldr	r1, [pc, #256]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000cda:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	3a01      	subs	r2, #1
 8000ce0:	0212      	lsls	r2, r2, #8
 8000ce2:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cea:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cf6:	4a37      	ldr	r2, [pc, #220]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cf8:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d00:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d02:	4a34      	ldr	r2, [pc, #208]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d04:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f023 0310 	bic.w	r3, r3, #16
 8000d0c:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d0e:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d10:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d18:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d1a:	bf00      	nop
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f9      	beq.n	8000d1c <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d28:	4a2a      	ldr	r2, [pc, #168]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f023 0301 	bic.w	r3, r3, #1
 8000d32:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d34:	bf00      	nop
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f9      	bne.n	8000d36 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	0d9b      	lsrs	r3, r3, #22
 8000d4e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d50:	6a3a      	ldr	r2, [r7, #32]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d202      	bcs.n	8000d5e <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d58:	6938      	ldr	r0, [r7, #16]
 8000d5a:	f000 f845 	bl	8000de8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	4a1f      	ldr	r2, [pc, #124]	; (8000de0 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	095b      	lsrs	r3, r3, #5
 8000d6a:	0d9b      	lsrs	r3, r3, #22
 8000d6c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d6e:	6a3a      	ldr	r2, [r7, #32]
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d202      	bcs.n	8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d76:	6938      	ldr	r0, [r7, #16]
 8000d78:	f000 f836 	bl	8000de8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d7c:	6a38      	ldr	r0, [r7, #32]
 8000d7e:	f000 f833 	bl	8000de8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d82:	e01c      	b.n	8000dbe <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d84:	4913      	ldr	r1, [pc, #76]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d92:	4313      	orrs	r3, r2
 8000d94:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000d96:	bf00      	nop
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f9      	beq.n	8000d98 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000db0:	bf00      	nop
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f9      	beq.n	8000db2 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	60da      	str	r2, [r3, #12]
}
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	aaaaaaab 	.word	0xaaaaaaab
 8000dd4:	50004710 	.word	0x50004710
 8000dd8:	f08080ff 	.word	0xf08080ff
 8000ddc:	88888889 	.word	0x88888889
 8000de0:	b60b60b7 	.word	0xb60b60b7
 8000de4:	50004160 	.word	0x50004160

08000de8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000df0:	490b      	ldr	r1, [pc, #44]	; (8000e20 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e00:	4313      	orrs	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e04:	bf00      	nop
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f9      	beq.n	8000e06 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e12:	2032      	movs	r0, #50	; 0x32
 8000e14:	f7ff fb8c 	bl	8000530 <XMC_SCU_lDelay>
}
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	50004710 	.word	0x50004710

08000e24 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e32:	60da      	str	r2, [r3, #12]
}
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <XMC_CCU4_lDeassertReset+0x4c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d103      	bne.n	8000e58 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000e50:	2004      	movs	r0, #4
 8000e52:	f7ff fc25 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e56:	e016      	b.n	8000e86 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <XMC_CCU4_lDeassertReset+0x50>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d103      	bne.n	8000e68 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000e60:	2008      	movs	r0, #8
 8000e62:	f7ff fc1d 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e66:	e00e      	b.n	8000e86 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <XMC_CCU4_lDeassertReset+0x54>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d103      	bne.n	8000e78 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000e70:	2010      	movs	r0, #16
 8000e72:	f7ff fc15 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e76:	e006      	b.n	8000e86 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <XMC_CCU4_lDeassertReset+0x58>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d102      	bne.n	8000e86 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <XMC_CCU4_lDeassertReset+0x5c>)
 8000e82:	f7ff fc0d 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	4000c000 	.word	0x4000c000
 8000e90:	40010000 	.word	0x40010000
 8000e94:	40014000 	.word	0x40014000
 8000e98:	48004000 	.word	0x48004000
 8000e9c:	10000001 	.word	0x10000001

08000ea0 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000ea8:	2010      	movs	r0, #16
 8000eaa:	f7ff fd5d 	bl	8000968 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffc6 	bl	8000e40 <XMC_CCU4_lDeassertReset>
#endif
}
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop

08000ebc <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ffe9 	bl	8000ea0 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa8 	bl	8000e24 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ee0:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	039b      	lsls	r3, r3, #14
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	601a      	str	r2, [r3, #0]
}
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	795b      	ldrb	r3, [r3, #5]
 8000f0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	051a      	lsls	r2, r3, #20
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	791b      	ldrb	r3, [r3, #4]
 8000f1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	795b      	ldrb	r3, [r3, #5]
 8000f3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
 8000f70:	4613      	mov	r3, r2
 8000f72:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	2b0b      	cmp	r3, #11
 8000f78:	d836      	bhi.n	8000fe8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8000f7a:	a201      	add	r2, pc, #4	; (adr r2, 8000f80 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8000f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f80:	08000fb1 	.word	0x08000fb1
 8000f84:	08000fb1 	.word	0x08000fb1
 8000f88:	08000fbb 	.word	0x08000fbb
 8000f8c:	08000fbb 	.word	0x08000fbb
 8000f90:	08000fe9 	.word	0x08000fe9
 8000f94:	08000fe9 	.word	0x08000fe9
 8000f98:	08000fe9 	.word	0x08000fe9
 8000f9c:	08000fe9 	.word	0x08000fe9
 8000fa0:	08000fc5 	.word	0x08000fc5
 8000fa4:	08000fd1 	.word	0x08000fd1
 8000fa8:	08000fdd 	.word	0x08000fdd
 8000fac:	08000fdd 	.word	0x08000fdd
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
      break;
 8000fb8:	e01b      	b.n	8000ff2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000fba:	230c      	movs	r3, #12
 8000fbc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	617b      	str	r3, [r7, #20]
      break;
 8000fc2:	e016      	b.n	8000ff2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000fc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	617b      	str	r3, [r7, #20]
      break;
 8000fce:	e010      	b.n	8000ff2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000fd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fd4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	617b      	str	r3, [r7, #20]
      break;
 8000fda:	e00a      	b.n	8000ff2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000fdc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fe0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	617b      	str	r3, [r7, #20]
      break;
 8000fe6:	e004      	b.n	8000ff2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
	  break;
 8000ff0:	bf00      	nop
  }

  if (mask != 0)
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d013      	beq.n	8001020 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ffe:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4013      	ands	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 800100a:	78ba      	ldrb	r2, [r7, #2]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8001020:	371c      	adds	r7, #28
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103a:	60da      	str	r2, [r3, #12]
}
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	611a      	str	r2, [r3, #16]
}
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <XMC_CCU8_lDeassertReset+0x30>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d103      	bne.n	8001078 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8001070:	2080      	movs	r0, #128	; 0x80
 8001072:	f7ff fb15 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001076:	e007      	b.n	8001088 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a06      	ldr	r2, [pc, #24]	; (8001094 <XMC_CCU8_lDeassertReset+0x34>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d103      	bne.n	8001088 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8001080:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001084:	f7ff fb0c 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020000 	.word	0x40020000
 8001094:	40024000 	.word	0x40024000

08001098 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80010a0:	2010      	movs	r0, #16
 80010a2:	f7ff fc61 	bl	8000968 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffda 	bl	8001060 <XMC_CCU8_lDeassertReset>
#endif
}
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop

080010b4 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffe9 	bl	8001098 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffb0 	bl	800102c <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010d8:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	039b      	lsls	r3, r3, #14
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	601a      	str	r2, [r3, #0]
}
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa4 	bl	8001048 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	7b5b      	ldrb	r3, [r3, #13]
 800110c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	051a      	lsls	r2, r3, #20
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	7b1b      	ldrb	r3, [r3, #12]
 800111c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	7b1b      	ldrb	r3, [r3, #12]
 800112c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001130:	b2db      	uxtb	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	7b5b      	ldrb	r3, [r3, #13]
 800113c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f083 0214 	eor.w	r2, r3, #20
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop

08001164 <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
 8001170:	4613      	mov	r3, r2
 8001172:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode",
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) || \
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f023 0303 	bic.w	r3, r3, #3
 8001180:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	4313      	orrs	r3, r2
 8001188:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	60fb      	str	r3, [r7, #12]

  if (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 8001196:	78bb      	ldrb	r3, [r7, #2]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d104      	bne.n	80011a6 <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e003      	b.n	80011ae <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	615a      	str	r2, [r3, #20]
}
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
 80011cc:	4613      	mov	r3, r2
 80011ce:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) || \
             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if (synch_with_pwm == true)
 80011f2:	78bb      	ldrb	r3, [r7, #2]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e003      	b.n	800120a <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001208:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d104      	bne.n	800121a <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e003      	b.n	8001222 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001220:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	615a      	str	r2, [r3, #20]
}
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	460b      	mov	r3, r1
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	3b01      	subs	r3, #1
 8001246:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 800124e:	7ffb      	ldrb	r3, [r7, #31]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	3310      	adds	r3, #16
 8001256:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	461a      	mov	r2, r3
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	3316      	adds	r3, #22
 800127e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2201      	movs	r2, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	461a      	mov	r2, r3
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	3319      	adds	r3, #25
 80012aa:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	78db      	ldrb	r3, [r3, #3]
 80012c0:	461a      	mov	r2, r3
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]
#endif
}
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop

08001308 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001314:	887a      	ldrh	r2, [r7, #2]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
}
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
 8001330:	4613      	mov	r3, r2
 8001332:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 800133a:	883a      	ldrh	r2, [r7, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001340:	e002      	b.n	8001348 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8001342:	883a      	ldrh	r2, [r7, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>:
  slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
}

/* Configures status ST1, ST2 mapping to STy */
void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_STATUS_t channel)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel));

  slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	615a      	str	r2, [r3, #20]
  slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	075b      	lsls	r3, r3, #29
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	615a      	str	r2, [r3, #20]
}
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	460b      	mov	r3, r1
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7fe fff2 	bl	80003a8 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80013c8:	7afb      	ldrb	r3, [r7, #11]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4619      	mov	r1, r3
 80013ce:	230f      	movs	r3, #15
 80013d0:	408b      	lsls	r3, r1
 80013d2:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 80013d4:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	7af9      	ldrb	r1, [r7, #11]
 80013dc:	0089      	lsls	r1, r1, #2
 80013de:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80013e0:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
 80013e6:	7afa      	ldrb	r2, [r7, #11]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3204      	adds	r2, #4
 80013f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop

080013fc <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
 8001408:	4613      	mov	r3, r2
 800140a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 800140c:	78fa      	ldrb	r2, [r7, #3]
 800140e:	78bb      	ldrb	r3, [r7, #2]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	b2d9      	uxtb	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	f001 0103 	and.w	r1, r1, #3
 800141e:	0109      	lsls	r1, r1, #4
 8001420:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001424:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8001428:	4301      	orrs	r1, r0
 800142a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
 8001444:	4613      	mov	r3, r2
 8001446:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4619      	mov	r1, r3
 8001452:	2303      	movs	r3, #3
 8001454:	408b      	lsls	r3, r1
 8001456:	43db      	mvns	r3, r3
 8001458:	401a      	ands	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001462:	78bb      	ldrb	r3, [r7, #2]
 8001464:	78f9      	ldrb	r1, [r7, #3]
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	408b      	lsls	r3, r1
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001486:	783b      	ldrb	r3, [r7, #0]
 8001488:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001490:	78bb      	ldrb	r3, [r7, #2]
 8001492:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001496:	b2db      	uxtb	r3, r3
 8001498:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 800149a:	4313      	orrs	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014ba:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800151a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff f8b3 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 800153a:	bd80      	pop	{r7, pc}

0800153c <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001546:	f7ff fff3 	bl	8001530 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop

08001590 <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800159e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e017      	b.n	80015de <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 80015c6:	e000      	b.n	80015ca <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 80015c8:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f7      	bne.n	80015c8 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	3301      	adds	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d9e4      	bls.n	80015ae <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	08004700 	.word	0x08004700

080015f4 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	2300      	movs	r3, #0
 8001608:	f000 f828 	bl	800165c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	6859      	ldr	r1, [r3, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	2300      	movs	r3, #0
 8001616:	f000 f821 	bl	800165c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	6899      	ldr	r1, [r3, #8]
 8001620:	2200      	movs	r2, #0
 8001622:	2301      	movs	r3, #1
 8001624:	f000 f81a 	bl	800165c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	2201      	movs	r2, #1
 8001630:	2301      	movs	r3, #1
 8001632:	f000 f813 	bl	800165c <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	6819      	ldr	r1, [r3, #0]
 8001650:	f7ff ff14 	bl	800147c <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop

0800165c <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800165c:	b480      	push	{r7}
 800165e:	b08d      	sub	sp, #52	; 0x34
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	4613      	mov	r3, r2
 800166a:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d113      	bne.n	800169a <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8001672:	2308      	movs	r3, #8
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001676:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001680:	231f      	movs	r3, #31
 8001682:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001684:	7a3b      	ldrb	r3, [r7, #8]
 8001686:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800168a:	b2db      	uxtb	r3, r3
 800168c:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800168e:	7a7b      	ldrb	r3, [r7, #9]
 8001690:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	76fb      	strb	r3, [r7, #27]
 8001698:	e013      	b.n	80016c2 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 800169a:	2318      	movs	r3, #24
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800169e:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 80016a4:	2310      	movs	r3, #16
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 80016a8:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 80016ac:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 80016ae:	7abb      	ldrb	r3, [r7, #10]
 80016b0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	3228      	adds	r2, #40	; 0x28
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	43db      	mvns	r3, r3
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4013      	ands	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 80016d8:	7efa      	ldrb	r2, [r7, #27]
 80016da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 80016f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	3228      	adds	r2, #40	; 0x28
 8001704:	6979      	ldr	r1, [r7, #20]
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800170a:	3734      	adds	r7, #52	; 0x34
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001726:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f023 0303 	bic.w	r3, r3, #3
 800172e:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <XMC_VADC_GROUP_SetSyncSlave>:

/* API which programs a group as a slave group during sync conversions */
void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_grp)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

#if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )

  /* Determine the coding of SYNCTR */
  if (slave_grp > master_grp)
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	429a      	cmp	r2, r3
 800175e:	d902      	bls.n	8001766 <XMC_VADC_GROUP_SetSyncSlave+0x1a>
  {
    master_grp = master_grp + 1U;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3301      	adds	r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
  }
#endif

  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800176c:	617b      	str	r3, [r7, #20]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f023 0303 	bic.w	r3, r3, #3
 8001774:	617b      	str	r3, [r7, #20]
  synctr   |= master_grp;
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
  group_ptr->SYNCTR = synctr;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <XMC_VADC_GROUP_SetSyncMaster>:

/* API which programs a group as a master group during sync conversions */
void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800179e:	60fb      	str	r3, [r7, #12]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	60fb      	str	r3, [r7, #12]
  group_ptr->SYNCTR = synctr;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <XMC_VADC_GROUP_CheckSlaveReadiness>:

/* API to enable checking of readiness of slaves before a synchronous conversion request is issued */
void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t i, master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1)))

  master_grp_num = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e00b      	b.n	80017e8 <XMC_VADC_GROUP_CheckSlaveReadiness+0x2c>
  {
    if (g_xmc_vadc_group_array[i] == group_ptr)
 80017d0:	4a13      	ldr	r2, [pc, #76]	; (8001820 <XMC_VADC_GROUP_CheckSlaveReadiness+0x64>)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d101      	bne.n	80017e2 <XMC_VADC_GROUP_CheckSlaveReadiness+0x26>
    {
      master_grp_num = i;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  uint32_t i, master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1)))

  master_grp_num = 0;
  for (i = 0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d9f0      	bls.n	80017d0 <XMC_VADC_GROUP_CheckSlaveReadiness+0x14>
      master_grp_num = i;
    }
  }


  if (slave_group < master_grp_num)
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d202      	bcs.n	80017fc <XMC_VADC_GROUP_CheckSlaveReadiness+0x40>
  {
    slave_group++;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	603b      	str	r3, [r7, #0]
  }
  group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	3303      	adds	r3, #3
 8001806:	4619      	mov	r1, r3
 8001808:	2301      	movs	r3, #1
 800180a:	408b      	lsls	r3, r1
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	08004700 	.word	0x08004700

08001824 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fe6c 	bl	800150c <XMC_VADC_GROUP_QueueDisableArbitrationSlot>

  reg = group_ptr->ARBPR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800183a:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <XMC_VADC_GROUP_QueueInit+0x48>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0) | (uint32_t)(VADC_G_QCTRL0_XTWC_Msk) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800187c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
                                 (uint32_t)(VADC_G_QCTRL0_TMWC_Msk) |
                                 (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d107      	bne.n	80018b2 <XMC_VADC_GROUP_QueueInit+0x8e>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80018a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fe18 	bl	80014e8 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop

080018c0 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
  return ch_num;
}

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80018d2:	60fb      	str	r3, [r7, #12]

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f023 030f 	bic.w	r3, r3, #15
 80018da:	60fb      	str	r3, [r7, #12]
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]

  group_ptr->SEVNP = sevnp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

}
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7a1b      	ldrb	r3, [r3, #8]
 8001908:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001910:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2201      	movs	r2, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4013      	ands	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7a5b      	ldrb	r3, [r3, #9]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	db29      	blt.n	8001996 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d10a      	bne.n	8001962 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 800194c:	2308      	movs	r3, #8
 800194e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001956:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001960:	e00c      	b.n	800197c <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001972:	f023 021f 	bic.w	r2, r3, #31
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	7a52      	ldrb	r2, [r2, #9]
 8001986:	b251      	sxtb	r1, r2
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	431a      	orrs	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	3280      	adds	r2, #128	; 0x80
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80019b6:	3724      	adds	r7, #36	; 0x24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	2201      	movs	r2, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	60da      	str	r2, [r3, #12]
}
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	60da      	str	r2, [r3, #12]
}
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	611a      	str	r2, [r3, #16]
}
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	611a      	str	r2, [r3, #16]
}
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001aae:	f083 0301 	eor.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d104      	bne.n	8001acc <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f808 	bl	8001ad8 <TIMER_CCU4_lInit>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop

08001ad8 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fdfb 	bl	80026e0 <GLOBAL_CCU4_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7e1b      	ldrb	r3, [r3, #24]
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff ff66 	bl	80019cc <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f9f4 	bl	8000ef8 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f82d 	bl	8001b70 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00f      	beq.n	8001b40 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f7ff fa18 	bl	8000f64 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f7ff ff98 	bl	8001a70 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5d 	bl	8001a04 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff43 	bl	80019ec <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff ff4a 	bl	8001a1c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f7ff ff52 	bl	8001a38 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff ff57 	bl	8001a54 <XMC_CCU4_EnableShadowTransfer>
}
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60da      	str	r2, [r3, #12]
}
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	045b      	lsls	r3, r3, #17
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	615a      	str	r2, [r3, #20]
}
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop

08001bf0 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	611a      	str	r2, [r3, #16]
}
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop

08001c0c <XMC_CCU8_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t timer_val)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 8001c18:	887a      	ldrh	r2, [r7, #2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR>
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2201      	movs	r2, #1
 8001c64:	409a      	lsls	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop

08001c78 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8001c80:	4905      	ldr	r1, [pc, #20]	; (8001c98 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8001c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	50004000 	.word	0x50004000

08001c9c <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 8001ca4:	4905      	ldr	r1, [pc, #20]	; (8001cbc <XMC_SCU_SetCcuTriggerLow+0x20>)
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <XMC_SCU_SetCcuTriggerLow+0x20>)
 8001ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	50004000 	.word	0x50004000

08001cc0 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	605a      	str	r2, [r3, #4]
}
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	605a      	str	r2, [r3, #4]
}
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <PWM_SVM_lEnableEvent>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void PWM_SVM_lEnableEvent(PWM_SVM_t* const HandlePtr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /*Enable the slice 0 period match interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_periodmatch)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <PWM_SVM_lEnableEvent+0x22>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	f7ff ff81 	bl	8001c28 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
  /*Enable the slice 0 trap interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_trapevent)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d106      	bne.n	8001d40 <PWM_SVM_lEnableEvent+0x3c>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	210a      	movs	r1, #10
 8001d3c:	f7ff ff74 	bl	8001c28 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_EVENT2);
  }
}
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop

08001d48 <PWM_SVM_InverterDisable>:
/**
 * This function disables the inverter
 */
void PWM_SVM_InverterDisable(PWM_SVM_t* const HandlePtr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_SVM_InverterDisable:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	7cdb      	ldrb	r3, [r3, #19]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d109      	bne.n	8001d6e <PWM_SVM_InverterDisable+0x26>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7ff ffb9 	bl	8001ce0 <XMC_GPIO_SetOutputLow>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	7cdb      	ldrb	r3, [r3, #19]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d109      	bne.n	8001d8c <PWM_SVM_InverterDisable+0x44>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	791b      	ldrb	r3, [r3, #4]
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7ff ff9a 	bl	8001cc0 <XMC_GPIO_SetOutputHigh>
  }
}
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop

08001d94 <PWM_SVM_InverterEnable>:
/**
 * This function Enables the inverter
 */
void PWM_SVM_InverterEnable(PWM_SVM_t* const HandlePtr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	7cdb      	ldrb	r3, [r3, #19]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d109      	bne.n	8001dba <PWM_SVM_InverterEnable+0x26>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	791b      	ldrb	r3, [r3, #4]
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7ff ff83 	bl	8001cc0 <XMC_GPIO_SetOutputHigh>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	7cdb      	ldrb	r3, [r3, #19]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d109      	bne.n	8001dd8 <PWM_SVM_InverterEnable+0x44>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	791b      	ldrb	r3, [r3, #4]
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff ff84 	bl	8001ce0 <XMC_GPIO_SetOutputLow>
  }
}
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop

08001de0 <PWM_SVM_Init>:
/**
 * This function initializes the peripherals and SVM structure 
 * required for the SVM algorithm.
 */
PWM_SVM_STATUS_t PWM_SVM_Init(PWM_SVM_t* const HandlePtr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t phase_count = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  PWM_SVM_STATUS_t status = (PWM_SVM_STATUS_t) PWM_SVM_STATUS_SUCCESS;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 8133 	bne.w	800206c <PWM_SVM_Init+0x28c>
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fc3a 	bl	8002684 <GLOBAL_CCU8_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	73fb      	strb	r3, [r7, #15]
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	e016      	b.n	8001e48 <PWM_SVM_Init+0x68>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	7919      	ldrb	r1, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	320e      	adds	r2, #14
 8001e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f7fe fac5 	bl	80003cc <XMC_GPIO_Init>
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	3301      	adds	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d9e5      	bls.n	8001e1a <PWM_SVM_Init+0x3a>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
          HandlePtr->pwmoutconfig_ptr[phase_count]);
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d11a      	bne.n	8001e8e <PWM_SVM_Init+0xae>
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e62:	791a      	ldrb	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f7fe faad 	bl	80003cc <XMC_GPIO_Init>
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e76:	6819      	ldr	r1, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	791a      	ldrb	r2, [r3, #4]
          HandlePtr->confighandle_ptr->trap_hwsel);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8001e82:	7c9b      	ldrb	r3, [r3, #18]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f7ff fad5 	bl	8001438 <XMC_GPIO_SetHardwareControl>
          HandlePtr->confighandle_ptr->trap_hwsel);
    }

    /*Configure io init for inverter enable pin output*/
    if (svmptr->inverter_pin > (PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_NOTREQUIRED)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	7cdb      	ldrb	r3, [r3, #19]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <PWM_SVM_Init+0xd0>
    {
      XMC_GPIO_Init(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	6819      	ldr	r1, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	791a      	ldrb	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	4608      	mov	r0, r1
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f7fe fa8e 	bl	80003cc <XMC_GPIO_Init>
          HandlePtr->inverterpinconfig_ptr);
    }

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff49 	bl	8001d48 <PWM_SVM_InverterDisable>

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e0a4      	b.n	8002006 <PWM_SVM_Init+0x226>
    {
      XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->phase_configinit_ptr);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	3202      	adds	r2, #2
 8001ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7ff f90e 	bl	80010f0 <XMC_CCU8_SLICE_CompareInit>

      /* configure dead time */
      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->deadtimeconfig_ptr);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	3202      	adds	r2, #2
 8001eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7ff fa34 	bl	8001354 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure external start to event 0 */
      XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	3202      	adds	r2, #2
 8001ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001efc:	4610      	mov	r0, r2
 8001efe:	2101      	movs	r1, #1
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff f997 	bl	8001234 <XMC_CCU8_SLICE_ConfigureEvent>
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0, HandlePtr->startconfig_ptr);
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d121      	bne.n	8001f54 <PWM_SVM_Init+0x174>
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	3202      	adds	r2, #2
 8001f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f20:	4610      	mov	r0, r2
 8001f22:	2103      	movs	r1, #3
 8001f24:	461a      	mov	r2, r3
 8001f26:	f7ff f985 	bl	8001234 <XMC_CCU8_SLICE_ConfigureEvent>
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	3202      	adds	r2, #2
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	7c5a      	ldrb	r2, [r3, #17]
            (bool)svmptr->trap_sync_pwm);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	4608      	mov	r0, r1
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7ff f936 	bl	80011c0 <XMC_CCU8_SLICE_TrapConfig>
            (bool)svmptr->trap_sync_pwm);
      }

      /* Program period  value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) HandlePtr->period);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	3202      	adds	r2, #2
 8001f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7ff f9cc 	bl	8001308 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	3202      	adds	r2, #2
 8001f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2200      	movs	r2, #0
 8001f82:	f7ff f9cf 	bl	8001324 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	3202      	adds	r2, #2
 8001f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	2101      	movs	r1, #1
 8001f96:	2200      	movs	r2, #0
 8001f98:	f7ff f9c4 	bl	8001324 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	3202      	adds	r2, #2
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	6819      	ldr	r1, [r3, #0]
          HandlePtr->confighandle_ptr->phase_st_map[count]);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3308      	adds	r3, #8
 8001fb2:	791b      	ldrb	r3, [r3, #4]
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7ff f9e2 	bl	8001380 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>
          HandlePtr->confighandle_ptr->phase_st_map[count]);

      /* Bind period match event to an NVIC node  */
      HandlePtr->phase_ptr[count]->slice_ptr->SRS |= svmptr->event_sr_selector[count];
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	3202      	adds	r2, #2
 8001fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6979      	ldr	r1, [r7, #20]
 8001fcc:	3102      	adds	r1, #2
 8001fce:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	300a      	adds	r0, #10
 8001fde:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	3202      	adds	r2, #2
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	791b      	ldrb	r3, [r3, #4]
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7ff fdd6 	bl	8001bac <XMC_CCU8_EnableClock>

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b02      	cmp	r3, #2
 800200a:	f67f af57 	bls.w	8001ebc <PWM_SVM_Init+0xdc>

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
    }

    PWM_SVM_lEnableEvent(HandlePtr);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fe78 	bl	8001d04 <PWM_SVM_lEnableEvent>
#if defined (MATH)
      /*Ungate Math coprocessor*/
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MATH);
#endif
    /*Enable the shadow transfer for all three slice*/
    XMC_CCU8_EnableShadowTransfer(HandlePtr->global_ptr, svmptr->shadow_transfer_mask);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7ff fde6 	bl	8001bf0 <XMC_CCU8_EnableShadowTransfer>

    /* update dead time variable*/
    HandlePtr->deadtime_rising_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_rising_edge_counter;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002028:	791b      	ldrb	r3, [r3, #4]
 800202a:	461a      	mov	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    HandlePtr->deadtime_falling_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_falling_edge_counter;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002036:	795b      	ldrb	r3, [r3, #5]
 8002038:	461a      	mov	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    HandlePtr->deadtime_div = (XMC_CCU8_SLICE_DTC_DIV_t) HandlePtr->deadtimeconfig_ptr->div;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    if ((PWM_SVM_STATUS_t) PWM_SVM_STATUS_FAILURE != status)
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d006      	beq.n	8002068 <PWM_SVM_Init+0x288>
    {
      status = PWM_SVM_STATUS_SUCCESS;
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
      HandlePtr->state = (PWM_SVM_STATE_t) PWM_SVM_INITIALIZED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8002066:	e001      	b.n	800206c <PWM_SVM_Init+0x28c>
    }
    else
    {
      status = PWM_SVM_STATUS_FAILURE;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 800206c:	7bfb      	ldrb	r3, [r7, #15]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop

08002078 <PWM_SVM_Start>:

/**
 * This function starts the CCU8 slices used to generate SVM.
 */
void PWM_SVM_Start(PWM_SVM_t* const HandlePtr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Start:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if (((PWM_SVM_STATE_t) PWM_SVM_INITIALIZED == HandlePtr->state)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002090:	2b01      	cmp	r3, #1
 8002092:	d005      	beq.n	80020a0 <PWM_SVM_Start+0x28>
      || ((PWM_SVM_STATE_t) PWM_SVM_STOPPED == HandlePtr->state))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800209a:	2b03      	cmp	r3, #3
 800209c:	f040 8133 	bne.w	8002306 <PWM_SVM_Start+0x28e>
  {
    HandlePtr->ta = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
    HandlePtr->tb = 0U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    HandlePtr->ta2 = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    HandlePtr->tb2 = 0U;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    HandlePtr->v_ta = 0U;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    HandlePtr->v_tb = 0U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    HandlePtr->v_ta2 = 0U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    HandlePtr->v_tb2 = 0U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    HandlePtr->sector = 0U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    HandlePtr->subsector = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fe4f 	bl	8001d94 <PWM_SVM_InverterEnable>

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e026      	b.n	800214a <PWM_SVM_Start+0xd2>
    {
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002102:	2b01      	cmp	r3, #1
 8002104:	d113      	bne.n	800212e <PWM_SVM_Start+0xb6>
      {
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	3202      	adds	r2, #2
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	210a      	movs	r1, #10
 8002116:	f7ff fd9d 	bl	8001c54 <XMC_CCU8_SLICE_ClearEvent>
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	3202      	adds	r2, #2
 8002120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	210b      	movs	r1, #11
 800212a:	f7ff fd93 	bl	8001c54 <XMC_CCU8_SLICE_ClearEvent>
      }
      /* configure the Start trigger function*/
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	3202      	adds	r2, #2
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	2101      	movs	r1, #1
 800213e:	2201      	movs	r2, #1
 8002140:	f7ff f810 	bl	8001164 <XMC_CCU8_SLICE_StartConfig>
    HandlePtr->subsector = 0U;

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3301      	adds	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d9d5      	bls.n	80020fc <PWM_SVM_Start+0x84>
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    if ((uint8_t) true == svmptr->enable_trap)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002156:	2b01      	cmp	r3, #1
 8002158:	d129      	bne.n	80021ae <PWM_SVM_Start+0x136>
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	7d1b      	ldrb	r3, [r3, #20]
 8002164:	4619      	mov	r1, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	7d1b      	ldrb	r3, [r3, #20]
 800216a:	005b      	lsls	r3, r3, #1
    }

    if ((uint8_t) true == svmptr->enable_trap)
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 800216c:	430b      	orrs	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7ff fd2b 	bl	8001bcc <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	7d5b      	ldrb	r3, [r3, #21]
 8002180:	4619      	mov	r1, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	7d5b      	ldrb	r3, [r3, #21]
 8002186:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8002188:	430b      	orrs	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7ff fd1d 	bl	8001bcc <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	7d9b      	ldrb	r3, [r3, #22]
 800219c:	4619      	mov	r1, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	7d9b      	ldrb	r3, [r3, #22]
 80021a2:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 80021a4:	430b      	orrs	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7ff fd0f 	bl	8001bcc <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
    }

    /*enable module clock by clearing idle bit if any of current measurement is selected */
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	7c1b      	ldrb	r3, [r3, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d075      	beq.n	80022a2 <PWM_SVM_Start+0x22a>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	2101      	movs	r1, #1
 80021c0:	2201      	movs	r2, #1
 80021c2:	f7fe ffcf 	bl	8001164 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	7c1b      	ldrb	r3, [r3, #16]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d133      	bne.n	8002236 <PWM_SVM_Start+0x1be>
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 80021e4:	4413      	add	r3, r2
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4608      	mov	r0, r1
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7ff fd0e 	bl	8001c0c <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8002206:	4413      	add	r3, r2
 8002208:	b29b      	uxth	r3, r3
 800220a:	4608      	mov	r0, r1
 800220c:	4619      	mov	r1, r3
 800220e:	f7ff fcfd 	bl	8001c0c <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8002228:	4413      	add	r3, r2
 800222a:	b29b      	uxth	r3, r3
 800222c:	4608      	mov	r0, r1
 800222e:	4619      	mov	r1, r3
 8002230:	f7ff fcec 	bl	8001c0c <XMC_CCU8_SLICE_SetTimerValue>
 8002234:	e035      	b.n	80022a2 <PWM_SVM_Start+0x22a>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002242:	b29b      	uxth	r3, r3
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 800224e:	4413      	add	r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	4608      	mov	r0, r1
 8002254:	4619      	mov	r1, r3
 8002256:	f7ff fcd9 	bl	8001c0c <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002266:	b29b      	uxth	r3, r3
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8002268:	b2db      	uxtb	r3, r3
 800226a:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8002272:	4413      	add	r3, r2
 8002274:	b29b      	uxth	r3, r3
 8002276:	4608      	mov	r0, r1
 8002278:	4619      	mov	r1, r3
 800227a:	f7ff fcc7 	bl	8001c0c <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228a:	b29b      	uxth	r3, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 800228c:	b2db      	uxtb	r3, r3
 800228e:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8002296:	4413      	add	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	4608      	mov	r0, r1
 800229c:	4619      	mov	r1, r3
 800229e:	f7ff fcb5 	bl	8001c0c <XMC_CCU8_SLICE_SetTimerValue>
                    + (uint16_t) svmptr->current_offset));
      }
    }

    /* synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerHigh((uint32_t)(svmptr->sync_start_mask));
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fce6 	bl	8001c78 <XMC_SCU_SetCcuTriggerHigh>

    /* disable the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[0]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	2100      	movs	r1, #0
 80022b6:	2201      	movs	r2, #1
 80022b8:	f7fe ff54 	bl	8001164 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	2100      	movs	r1, #0
 80022c6:	2201      	movs	r2, #1
 80022c8:	f7fe ff4c 	bl	8001164 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	2100      	movs	r1, #0
 80022d6:	2201      	movs	r2, #1
 80022d8:	f7fe ff44 	bl	8001164 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	7c1b      	ldrb	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <PWM_SVM_Start+0x27c>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	2100      	movs	r1, #0
 80022ee:	2201      	movs	r2, #1
 80022f0:	f7fe ff38 	bl	8001164 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    /* disable synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerLow((uint32_t)(svmptr->sync_start_mask));
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fccf 	bl	8001c9c <XMC_SCU_SetCcuTriggerLow>

    /* change the state to RUNNING*/
    HandlePtr->state = PWM_SVM_RUNNING;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }
}
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002318:	0a1b      	lsrs	r3, r3, #8
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	4908      	ldr	r1, [pc, #32]	; (800235c <__NVIC_EnableIRQ+0x34>)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	79fa      	ldrb	r2, [r7, #7]
 8002344:	f002 021f 	and.w	r2, r2, #31
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000e100 	.word	0xe000e100

08002360 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0c      	blt.n	800238c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	4909      	ldr	r1, [pc, #36]	; (8002398 <__NVIC_ClearPendingIRQ+0x38>)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	f002 021f 	and.w	r2, r2, #31
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	3360      	adds	r3, #96	; 0x60
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	490d      	ldr	r1, [pc, #52]	; (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	4909      	ldr	r1, [pc, #36]	; (80023ec <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
  }
}
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b06      	cmp	r3, #6
 800240c:	bf28      	it	cs
 800240e:	2306      	movcs	r3, #6
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3306      	adds	r3, #6
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b01      	subs	r3, #1
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2201      	movs	r2, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	401a      	ands	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	1e59      	subs	r1, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002444:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3308      	adds	r3, #8
 800246a:	4608      	mov	r0, r1
 800246c:	4611      	mov	r1, r2
 800246e:	461a      	mov	r2, r3
 8002470:	f7fd ffac 	bl	80003cc <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7fda      	ldrb	r2, [r3, #31]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3314      	adds	r3, #20
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	f7fe ff93 	bl	80013b0 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	2201      	movs	r2, #1
 800249a:	f7fe ffaf 	bl	80013fc <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7f1c      	ldrb	r4, [r3, #28]
 80024a2:	f7ff ff33 	bl	800230c <__NVIC_GetPriorityGrouping>
 80024a6:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80024ac:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80024b2:	4608      	mov	r0, r1
 80024b4:	4611      	mov	r1, r2
 80024b6:	461a      	mov	r2, r3
 80024b8:	f7ff ff9a 	bl	80023f0 <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	b263      	sxtb	r3, r4
 80024c0:	4618      	mov	r0, r3
 80024c2:	4611      	mov	r1, r2
 80024c4:	f7ff ff6a 	bl	800239c <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7f1b      	ldrb	r3, [r3, #28]
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff41 	bl	8002360 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7f1b      	ldrb	r3, [r3, #28]
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff1f 	bl	8002328 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd90      	pop	{r4, r7, pc}

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002500:	0a1b      	lsrs	r3, r3, #8
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	4908      	ldr	r1, [pc, #32]	; (8002544 <__NVIC_EnableIRQ+0x34>)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	79fa      	ldrb	r2, [r7, #7]
 800252c:	f002 021f 	and.w	r2, r2, #31
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	490d      	ldr	r1, [pc, #52]	; (8002594 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	4909      	ldr	r1, [pc, #36]	; (8002598 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
  }
}
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	bf28      	it	cs
 80025ba:	2306      	movcs	r3, #6
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3306      	adds	r3, #6
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2201      	movs	r2, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	401a      	ands	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	1e59      	subs	r1, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80025f0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b25b      	sxtb	r3, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff7e 	bl	8002510 <__NVIC_EnableIRQ>
}
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop

0800261c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	781c      	ldrb	r4, [r3, #0]
 8002628:	f7ff ff64 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 800262c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002632:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	f7ff ffad 	bl	800259c <NVIC_EncodePriority>
 8002642:	4602      	mov	r2, r0
 8002644:	b263      	sxtb	r3, r4
 8002646:	4618      	mov	r0, r3
 8002648:	4611      	mov	r1, r2
 800264a:	f7ff ff7d 	bl	8002548 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	78db      	ldrb	r3, [r3, #3]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffd2 	bl	8002600 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bd90      	pop	{r4, r7, pc}
 8002666:	bf00      	nop

08002668 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002676:	60da      	str	r2, [r3, #12]
}
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop

08002684 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7b5b      	ldrb	r3, [r3, #13]
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00f      	beq.n	80026ba <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7b1b      	ldrb	r3, [r3, #12]
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f7fe fd05 	bl	80010b4 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ffda 	bl	8002668 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026d2:	60da      	str	r2, [r3, #12]
}
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7b5b      	ldrb	r3, [r3, #13]
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00f      	beq.n	8002716 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7b1b      	ldrb	r3, [r3, #12]
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f7fe fbdb 	bl	8000ebc <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ffda 	bl	80026c4 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3310      	adds	r3, #16
 8002734:	4619      	mov	r1, r3
 8002736:	2301      	movs	r3, #1
 8002738:	408b      	lsls	r3, r1
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7e1b      	ldrb	r3, [r3, #24]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d149      	bne.n	80027f0 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fee8 	bl	800153c <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e02f      	b.n	80027d2 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277a:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4608      	mov	r0, r1
 8002788:	4619      	mov	r1, r3
 800278a:	f7fe ff33 	bl	80015f4 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	2103      	movs	r1, #3
 800279c:	f7fe ffba 	bl	8001714 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a8:	7a1b      	ldrb	r3, [r3, #8]
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	4618      	mov	r0, r3
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	f7ff ffb0 	bl	8002720 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	2200      	movs	r2, #0
 80027ca:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d9cc      	bls.n	8002772 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7e5b      	ldrb	r3, [r3, #25]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fed3 	bl	8001590 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7e1b      	ldrb	r3, [r3, #24]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800284a:	2001      	movs	r0, #1
 800284c:	f7ff ffd6 	bl	80027fc <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002850:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002852:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <SystemCoreSetup+0x94>)
 8002854:	4a21      	ldr	r2, [pc, #132]	; (80028dc <SystemCoreSetup+0x98>)
 8002856:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002858:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800285c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800285e:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <SystemCoreSetup+0x94>)
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <SystemCoreSetup+0x94>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800286a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <SystemCoreSetup+0x9c>)
 8002870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002874:	3314      	adds	r3, #20
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f023 030f 	bic.w	r3, r3, #15
 8002880:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f043 0303 	orr.w	r3, r3, #3
 8002888:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <SystemCoreSetup+0x9c>)
 800288c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002890:	3314      	adds	r3, #20
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <SystemCoreSetup+0x94>)
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <SystemCoreSetup+0x94>)
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f023 0310 	bic.w	r3, r3, #16
 80028a0:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <SystemCoreSetup+0x94>)
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <SystemCoreSetup+0x94>)
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f023 0308 	bic.w	r3, r3, #8
 80028ac:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028ae:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <SystemCoreSetup+0x94>)
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <SystemCoreSetup+0x94>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <SystemCoreSetup+0x94>)
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <SystemCoreSetup+0x94>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80028c4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <SystemCoreSetup+0x94>)
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <SystemCoreSetup+0x94>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	e000ed00 	.word	0xe000ed00
 80028dc:	08000000 	.word	0x08000000
 80028e0:	58001000 	.word	0x58001000

080028e4 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b08f      	sub	sp, #60	; 0x3c
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800290e:	3b01      	subs	r3, #1
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800291a:	e034      	b.n	8002986 <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	1d1a      	adds	r2, r3, #4
 8002920:	633a      	str	r2, [r7, #48]	; 0x30
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	1d11      	adds	r1, r2, #4
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 800293e:	e014      	b.n	800296a <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	1d1a      	adds	r2, r3, #4
 8002944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002946:	ed93 7a00 	vldr	s14, [r3]
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	1d1a      	adds	r2, r3, #4
 800294e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002958:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800295c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002960:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	3b01      	subs	r3, #1
 8002968:	623b      	str	r3, [r7, #32]
    pb = pCoeffs;

    i = numTaps;

    /* Perform the multiply-accumulates */
    while (i > 0U)
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e7      	bne.n	8002940 <arm_fir_f32+0x5c>

      i--;
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	1d1a      	adds	r2, r3, #4
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002978:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297c:	3304      	adds	r3, #4
 800297e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	3b01      	subs	r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1c7      	bne.n	800291c <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	3b01      	subs	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8002998:	e00a      	b.n	80029b0 <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	1d1a      	adds	r2, r3, #4
 800299e:	633a      	str	r2, [r7, #48]	; 0x30
 80029a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a2:	1d11      	adds	r1, r2, #4
 80029a4:	6379      	str	r1, [r7, #52]	; 0x34
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
  tapCnt = (numTaps - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f1      	bne.n	800299a <arm_fir_f32+0xb6>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 80029b6:	373c      	adds	r7, #60	; 0x3c
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	460b      	mov	r3, r1
 80029ce:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	897a      	ldrh	r2, [r7, #10]
 80029d4:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80029dc:	897a      	ldrh	r2, [r7, #10]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029e6:	3b01      	subs	r3, #1
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	6838      	ldr	r0, [r7, #0]
 80029ec:	2100      	movs	r1, #0
 80029ee:	461a      	mov	r2, r3
 80029f0:	f001 fe7d 	bl	80046ee <memset>

  /* Assign state pointer */
  S->pState = pState;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	605a      	str	r2, [r3, #4]
}
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b08b      	sub	sp, #44	; 0x2c
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8002a08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a0c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002af4 <arm_sin_f32+0xf4>
 8002a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a14:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8002a18:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a20:	ee17 3a90 	vmov	r3, s15
 8002a24:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8002a26:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a32:	d502      	bpl.n	8002a3a <arm_sin_f32+0x3a>
  {
    n--;
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	ee07 3a90 	vmov	s15, r3
 8002a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a44:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4c:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8002a50:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a54:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002af8 <arm_sin_f32+0xf8>
 8002a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a5c:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8002a60:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a68:	edc7 7a00 	vstr	s15, [r7]
 8002a6c:	883b      	ldrh	r3, [r7, #0]
 8002a6e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8002a70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a76:	d309      	bcc.n	8002a8c <arm_sin_f32+0x8c>
    index = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8002a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a80:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002af8 <arm_sin_f32+0xf8>
 8002a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a88:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8002a8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a8e:	ee07 3a90 	vmov	s15, r3
 8002a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a96:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8002aa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <arm_sin_f32+0xfc>)
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8002aae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <arm_sin_f32+0xfc>)
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8002abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8002ac0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ac4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002acc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad0:	edd7 6a05 	vldr	s13, [r7, #20]
 8002ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae0:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	372c      	adds	r7, #44	; 0x2c
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	3e22f983 	.word	0x3e22f983
 8002af8:	44000000 	.word	0x44000000
 8002afc:	080050dc 	.word	0x080050dc

08002b00 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]

  return (status);
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002b24:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <OSCHP_GetFrequency+0x10>)
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	00b71b00 	.word	0x00b71b00

08002b34 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002b34:	b5b0      	push	{r4, r5, r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <SystemCoreClockSetup+0x54>)
 8002b3c:	1d3c      	adds	r4, r7, #4
 8002b3e:	461d      	mov	r5, r3
 8002b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fd2c 	bl	80005a8 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7fd fe41 	bl	80007d8 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fd fdf6 	bl	8000748 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002b5c:	2004      	movs	r0, #4
 8002b5e:	f7fd fec7 	bl	80008f0 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8002b62:	f7fd ff11 	bl	8000988 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002b66:	2001      	movs	r0, #1
 8002b68:	2120      	movs	r1, #32
 8002b6a:	f7fd ff1d 	bl	80009a8 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fd fdfe 	bl	8000770 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7fd fee3 	bl	8000940 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f7fd fecc 	bl	8000918 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bdb0      	pop	{r4, r5, r7, pc}
 8002b86:	bf00      	nop
 8002b88:	080058e0 	.word	0x080058e0

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b98:	0a1b      	lsrs	r3, r3, #8
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <__NVIC_EnableIRQ+0x34>)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	79fa      	ldrb	r2, [r7, #7]
 8002bc4:	f002 021f 	and.w	r2, r2, #31
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100

08002be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	db0a      	blt.n	8002c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf4:	490d      	ldr	r1, [pc, #52]	; (8002c2c <__NVIC_SetPriority+0x4c>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	440b      	add	r3, r1
 8002c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002c08:	e00a      	b.n	8002c20 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0a:	4909      	ldr	r1, [pc, #36]	; (8002c30 <__NVIC_SetPriority+0x50>)
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3b04      	subs	r3, #4
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	0092      	lsls	r2, r2, #2
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	761a      	strb	r2, [r3, #24]
  }
}
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000e100 	.word	0xe000e100
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f1c3 0307 	rsb	r3, r3, #7
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	bf28      	it	cs
 8002c52:	2306      	movcs	r3, #6
 8002c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3306      	adds	r3, #6
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d902      	bls.n	8002c64 <NVIC_EncodePriority+0x30>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	e000      	b.n	8002c66 <NVIC_EncodePriority+0x32>
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	1e5a      	subs	r2, r3, #1
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	401a      	ands	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	1e59      	subs	r1, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002c88:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop

08002c98 <XMC_VADC_GROUP_QueueSetGatingMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GROUP_QueueSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002caa:	f023 0203 	bic.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Set the new gating mode */
  group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop

08002cd0 <XMC_VADC_GROUP_QueueFlushEntries>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Initiate flushing of the queue */
  group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002cde:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  while ( !((group_ptr->QSR0) & (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 8002ce8:	bf00      	nop
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f8      	beq.n	8002cea <XMC_VADC_GROUP_QueueFlushEntries+0x1a>
  {
    /* Wait until the queue is indeed flushed */
  }
}
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop

08002d04 <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_QUEUE_ENTRY_t entry)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <ADC_QUEUE_ResetListContents>:
  return version;
}
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* API to reset (De-Initialise) contents of all queue entries */
void ADC_QUEUE_ResetListContents(uint8_t instance_num)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("ADC_QUEUE_ResetListContents:Wrong Instance number",(instance_num < ADC_QUEUE_NUM_APPINSTANCES));

  /*
   * Now reset the contents of all the lists. Application later uses ADC_QUEUE_Insert() to initialise specific entries.
   */
  memset(adc_queue_list_ptrs[instance_num][ADC_QUEUE_CH_INDEX], ADC_QUEUE_INVALID_CHANNEL ,
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <ADC_QUEUE_ResetListContents+0x48>)
 8002d2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d32:	4618      	mov	r0, r3
 8002d34:	21ff      	movs	r1, #255	; 0xff
 8002d36:	2260      	movs	r2, #96	; 0x60
 8002d38:	f001 fcd9 	bl	80046ee <memset>
     (sizeof(ADC_QUEUE_ENTRY_t)* ADC_QUEUE_NUM_CHANNELS));
  memset(adc_queue_list_ptrs[instance_num][ADC_QUEUE_POS_INDEX], ADC_QUEUE_INVALID_CHANNEL ,
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <ADC_QUEUE_ResetListContents+0x48>)
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4618      	mov	r0, r3
 8002d48:	21ff      	movs	r1, #255	; 0xff
 8002d4a:	2260      	movs	r2, #96	; 0x60
 8002d4c:	f001 fccf 	bl	80046ee <memset>
     (sizeof(ADC_QUEUE_ENTRY_t)* ADC_QUEUE_NUM_CHANNELS));
  memset(adc_queue_callback_list[instance_num], 0 ,(sizeof(ADC_QUEUE_EVENT_CALLBACK) * ADC_QUEUE_NUM_CHANNELS));
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	015b      	lsls	r3, r3, #5
 8002d54:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <ADC_QUEUE_ResetListContents+0x4c>)
 8002d56:	4413      	add	r3, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f001 fcc6 	bl	80046ee <memset>
}
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20008088 	.word	0x20008088
 8002d6c:	20000218 	.word	0x20000218

08002d70 <ADC_QUEUE_Init>:
  handle_ptr->number_valid_callback = 0;
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
ADC_QUEUE_STATUS_t ADC_QUEUE_Init(ADC_QUEUE_t *const handle_ptr)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  ADC_QUEUE_STATUS_t status;

  XMC_ASSERT("ADC_QUEUE_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_QUEUE_UNINITIALIZED == handle_ptr->init_status)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7e5b      	ldrb	r3, [r3, #25]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d157      	bne.n	8002e30 <ADC_QUEUE_Init+0xc0>
  {
    /*Initialization of APP 'GLOBAL_ADC'*/
    status = (ADC_QUEUE_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fce1 	bl	800274c <GLOBAL_ADC_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	73fb      	strb	r3, [r7, #15]

    /*Class Configuration*/
    XMC_VADC_GROUP_InputClassInit(handle_ptr->group_handle,handle_ptr->iclass_config_handle,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
                                  XMC_VADC_GROUP_CONV_STD,(uint32_t)handle_ptr->iclass_num);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7edb      	ldrb	r3, [r3, #27]
  {
    /*Initialization of APP 'GLOBAL_ADC'*/
    status = (ADC_QUEUE_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);

    /*Class Configuration*/
    XMC_VADC_GROUP_InputClassInit(handle_ptr->group_handle,handle_ptr->iclass_config_handle,
 8002d96:	461c      	mov	r4, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4623      	mov	r3, r4
 8002da2:	f7fe fc5b 	bl	800165c <XMC_VADC_GROUP_InputClassInit>
                                  XMC_VADC_GROUP_CONV_STD,(uint32_t)handle_ptr->iclass_num);

    /* Initialize the Queue hardware */
    XMC_VADC_GROUP_QueueInit(handle_ptr->group_handle,handle_ptr->queue_config_handle);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fe fd37 	bl	8001824 <XMC_VADC_GROUP_QueueInit>
  
    /* Configure the gating mode for queue*/
    XMC_VADC_GROUP_QueueSetGatingMode(handle_ptr->group_handle, handle_ptr->gating_mode);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7c1b      	ldrb	r3, [r3, #16]
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7ff ff69 	bl	8002c98 <XMC_VADC_GROUP_QueueSetGatingMode>

    /* Clear the internal data structure of queue APP */
    ADC_QUEUE_lInitializeListToDefaults(handle_ptr->instance_number);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7e9b      	ldrb	r3, [r3, #26]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f900 	bl	8002fd0 <ADC_QUEUE_lInitializeListToDefaults>
  
    /*Interrupt Configuration*/
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	7b1b      	ldrb	r3, [r3, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d027      	beq.n	8002e2a <ADC_QUEUE_Init+0xba>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b2dc      	uxtb	r4, r3
 8002de2:	f7ff fed3 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002de6:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->rs_intr_handle->priority,handle_ptr->rs_intr_handle->sub_priority));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8002dec:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->rs_intr_handle->priority,handle_ptr->rs_intr_handle->sub_priority));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4608      	mov	r0, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f7ff ff1b 	bl	8002c34 <NVIC_EncodePriority>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	b263      	sxtb	r3, r4
 8002e02:	4618      	mov	r0, r3
 8002e04:	4611      	mov	r1, r2
 8002e06:	f7ff feeb 	bl	8002be0 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(handle_ptr->rs_intr_handle->node_id,
                              ((handle_ptr->rs_intr_handle->node_id << 8) | handle_ptr->rs_intr_handle->irqctrl));
#endif

      /* Connect RS Events to NVIC nodes */
      XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(handle_ptr->group_handle,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7e1b      	ldrb	r3, [r3, #24]
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	f7fe fd53 	bl	80018c0 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>
                                                      (XMC_VADC_SR_t)handle_ptr->srv_req_node);

      /* Enable Interrupt */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->rs_intr_handle->node_id);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff febf 	bl	8002ba8 <__NVIC_EnableIRQ>
    }
    handle_ptr->init_status = status;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	765a      	strb	r2, [r3, #25]
  }
  return (handle_ptr->init_status);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7e5b      	ldrb	r3, [r3, #25]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}

08002e3c <ADC_QUEUE_InsertQueueEntry>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_InsertQueueEntry(ADC_QUEUE_t* handle_ptr, const ADC_QUEUE_ENTRY_t *entry)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("ADC_QUEUE_Insert:Invalid handle_ptr", (handle_ptr != NULL));
  XMC_ASSERT("ADC_QUEUE_Insert:Invalid queue entry", (entry != NULL));

  /* 1. Insert this entry into a list which is arranged on the basis of channel numbers */
  node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_CH_INDEX];
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7e9b      	ldrb	r3, [r3, #26]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <ADC_QUEUE_InsertQueueEntry+0xe0>)
 8002e4e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002e52:	613b      	str	r3, [r7, #16]
  node = node + (entry->channel_number);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	795b      	ldrb	r3, [r3, #5]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	461a      	mov	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
  memcpy((void *)node, (void *)entry, sizeof(ADC_QUEUE_ENTRY_t)); 
 8002e6a:	6938      	ldr	r0, [r7, #16]
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	220c      	movs	r2, #12
 8002e70:	f001 fc32 	bl	80046d8 <memcpy>

  /* Insert the same entry into a list which is arranged on the basis of the position of the channel in the queue */
  node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7e9b      	ldrb	r3, [r3, #26]
 8002e78:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <ADC_QUEUE_InsertQueueEntry+0xe0>)
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]
  node = node + (entry->queue_position);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	791b      	ldrb	r3, [r3, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	461a      	mov	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
  memcpy((void *)node, (void *)entry, sizeof(ADC_QUEUE_ENTRY_t));
 8002e98:	6938      	ldr	r0, [r7, #16]
 8002e9a:	6839      	ldr	r1, [r7, #0]
 8002e9c:	220c      	movs	r2, #12
 8002e9e:	f001 fc1b 	bl	80046d8 <memcpy>

  entry_callback = entry->adc_event_callback;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e9b      	ldrb	r3, [r3, #26]
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <ADC_QUEUE_InsertQueueEntry+0xe4>)
 8002eb0:	4413      	add	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  insert_yes = (bool)true;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	75bb      	strb	r3, [r7, #22]
  if(NULL != entry_callback)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d02b      	beq.n	8002f16 <ADC_QUEUE_InsertQueueEntry+0xda>
  {
    for(i = handle_ptr->number_valid_callback; i >= (int32_t)0;i--)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7f5b      	ldrb	r3, [r3, #29]
 8002ec2:	75fb      	strb	r3, [r7, #23]
 8002ec4:	e010      	b.n	8002ee8 <ADC_QUEUE_InsertQueueEntry+0xac>
    {
      if(*(callback_node + i) == entry_callback)
 8002ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4413      	add	r3, r2
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d102      	bne.n	8002ede <ADC_QUEUE_InsertQueueEntry+0xa2>
      {
        insert_yes = false;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75bb      	strb	r3, [r7, #22]
        break;
 8002edc:	e008      	b.n	8002ef0 <ADC_QUEUE_InsertQueueEntry+0xb4>
  entry_callback = entry->adc_event_callback;
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
  insert_yes = (bool)true;
  if(NULL != entry_callback)
  {
    for(i = handle_ptr->number_valid_callback; i >= (int32_t)0;i--)
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	75fb      	strb	r3, [r7, #23]
 8002ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	daea      	bge.n	8002ec6 <ADC_QUEUE_InsertQueueEntry+0x8a>
        insert_yes = false;
        break;
      }
    }

    if(insert_yes != false)
 8002ef0:	7dbb      	ldrb	r3, [r7, #22]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00f      	beq.n	8002f16 <ADC_QUEUE_InsertQueueEntry+0xda>
    {
      adc_queue_callback_list[handle_ptr->instance_number][handle_ptr->number_valid_callback++] = entry_callback;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7e9b      	ldrb	r3, [r3, #26]
 8002efa:	4618      	mov	r0, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7f5b      	ldrb	r3, [r3, #29]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	b2d1      	uxtb	r1, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	7751      	strb	r1, [r2, #29]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4905      	ldr	r1, [pc, #20]	; (8002f20 <ADC_QUEUE_InsertQueueEntry+0xe4>)
 8002f0c:	00c3      	lsls	r3, r0, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }


}
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20008088 	.word	0x20008088
 8002f20:	20000218 	.word	0x20000218

08002f24 <ADC_QUEUE_AllEntriesInserted>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_AllEntriesInserted(ADC_QUEUE_t* handle_ptr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t pos_index;
  
  XMC_ASSERT("ADC_QUEUE_AllEntriesInserted:Invalid handle_ptr", (handle_ptr != NULL));

  /* All entries have been submitted. The queue hardware may now be programmed in the right order. */
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7e9b      	ldrb	r3, [r3, #26]
 8002f30:	4a26      	ldr	r2, [pc, #152]	; (8002fcc <ADC_QUEUE_AllEntriesInserted+0xa8>)
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]

  /* Flush any entries that are currently in the queue buffer*/
  XMC_VADC_GROUP_QueueFlushEntries(handle_ptr->group_handle);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fec6 	bl	8002cd0 <XMC_VADC_GROUP_QueueFlushEntries>

  for (pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e039      	b.n	8002fbe <ADC_QUEUE_AllEntriesInserted+0x9a>
  {
    node = start_node +  pos_index;
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	461a      	mov	r2, r3
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
    
    if (ADC_QUEUE_INVALID_CHANNEL != node->channel_number)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	795b      	ldrb	r3, [r3, #5]
 8002f60:	2bff      	cmp	r3, #255	; 0xff
 8002f62:	d029      	beq.n	8002fb8 <ADC_QUEUE_AllEntriesInserted+0x94>
    {
      /* Create a queue entry object for the LLD */
      entry.channel_num   = (uint8_t) node->channel_number;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	795b      	ldrb	r3, [r3, #5]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	7a3b      	ldrb	r3, [r7, #8]
 8002f70:	f362 0304 	bfi	r3, r2, #0, #5
 8002f74:	723b      	strb	r3, [r7, #8]
      entry.refill_needed = (uint32_t) node->refill_needed;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	79db      	ldrb	r3, [r3, #7]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	7a3b      	ldrb	r3, [r7, #8]
 8002f82:	f362 1345 	bfi	r3, r2, #5, #1
 8002f86:	723b      	strb	r3, [r7, #8]
      entry.generate_interrupt = (uint32_t) node->rs_event_notification;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	7a5b      	ldrb	r3, [r3, #9]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	7a3b      	ldrb	r3, [r7, #8]
 8002f94:	f362 1386 	bfi	r3, r2, #6, #1
 8002f98:	723b      	strb	r3, [r7, #8]
      entry.external_trigger   = (uint32_t)node->trigger_needed;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	799b      	ldrb	r3, [r3, #6]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	7a3b      	ldrb	r3, [r7, #8]
 8002fa6:	f362 13c7 	bfi	r3, r2, #7, #1
 8002faa:	723b      	strb	r3, [r7, #8]
      
      /* Request the LLD to insert the channel */
      XMC_VADC_GROUP_QueueInsertChannel(handle_ptr->group_handle, entry);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	f7ff fea6 	bl	8002d04 <XMC_VADC_GROUP_QueueInsertChannel>
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];

  /* Flush any entries that are currently in the queue buffer*/
  XMC_VADC_GROUP_QueueFlushEntries(handle_ptr->group_handle);

  for (pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b07      	cmp	r3, #7
 8002fc2:	d9c2      	bls.n	8002f4a <ADC_QUEUE_AllEntriesInserted+0x26>
      
      /* Request the LLD to insert the channel */
      XMC_VADC_GROUP_QueueInsertChannel(handle_ptr->group_handle, entry);
    }
  }
}
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20008088 	.word	0x20008088

08002fd0 <ADC_QUEUE_lInitializeListToDefaults>:



/* API generated to initialise list pointers and clear its contents*/
void ADC_QUEUE_lInitializeListToDefaults(uint8_t instance_num)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]

  /* Initialise list pointers of APP Instance- ADC_QUEUE_0 */
  adc_queue_list_ptrs[0][0] = adc_queue_list_ch_index_0;
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <ADC_QUEUE_lInitializeListToDefaults+0x24>)
 8002fdc:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <ADC_QUEUE_lInitializeListToDefaults+0x28>)
 8002fde:	601a      	str	r2, [r3, #0]
  adc_queue_list_ptrs[0][1] = adc_queue_list_pos_index_0;
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <ADC_QUEUE_lInitializeListToDefaults+0x24>)
 8002fe2:	4a06      	ldr	r2, [pc, #24]	; (8002ffc <ADC_QUEUE_lInitializeListToDefaults+0x2c>)
 8002fe4:	605a      	str	r2, [r3, #4]
 
  /* Reset channels */
  ADC_QUEUE_ResetListContents(instance_num);
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fe99 	bl	8002d20 <ADC_QUEUE_ResetListContents>
}
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20008088 	.word	0x20008088
 8002ff8:	200080a8 	.word	0x200080a8
 8002ffc:	20008108 	.word	0x20008108

08003000 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop

08003024 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305a:	0e1b      	lsrs	r3, r3, #24
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	32a0      	adds	r2, #160	; 0xa0
 800308a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <ADC_MEASUREMENT_ADV_lInsertEntry>:
 * LOCAL ROUTINES
 **********************************************************************************************************************/
#if defined(ADC_MEASUREMENT_ADV_ADC_QUEUE_USED) || defined (ADC_MEASUREMENT_ADV_ADC_SCAN_USED)
/* Local function to insert an entry into the H/W*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lInsertEntry(const ADC_MEASUREMENT_ADV_t *const handle_ptr, uint8_t ch_num)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
#if defined(ADC_MEASUREMENT_ADV_QUEUE_USED) && defined(ADC_MEASUREMENT_ADV_ADC_QUEUE_USED)
  #if defined(ADC_MEASUREMENT_ADV_SCAN_USED) && defined(ADC_MEASUREMENT_ADV_ADC_SCAN_USED)
    else
  #endif
    {
      ADC_QUEUE_InsertQueueEntry(handle_ptr->queue_handle, handle_ptr->queue_entries[ch_num]);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68d9      	ldr	r1, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7ff fec0 	bl	8002e3c <ADC_QUEUE_InsertQueueEntry>
    }
#endif
}
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop

080030c4 <ADC_MEASUREMENT_ADV_lRequestSrcInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Local function to do the request source initialization.*/
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lRequestSrcInit(const ADC_MEASUREMENT_ADV_t
                                                                                 *const handle_ptr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
      else
  #endif
      {
        /* Call the function to initialise Clock and ADC global functional units*/
        status = (ADC_MEASUREMENT_ADV_STATUS_t) ADC_QUEUE_Init(handle_ptr->queue_handle);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fe4d 	bl	8002d70 <ADC_QUEUE_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	73fb      	strb	r3, [r7, #15]
      }
#endif
    }
#endif
    return (status);
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <ADC_MEASUREMENT_ADV_lArbitrationStatus>:
}
#endif

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE bool ADC_MEASUREMENT_ADV_lArbitrationStatus(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  bool clock_reset_check;
  bool arbitration_status;

#if !defined(CLOCK_GATING_SUPPORTED) || !defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = (bool)false;
 80030ec:	2300      	movs	r3, #0
 80030ee:	73bb      	strb	r3, [r7, #14]
#endif
  arbitration_status = (bool)false;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
  /* To check if the arbiter is already enabled. Before checking this ensure that clock and reset states are correct */
#if defined(CLOCK_GATING_SUPPORTED) && defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif
#ifdef PERIPHERAL_RESET_SUPPORTED
  clock_reset_check |= !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_VADC);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fd faef 	bl	80006d8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f083 0301 	eor.w	r3, r3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	7bbb      	ldrb	r3, [r7, #14]
 8003106:	4313      	orrs	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	73bb      	strb	r3, [r7, #14]
#endif
  if(clock_reset_check != (bool)false)
 8003112:	7bbb      	ldrb	r3, [r7, #14]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x4a>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        arbitration_status = XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(group_ptrs[handle_ptr->group_index]);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7d5b      	ldrb	r3, [r3, #21]
 800311c:	461a      	mov	r2, r3
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x54>)
 8003120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff8f 	bl	8003048 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	73fb      	strb	r3, [r7, #15]
      }
#endif
  }
  return (arbitration_status);
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	08005910 	.word	0x08005910

0800313c <ADC_MEASUREMENT_ADV_lDisableArbitration>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lDisableArbitration(const ADC_MEASUREMENT_ADV_t *const handle_ptr,
                                                             bool arbitration_status)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
  if(arbitration_status == (bool)false)
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f083 0301 	eor.w	r3, r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <ADC_MEASUREMENT_ADV_lDisableArbitration+0x2a>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7d5b      	ldrb	r3, [r3, #21]
 8003158:	461a      	mov	r2, r3
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <ADC_MEASUREMENT_ADV_lDisableArbitration+0x30>)
 800315c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff5f 	bl	8003024 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
      }
#endif
  }
}
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	08005910 	.word	0x08005910

08003170 <ADC_MEASUREMENT_ADV_lInsertChannels>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Insert channels into the hardware*/
void ADC_MEASUREMENT_ADV_lInsertChannels(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
      else
  #endif
      {
        ADC_QUEUE_AllEntriesInserted(handle_ptr->queue_handle);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fed1 	bl	8002f24 <ADC_QUEUE_AllEntriesInserted>
      }
#endif
    }
#endif
}
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <ADC_MEASUREMENT_ADV_lSyncADCClocks>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifndef ADC_MEASUREMENT_ADV_SYNC_USED
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 800318e:	2303      	movs	r3, #3
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	e00a      	b.n	80031aa <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x22>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
 8003194:	4a19      	ldr	r2, [pc, #100]	; (80031fc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	4618      	mov	r0, r3
 800319e:	2100      	movs	r1, #0
 80031a0:	f7fe fab8 	bl	8001714 <XMC_VADC_GROUP_SetPowerMode>
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	daf1      	bge.n	8003194 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0xc>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 80031b0:	2303      	movs	r3, #3
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	e012      	b.n	80031dc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x54>
  {
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);
 80031b6:	4a11      	ldr	r2, [pc, #68]	; (80031fc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4610      	mov	r0, r2
 80031c2:	2100      	movs	r1, #0
 80031c4:	461a      	mov	r2, r3
 80031c6:	f7fe fac1 	bl	800174c <XMC_VADC_GROUP_SetSyncSlave>

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
 80031ca:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fe faf3 	bl	80017bc <XMC_VADC_GROUP_CheckSlaveReadiness>
  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3b01      	subs	r3, #1
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	dce9      	bgt.n	80031b6 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x2e>
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
  }

  XMC_VADC_GROUP_SetSyncMaster(group_ptrs[0U]);
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe fad3 	bl	8001790 <XMC_VADC_GROUP_SetSyncMaster>

  XMC_VADC_GROUP_SetPowerMode(group_ptrs[0U],XMC_VADC_GROUP_POWERMODE_NORMAL);
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 80031ec:	4618      	mov	r0, r3
 80031ee:	2103      	movs	r1, #3
 80031f0:	f7fe fa90 	bl	8001714 <XMC_VADC_GROUP_SetPowerMode>
}
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	08005910 	.word	0x08005910
 8003200:	40004400 	.word	0x40004400

08003204 <ADC_MEASUREMENT_ADV_StartADC>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the arbiter of the selected request source*/
void ADC_MEASUREMENT_ADV_StartADC(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7d5b      	ldrb	r3, [r3, #21]
 8003210:	461a      	mov	r2, r3
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <ADC_MEASUREMENT_ADV_StartADC+0x20>)
 8003214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fef1 	bl	8003000 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>
      }
#endif
}
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	08005910 	.word	0x08005910

08003228 <ADC_MEASUREMENT_ADC_lNvicEnable>:


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the NVIC(if needed) when scan/queue request source is consumed internally in the APP. */
void ADC_MEASUREMENT_ADC_lNvicEnable(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_queue_handle->rs_intr_handle.node_id);
    }
#endif
}
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <ADC_MEASUREMENT_ADC_lResultInit>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Configures the result results . */
__STATIC_INLINE void ADC_MEASUREMENT_ADC_lResultInit(const ADC_MEASUREMENT_ADV_CHANNEL_t *indexed)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7a1b      	ldrb	r3, [r3, #8]
 8003248:	461a      	mov	r2, r3
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <ADC_MEASUREMENT_ADC_lResultInit+0x34>)
 800324c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	789b      	ldrb	r3, [r3, #2]
 8003256:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4619      	mov	r1, r3
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 8003262:	4610      	mov	r0, r2
 8003264:	461a      	mov	r2, r3
 8003266:	f7ff ff05 	bl	8003074 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
}
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	08005910 	.word	0x08005910

08003274 <ADC_MEASUREMENT_ADV_Init>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint8_t total_number_of_channels;
  ADC_MEASUREMENT_ADV_STATUS_t status;
#ifdef ADC_MEASUREMENT_ADV_SHS_GAIN_NON_DEFAULT
  uint8_t channel_number;
#endif
  bool arbitration_status = (bool)false;
 800327c:	2300      	movs	r3, #0
 800327e:	73bb      	strb	r3, [r7, #14]

  if (ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED == *handle_ptr->init_state)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d153      	bne.n	8003332 <ADC_MEASUREMENT_ADV_Init+0xbe>
  {

    arbitration_status = ADC_MEASUREMENT_ADV_lArbitrationStatus(handle_ptr);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ff2a 	bl	80030e4 <ADC_MEASUREMENT_ADV_lArbitrationStatus>
 8003290:	4603      	mov	r3, r0
 8003292:	73bb      	strb	r3, [r7, #14]

   /* Initialize the scan/queue request source.*/
   status = ADC_MEASUREMENT_ADV_lRequestSrcInit(handle_ptr);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff15 	bl	80030c4 <ADC_MEASUREMENT_ADV_lRequestSrcInit>
 800329a:	4603      	mov	r3, r0
 800329c:	737b      	strb	r3, [r7, #13]

   /* Disable the Arbitration if no other instance has enabled it*/
   ADC_MEASUREMENT_ADV_lDisableArbitration(handle_ptr,arbitration_status);
 800329e:	7bbb      	ldrb	r3, [r7, #14]
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4619      	mov	r1, r3
 80032a4:	f7ff ff4a 	bl	800313c <ADC_MEASUREMENT_ADV_lDisableArbitration>
    {
      /*  Configure the Sync conversion operation */
      ADC_MEASUREMENT_ADV_lSyncInit(handle_ptr);
    }
#else
   ADC_MEASUREMENT_ADV_lSyncADCClocks();
 80032a8:	f7ff ff6e 	bl	8003188 <ADC_MEASUREMENT_ADV_lSyncADCClocks>
    {
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7ddb      	ldrb	r3, [r3, #23]
 80032b0:	733b      	strb	r3, [r7, #12]
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
 80032b6:	e01b      	b.n	80032f0 <ADC_MEASUREMENT_ADV_Init+0x7c>
    {
      indexed = handle_ptr->channel_array[ch_num];
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60bb      	str	r3, [r7, #8]

      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(group_ptrs[indexed->group_index],(uint32_t)indexed->ch_num, indexed->ch_handle);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	7a1b      	ldrb	r3, [r3, #8]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <ADC_MEASUREMENT_ADV_Init+0xcc>)
 80032ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	7a5b      	ldrb	r3, [r3, #9]
 80032d6:	4619      	mov	r1, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4610      	mov	r0, r2
 80032de:	461a      	mov	r2, r3
 80032e0:	f7fe fb0a 	bl	80018f8 <XMC_VADC_GROUP_ChannelInit>
                                        channel_number);
  #endif
#endif

      /* Result Init both with and without FIFO */
      ADC_MEASUREMENT_ADC_lResultInit(indexed);
 80032e4:	68b8      	ldr	r0, [r7, #8]
 80032e6:	f7ff ffa9 	bl	800323c <ADC_MEASUREMENT_ADC_lResultInit>
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3301      	adds	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	7b3b      	ldrb	r3, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d3df      	bcc.n	80032b8 <ADC_MEASUREMENT_ADV_Init+0x44>
#if defined(ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED) || defined(ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED)
    if( (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN == handle_ptr->req_src) ||
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE == handle_ptr->req_src))
#endif
    {
      for (ch_num = (uint8_t)0; ch_num < (uint8_t)handle_ptr->total_number_of_entries; ch_num++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e007      	b.n	800330e <ADC_MEASUREMENT_ADV_Init+0x9a>
      {
        ADC_MEASUREMENT_ADV_lInsertEntry(handle_ptr,ch_num);
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4619      	mov	r1, r3
 8003304:	f7ff fec8 	bl	8003098 <ADC_MEASUREMENT_ADV_lInsertEntry>
#if defined(ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED) || defined(ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED)
    if( (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN == handle_ptr->req_src) ||
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE == handle_ptr->req_src))
#endif
    {
      for (ch_num = (uint8_t)0; ch_num < (uint8_t)handle_ptr->total_number_of_entries; ch_num++)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	3301      	adds	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7d9b      	ldrb	r3, [r3, #22]
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	429a      	cmp	r2, r3
 8003316:	d3f2      	bcc.n	80032fe <ADC_MEASUREMENT_ADV_Init+0x8a>
      }
    }
#endif

    /* Enables the NVIC node if NVIC node is consumed inside the APP*/
    ADC_MEASUREMENT_ADC_lNvicEnable(handle_ptr);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff85 	bl	8003228 <ADC_MEASUREMENT_ADC_lNvicEnable>

    /* Load the queue/scan entries into the hardware */
    ADC_MEASUREMENT_ADV_lInsertChannels(handle_ptr);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ff26 	bl	8003170 <ADC_MEASUREMENT_ADV_lInsertChannels>
#ifdef ADC_MEASUREMENT_ADV_START_ADC
  #ifdef ADC_MEASUREMENT_ADV_NOT_ALL_REQ_START
    if ((bool)false  != handle_ptr->start_at_initialization)
  #endif
    {
      ADC_MEASUREMENT_ADV_StartADC(handle_ptr);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff6d 	bl	8003204 <ADC_MEASUREMENT_ADV_StartADC>
    }
#endif

    *handle_ptr->init_state = status;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	7b7a      	ldrb	r2, [r7, #13]
 8003330:	701a      	strb	r2, [r3, #0]
  }
  return (*handle_ptr->init_state);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	781b      	ldrb	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	08005910 	.word	0x08005910

08003344 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800334a:	2300      	movs	r3, #0
 800334c:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800334e:	4821      	ldr	r0, [pc, #132]	; (80033d4 <DAVE_Init+0x90>)
 8003350:	f7ff fbd6 	bl	8002b00 <CLOCK_XMC4_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <DAVE_Init+0x24>
  {
	 /**  Initialization of INTERRUPT APP instance CONTROL_LOOP */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CONTROL_LOOP); 
 800335e:	481e      	ldr	r0, [pc, #120]	; (80033d8 <DAVE_Init+0x94>)
 8003360:	f7ff f95c 	bl	800261c <INTERRUPT_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <DAVE_Init+0x34>
  {
	 /**  Initialization of INTERRUPT APP instance ACQUISITION_LOOP */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&ACQUISITION_LOOP); 
 800336e:	481b      	ldr	r0, [pc, #108]	; (80033dc <DAVE_Init+0x98>)
 8003370:	f7ff f954 	bl	800261c <INTERRUPT_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <DAVE_Init+0x44>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance STATUS_DISABLE */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&STATUS_DISABLE); 
 800337e:	4818      	ldr	r0, [pc, #96]	; (80033e0 <DAVE_Init+0x9c>)
 8003380:	f7ff f868 	bl	8002454 <PIN_INTERRUPT_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <DAVE_Init+0x54>
  {
	 /**  Initialization of PWM_SVM APP instance PWM_SVM_0 */
	 init_status = (DAVE_STATUS_t)PWM_SVM_Init(&PWM_SVM_0); 
 800338e:	4815      	ldr	r0, [pc, #84]	; (80033e4 <DAVE_Init+0xa0>)
 8003390:	f7fe fd26 	bl	8001de0 <PWM_SVM_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d104      	bne.n	80033a8 <DAVE_Init+0x64>
  {
	 /**  Initialization of TIMER APP instance TIMER_ACQUISITION_LOOP */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_ACQUISITION_LOOP); 
 800339e:	4812      	ldr	r0, [pc, #72]	; (80033e8 <DAVE_Init+0xa4>)
 80033a0:	f7fe fb7c 	bl	8001a9c <TIMER_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <DAVE_Init+0x74>
  {
	 /**  Initialization of TIMER APP instance TIMER_CONTROL_LOOP */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_CONTROL_LOOP); 
 80033ae:	480f      	ldr	r0, [pc, #60]	; (80033ec <DAVE_Init+0xa8>)
 80033b0:	f7fe fb74 	bl	8001a9c <TIMER_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <DAVE_Init+0x84>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC); 
 80033be:	480c      	ldr	r0, [pc, #48]	; (80033f0 <DAVE_Init+0xac>)
 80033c0:	f7ff ff58 	bl	8003274 <ADC_MEASUREMENT_ADV_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80033c8:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000214 	.word	0x20000214
 80033d8:	0800506c 	.word	0x0800506c
 80033dc:	08005070 	.word	0x08005070
 80033e0:	08005048 	.word	0x08005048
 80033e4:	2000005c 	.word	0x2000005c
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000028 	.word	0x20000028
 80033f0:	08005a60 	.word	0x08005a60
 80033f4:	00000000 	.word	0x00000000

080033f8 <CCU43_1_IRQHandler>:
 * RPM_SIN - RPM_SIN
 * TEMP_SENS_MOT - Temp_Mot
 * TEMP_SENS_IGBT - Temp_IGBT
 */
void ACQUISITION_LOOP_FUNC()
{
 80033f8:	b598      	push	{r3, r4, r7, lr}
 80033fa:	ed2d 8b02 	vpush	{d8}
 80033fe:	af00      	add	r7, sp, #0
	CheckValues();
	VAL_RPM = SpeedSensorCoarse(COS_RPM,SIN_RPM);

*/

	unfilt[ControlCycleCounter] = 100*arm_sin_f32(2*PI*time*20) + 12*arm_sin_f32(2*PI*time*900);
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <CCU43_1_IRQHandler+0xf8>)
 8003402:	681c      	ldr	r4, [r3, #0]
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <CCU43_1_IRQHandler+0xfc>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80034f8 <CCU43_1_IRQHandler+0x100>
 800340e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003412:	eeb3 7a04 	vmov.f32	s14, #52	; 0x34
 8003416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341a:	ee17 0a90 	vmov	r0, s15
 800341e:	f7ff faef 	bl	8002a00 <arm_sin_f32>
 8003422:	ee07 0a10 	vmov	s14, r0
 8003426:	eddf 7a35 	vldr	s15, [pc, #212]	; 80034fc <CCU43_1_IRQHandler+0x104>
 800342a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <CCU43_1_IRQHandler+0xfc>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80034f8 <CCU43_1_IRQHandler+0x100>
 8003438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800343c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003500 <CCU43_1_IRQHandler+0x108>
 8003440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003444:	ee17 0a90 	vmov	r0, s15
 8003448:	f7ff fada 	bl	8002a00 <arm_sin_f32>
 800344c:	ee07 0a10 	vmov	s14, r0
 8003450:	eef2 7a08 	vmov.f32	s15, #40	; 0x28
 8003454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003458:	ee78 7a27 	vadd.f32	s15, s16, s15
 800345c:	4a29      	ldr	r2, [pc, #164]	; (8003504 <CCU43_1_IRQHandler+0x10c>)
 800345e:	00a3      	lsls	r3, r4, #2
 8003460:	4413      	add	r3, r2
 8003462:	edc3 7a00 	vstr	s15, [r3]
	if (ControlCycleCounter % 30 == 0){
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <CCU43_1_IRQHandler+0xf8>)
 8003468:	6819      	ldr	r1, [r3, #0]
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <CCU43_1_IRQHandler+0x110>)
 800346c:	fba3 2301 	umull	r2, r3, r3, r1
 8003470:	091a      	lsrs	r2, r3, #4
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	1aca      	subs	r2, r1, r3
 800347c:	2a00      	cmp	r2, #0
 800347e:	d108      	bne.n	8003492 <CCU43_1_IRQHandler+0x9a>
		ControlCycleCounter = 0;
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <CCU43_1_IRQHandler+0xf8>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
		arm_fir_f32(&FIR_CURRENT_A,&unfilt,&filt,FIR_CURRENT_blockSize);
 8003486:	4821      	ldr	r0, [pc, #132]	; (800350c <CCU43_1_IRQHandler+0x114>)
 8003488:	491e      	ldr	r1, [pc, #120]	; (8003504 <CCU43_1_IRQHandler+0x10c>)
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <CCU43_1_IRQHandler+0x118>)
 800348c:	231e      	movs	r3, #30
 800348e:	f7ff fa29 	bl	80028e4 <arm_fir_f32>
	}
	aux = unfilt[ControlCycleCounter];
 8003492:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <CCU43_1_IRQHandler+0xf8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <CCU43_1_IRQHandler+0x10c>)
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <CCU43_1_IRQHandler+0x11c>)
 80034a0:	6013      	str	r3, [r2, #0]
	time += ACQUISITION_TIME;
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <CCU43_1_IRQHandler+0xfc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 f84c 	bl	8004544 <__aeabi_f2d>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	a30c      	add	r3, pc, #48	; (adr r3, 80034e8 <CCU43_1_IRQHandler+0xf0>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f000 fee5 	bl	8004288 <__adddf3>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	f001 f891 	bl	80045ec <__aeabi_d2f>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <CCU43_1_IRQHandler+0xfc>)
 80034ce:	601a      	str	r2, [r3, #0]
	ControlCycleCounter++;
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <CCU43_1_IRQHandler+0xf8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	4a06      	ldr	r2, [pc, #24]	; (80034f0 <CCU43_1_IRQHandler+0xf8>)
 80034d8:	6013      	str	r3, [r2, #0]
	ProbeScope_Sampling();
 80034da:	f000 f8f9 	bl	80036d0 <ProbeScope_Sampling>
}
 80034de:	46bd      	mov	sp, r7
 80034e0:	ecbd 8b02 	vpop	{d8}
 80034e4:	bd98      	pop	{r3, r4, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	eb1c432d 	.word	0xeb1c432d
 80034ec:	3f0a36e2 	.word	0x3f0a36e2
 80034f0:	2000029c 	.word	0x2000029c
 80034f4:	20000298 	.word	0x20000298
 80034f8:	40c90fdb 	.word	0x40c90fdb
 80034fc:	42c80000 	.word	0x42c80000
 8003500:	44610000 	.word	0x44610000
 8003504:	200086f8 	.word	0x200086f8
 8003508:	88888889 	.word	0x88888889
 800350c:	20008ad0 	.word	0x20008ad0
 8003510:	200086d8 	.word	0x200086d8
 8003514:	200086e4 	.word	0x200086e4

08003518 <main>:

	PWM_SVM_SVMUpdate(&PWM_SVM_0, Controller.V_Ref, Controller.Theta_Ref);
}
*/
int main(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af02      	add	r7, sp, #8
	DAVE_STATUS_t status;
	status = DAVE_Init();
 800351e:	f7ff ff11 	bl	8003344 <DAVE_Init>
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
	/* Initialization of DAVE APPs  */
	if (status != DAVE_STATUS_SUCCESS)
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d000      	beq.n	800352e <main+0x16>
	{
		/* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");
		while (1U)
		{
		}
 800352c:	e7fe      	b.n	800352c <main+0x14>
	}
	PWM_SVM_Start(&PWM_SVM_0);
 800352e:	480a      	ldr	r0, [pc, #40]	; (8003558 <main+0x40>)
 8003530:	f7fe fda2 	bl	8002078 <PWM_SVM_Start>
	arm_fir_init_f32( &FIR_CURRENT_A, 	FIR_CURRENT_numTaps, 	FIR_CURRENT_pCoeffs, 	FIR_CURRENT_A_pState, 	FIR_CURRENT_blockSize 	);
 8003534:	231e      	movs	r3, #30
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	4808      	ldr	r0, [pc, #32]	; (800355c <main+0x44>)
 800353a:	215b      	movs	r1, #91	; 0x5b
 800353c:	4a08      	ldr	r2, [pc, #32]	; (8003560 <main+0x48>)
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <main+0x4c>)
 8003540:	f7ff fa3e 	bl	80029c0 <arm_fir_init_f32>
	ProbeScope_Init(SystemCoreClock / TICKS_PER_SECOND); /// for micrium uScope
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <main+0x50>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a08      	ldr	r2, [pc, #32]	; (800356c <main+0x54>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	09db      	lsrs	r3, r3, #7
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f80d 	bl	8003570 <ProbeScope_Init>
	/* Placeholder for user application code. The while loop below can be replaced with user application code. */
	while (1U)
	{

	}
 8003556:	e7fe      	b.n	8003556 <main+0x3e>
 8003558:	2000005c 	.word	0x2000005c
 800355c:	20008ad0 	.word	0x20008ad0
 8003560:	08005a7c 	.word	0x08005a7c
 8003564:	200084f8 	.word	0x200084f8
 8003568:	2000ffc0 	.word	0x2000ffc0
 800356c:	10624dd3 	.word	0x10624dd3

08003570 <ProbeScope_Init>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Init (uint32_t  sampling_clk_hz)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
    static  CPU_INT32U  temp = 0;


    ProbeScope_Ch1.En             = 0;
 8003578:	4b37      	ldr	r3, [pc, #220]	; (8003658 <ProbeScope_Init+0xe8>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
#if PROBE_SCOPE_MAX_CH >= 2       
    ProbeScope_Ch2.En             = 0;
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <ProbeScope_Init+0xec>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 3       
    ProbeScope_Ch3.En             = 0;
 8003584:	4b36      	ldr	r3, [pc, #216]	; (8003660 <ProbeScope_Init+0xf0>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 4       
    ProbeScope_Ch4.En             = 0;
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <ProbeScope_Init+0xf4>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 5       
    ProbeScope_Ch5.En             = 0;
 8003590:	4b35      	ldr	r3, [pc, #212]	; (8003668 <ProbeScope_Init+0xf8>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 6       
    ProbeScope_Ch6.En             = 0;
 8003596:	4b35      	ldr	r3, [pc, #212]	; (800366c <ProbeScope_Init+0xfc>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 7       
    ProbeScope_Ch7.En             = 0;
 800359c:	4b34      	ldr	r3, [pc, #208]	; (8003670 <ProbeScope_Init+0x100>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
#endif                            
#if PROBE_SCOPE_MAX_CH >= 8       
    ProbeScope_Ch8.En             = 0;
 80035a2:	4b34      	ldr	r3, [pc, #208]	; (8003674 <ProbeScope_Init+0x104>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
#endif

    ProbeScope_Mode               = PROBE_SCOPE_MODE_OFF;
 80035a8:	4b33      	ldr	r3, [pc, #204]	; (8003678 <ProbeScope_Init+0x108>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
    ProbeScope_State              = PROBE_SCOPE_STATE_START;
 80035ae:	4b33      	ldr	r3, [pc, #204]	; (800367c <ProbeScope_Init+0x10c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
    ProbeScope_TrigChSel          = PROBE_SCOPE_CH1;                         // Default trigger channel
 80035b4:	4b32      	ldr	r3, [pc, #200]	; (8003680 <ProbeScope_Init+0x110>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
    ProbeScope_SampleIxPrev       = 0;
 80035ba:	4b32      	ldr	r3, [pc, #200]	; (8003684 <ProbeScope_Init+0x114>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
    ProbeScope_SampleIxCur        = 0;
 80035c0:	4b31      	ldr	r3, [pc, #196]	; (8003688 <ProbeScope_Init+0x118>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigFlag           = 0;
 80035c6:	4b31      	ldr	r3, [pc, #196]	; (800368c <ProbeScope_Init+0x11c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigDispPos        = 0;
 80035cc:	4b30      	ldr	r3, [pc, #192]	; (8003690 <ProbeScope_Init+0x120>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOff        = 0;
 80035d2:	4b30      	ldr	r3, [pc, #192]	; (8003694 <ProbeScope_Init+0x124>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigHoldOffCtr     = 0;
 80035d8:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <ProbeScope_Init+0x128>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
    ProbeScope_DataRdyFlag        = 0;
 80035de:	4b2f      	ldr	r3, [pc, #188]	; (800369c <ProbeScope_Init+0x12c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <ProbeScope_Init+0x120>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a2d      	ldr	r2, [pc, #180]	; (80036a0 <ProbeScope_Init+0x130>)
 80035ea:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES;
 80035ec:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <ProbeScope_Init+0x134>)
 80035ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035f2:	601a      	str	r2, [r3, #0]
    ProbeScope_TrigSlope          = PROBE_SCOPE_TRIG_POS;                    // We assume a positive going signal by default
 80035f4:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <ProbeScope_Init+0x138>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
    temp                          = ProbeScopeDbg_MaxSamples;
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <ProbeScope_Init+0x13c>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <ProbeScope_Init+0x140>)
 8003604:	601a      	str	r2, [r3, #0]
    temp                         += ProbeScopeDbg_MaxCh;
 8003606:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <ProbeScope_Init+0x144>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <ProbeScope_Init+0x140>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4413      	add	r3, r2
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <ProbeScope_Init+0x140>)
 8003616:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_16BitEn;
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <ProbeScope_Init+0x148>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <ProbeScope_Init+0x140>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4413      	add	r3, r2
 8003622:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <ProbeScope_Init+0x140>)
 8003624:	6013      	str	r3, [r2, #0]
    temp                         += ProbeScopeDbg_32BitEn;
 8003626:	4b25      	ldr	r3, [pc, #148]	; (80036bc <ProbeScope_Init+0x14c>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <ProbeScope_Init+0x140>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4413      	add	r3, r2
 8003630:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <ProbeScope_Init+0x140>)
 8003632:	6013      	str	r3, [r2, #0]
    ProbeScope_SamplingClkDiv     =    1;
 8003634:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <ProbeScope_Init+0x150>)
 8003636:	2201      	movs	r2, #1
 8003638:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkDivCtr  =    0;
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <ProbeScope_Init+0x154>)
 800363c:	2200      	movs	r2, #0
 800363e:	801a      	strh	r2, [r3, #0]
    ProbeScope_SamplingClkHz      = sampling_clk_hz;
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <ProbeScope_Init+0x158>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6013      	str	r3, [r2, #0]
    ProbeScope_InitFlag           =    1;
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <ProbeScope_Init+0x15c>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]
}
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	200002a0 	.word	0x200002a0
 800365c:	20001258 	.word	0x20001258
 8003660:	20002210 	.word	0x20002210
 8003664:	200031c8 	.word	0x200031c8
 8003668:	20004180 	.word	0x20004180
 800366c:	20005138 	.word	0x20005138
 8003670:	200060f0 	.word	0x200060f0
 8003674:	200070a8 	.word	0x200070a8
 8003678:	20008060 	.word	0x20008060
 800367c:	20008080 	.word	0x20008080
 8003680:	20008061 	.word	0x20008061
 8003684:	2000806c 	.word	0x2000806c
 8003688:	20008070 	.word	0x20008070
 800368c:	20008d4c 	.word	0x20008d4c
 8003690:	20008d58 	.word	0x20008d58
 8003694:	20008d5c 	.word	0x20008d5c
 8003698:	20008064 	.word	0x20008064
 800369c:	20008d64 	.word	0x20008d64
 80036a0:	20008074 	.word	0x20008074
 80036a4:	20008078 	.word	0x20008078
 80036a8:	20008068 	.word	0x20008068
 80036ac:	200001f6 	.word	0x200001f6
 80036b0:	20008084 	.word	0x20008084
 80036b4:	200001f8 	.word	0x200001f8
 80036b8:	200001fc 	.word	0x200001fc
 80036bc:	20000200 	.word	0x20000200
 80036c0:	2000807c 	.word	0x2000807c
 80036c4:	2000807e 	.word	0x2000807e
 80036c8:	20008d50 	.word	0x20008d50
 80036cc:	20008d60 	.word	0x20008d60

080036d0 <ProbeScope_Sampling>:
* Returns    : none
************************************************************************************************************************
*/

void  ProbeScope_Sampling (void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
    switch (ProbeScope_Mode) {
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <ProbeScope_Sampling+0x40>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d817      	bhi.n	800370c <ProbeScope_Sampling+0x3c>
 80036dc:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <ProbeScope_Sampling+0x14>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	080036f5 	.word	0x080036f5
 80036e8:	080036fb 	.word	0x080036fb
 80036ec:	08003701 	.word	0x08003701
 80036f0:	08003707 	.word	0x08003707
        case PROBE_SCOPE_MODE_OFF:
             ProbeScope_ModeOff();
 80036f4:	f000 f80e 	bl	8003714 <ProbeScope_ModeOff>
             break;
 80036f8:	e008      	b.n	800370c <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_SINGLE:
             ProbeScope_ModeTrig();
 80036fa:	f000 f85d 	bl	80037b8 <ProbeScope_ModeTrig>
             break;
 80036fe:	e005      	b.n	800370c <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_CONTINUOUS:
             ProbeScope_ModeContinuous();
 8003700:	f000 f81c 	bl	800373c <ProbeScope_ModeContinuous>
             break;
 8003704:	e002      	b.n	800370c <ProbeScope_Sampling+0x3c>
    
        case PROBE_SCOPE_MODE_TRIG:
             ProbeScope_ModeTrig(); 
 8003706:	f000 f857 	bl	80037b8 <ProbeScope_ModeTrig>
             break;
 800370a:	bf00      	nop
    }
}
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20008060 	.word	0x20008060

08003714 <ProbeScope_ModeOff>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeOff (void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                // Force Triggered mode state to START
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <ProbeScope_ModeOff+0x20>)
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
    if (ProbeScope_SamplingClkDiv == 0) {
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <ProbeScope_ModeOff+0x24>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <ProbeScope_ModeOff+0x18>
        ProbeScope_SamplingClkDiv =  1;
 8003726:	4b04      	ldr	r3, [pc, #16]	; (8003738 <ProbeScope_ModeOff+0x24>)
 8003728:	2201      	movs	r2, #1
 800372a:	801a      	strh	r2, [r3, #0]
    }
}
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	20008080 	.word	0x20008080
 8003738:	2000807c 	.word	0x2000807c

0800373c <ProbeScope_ModeContinuous>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeContinuous (void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
    if (ProbeScope_DataRdyFlag == 0) {                                          // Read one buffer's worth of data
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <ProbeScope_ModeContinuous+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d126      	bne.n	8003796 <ProbeScope_ModeContinuous+0x5a>
        ProbeScope_TrigFlag = 0;
 8003748:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <ProbeScope_ModeContinuous+0x68>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
        if (ProbeScope_SamplingClkDivCtr > 1) {
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <ProbeScope_ModeContinuous+0x6c>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d906      	bls.n	8003764 <ProbeScope_ModeContinuous+0x28>
            ProbeScope_SamplingClkDivCtr--;
 8003756:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <ProbeScope_ModeContinuous+0x6c>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <ProbeScope_ModeContinuous+0x6c>)
 8003760:	801a      	strh	r2, [r3, #0]
 8003762:	e018      	b.n	8003796 <ProbeScope_ModeContinuous+0x5a>
        } else {
            if (ProbeScope_SamplingClkDiv == 0) {                               // Make sure clock divider is not 0
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <ProbeScope_ModeContinuous+0x70>)
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <ProbeScope_ModeContinuous+0x36>
                ProbeScope_SamplingClkDiv =  1;
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <ProbeScope_ModeContinuous+0x70>)
 800376e:	2201      	movs	r2, #1
 8003770:	801a      	strh	r2, [r3, #0]
            }
            ProbeScope_SamplingClkDivCtr  = ProbeScope_SamplingClkDiv;
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <ProbeScope_ModeContinuous+0x70>)
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <ProbeScope_ModeContinuous+0x6c>)
 8003778:	801a      	strh	r2, [r3, #0]
            ProbeScope_SampleChAll();                                           // Get the first sample to create a 'previous' value for triggering
 800377a:	f000 f8e5 	bl	8003948 <ProbeScope_SampleChAll>
            ProbeScope_SamplePosNext();                                         // Position to next sample
 800377e:	f000 fa0b 	bl	8003b98 <ProbeScope_SamplePosNext>
            if (ProbeScope_SampleIxCur == 0) {                                  // Read one buffer's worth of data
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <ProbeScope_ModeContinuous+0x74>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <ProbeScope_ModeContinuous+0x5a>
                ProbeScope_DataRdyFlag = 1;   
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <ProbeScope_ModeContinuous+0x64>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
                ProbeScope_TrigFlag    = 1;
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <ProbeScope_ModeContinuous+0x68>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]
            }
        }
    }
    ProbeScope_State = PROBE_SCOPE_STATE_START;                                 // Force Triggered mode state to START
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <ProbeScope_ModeContinuous+0x78>)
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
}
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20008d64 	.word	0x20008d64
 80037a4:	20008d4c 	.word	0x20008d4c
 80037a8:	2000807e 	.word	0x2000807e
 80037ac:	2000807c 	.word	0x2000807c
 80037b0:	20008070 	.word	0x20008070
 80037b4:	20008080 	.word	0x20008080

080037b8 <ProbeScope_ModeTrig>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_ModeTrig (void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
    if (ProbeScope_SamplingClkDivCtr > 1) {
 80037bc:	4b55      	ldr	r3, [pc, #340]	; (8003914 <ProbeScope_ModeTrig+0x15c>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d906      	bls.n	80037d2 <ProbeScope_ModeTrig+0x1a>
        ProbeScope_SamplingClkDivCtr--;
 80037c4:	4b53      	ldr	r3, [pc, #332]	; (8003914 <ProbeScope_ModeTrig+0x15c>)
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	4b51      	ldr	r3, [pc, #324]	; (8003914 <ProbeScope_ModeTrig+0x15c>)
 80037ce:	801a      	strh	r2, [r3, #0]
 80037d0:	e09e      	b.n	8003910 <ProbeScope_ModeTrig+0x158>
    } else { 
        if (ProbeScope_SamplingClkDiv == 0) {                                        // Make sure clock divider is not 0
 80037d2:	4b51      	ldr	r3, [pc, #324]	; (8003918 <ProbeScope_ModeTrig+0x160>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <ProbeScope_ModeTrig+0x28>
            ProbeScope_SamplingClkDiv =  1;
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <ProbeScope_ModeTrig+0x160>)
 80037dc:	2201      	movs	r2, #1
 80037de:	801a      	strh	r2, [r3, #0]
        }
        ProbeScope_SamplingClkDivCtr = ProbeScope_SamplingClkDiv;
 80037e0:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <ProbeScope_ModeTrig+0x160>)
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <ProbeScope_ModeTrig+0x15c>)
 80037e6:	801a      	strh	r2, [r3, #0]
        switch (ProbeScope_State) {
 80037e8:	4b4c      	ldr	r3, [pc, #304]	; (800391c <ProbeScope_ModeTrig+0x164>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	f200 808b 	bhi.w	8003908 <ProbeScope_ModeTrig+0x150>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <ProbeScope_ModeTrig+0x40>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	08003809 	.word	0x08003809
 80037fc:	08003845 	.word	0x08003845
 8003800:	08003885 	.word	0x08003885
 8003804:	080038cd 	.word	0x080038cd
            case PROBE_SCOPE_STATE_START:
                 ProbeScope_DataRdyFlag        = 0;
 8003808:	4b45      	ldr	r3, [pc, #276]	; (8003920 <ProbeScope_ModeTrig+0x168>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigFlag           = 0;
 800380e:	4b45      	ldr	r3, [pc, #276]	; (8003924 <ProbeScope_ModeTrig+0x16c>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxPrev       = 0;
 8003814:	4b44      	ldr	r3, [pc, #272]	; (8003928 <ProbeScope_ModeTrig+0x170>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
                 ProbeScope_SampleIxCur        = 0;
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <ProbeScope_ModeTrig+0x174>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
                 ProbeScope_TrigHoldOffCtr     = 0;
 8003820:	4b43      	ldr	r3, [pc, #268]	; (8003930 <ProbeScope_ModeTrig+0x178>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPostTrigCtr = 0;
 8003826:	4b43      	ldr	r3, [pc, #268]	; (8003934 <ProbeScope_ModeTrig+0x17c>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
                 ProbeScope_SamplesPreTrigCtr  = ProbeScope_TrigDispPos;            // Minimum number of samples pre-trigger
 800382c:	4b42      	ldr	r3, [pc, #264]	; (8003938 <ProbeScope_ModeTrig+0x180>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a42      	ldr	r2, [pc, #264]	; (800393c <ProbeScope_ModeTrig+0x184>)
 8003832:	6013      	str	r3, [r2, #0]
                 ProbeScope_SampleChAll();                                          // Get the first sample to create a 'previous' value for triggering
 8003834:	f000 f888 	bl	8003948 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 8003838:	f000 f9ae 	bl	8003b98 <ProbeScope_SamplePosNext>
                 ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 800383c:	4b37      	ldr	r3, [pc, #220]	; (800391c <ProbeScope_ModeTrig+0x164>)
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
                 break;
 8003842:	e065      	b.n	8003910 <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 8003844:	f000 f880 	bl	8003948 <ProbeScope_SampleChAll>
                 if (ProbeScope_SamplesPreTrigCtr > 0) {                            // We need a minimum number of samples before the trigger
 8003848:	4b3c      	ldr	r3, [pc, #240]	; (800393c <ProbeScope_ModeTrig+0x184>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <ProbeScope_ModeTrig+0xa4>
                     ProbeScope_SamplesPreTrigCtr--;                               
 8003850:	4b3a      	ldr	r3, [pc, #232]	; (800393c <ProbeScope_ModeTrig+0x184>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	4a39      	ldr	r2, [pc, #228]	; (800393c <ProbeScope_ModeTrig+0x184>)
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e001      	b.n	8003860 <ProbeScope_ModeTrig+0xa8>
                 } else {
                     ProbeScope_IsTrig();                                           // See if we detected the trigger
 800385c:	f000 f9b8 	bl	8003bd0 <ProbeScope_IsTrig>
                 }
                 ProbeScope_SamplePosNext();
 8003860:	f000 f99a 	bl	8003b98 <ProbeScope_SamplePosNext>
                 if (ProbeScope_TrigFlag == 1) {                                    // Remaining number of samples to collect before data available
 8003864:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <ProbeScope_ModeTrig+0x16c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d10a      	bne.n	8003882 <ProbeScope_ModeTrig+0xca>
                     ProbeScope_SamplesPostTrigCtr = PROBE_SCOPE_MAX_SAMPLES - ProbeScope_TrigDispPos - 2;  
 800386c:	4b32      	ldr	r3, [pc, #200]	; (8003938 <ProbeScope_ModeTrig+0x180>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8003874:	3302      	adds	r3, #2
 8003876:	4a2f      	ldr	r2, [pc, #188]	; (8003934 <ProbeScope_ModeTrig+0x17c>)
 8003878:	6013      	str	r3, [r2, #0]
                     ProbeScope_State              = PROBE_SCOPE_STATE_SAMPLING_POST_TRIG;
 800387a:	4b28      	ldr	r3, [pc, #160]	; (800391c <ProbeScope_ModeTrig+0x164>)
 800387c:	2202      	movs	r2, #2
 800387e:	701a      	strb	r2, [r3, #0]
                 }
                 break;
 8003880:	e046      	b.n	8003910 <ProbeScope_ModeTrig+0x158>
 8003882:	e045      	b.n	8003910 <ProbeScope_ModeTrig+0x158>
                 
            case PROBE_SCOPE_STATE_SAMPLING_POST_TRIG:
                 ProbeScope_SampleChAll();                                          // Get the next sample
 8003884:	f000 f860 	bl	8003948 <ProbeScope_SampleChAll>
                 ProbeScope_SamplePosNext();
 8003888:	f000 f986 	bl	8003b98 <ProbeScope_SamplePosNext>
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
 800388c:	4b29      	ldr	r3, [pc, #164]	; (8003934 <ProbeScope_ModeTrig+0x17c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <ProbeScope_ModeTrig+0xe8>
                     ProbeScope_SamplesPostTrigCtr--;
 8003894:	4b27      	ldr	r3, [pc, #156]	; (8003934 <ProbeScope_ModeTrig+0x17c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3b01      	subs	r3, #1
 800389a:	4a26      	ldr	r2, [pc, #152]	; (8003934 <ProbeScope_ModeTrig+0x17c>)
 800389c:	6013      	str	r3, [r2, #0]
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
                 }                                                                  
                 break;                                                             
 800389e:	e037      	b.n	8003910 <ProbeScope_ModeTrig+0x158>
                 ProbeScope_SampleChAll();                                          // Get the next sample
                 ProbeScope_SamplePosNext();
                 if (ProbeScope_SamplesPostTrigCtr > 0) {
                     ProbeScope_SamplesPostTrigCtr--;
                 } else {
                     if (ProbeScope_Mode == PROBE_SCOPE_MODE_SINGLE) {
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <ProbeScope_ModeTrig+0x188>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d106      	bne.n	80038b6 <ProbeScope_ModeTrig+0xfe>
                         ProbeScope_Mode           = PROBE_SCOPE_MODE_OFF;
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <ProbeScope_ModeTrig+0x188>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_START;
 80038ae:	4b1b      	ldr	r3, [pc, #108]	; (800391c <ProbeScope_ModeTrig+0x164>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e006      	b.n	80038c4 <ProbeScope_ModeTrig+0x10c>
                     } else {
                         ProbeScope_TrigHoldOffCtr = ProbeScope_TrigHoldOff;        // Load hold-off counter
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <ProbeScope_ModeTrig+0x18c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <ProbeScope_ModeTrig+0x178>)
 80038bc:	6013      	str	r3, [r2, #0]
                         ProbeScope_State          = PROBE_SCOPE_STATE_DATA_RDY;    
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <ProbeScope_ModeTrig+0x164>)
 80038c0:	2203      	movs	r2, #3
 80038c2:	701a      	strb	r2, [r3, #0]
                     }                                                              
                     ProbeScope_DataRdyFlag = 1;                                    // Trace is available in the buffer
 80038c4:	4b16      	ldr	r3, [pc, #88]	; (8003920 <ProbeScope_ModeTrig+0x168>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
                 }                                                                  
                 break;                                                             
 80038ca:	e021      	b.n	8003910 <ProbeScope_ModeTrig+0x158>
                                                                                    
            case PROBE_SCOPE_STATE_DATA_RDY:                                        
                 if (ProbeScope_TrigHoldOffCtr > 0) {                               // Hold-off before beeing able to re-trigger
 80038cc:	4b18      	ldr	r3, [pc, #96]	; (8003930 <ProbeScope_ModeTrig+0x178>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <ProbeScope_ModeTrig+0x128>
                     ProbeScope_TrigHoldOffCtr--;                                   
 80038d4:	4b16      	ldr	r3, [pc, #88]	; (8003930 <ProbeScope_ModeTrig+0x178>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3b01      	subs	r3, #1
 80038da:	4a15      	ldr	r2, [pc, #84]	; (8003930 <ProbeScope_ModeTrig+0x178>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e012      	b.n	8003906 <ProbeScope_ModeTrig+0x14e>
                 } else {                                                           
                     if (ProbeScope_DataRdyFlag == 0) {                             // Give Probe time to collect and display the waveform(s)
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <ProbeScope_ModeTrig+0x168>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10e      	bne.n	8003906 <ProbeScope_ModeTrig+0x14e>
                         ProbeScope_TrigFlag          = 0;
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <ProbeScope_ModeTrig+0x16c>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
                         ProbeScope_SamplesPreTrigCtr = ProbeScope_TrigDispPos;     // Minimum number of samples pre-trigger
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <ProbeScope_ModeTrig+0x180>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <ProbeScope_ModeTrig+0x184>)
 80038f4:	6013      	str	r3, [r2, #0]
                         ProbeScope_State             = PROBE_SCOPE_STATE_SAMPLING_PRE_TRIG;
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <ProbeScope_ModeTrig+0x164>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
                         ProbeScope_SampleChAll();                                  // Get the first sample to create a 'previous' value for triggering
 80038fc:	f000 f824 	bl	8003948 <ProbeScope_SampleChAll>
                         ProbeScope_SamplePosNext();
 8003900:	f000 f94a 	bl	8003b98 <ProbeScope_SamplePosNext>
                     }
                 }
                 break;
 8003904:	e004      	b.n	8003910 <ProbeScope_ModeTrig+0x158>
 8003906:	e003      	b.n	8003910 <ProbeScope_ModeTrig+0x158>
                 
            default:
                 ProbeScope_State = PROBE_SCOPE_STATE_START;
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <ProbeScope_ModeTrig+0x164>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
                 break;
 800390e:	bf00      	nop
        }
    }
}
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	2000807e 	.word	0x2000807e
 8003918:	2000807c 	.word	0x2000807c
 800391c:	20008080 	.word	0x20008080
 8003920:	20008d64 	.word	0x20008d64
 8003924:	20008d4c 	.word	0x20008d4c
 8003928:	2000806c 	.word	0x2000806c
 800392c:	20008070 	.word	0x20008070
 8003930:	20008064 	.word	0x20008064
 8003934:	20008078 	.word	0x20008078
 8003938:	20008d58 	.word	0x20008d58
 800393c:	20008074 	.word	0x20008074
 8003940:	20008060 	.word	0x20008060
 8003944:	20008d5c 	.word	0x20008d5c

08003948 <ProbeScope_SampleChAll>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleChAll (void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
    ProbeScope_SampleCh(&ProbeScope_Ch1);
 800394c:	480c      	ldr	r0, [pc, #48]	; (8003980 <ProbeScope_SampleChAll+0x38>)
 800394e:	f000 f827 	bl	80039a0 <ProbeScope_SampleCh>

#if PROBE_SCOPE_MAX_CH >= 2
    ProbeScope_SampleCh(&ProbeScope_Ch2);
 8003952:	480c      	ldr	r0, [pc, #48]	; (8003984 <ProbeScope_SampleChAll+0x3c>)
 8003954:	f000 f824 	bl	80039a0 <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 3                     
    ProbeScope_SampleCh(&ProbeScope_Ch3);
 8003958:	480b      	ldr	r0, [pc, #44]	; (8003988 <ProbeScope_SampleChAll+0x40>)
 800395a:	f000 f821 	bl	80039a0 <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 4                     
    ProbeScope_SampleCh(&ProbeScope_Ch4);
 800395e:	480b      	ldr	r0, [pc, #44]	; (800398c <ProbeScope_SampleChAll+0x44>)
 8003960:	f000 f81e 	bl	80039a0 <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 5
    ProbeScope_SampleCh(&ProbeScope_Ch5);
 8003964:	480a      	ldr	r0, [pc, #40]	; (8003990 <ProbeScope_SampleChAll+0x48>)
 8003966:	f000 f81b 	bl	80039a0 <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 6                     
    ProbeScope_SampleCh(&ProbeScope_Ch6);
 800396a:	480a      	ldr	r0, [pc, #40]	; (8003994 <ProbeScope_SampleChAll+0x4c>)
 800396c:	f000 f818 	bl	80039a0 <ProbeScope_SampleCh>
#endif

#if PROBE_SCOPE_MAX_CH >= 7                     
    ProbeScope_SampleCh(&ProbeScope_Ch7);
 8003970:	4809      	ldr	r0, [pc, #36]	; (8003998 <ProbeScope_SampleChAll+0x50>)
 8003972:	f000 f815 	bl	80039a0 <ProbeScope_SampleCh>
#endif                     

#if PROBE_SCOPE_MAX_CH >= 8                     
    ProbeScope_SampleCh(&ProbeScope_Ch8);
 8003976:	4809      	ldr	r0, [pc, #36]	; (800399c <ProbeScope_SampleChAll+0x54>)
 8003978:	f000 f812 	bl	80039a0 <ProbeScope_SampleCh>
#endif                     
}
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200002a0 	.word	0x200002a0
 8003984:	20001258 	.word	0x20001258
 8003988:	20002210 	.word	0x20002210
 800398c:	200031c8 	.word	0x200031c8
 8003990:	20004180 	.word	0x20004180
 8003994:	20005138 	.word	0x20005138
 8003998:	200060f0 	.word	0x200060f0
 800399c:	200070a8 	.word	0x200070a8

080039a0 <ProbeScope_SampleCh>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SampleCh (PROBE_SCOPE_CH  *p_ch)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    PROBE_SCOPE_CH_SAMPLE   msk;                                    // Mask used to select desired bit when in bit mode.
    PROBE_SCOPE_CH_SAMPLE  *p_sample;                               // Pointer to where the sample will be stored


    if (p_ch->En == 1) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	f040 80eb 	bne.w	8003b88 <ProbeScope_SampleCh+0x1e8>
        p_sample = &p_ch->Samples[ProbeScope_SampleIxCur];          // Point to current position in sampling buffer
 80039b2:	4b78      	ldr	r3, [pc, #480]	; (8003b94 <ProbeScope_SampleCh+0x1f4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3306      	adds	r3, #6
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
        switch (p_ch->DataType) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	791b      	ldrb	r3, [r3, #4]
 80039c4:	2b06      	cmp	r3, #6
 80039c6:	f200 80df 	bhi.w	8003b88 <ProbeScope_SampleCh+0x1e8>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <ProbeScope_SampleCh+0x30>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	080039ed 	.word	0x080039ed
 80039d4:	08003a31 	.word	0x08003a31
 80039d8:	08003a75 	.word	0x08003a75
 80039dc:	08003ab9 	.word	0x08003ab9
 80039e0:	08003afd 	.word	0x08003afd
 80039e4:	08003b3d 	.word	0x08003b3d
 80039e8:	08003b7d 	.word	0x08003b7d
            case PROBE_SCOPE_INT08U:
                 if (p_ch->BitEn == 0) {
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <ProbeScope_SampleCh+0x60>
                     p_sample->Val08U     = *(CPU_INT08U *)p_ch->DataAddr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e016      	b.n	8003a2e <ProbeScope_SampleCh+0x8e>
                 } else {
                     msk.Val08U           =  (CPU_INT08U)1 << p_ch->BitSel;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7b1b      	ldrb	r3, [r3, #12]
 8003a04:	461a      	mov	r2, r3
 8003a06:	2301      	movs	r3, #1
 8003a08:	4093      	lsls	r3, r2
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08U *)p_ch->DataAddr & msk.Val08U) {
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	781a      	ldrb	r2, [r3, #0]
 8003a14:	7a3b      	ldrb	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <ProbeScope_SampleCh+0x86>
                         p_sample->Val08U = 1;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e003      	b.n	8003a2e <ProbeScope_SampleCh+0x8e>
                     } else {
                         p_sample->Val08U = 0;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 8003a2c:	e0ac      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
 8003a2e:	e0ab      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT08S:
                 if (p_ch->BitEn == 0) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <ProbeScope_SampleCh+0xa4>
                     p_sample->Val08S     = *(CPU_INT08S *)p_ch->DataAddr;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e016      	b.n	8003a72 <ProbeScope_SampleCh+0xd2>
                 } else {
                     msk.Val08S           =  (CPU_INT08S)1 << p_ch->BitSel;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7b1b      	ldrb	r3, [r3, #12]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4093      	lsls	r3, r2
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	723b      	strb	r3, [r7, #8]
                     if (*(CPU_INT08S *)p_ch->DataAddr & msk.Val08S) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	7a3b      	ldrb	r3, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <ProbeScope_SampleCh+0xca>
                         p_sample->Val08S = 1;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e003      	b.n	8003a72 <ProbeScope_SampleCh+0xd2>
                     } else {
                         p_sample->Val08S = 0;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
                     }
                 }
                 break;
 8003a70:	e08a      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
 8003a72:	e089      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
                                  
#if PROBE_SCOPE_16_BIT_EN > 0                                   
            case PROBE_SCOPE_INT16U:
                 if (p_ch->BitEn == 0) {
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <ProbeScope_SampleCh+0xe8>
                     p_sample->Val16U     = *(CPU_INT16U *)p_ch->DataAddr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	e016      	b.n	8003ab6 <ProbeScope_SampleCh+0x116>
                 } else {
                     msk.Val16U           =  (CPU_INT16U)1 << p_ch->BitSel;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7b1b      	ldrb	r3, [r3, #12]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4093      	lsls	r3, r2
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16U *)p_ch->DataAddr & msk.Val16U) {
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	881a      	ldrh	r2, [r3, #0]
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <ProbeScope_SampleCh+0x10e>
                         p_sample->Val16U = 1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	e003      	b.n	8003ab6 <ProbeScope_SampleCh+0x116>
                     } else {
                         p_sample->Val16U = 0;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8003ab4:	e068      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
 8003ab6:	e067      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT16S:
                 if (p_ch->BitEn == 0) {
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <ProbeScope_SampleCh+0x12c>
                     p_sample->Val16S     = *(CPU_INT16S *)p_ch->DataAddr;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	881a      	ldrh	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	e016      	b.n	8003afa <ProbeScope_SampleCh+0x15a>
                 } else {
                     msk.Val16S           =  (CPU_INT16S)1 << p_ch->BitSel;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7b1b      	ldrb	r3, [r3, #12]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	813b      	strh	r3, [r7, #8]
                     if (*(CPU_INT16S *)p_ch->DataAddr & msk.Val16S) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	881a      	ldrh	r2, [r3, #0]
 8003ae0:	893b      	ldrh	r3, [r7, #8]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <ProbeScope_SampleCh+0x152>
                         p_sample->Val16S = 1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	801a      	strh	r2, [r3, #0]
 8003af0:	e003      	b.n	8003afa <ProbeScope_SampleCh+0x15a>
                     } else {
                         p_sample->Val16S = 0;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	801a      	strh	r2, [r3, #0]
                     }
                 }
                 break;
 8003af8:	e046      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
 8003afa:	e045      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
            case PROBE_SCOPE_INT32U:
                 if (p_ch->BitEn == 0) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <ProbeScope_SampleCh+0x170>
                     p_sample->Val32U     = *(CPU_INT32U *)p_ch->DataAddr;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e014      	b.n	8003b3a <ProbeScope_SampleCh+0x19a>
                 } else {
                     msk.Val32U           =  (CPU_INT32U)1 << p_ch->BitSel;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	7b1b      	ldrb	r3, [r3, #12]
 8003b14:	461a      	mov	r2, r3
 8003b16:	2301      	movs	r3, #1
 8003b18:	4093      	lsls	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32U *)p_ch->DataAddr & msk.Val32U) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <ProbeScope_SampleCh+0x192>
                         p_sample->Val32U = 1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e003      	b.n	8003b3a <ProbeScope_SampleCh+0x19a>
                     } else {
                         p_sample->Val32U = 0;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8003b38:	e026      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
 8003b3a:	e025      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_INT32S:
                 if (p_ch->BitEn == 0) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <ProbeScope_SampleCh+0x1b0>
                     p_sample->Val32S     = *(CPU_INT32S *)p_ch->DataAddr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e014      	b.n	8003b7a <ProbeScope_SampleCh+0x1da>
                 } else {
                     msk.Val32S           =  (CPU_INT32S)1 << p_ch->BitSel;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	7b1b      	ldrb	r3, [r3, #12]
 8003b54:	461a      	mov	r2, r3
 8003b56:	2301      	movs	r3, #1
 8003b58:	4093      	lsls	r3, r2
 8003b5a:	60bb      	str	r3, [r7, #8]
                     if (*(CPU_INT32S *)p_ch->DataAddr & msk.Val32S) {
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <ProbeScope_SampleCh+0x1d2>
                         p_sample->Val32S = 1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e003      	b.n	8003b7a <ProbeScope_SampleCh+0x1da>
                     } else {
                         p_sample->Val32S = 0;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
                     }
                 }
                 break;
 8003b78:	e006      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
 8003b7a:	e005      	b.n	8003b88 <ProbeScope_SampleCh+0x1e8>
                                  
            case PROBE_SCOPE_FP32:
                 p_sample->ValFP32  = *(CPU_FP32   *)p_ch->DataAddr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	601a      	str	r2, [r3, #0]
                 break;
 8003b86:	bf00      	nop
#endif
        }                          
    }
}
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20008070 	.word	0x20008070

08003b98 <ProbeScope_SamplePosNext>:
* Returns    : none
************************************************************************************************************************
*/

static  void  ProbeScope_SamplePosNext (void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
    ProbeScope_SampleIxPrev = ProbeScope_SampleIxCur;              // Update the position of the previous sample
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <ProbeScope_SamplePosNext+0x30>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <ProbeScope_SamplePosNext+0x34>)
 8003ba2:	6013      	str	r3, [r2, #0]
    ProbeScope_SampleIxCur++;                                      // Position to where next sample will be placed
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <ProbeScope_SamplePosNext+0x30>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <ProbeScope_SamplePosNext+0x30>)
 8003bac:	6013      	str	r3, [r2, #0]
    if (ProbeScope_SampleIxCur >= PROBE_SCOPE_MAX_SAMPLES) {       // See if we need to wrap around
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <ProbeScope_SamplePosNext+0x30>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb6:	d302      	bcc.n	8003bbe <ProbeScope_SamplePosNext+0x26>
        ProbeScope_SampleIxCur = 0;                                // yes
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <ProbeScope_SamplePosNext+0x30>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
    }
}
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20008070 	.word	0x20008070
 8003bcc:	2000806c 	.word	0x2000806c

08003bd0 <ProbeScope_IsTrig>:
*              Sets ProbeScope_TrigFlag to 0 when no trigger is detected
************************************************************************************************************************
*/

static  void  ProbeScope_IsTrig (void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
    PROBE_SCOPE_CH          *p_ch;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_prev;
    PROBE_SCOPE_CH_SAMPLE   *p_sample_cur;
    

    switch (ProbeScope_TrigChSel) {
 8003bd6:	4b90      	ldr	r3, [pc, #576]	; (8003e18 <ProbeScope_IsTrig+0x248>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	2b07      	cmp	r3, #7
 8003bde:	d82b      	bhi.n	8003c38 <ProbeScope_IsTrig+0x68>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <ProbeScope_IsTrig+0x18>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c09 	.word	0x08003c09
 8003bec:	08003c0f 	.word	0x08003c0f
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c1b 	.word	0x08003c1b
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c2d 	.word	0x08003c2d
 8003c04:	08003c33 	.word	0x08003c33
        case PROBE_SCOPE_CH1:
             p_ch = &ProbeScope_Ch1;
 8003c08:	4b84      	ldr	r3, [pc, #528]	; (8003e1c <ProbeScope_IsTrig+0x24c>)
 8003c0a:	60fb      	str	r3, [r7, #12]
             break;
 8003c0c:	e01a      	b.n	8003c44 <ProbeScope_IsTrig+0x74>
             
#if PROBE_SCOPE_MAX_CH >= 2
        case PROBE_SCOPE_CH2:
             p_ch = &ProbeScope_Ch2;
 8003c0e:	4b84      	ldr	r3, [pc, #528]	; (8003e20 <ProbeScope_IsTrig+0x250>)
 8003c10:	60fb      	str	r3, [r7, #12]
             break;
 8003c12:	e017      	b.n	8003c44 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 3
        case PROBE_SCOPE_CH3:
             p_ch = &ProbeScope_Ch3;
 8003c14:	4b83      	ldr	r3, [pc, #524]	; (8003e24 <ProbeScope_IsTrig+0x254>)
 8003c16:	60fb      	str	r3, [r7, #12]
             break;
 8003c18:	e014      	b.n	8003c44 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 4
        case PROBE_SCOPE_CH4:
             p_ch = &ProbeScope_Ch4;
 8003c1a:	4b83      	ldr	r3, [pc, #524]	; (8003e28 <ProbeScope_IsTrig+0x258>)
 8003c1c:	60fb      	str	r3, [r7, #12]
             break;
 8003c1e:	e011      	b.n	8003c44 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 5
        case PROBE_SCOPE_CH5:
             p_ch = &ProbeScope_Ch5;
 8003c20:	4b82      	ldr	r3, [pc, #520]	; (8003e2c <ProbeScope_IsTrig+0x25c>)
 8003c22:	60fb      	str	r3, [r7, #12]
             break;
 8003c24:	e00e      	b.n	8003c44 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 6
        case PROBE_SCOPE_CH6:
             p_ch = &ProbeScope_Ch6;
 8003c26:	4b82      	ldr	r3, [pc, #520]	; (8003e30 <ProbeScope_IsTrig+0x260>)
 8003c28:	60fb      	str	r3, [r7, #12]
             break;
 8003c2a:	e00b      	b.n	8003c44 <ProbeScope_IsTrig+0x74>
#endif             
             
#if PROBE_SCOPE_MAX_CH >= 7
        case PROBE_SCOPE_CH7:
             p_ch = &ProbeScope_Ch7;
 8003c2c:	4b81      	ldr	r3, [pc, #516]	; (8003e34 <ProbeScope_IsTrig+0x264>)
 8003c2e:	60fb      	str	r3, [r7, #12]
             break;
 8003c30:	e008      	b.n	8003c44 <ProbeScope_IsTrig+0x74>
#endif
             
#if PROBE_SCOPE_MAX_CH >= 8
        case PROBE_SCOPE_CH8:
             p_ch = &ProbeScope_Ch8;
 8003c32:	4b81      	ldr	r3, [pc, #516]	; (8003e38 <ProbeScope_IsTrig+0x268>)
 8003c34:	60fb      	str	r3, [r7, #12]
             break;
 8003c36:	e005      	b.n	8003c44 <ProbeScope_IsTrig+0x74>
#endif
             
        default:
             p_ch                 = &ProbeScope_Ch1;
 8003c38:	4b78      	ldr	r3, [pc, #480]	; (8003e1c <ProbeScope_IsTrig+0x24c>)
 8003c3a:	60fb      	str	r3, [r7, #12]
             ProbeScope_TrigChSel = PROBE_SCOPE_CH1;
 8003c3c:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <ProbeScope_IsTrig+0x248>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
             break;
 8003c42:	bf00      	nop
    }         
    ProbeScope_TrigFlag = 0;
 8003c44:	4b7d      	ldr	r3, [pc, #500]	; (8003e3c <ProbeScope_IsTrig+0x26c>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
    if (p_ch->En == 1) {
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	f040 8308 	bne.w	8004264 <ProbeScope_IsTrig+0x694>
        p_sample_prev = &p_ch->Samples[ProbeScope_SampleIxPrev];          // Point to previous position in sampling buffer
 8003c54:	4b7a      	ldr	r3, [pc, #488]	; (8003e40 <ProbeScope_IsTrig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3306      	adds	r3, #6
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	60bb      	str	r3, [r7, #8]
        p_sample_cur  = &p_ch->Samples[ProbeScope_SampleIxCur];           // Point to current  position in sampling buffer
 8003c62:	4b78      	ldr	r3, [pc, #480]	; (8003e44 <ProbeScope_IsTrig+0x274>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3306      	adds	r3, #6
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	607b      	str	r3, [r7, #4]
        if (ProbeScope_TrigSlope == PROBE_SCOPE_TRIG_POS) {
 8003c70:	4b75      	ldr	r3, [pc, #468]	; (8003e48 <ProbeScope_IsTrig+0x278>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 8187 	bne.w	8003f88 <ProbeScope_IsTrig+0x3b8>
            switch (p_ch->DataType) {
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	791b      	ldrb	r3, [r3, #4]
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	f200 82f0 	bhi.w	8004264 <ProbeScope_IsTrig+0x694>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <ProbeScope_IsTrig+0xbc>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003ca9 	.word	0x08003ca9
 8003c90:	08003d07 	.word	0x08003d07
 8003c94:	08003d71 	.word	0x08003d71
 8003c98:	08003dcf 	.word	0x08003dcf
 8003c9c:	08003e73 	.word	0x08003e73
 8003ca0:	08003ed1 	.word	0x08003ed1
 8003ca4:	08003f2f 	.word	0x08003f2f
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d119      	bne.n	8003ce4 <ProbeScope_IsTrig+0x114>
                         if (p_sample_prev->Val08U < p_sample_cur->Val08U) {
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d223      	bcs.n	8003d04 <ProbeScope_IsTrig+0x134>
                             if (p_sample_prev->Val08U <= p_ch->TrigLevel.Val08U) {
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	7d1b      	ldrb	r3, [r3, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d81d      	bhi.n	8003d04 <ProbeScope_IsTrig+0x134>
                                 if (p_sample_cur->Val08U >= p_ch->TrigLevel.Val08U) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	781a      	ldrb	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	7d1b      	ldrb	r3, [r3, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d317      	bcc.n	8003d04 <ProbeScope_IsTrig+0x134>
                                     ProbeScope_TrigFlag = 1;
 8003cd4:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <ProbeScope_IsTrig+0x26c>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003cda:	4b5a      	ldr	r3, [pc, #360]	; (8003e44 <ProbeScope_IsTrig+0x274>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a5b      	ldr	r2, [pc, #364]	; (8003e4c <ProbeScope_IsTrig+0x27c>)
 8003ce0:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003ce2:	e150      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U == 0) {
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <ProbeScope_IsTrig+0x134>
                             if (p_sample_cur->Val08U != 0) { 
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <ProbeScope_IsTrig+0x134>
                                 ProbeScope_TrigFlag = 1;
 8003cf4:	4b51      	ldr	r3, [pc, #324]	; (8003e3c <ProbeScope_IsTrig+0x26c>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003cfa:	4b52      	ldr	r3, [pc, #328]	; (8003e44 <ProbeScope_IsTrig+0x274>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a53      	ldr	r2, [pc, #332]	; (8003e4c <ProbeScope_IsTrig+0x27c>)
 8003d00:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003d02:	e140      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
 8003d04:	e13f      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11f      	bne.n	8003d4e <ProbeScope_IsTrig+0x17e>
                         if (p_sample_prev->Val08S < p_sample_cur->Val08S) {
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	b252      	sxtb	r2, r2
 8003d18:	b25b      	sxtb	r3, r3
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	da27      	bge.n	8003d6e <ProbeScope_IsTrig+0x19e>
                             if (p_sample_prev->Val08S <= p_ch->TrigLevel.Val08S) {
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	7d1b      	ldrb	r3, [r3, #20]
 8003d26:	b252      	sxtb	r2, r2
 8003d28:	b25b      	sxtb	r3, r3
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	dc1f      	bgt.n	8003d6e <ProbeScope_IsTrig+0x19e>
                                 if (p_sample_cur->Val08S >= p_ch->TrigLevel.Val08S) {
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	7d1b      	ldrb	r3, [r3, #20]
 8003d36:	b252      	sxtb	r2, r2
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	db17      	blt.n	8003d6e <ProbeScope_IsTrig+0x19e>
                                     ProbeScope_TrigFlag = 1;
 8003d3e:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <ProbeScope_IsTrig+0x26c>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003d44:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <ProbeScope_IsTrig+0x274>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a40      	ldr	r2, [pc, #256]	; (8003e4c <ProbeScope_IsTrig+0x27c>)
 8003d4a:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003d4c:	e11b      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S == 0) {
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <ProbeScope_IsTrig+0x19e>
                             if (p_sample_cur->Val08S != 0) { 
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <ProbeScope_IsTrig+0x19e>
                                 ProbeScope_TrigFlag = 1;
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <ProbeScope_IsTrig+0x26c>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003d64:	4b37      	ldr	r3, [pc, #220]	; (8003e44 <ProbeScope_IsTrig+0x274>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a38      	ldr	r2, [pc, #224]	; (8003e4c <ProbeScope_IsTrig+0x27c>)
 8003d6a:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003d6c:	e10b      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
 8003d6e:	e10a      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>

#if PROBE_SCOPE_16_BIT_EN > 0                                    
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d119      	bne.n	8003dac <ProbeScope_IsTrig+0x1dc>
                         if (p_sample_prev->Val16U < p_sample_cur->Val16U) {
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	881a      	ldrh	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d223      	bcs.n	8003dcc <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_prev->Val16U <= p_ch->TrigLevel.Val16U) {
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8a9b      	ldrh	r3, [r3, #20]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d81d      	bhi.n	8003dcc <ProbeScope_IsTrig+0x1fc>
                                 if (p_sample_cur->Val16U >= p_ch->TrigLevel.Val16U) {
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	881a      	ldrh	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8a9b      	ldrh	r3, [r3, #20]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d317      	bcc.n	8003dcc <ProbeScope_IsTrig+0x1fc>
                                     ProbeScope_TrigFlag = 1;
 8003d9c:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <ProbeScope_IsTrig+0x26c>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003da2:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <ProbeScope_IsTrig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <ProbeScope_IsTrig+0x27c>)
 8003da8:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003daa:	e0ec      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U == 0) {
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10b      	bne.n	8003dcc <ProbeScope_IsTrig+0x1fc>
                             if (p_sample_cur->Val16U != 0) { 
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <ProbeScope_IsTrig+0x1fc>
                                 ProbeScope_TrigFlag = 1;
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <ProbeScope_IsTrig+0x26c>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <ProbeScope_IsTrig+0x274>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <ProbeScope_IsTrig+0x27c>)
 8003dc8:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003dca:	e0dc      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
 8003dcc:	e0db      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d13c      	bne.n	8003e50 <ProbeScope_IsTrig+0x280>
                         if (p_sample_prev->Val16S < p_sample_cur->Val16S) {
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b212      	sxth	r2, r2
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	429a      	cmp	r2, r3
 8003de4:	da44      	bge.n	8003e70 <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_prev->Val16S <= p_ch->TrigLevel.Val16S) {
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8a9b      	ldrh	r3, [r3, #20]
 8003dee:	b212      	sxth	r2, r2
 8003df0:	b21b      	sxth	r3, r3
 8003df2:	429a      	cmp	r2, r3
 8003df4:	dc3c      	bgt.n	8003e70 <ProbeScope_IsTrig+0x2a0>
                                 if (p_sample_cur->Val16S >= p_ch->TrigLevel.Val16S) {
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8a9b      	ldrh	r3, [r3, #20]
 8003dfe:	b212      	sxth	r2, r2
 8003e00:	b21b      	sxth	r3, r3
 8003e02:	429a      	cmp	r2, r3
 8003e04:	db34      	blt.n	8003e70 <ProbeScope_IsTrig+0x2a0>
                                     ProbeScope_TrigFlag = 1;
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <ProbeScope_IsTrig+0x26c>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <ProbeScope_IsTrig+0x274>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <ProbeScope_IsTrig+0x27c>)
 8003e12:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003e14:	e0b7      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
 8003e16:	bf00      	nop
 8003e18:	20008061 	.word	0x20008061
 8003e1c:	200002a0 	.word	0x200002a0
 8003e20:	20001258 	.word	0x20001258
 8003e24:	20002210 	.word	0x20002210
 8003e28:	200031c8 	.word	0x200031c8
 8003e2c:	20004180 	.word	0x20004180
 8003e30:	20005138 	.word	0x20005138
 8003e34:	200060f0 	.word	0x200060f0
 8003e38:	200070a8 	.word	0x200070a8
 8003e3c:	20008d4c 	.word	0x20008d4c
 8003e40:	2000806c 	.word	0x2000806c
 8003e44:	20008070 	.word	0x20008070
 8003e48:	20008068 	.word	0x20008068
 8003e4c:	20008d54 	.word	0x20008d54
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S == 0) {
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <ProbeScope_IsTrig+0x2a0>
                             if (p_sample_cur->Val16S != 0) { 
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <ProbeScope_IsTrig+0x2a0>
                                 ProbeScope_TrigFlag = 1;
 8003e60:	4b86      	ldr	r3, [pc, #536]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003e66:	4b86      	ldr	r3, [pc, #536]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a86      	ldr	r2, [pc, #536]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 8003e6c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003e6e:	e08a      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
 8003e70:	e089      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                   
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d119      	bne.n	8003eae <ProbeScope_IsTrig+0x2de>
                         if (p_sample_prev->Val32U < p_sample_cur->Val32U) {
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d223      	bcs.n	8003ece <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_prev->Val32U <= p_ch->TrigLevel.Val32U) {
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d81d      	bhi.n	8003ece <ProbeScope_IsTrig+0x2fe>
                                 if (p_sample_cur->Val32U >= p_ch->TrigLevel.Val32U) {
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d317      	bcc.n	8003ece <ProbeScope_IsTrig+0x2fe>
                                     ProbeScope_TrigFlag = 1;
 8003e9e:	4b77      	ldr	r3, [pc, #476]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003ea4:	4b76      	ldr	r3, [pc, #472]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a76      	ldr	r2, [pc, #472]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 8003eaa:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003eac:	e06b      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U == 0) {
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <ProbeScope_IsTrig+0x2fe>
                             if (p_sample_cur->Val32U != 0) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <ProbeScope_IsTrig+0x2fe>
                                 ProbeScope_TrigFlag = 1;
 8003ebe:	4b6f      	ldr	r3, [pc, #444]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003ec4:	4b6e      	ldr	r3, [pc, #440]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 8003eca:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003ecc:	e05b      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
 8003ece:	e05a      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d119      	bne.n	8003f0c <ProbeScope_IsTrig+0x33c>
                         if (p_sample_prev->Val32S < p_sample_cur->Val32S) {
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	da23      	bge.n	8003f2c <ProbeScope_IsTrig+0x35c>
                             if (p_sample_prev->Val32S <= p_ch->TrigLevel.Val32S) {
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	dc1d      	bgt.n	8003f2c <ProbeScope_IsTrig+0x35c>
                                 if (p_sample_cur->Val32S >= p_ch->TrigLevel.Val32S) {
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	db17      	blt.n	8003f2c <ProbeScope_IsTrig+0x35c>
                                     ProbeScope_TrigFlag = 1;
 8003efc:	4b5f      	ldr	r3, [pc, #380]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003f02:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a5f      	ldr	r2, [pc, #380]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 8003f08:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003f0a:	e03c      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S == 0) {
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <ProbeScope_IsTrig+0x35c>
                             if (p_sample_cur->Val32S != 0) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <ProbeScope_IsTrig+0x35c>
                                 ProbeScope_TrigFlag = 1;
 8003f1c:	4b57      	ldr	r3, [pc, #348]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003f22:	4b57      	ldr	r3, [pc, #348]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a57      	ldr	r2, [pc, #348]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 8003f28:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003f2a:	e02c      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
 8003f2c:	e02b      	b.n	8003f86 <ProbeScope_IsTrig+0x3b6>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	ed93 7a00 	vldr	s14, [r3]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	edd3 7a00 	vldr	s15, [r3]
 8003f3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f42:	d400      	bmi.n	8003f46 <ProbeScope_IsTrig+0x376>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003f44:	e01e      	b.n	8003f84 <ProbeScope_IsTrig+0x3b4>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	ed93 7a00 	vldr	s14, [r3]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	d900      	bls.n	8003f5e <ProbeScope_IsTrig+0x38e>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003f5c:	e012      	b.n	8003f84 <ProbeScope_IsTrig+0x3b4>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	ed93 7a00 	vldr	s14, [r3]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	edd3 7a05 	vldr	s15, [r3, #20]
 8003f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f72:	da00      	bge.n	8003f76 <ProbeScope_IsTrig+0x3a6>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003f74:	e006      	b.n	8003f84 <ProbeScope_IsTrig+0x3b4>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 < p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003f7c:	4b40      	ldr	r3, [pc, #256]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a40      	ldr	r2, [pc, #256]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 8003f82:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8003f84:	bf00      	nop
 8003f86:	e16d      	b.n	8004264 <ProbeScope_IsTrig+0x694>
#endif
            }
        } else {
            switch (p_ch->DataType) {
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	791b      	ldrb	r3, [r3, #4]
 8003f8c:	2b06      	cmp	r3, #6
 8003f8e:	f200 8169 	bhi.w	8004264 <ProbeScope_IsTrig+0x694>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <ProbeScope_IsTrig+0x3c8>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fb5 	.word	0x08003fb5
 8003f9c:	08004013 	.word	0x08004013
 8003fa0:	08004089 	.word	0x08004089
 8003fa4:	080040e7 	.word	0x080040e7
 8003fa8:	08004151 	.word	0x08004151
 8003fac:	080041af 	.word	0x080041af
 8003fb0:	0800420d 	.word	0x0800420d
                case PROBE_SCOPE_INT08U:
                     if (p_ch->BitEn == 0) {
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d119      	bne.n	8003ff0 <ProbeScope_IsTrig+0x420>
                         if (p_sample_prev->Val08U > p_sample_cur->Val08U) {
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d923      	bls.n	8004010 <ProbeScope_IsTrig+0x440>
                             if (p_sample_prev->Val08U >= p_ch->TrigLevel.Val08U) {
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781a      	ldrb	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	7d1b      	ldrb	r3, [r3, #20]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d31d      	bcc.n	8004010 <ProbeScope_IsTrig+0x440>
                                 if (p_sample_cur->Val08U <= p_ch->TrigLevel.Val08U) {
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	7d1b      	ldrb	r3, [r3, #20]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d817      	bhi.n	8004010 <ProbeScope_IsTrig+0x440>
                                     ProbeScope_TrigFlag = 1;
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8003fe6:	4b26      	ldr	r3, [pc, #152]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a26      	ldr	r2, [pc, #152]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 8003fec:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8003fee:	e139      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08U != 0) {
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <ProbeScope_IsTrig+0x440>
                             if (p_sample_cur->Val08U == 0) {
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d107      	bne.n	8004010 <ProbeScope_IsTrig+0x440>
                                 ProbeScope_TrigFlag = 1;
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 800400c:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800400e:	e129      	b.n	8004264 <ProbeScope_IsTrig+0x694>
 8004010:	e128      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT08S:
                     if (p_ch->BitEn == 0) {
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d11f      	bne.n	800405a <ProbeScope_IsTrig+0x48a>
                         if (p_sample_prev->Val08S > p_sample_cur->Val08S) {
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	b252      	sxtb	r2, r2
 8004024:	b25b      	sxtb	r3, r3
 8004026:	429a      	cmp	r2, r3
 8004028:	dd27      	ble.n	800407a <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_prev->Val08S >= p_ch->TrigLevel.Val08S) {
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	7d1b      	ldrb	r3, [r3, #20]
 8004032:	b252      	sxtb	r2, r2
 8004034:	b25b      	sxtb	r3, r3
 8004036:	429a      	cmp	r2, r3
 8004038:	db1f      	blt.n	800407a <ProbeScope_IsTrig+0x4aa>
                                 if (p_sample_cur->Val08S <= p_ch->TrigLevel.Val08S) {
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	7d1b      	ldrb	r3, [r3, #20]
 8004042:	b252      	sxtb	r2, r2
 8004044:	b25b      	sxtb	r3, r3
 8004046:	429a      	cmp	r2, r3
 8004048:	dc17      	bgt.n	800407a <ProbeScope_IsTrig+0x4aa>
                                     ProbeScope_TrigFlag = 1;
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 8004056:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004058:	e104      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val08S != 0) {
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <ProbeScope_IsTrig+0x4aa>
                             if (p_sample_cur->Val08S == 0) {
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <ProbeScope_IsTrig+0x4aa>
                                 ProbeScope_TrigFlag = 1;
 800406a:	4b04      	ldr	r3, [pc, #16]	; (800407c <ProbeScope_IsTrig+0x4ac>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <ProbeScope_IsTrig+0x4b0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a03      	ldr	r2, [pc, #12]	; (8004084 <ProbeScope_IsTrig+0x4b4>)
 8004076:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8004078:	e0f4      	b.n	8004264 <ProbeScope_IsTrig+0x694>
 800407a:	e0f3      	b.n	8004264 <ProbeScope_IsTrig+0x694>
 800407c:	20008d4c 	.word	0x20008d4c
 8004080:	20008070 	.word	0x20008070
 8004084:	20008d54 	.word	0x20008d54
                                    
#if PROBE_SCOPE_16_BIT_EN > 0                                   
                case PROBE_SCOPE_INT16U:
                     if (p_ch->BitEn == 0) {
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d119      	bne.n	80040c4 <ProbeScope_IsTrig+0x4f4>
                         if (p_sample_prev->Val16U > p_sample_cur->Val16U) {
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d923      	bls.n	80040e4 <ProbeScope_IsTrig+0x514>
                             if (p_sample_prev->Val16U >= p_ch->TrigLevel.Val16U) {
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8a9b      	ldrh	r3, [r3, #20]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d31d      	bcc.n	80040e4 <ProbeScope_IsTrig+0x514>
                                 if (p_sample_cur->Val16U <= p_ch->TrigLevel.Val16U) {
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8a9b      	ldrh	r3, [r3, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d817      	bhi.n	80040e4 <ProbeScope_IsTrig+0x514>
                                     ProbeScope_TrigFlag = 1;
 80040b4:	4b6e      	ldr	r3, [pc, #440]	; (8004270 <ProbeScope_IsTrig+0x6a0>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80040ba:	4b6e      	ldr	r3, [pc, #440]	; (8004274 <ProbeScope_IsTrig+0x6a4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6e      	ldr	r2, [pc, #440]	; (8004278 <ProbeScope_IsTrig+0x6a8>)
 80040c0:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80040c2:	e0cf      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16U != 0) {
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <ProbeScope_IsTrig+0x514>
                             if (p_sample_cur->Val16U == 0) {
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <ProbeScope_IsTrig+0x514>
                                 ProbeScope_TrigFlag = 1;
 80040d4:	4b66      	ldr	r3, [pc, #408]	; (8004270 <ProbeScope_IsTrig+0x6a0>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80040da:	4b66      	ldr	r3, [pc, #408]	; (8004274 <ProbeScope_IsTrig+0x6a4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a66      	ldr	r2, [pc, #408]	; (8004278 <ProbeScope_IsTrig+0x6a8>)
 80040e0:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80040e2:	e0bf      	b.n	8004264 <ProbeScope_IsTrig+0x694>
 80040e4:	e0be      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT16S:
                     if (p_ch->BitEn == 0) {
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d11f      	bne.n	800412e <ProbeScope_IsTrig+0x55e>
                         if (p_sample_prev->Val16S > p_sample_cur->Val16S) {
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	881a      	ldrh	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b212      	sxth	r2, r2
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	429a      	cmp	r2, r3
 80040fc:	dd27      	ble.n	800414e <ProbeScope_IsTrig+0x57e>
                             if (p_sample_prev->Val16S >= p_ch->TrigLevel.Val16S) {
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	881a      	ldrh	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8a9b      	ldrh	r3, [r3, #20]
 8004106:	b212      	sxth	r2, r2
 8004108:	b21b      	sxth	r3, r3
 800410a:	429a      	cmp	r2, r3
 800410c:	db1f      	blt.n	800414e <ProbeScope_IsTrig+0x57e>
                                 if (p_sample_cur->Val16S <= p_ch->TrigLevel.Val16S) {
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	881a      	ldrh	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8a9b      	ldrh	r3, [r3, #20]
 8004116:	b212      	sxth	r2, r2
 8004118:	b21b      	sxth	r3, r3
 800411a:	429a      	cmp	r2, r3
 800411c:	dc17      	bgt.n	800414e <ProbeScope_IsTrig+0x57e>
                                     ProbeScope_TrigFlag = 1;
 800411e:	4b54      	ldr	r3, [pc, #336]	; (8004270 <ProbeScope_IsTrig+0x6a0>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <ProbeScope_IsTrig+0x6a4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a53      	ldr	r2, [pc, #332]	; (8004278 <ProbeScope_IsTrig+0x6a8>)
 800412a:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800412c:	e09a      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val16S != 0) {
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <ProbeScope_IsTrig+0x57e>
                             if (p_sample_cur->Val16S == 0) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d107      	bne.n	800414e <ProbeScope_IsTrig+0x57e>
                                 ProbeScope_TrigFlag = 1;
 800413e:	4b4c      	ldr	r3, [pc, #304]	; (8004270 <ProbeScope_IsTrig+0x6a0>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004144:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <ProbeScope_IsTrig+0x6a4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a4b      	ldr	r2, [pc, #300]	; (8004278 <ProbeScope_IsTrig+0x6a8>)
 800414a:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 800414c:	e08a      	b.n	8004264 <ProbeScope_IsTrig+0x694>
 800414e:	e089      	b.n	8004264 <ProbeScope_IsTrig+0x694>
#endif

#if PROBE_SCOPE_32_BIT_EN > 0                                                                     
                case PROBE_SCOPE_INT32U:
                     if (p_ch->BitEn == 0) {
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d119      	bne.n	800418c <ProbeScope_IsTrig+0x5bc>
                         if (p_sample_prev->Val32U > p_sample_cur->Val32U) {                  
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d923      	bls.n	80041ac <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_prev->Val32U >= p_ch->TrigLevel.Val32U) {
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	429a      	cmp	r2, r3
 800416e:	d31d      	bcc.n	80041ac <ProbeScope_IsTrig+0x5dc>
                                 if (p_sample_cur->Val32U <= p_ch->TrigLevel.Val32U) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	429a      	cmp	r2, r3
 800417a:	d817      	bhi.n	80041ac <ProbeScope_IsTrig+0x5dc>
                                     ProbeScope_TrigFlag = 1;
 800417c:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <ProbeScope_IsTrig+0x6a0>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004182:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <ProbeScope_IsTrig+0x6a4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a3c      	ldr	r2, [pc, #240]	; (8004278 <ProbeScope_IsTrig+0x6a8>)
 8004188:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800418a:	e06b      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32U != 0) {
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <ProbeScope_IsTrig+0x5dc>
                             if (p_sample_cur->Val32U == 0) {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d107      	bne.n	80041ac <ProbeScope_IsTrig+0x5dc>
                                 ProbeScope_TrigFlag = 1;
 800419c:	4b34      	ldr	r3, [pc, #208]	; (8004270 <ProbeScope_IsTrig+0x6a0>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80041a2:	4b34      	ldr	r3, [pc, #208]	; (8004274 <ProbeScope_IsTrig+0x6a4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a34      	ldr	r2, [pc, #208]	; (8004278 <ProbeScope_IsTrig+0x6a8>)
 80041a8:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 80041aa:	e05b      	b.n	8004264 <ProbeScope_IsTrig+0x694>
 80041ac:	e05a      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                     
                case PROBE_SCOPE_INT32S:
                     if (p_ch->BitEn == 0) {
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d119      	bne.n	80041ea <ProbeScope_IsTrig+0x61a>
                         if (p_sample_prev->Val32S > p_sample_cur->Val32S) {
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	dd23      	ble.n	800420a <ProbeScope_IsTrig+0x63a>
                             if (p_sample_prev->Val32S >= p_ch->TrigLevel.Val32S) {
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	db1d      	blt.n	800420a <ProbeScope_IsTrig+0x63a>
                                 if (p_sample_cur->Val32S <= p_ch->TrigLevel.Val32S) {
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	dc17      	bgt.n	800420a <ProbeScope_IsTrig+0x63a>
                                     ProbeScope_TrigFlag = 1;
 80041da:	4b25      	ldr	r3, [pc, #148]	; (8004270 <ProbeScope_IsTrig+0x6a0>)
 80041dc:	2201      	movs	r2, #1
 80041de:	601a      	str	r2, [r3, #0]
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 80041e0:	4b24      	ldr	r3, [pc, #144]	; (8004274 <ProbeScope_IsTrig+0x6a4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a24      	ldr	r2, [pc, #144]	; (8004278 <ProbeScope_IsTrig+0x6a8>)
 80041e6:	6013      	str	r3, [r2, #0]
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 80041e8:	e03c      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                                     ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                                 }
                             }
                         }
                     } else {
                         if (p_sample_prev->Val32S != 0) {
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <ProbeScope_IsTrig+0x63a>
                             if (p_sample_cur->Val32S == 0) {
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d107      	bne.n	800420a <ProbeScope_IsTrig+0x63a>
                                 ProbeScope_TrigFlag = 1;
 80041fa:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <ProbeScope_IsTrig+0x6a0>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <ProbeScope_IsTrig+0x6a4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <ProbeScope_IsTrig+0x6a8>)
 8004206:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8004208:	e02c      	b.n	8004264 <ProbeScope_IsTrig+0x694>
 800420a:	e02b      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	ed93 7a00 	vldr	s14, [r3]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	edd3 7a00 	vldr	s15, [r3]
 8004218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	dc00      	bgt.n	8004224 <ProbeScope_IsTrig+0x654>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004222:	e01f      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                     }
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	ed93 7a00 	vldr	s14, [r3]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004238:	da00      	bge.n	800423c <ProbeScope_IsTrig+0x66c>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 800423a:	e013      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                     break;
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	ed93 7a00 	vldr	s14, [r3]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	edd3 7a05 	vldr	s15, [r3, #20]
 8004248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	d900      	bls.n	8004254 <ProbeScope_IsTrig+0x684>
                                 ProbeScope_TrigFlag = 1;
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
                             }
                         }
                     }
                     break;
 8004252:	e007      	b.n	8004264 <ProbeScope_IsTrig+0x694>
                                    
                case PROBE_SCOPE_FP32:
                     if (p_sample_prev->ValFP32 > p_sample_cur->ValFP32) {
                         if (p_sample_prev->ValFP32 >= p_ch->TrigLevel.ValFP32) {
                             if (p_sample_cur->ValFP32 <= p_ch->TrigLevel.ValFP32) {
                                 ProbeScope_TrigFlag = 1;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <ProbeScope_IsTrig+0x6a0>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]
                                 ProbeScope_TrigIx   = ProbeScope_SampleIxCur; 
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <ProbeScope_IsTrig+0x6a4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a06      	ldr	r2, [pc, #24]	; (8004278 <ProbeScope_IsTrig+0x6a8>)
 8004260:	6013      	str	r3, [r2, #0]
                             }
                         }
                     }
                     break;
 8004262:	bf00      	nop
#endif                     
            }                          
        }
    }
}
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20008d4c 	.word	0x20008d4c
 8004274:	20008070 	.word	0x20008070
 8004278:	20008d54 	.word	0x20008d54

0800427c <__aeabi_drsub>:
 800427c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004280:	e002      	b.n	8004288 <__adddf3>
 8004282:	bf00      	nop

08004284 <__aeabi_dsub>:
 8004284:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004288 <__adddf3>:
 8004288:	b530      	push	{r4, r5, lr}
 800428a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800428e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004292:	ea94 0f05 	teq	r4, r5
 8004296:	bf08      	it	eq
 8004298:	ea90 0f02 	teqeq	r0, r2
 800429c:	bf1f      	itttt	ne
 800429e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80042a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80042a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80042aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042ae:	f000 80e2 	beq.w	8004476 <__adddf3+0x1ee>
 80042b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80042b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80042ba:	bfb8      	it	lt
 80042bc:	426d      	neglt	r5, r5
 80042be:	dd0c      	ble.n	80042da <__adddf3+0x52>
 80042c0:	442c      	add	r4, r5
 80042c2:	ea80 0202 	eor.w	r2, r0, r2
 80042c6:	ea81 0303 	eor.w	r3, r1, r3
 80042ca:	ea82 0000 	eor.w	r0, r2, r0
 80042ce:	ea83 0101 	eor.w	r1, r3, r1
 80042d2:	ea80 0202 	eor.w	r2, r0, r2
 80042d6:	ea81 0303 	eor.w	r3, r1, r3
 80042da:	2d36      	cmp	r5, #54	; 0x36
 80042dc:	bf88      	it	hi
 80042de:	bd30      	pophi	{r4, r5, pc}
 80042e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042f0:	d002      	beq.n	80042f8 <__adddf3+0x70>
 80042f2:	4240      	negs	r0, r0
 80042f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004300:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004304:	d002      	beq.n	800430c <__adddf3+0x84>
 8004306:	4252      	negs	r2, r2
 8004308:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800430c:	ea94 0f05 	teq	r4, r5
 8004310:	f000 80a7 	beq.w	8004462 <__adddf3+0x1da>
 8004314:	f1a4 0401 	sub.w	r4, r4, #1
 8004318:	f1d5 0e20 	rsbs	lr, r5, #32
 800431c:	db0d      	blt.n	800433a <__adddf3+0xb2>
 800431e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004322:	fa22 f205 	lsr.w	r2, r2, r5
 8004326:	1880      	adds	r0, r0, r2
 8004328:	f141 0100 	adc.w	r1, r1, #0
 800432c:	fa03 f20e 	lsl.w	r2, r3, lr
 8004330:	1880      	adds	r0, r0, r2
 8004332:	fa43 f305 	asr.w	r3, r3, r5
 8004336:	4159      	adcs	r1, r3
 8004338:	e00e      	b.n	8004358 <__adddf3+0xd0>
 800433a:	f1a5 0520 	sub.w	r5, r5, #32
 800433e:	f10e 0e20 	add.w	lr, lr, #32
 8004342:	2a01      	cmp	r2, #1
 8004344:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004348:	bf28      	it	cs
 800434a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800434e:	fa43 f305 	asr.w	r3, r3, r5
 8004352:	18c0      	adds	r0, r0, r3
 8004354:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800435c:	d507      	bpl.n	800436e <__adddf3+0xe6>
 800435e:	f04f 0e00 	mov.w	lr, #0
 8004362:	f1dc 0c00 	rsbs	ip, ip, #0
 8004366:	eb7e 0000 	sbcs.w	r0, lr, r0
 800436a:	eb6e 0101 	sbc.w	r1, lr, r1
 800436e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004372:	d31b      	bcc.n	80043ac <__adddf3+0x124>
 8004374:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004378:	d30c      	bcc.n	8004394 <__adddf3+0x10c>
 800437a:	0849      	lsrs	r1, r1, #1
 800437c:	ea5f 0030 	movs.w	r0, r0, rrx
 8004380:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004384:	f104 0401 	add.w	r4, r4, #1
 8004388:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800438c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004390:	f080 809a 	bcs.w	80044c8 <__adddf3+0x240>
 8004394:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004398:	bf08      	it	eq
 800439a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800439e:	f150 0000 	adcs.w	r0, r0, #0
 80043a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80043a6:	ea41 0105 	orr.w	r1, r1, r5
 80043aa:	bd30      	pop	{r4, r5, pc}
 80043ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80043b0:	4140      	adcs	r0, r0
 80043b2:	eb41 0101 	adc.w	r1, r1, r1
 80043b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80043ba:	f1a4 0401 	sub.w	r4, r4, #1
 80043be:	d1e9      	bne.n	8004394 <__adddf3+0x10c>
 80043c0:	f091 0f00 	teq	r1, #0
 80043c4:	bf04      	itt	eq
 80043c6:	4601      	moveq	r1, r0
 80043c8:	2000      	moveq	r0, #0
 80043ca:	fab1 f381 	clz	r3, r1
 80043ce:	bf08      	it	eq
 80043d0:	3320      	addeq	r3, #32
 80043d2:	f1a3 030b 	sub.w	r3, r3, #11
 80043d6:	f1b3 0220 	subs.w	r2, r3, #32
 80043da:	da0c      	bge.n	80043f6 <__adddf3+0x16e>
 80043dc:	320c      	adds	r2, #12
 80043de:	dd08      	ble.n	80043f2 <__adddf3+0x16a>
 80043e0:	f102 0c14 	add.w	ip, r2, #20
 80043e4:	f1c2 020c 	rsb	r2, r2, #12
 80043e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80043ec:	fa21 f102 	lsr.w	r1, r1, r2
 80043f0:	e00c      	b.n	800440c <__adddf3+0x184>
 80043f2:	f102 0214 	add.w	r2, r2, #20
 80043f6:	bfd8      	it	le
 80043f8:	f1c2 0c20 	rsble	ip, r2, #32
 80043fc:	fa01 f102 	lsl.w	r1, r1, r2
 8004400:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004404:	bfdc      	itt	le
 8004406:	ea41 010c 	orrle.w	r1, r1, ip
 800440a:	4090      	lslle	r0, r2
 800440c:	1ae4      	subs	r4, r4, r3
 800440e:	bfa2      	ittt	ge
 8004410:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004414:	4329      	orrge	r1, r5
 8004416:	bd30      	popge	{r4, r5, pc}
 8004418:	ea6f 0404 	mvn.w	r4, r4
 800441c:	3c1f      	subs	r4, #31
 800441e:	da1c      	bge.n	800445a <__adddf3+0x1d2>
 8004420:	340c      	adds	r4, #12
 8004422:	dc0e      	bgt.n	8004442 <__adddf3+0x1ba>
 8004424:	f104 0414 	add.w	r4, r4, #20
 8004428:	f1c4 0220 	rsb	r2, r4, #32
 800442c:	fa20 f004 	lsr.w	r0, r0, r4
 8004430:	fa01 f302 	lsl.w	r3, r1, r2
 8004434:	ea40 0003 	orr.w	r0, r0, r3
 8004438:	fa21 f304 	lsr.w	r3, r1, r4
 800443c:	ea45 0103 	orr.w	r1, r5, r3
 8004440:	bd30      	pop	{r4, r5, pc}
 8004442:	f1c4 040c 	rsb	r4, r4, #12
 8004446:	f1c4 0220 	rsb	r2, r4, #32
 800444a:	fa20 f002 	lsr.w	r0, r0, r2
 800444e:	fa01 f304 	lsl.w	r3, r1, r4
 8004452:	ea40 0003 	orr.w	r0, r0, r3
 8004456:	4629      	mov	r1, r5
 8004458:	bd30      	pop	{r4, r5, pc}
 800445a:	fa21 f004 	lsr.w	r0, r1, r4
 800445e:	4629      	mov	r1, r5
 8004460:	bd30      	pop	{r4, r5, pc}
 8004462:	f094 0f00 	teq	r4, #0
 8004466:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800446a:	bf06      	itte	eq
 800446c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004470:	3401      	addeq	r4, #1
 8004472:	3d01      	subne	r5, #1
 8004474:	e74e      	b.n	8004314 <__adddf3+0x8c>
 8004476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800447a:	bf18      	it	ne
 800447c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004480:	d029      	beq.n	80044d6 <__adddf3+0x24e>
 8004482:	ea94 0f05 	teq	r4, r5
 8004486:	bf08      	it	eq
 8004488:	ea90 0f02 	teqeq	r0, r2
 800448c:	d005      	beq.n	800449a <__adddf3+0x212>
 800448e:	ea54 0c00 	orrs.w	ip, r4, r0
 8004492:	bf04      	itt	eq
 8004494:	4619      	moveq	r1, r3
 8004496:	4610      	moveq	r0, r2
 8004498:	bd30      	pop	{r4, r5, pc}
 800449a:	ea91 0f03 	teq	r1, r3
 800449e:	bf1e      	ittt	ne
 80044a0:	2100      	movne	r1, #0
 80044a2:	2000      	movne	r0, #0
 80044a4:	bd30      	popne	{r4, r5, pc}
 80044a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80044aa:	d105      	bne.n	80044b8 <__adddf3+0x230>
 80044ac:	0040      	lsls	r0, r0, #1
 80044ae:	4149      	adcs	r1, r1
 80044b0:	bf28      	it	cs
 80044b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80044b6:	bd30      	pop	{r4, r5, pc}
 80044b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80044bc:	bf3c      	itt	cc
 80044be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80044c2:	bd30      	popcc	{r4, r5, pc}
 80044c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80044c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80044cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044d0:	f04f 0000 	mov.w	r0, #0
 80044d4:	bd30      	pop	{r4, r5, pc}
 80044d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044da:	bf1a      	itte	ne
 80044dc:	4619      	movne	r1, r3
 80044de:	4610      	movne	r0, r2
 80044e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044e4:	bf1c      	itt	ne
 80044e6:	460b      	movne	r3, r1
 80044e8:	4602      	movne	r2, r0
 80044ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044ee:	bf06      	itte	eq
 80044f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044f4:	ea91 0f03 	teqeq	r1, r3
 80044f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044fc:	bd30      	pop	{r4, r5, pc}
 80044fe:	bf00      	nop

08004500 <__aeabi_ui2d>:
 8004500:	f090 0f00 	teq	r0, #0
 8004504:	bf04      	itt	eq
 8004506:	2100      	moveq	r1, #0
 8004508:	4770      	bxeq	lr
 800450a:	b530      	push	{r4, r5, lr}
 800450c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004514:	f04f 0500 	mov.w	r5, #0
 8004518:	f04f 0100 	mov.w	r1, #0
 800451c:	e750      	b.n	80043c0 <__adddf3+0x138>
 800451e:	bf00      	nop

08004520 <__aeabi_i2d>:
 8004520:	f090 0f00 	teq	r0, #0
 8004524:	bf04      	itt	eq
 8004526:	2100      	moveq	r1, #0
 8004528:	4770      	bxeq	lr
 800452a:	b530      	push	{r4, r5, lr}
 800452c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004534:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004538:	bf48      	it	mi
 800453a:	4240      	negmi	r0, r0
 800453c:	f04f 0100 	mov.w	r1, #0
 8004540:	e73e      	b.n	80043c0 <__adddf3+0x138>
 8004542:	bf00      	nop

08004544 <__aeabi_f2d>:
 8004544:	0042      	lsls	r2, r0, #1
 8004546:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800454a:	ea4f 0131 	mov.w	r1, r1, rrx
 800454e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004552:	bf1f      	itttt	ne
 8004554:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004558:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800455c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004560:	4770      	bxne	lr
 8004562:	f092 0f00 	teq	r2, #0
 8004566:	bf14      	ite	ne
 8004568:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800456c:	4770      	bxeq	lr
 800456e:	b530      	push	{r4, r5, lr}
 8004570:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800457c:	e720      	b.n	80043c0 <__adddf3+0x138>
 800457e:	bf00      	nop

08004580 <__aeabi_ul2d>:
 8004580:	ea50 0201 	orrs.w	r2, r0, r1
 8004584:	bf08      	it	eq
 8004586:	4770      	bxeq	lr
 8004588:	b530      	push	{r4, r5, lr}
 800458a:	f04f 0500 	mov.w	r5, #0
 800458e:	e00a      	b.n	80045a6 <__aeabi_l2d+0x16>

08004590 <__aeabi_l2d>:
 8004590:	ea50 0201 	orrs.w	r2, r0, r1
 8004594:	bf08      	it	eq
 8004596:	4770      	bxeq	lr
 8004598:	b530      	push	{r4, r5, lr}
 800459a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800459e:	d502      	bpl.n	80045a6 <__aeabi_l2d+0x16>
 80045a0:	4240      	negs	r0, r0
 80045a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80045a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80045aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80045ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80045b2:	f43f aedc 	beq.w	800436e <__adddf3+0xe6>
 80045b6:	f04f 0203 	mov.w	r2, #3
 80045ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045be:	bf18      	it	ne
 80045c0:	3203      	addne	r2, #3
 80045c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045c6:	bf18      	it	ne
 80045c8:	3203      	addne	r2, #3
 80045ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80045ce:	f1c2 0320 	rsb	r3, r2, #32
 80045d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80045d6:	fa20 f002 	lsr.w	r0, r0, r2
 80045da:	fa01 fe03 	lsl.w	lr, r1, r3
 80045de:	ea40 000e 	orr.w	r0, r0, lr
 80045e2:	fa21 f102 	lsr.w	r1, r1, r2
 80045e6:	4414      	add	r4, r2
 80045e8:	e6c1      	b.n	800436e <__adddf3+0xe6>
 80045ea:	bf00      	nop

080045ec <__aeabi_d2f>:
 80045ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80045f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80045f4:	bf24      	itt	cs
 80045f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80045fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80045fe:	d90d      	bls.n	800461c <__aeabi_d2f+0x30>
 8004600:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004604:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004608:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800460c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004610:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004614:	bf08      	it	eq
 8004616:	f020 0001 	biceq.w	r0, r0, #1
 800461a:	4770      	bx	lr
 800461c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004620:	d121      	bne.n	8004666 <__aeabi_d2f+0x7a>
 8004622:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004626:	bfbc      	itt	lt
 8004628:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800462c:	4770      	bxlt	lr
 800462e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004632:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004636:	f1c2 0218 	rsb	r2, r2, #24
 800463a:	f1c2 0c20 	rsb	ip, r2, #32
 800463e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004642:	fa20 f002 	lsr.w	r0, r0, r2
 8004646:	bf18      	it	ne
 8004648:	f040 0001 	orrne.w	r0, r0, #1
 800464c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004650:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004654:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004658:	ea40 000c 	orr.w	r0, r0, ip
 800465c:	fa23 f302 	lsr.w	r3, r3, r2
 8004660:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004664:	e7cc      	b.n	8004600 <__aeabi_d2f+0x14>
 8004666:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800466a:	d107      	bne.n	800467c <__aeabi_d2f+0x90>
 800466c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004670:	bf1e      	ittt	ne
 8004672:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004676:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800467a:	4770      	bxne	lr
 800467c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004680:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004684:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop

0800468c <__libc_init_array>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <__libc_init_array+0x3c>)
 8004690:	4c0e      	ldr	r4, [pc, #56]	; (80046cc <__libc_init_array+0x40>)
 8004692:	1ae4      	subs	r4, r4, r3
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	2500      	movs	r5, #0
 8004698:	461e      	mov	r6, r3
 800469a:	42a5      	cmp	r5, r4
 800469c:	d004      	beq.n	80046a8 <__libc_init_array+0x1c>
 800469e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046a2:	4798      	blx	r3
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7f8      	b.n	800469a <__libc_init_array+0xe>
 80046a8:	f7fd f98a 	bl	80019c0 <_init>
 80046ac:	4c08      	ldr	r4, [pc, #32]	; (80046d0 <__libc_init_array+0x44>)
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <__libc_init_array+0x48>)
 80046b0:	1ae4      	subs	r4, r4, r3
 80046b2:	10a4      	asrs	r4, r4, #2
 80046b4:	2500      	movs	r5, #0
 80046b6:	461e      	mov	r6, r3
 80046b8:	42a5      	cmp	r5, r4
 80046ba:	d004      	beq.n	80046c6 <__libc_init_array+0x3a>
 80046bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046c0:	4798      	blx	r3
 80046c2:	3501      	adds	r5, #1
 80046c4:	e7f8      	b.n	80046b8 <__libc_init_array+0x2c>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	20000204 	.word	0x20000204
 80046cc:	20000204 	.word	0x20000204
 80046d0:	20000204 	.word	0x20000204
 80046d4:	20000204 	.word	0x20000204

080046d8 <memcpy>:
 80046d8:	b510      	push	{r4, lr}
 80046da:	1e43      	subs	r3, r0, #1
 80046dc:	440a      	add	r2, r1
 80046de:	4291      	cmp	r1, r2
 80046e0:	d004      	beq.n	80046ec <memcpy+0x14>
 80046e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ea:	e7f8      	b.n	80046de <memcpy+0x6>
 80046ec:	bd10      	pop	{r4, pc}

080046ee <memset>:
 80046ee:	4402      	add	r2, r0
 80046f0:	4603      	mov	r3, r0
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d002      	beq.n	80046fc <memset+0xe>
 80046f6:	f803 1b01 	strb.w	r1, [r3], #1
 80046fa:	e7fa      	b.n	80046f2 <memset+0x4>
 80046fc:	4770      	bx	lr
	...

08004700 <g_xmc_vadc_group_array>:
 8004700:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

08004710 <PWM_SVM_0_PhUHighPin>:
 8004710:	8000 4802 0003 0000                         ...H....

08004718 <PWM_SVM_0_PhULowPin>:
 8004718:	8200 4802 000e 0000                         ...H....

08004720 <PWM_SVM_0_PhVHighPin>:
 8004720:	8000 4802 0004 0000                         ...H....

08004728 <PWM_SVM_0_PhVLowPin>:
 8004728:	8200 4802 000f 0000                         ...H....

08004730 <PWM_SVM_0_PhWHighPin>:
 8004730:	8000 4802 0006 0000                         ...H....

08004738 <PWM_SVM_0_PhWLowPin>:
 8004738:	8000 4802 000b 0000                         ...H....

08004740 <PWM_SVM_0_PhUHiOutPinConf>:
 8004740:	0098 0000 0000 0001 0000 0000               ............

0800474c <PWM_SVM_0_PhULoOutPinConf>:
 800474c:	0098 0000 0000 0001 0000 0000               ............

08004758 <PWM_SVM_0_PhVHiOutPinConf>:
 8004758:	0098 0000 0000 0001 0000 0000               ............

08004764 <PWM_SVM_0_PhVLoOutPinConf>:
 8004764:	0098 0000 0000 0001 0000 0000               ............

08004770 <PWM_SVM_0_PhWHiOutPinConf>:
 8004770:	0098 0000 0000 0001 0000 0000               ............

0800477c <PWM_SVM_0_PhWLoOutPinConf>:
 800477c:	0098 0000 0000 0001 0000 0000               ............

08004788 <PWM_SVM_0_InverterPin>:
 8004788:	8500 4802 0000 0000                         ...H....

08004790 <PWM_SVM_0_InvPinConf>:
 8004790:	0080 0000 0000 0001 0000 0000               ............

0800479c <PWM_SVM_0_TrapPin>:
 800479c:	8000 4802 0007 0000                         ...H....

080047a4 <PWM_SVM_0_TrapPinConf>:
 80047a4:	0000 0000 0000 0001 0000 0000               ............

080047b0 <PWM_SVM_0_TrapConfig>:
 80047b0:	0000 0001                                   ....

080047b4 <PWM_SVM_0_PhU>:
 80047b4:	0300 4002 0002 0000                         ...@....

080047bc <PWM_SVM_0_PhV>:
 80047bc:	0200 4002 0001 0000                         ...@....

080047c4 <PWM_SVM_0_PhW>:
 80047c4:	0400 4002 0003 0000                         ...@....

080047cc <PWM_SVM_0_CurrentTrig>:
 80047cc:	0100 4002 0000 0000                         ...@....

080047d4 <PWM_SVM_0_StartConfig>:
 80047d4:	0107 0000                                   ....

080047d8 <PWM_SVM_0_TimerInitHandle>:
 80047d8:	0001 0000 0000 0000 0014 0000 0001 0000     ................

080047e8 <PWM_SVM_0_TimerInit_CurrentTrig>:
 80047e8:	0001 2000 000f 0000 0000 0000 0001 0000     ... ............

080047f8 <PWM_SVM_0_AppConfig>:
 80047f8:	023c 4002 043c 4002 0000 0100 0000 0100     <..@<..@........
 8004808:	0000 0102 0101 0001 04b0 0000 8700 0393     ................
 8004818:	0100 0000 1110 0000 0000 0000 0000 0000     ................
	...
 8004830:	c380 01c9 0393 0000 0000 061a 0000 0100     ................
 8004840:	0000 0000                                   ....

08004844 <Sinus60_tab>:
 8004844:	0000 0021 0043 0064 0086 00a7 00c9 00ea     ..!.C.d.........
 8004854:	010c 012d 014f 0170 0192 01b3 01d5 01f6     ..-.O.p.........
 8004864:	0218 0239 025b 027c 029e 02bf 02e1 0302     ..9.[.|.........
 8004874:	0324 0345 0367 0388 03aa 03cb 03ed 040e     $.E.g...........
 8004884:	0430 0451 0473 0494 04b6 04d7 04f9 051a     0.Q.s...........
 8004894:	053b 055d 057e 05a0 05c1 05e3 0604 0626     ;.].~.........&.
 80048a4:	0647 0669 068a 06ac 06cd 06ef 0710 0732     G.i...........2.
 80048b4:	0753 0774 0796 07b7 07d9 07fa 081c 083d     S.t...........=.
 80048c4:	085f 0880 08a1 08c3 08e4 0906 0927 0949     _...........'.I.
 80048d4:	096a 098b 09ad 09ce 09f0 0a11 0a32 0a54     j...........2.T.
 80048e4:	0a75 0a97 0ab8 0ad9 0afb 0b1c 0b3e 0b5f     u...........>._.
 80048f4:	0b80 0ba2 0bc3 0be4 0c06 0c27 0c49 0c6a     ..........'.I.j.
 8004904:	0c8b 0cad 0cce 0cef 0d11 0d32 0d53 0d75     ..........2.S.u.
 8004914:	0d96 0db7 0dd9 0dfa 0e1b 0e3c 0e5e 0e7f     ..........<.^...
 8004924:	0ea0 0ec2 0ee3 0f04 0f25 0f47 0f68 0f89     ........%.G.h...
 8004934:	0fab 0fcc 0fed 100e 1030 1051 1072 1093     ........0.Q.r...
 8004944:	10b4 10d6 10f7 1118 1139 115b 117c 119d     ........9.[.|...
 8004954:	11be 11df 1200 1222 1243 1264 1285 12a6     ......".C.d.....
 8004964:	12c7 12e9 130a 132b 134c 136d 138e 13af     ......+.L.m.....
 8004974:	13d0 13f2 1413 1434 1455 1476 1497 14b8     ......4.U.v.....
 8004984:	14d9 14fa 151b 153c 155d 157e 159f 15c0     ......<.].~.....
 8004994:	15e1 1602 1623 1644 1665 1686 16a7 16c8     ....#.D.e.......
 80049a4:	16e9 170a 172b 174c 176d 178e 17af 17d0     ....+.L.m.......
 80049b4:	17f1 1812 1833 1854 1875 1895 18b6 18d7     ....3.T.u.......
 80049c4:	18f8 1919 193a 195b 197b 199c 19bd 19de     ....:.[.{.......
 80049d4:	19ff 1a20 1a40 1a61 1a82 1aa3 1ac3 1ae4     .. .@.a.........
 80049e4:	1b05 1b26 1b46 1b67 1b88 1ba9 1bc9 1bea     ..&.F.g.........
 80049f4:	1c0b 1c2b 1c4c 1c6d 1c8e 1cae 1ccf 1cef     ..+.L.m.........
 8004a04:	1d10 1d31 1d51 1d72 1d93 1db3 1dd4 1df4     ..1.Q.r.........
 8004a14:	1e15 1e35 1e56 1e77 1e97 1eb8 1ed8 1ef9     ..5.V.w.........
 8004a24:	1f19 1f3a 1f5a 1f7b 1f9b 1fbc 1fdc 1ffd     ..:.Z.{.........
 8004a34:	201d 203d 205e 207e 209f 20bf 20df 2100     . = ^ ~ . . . .!
 8004a44:	2120 2141 2161 2181 21a2 21c2 21e2 2203      !A!a!.!.!.!.!."
 8004a54:	2223 2243 2263 2284 22a4 22c4 22e4 2305     #"C"c".".".".".#
 8004a64:	2325 2345 2365 2386 23a6 23c6 23e6 2406     %#E#e#.#.#.#.#.$
 8004a74:	2426 2447 2467 2487 24a7 24c7 24e7 2507     &$G$g$.$.$.$.$.%
 8004a84:	2527 2547 2567 2587 25a7 25c7 25e7 2607     '%G%g%.%.%.%.%.&
 8004a94:	2627 2647 2667 2687 26a7 26c7 26e7 2707     '&G&g&.&.&.&.&.'
 8004aa4:	2727 2747 2767 2787 27a7 27c6 27e6 2806     ''G'g'.'.'.'.'.(
 8004ab4:	2826 2846 2866 2885 28a5 28c5 28e5 2904     &(F(f(.(.(.(.(.)
 8004ac4:	2924 2944 2964 2983 29a3 29c3 29e2 2a02     $)D)d).).).).).*
 8004ad4:	2a22 2a41 2a61 2a80 2aa0 2ac0 2adf 2aff     "*A*a*.*.*.*.*.*
 8004ae4:	2b1e 2b3e 2b5d 2b7d 2b9c 2bbc 2bdb 2bfb     .+>+]+}+.+.+.+.+
 8004af4:	2c1a 2c3a 2c59 2c79 2c98 2cb8 2cd7 2cf6     .,:,Y,y,.,.,.,.,
 8004b04:	2d16 2d35 2d54 2d74 2d93 2db2 2dd2 2df1     .-5-T-t-.-.-.-.-
 8004b14:	2e10 2e2f 2e4f 2e6e 2e8d 2eac 2ecc 2eeb     ../.O.n.........
 8004b24:	2f0a 2f29 2f48 2f67 2f86 2fa6 2fc5 2fe4     ./)/H/g/././././
 8004b34:	3003 3022 3041 3060 307f 309e 30bd 30dc     .0"0A0`0.0.0.0.0
 8004b44:	30fb 311a 3139 3158 3177 3196 31b4 31d3     .0.191X1w1.1.1.1
 8004b54:	31f2 3211 3230 324f 326d 328c 32ab 32ca     .1.202O2m2.2.2.2
 8004b64:	32e9 3307 3326 3345 3363 3382 33a1 33bf     .2.3&3E3c3.3.3.3
 8004b74:	33de 33fd 341b 343a 3458 3477 3496 34b4     .3.3.4:4X4w4.4.4
 8004b84:	34d3 34f1 3510 352e 354d 356b 358a 35a8     .4.4.5.5M5k5.5.5
 8004b94:	35c6 35e5 3603 3622 3640 365e 367d 369b     .5.5.6"6@6^6}6.6
 8004ba4:	36b9 36d7 36f6 3714 3732 3750 376f 378d     .6.6.6.727P7o7.7
 8004bb4:	37ab 37c9 37e7 3806 3824 3842 3860 387e     .7.7.7.8$8B8`8~8
 8004bc4:	389c 38ba 38d8 38f6 3914 3932 3950 396e     .8.8.8.8.929P9n9
 8004bd4:	398c 39aa 39c8 39e6 3a04 3a21 3a3f 3a5d     .9.9.9.9.:!:?:]:
 8004be4:	3a7b 3a99 3ab6 3ad4 3af2 3b10 3b2d 3b4b     {:.:.:.:.:.;-;K;
 8004bf4:	3b69 3b86 3ba4 3bc2 3bdf 3bfd 3c1b 3c38     i;.;.;.;.;.;.<8<
 8004c04:	3c56 3c73 3c91 3cae 3ccc 3ce9 3d07 3d24     V<s<.<.<.<.<.=$=
 8004c14:	3d42 3d5f 3d7c 3d9a 3db7 3dd5 3df2 3e0f     B=_=|=.=.=.=.=.>
 8004c24:	3e2c 3e4a 3e67 3e84 3ea2 3ebf 3edc 3ef9     ,>J>g>.>.>.>.>.>
 8004c34:	3f16 3f33 3f51 3f6e 3f8b 3fa8 3fc5 3fe2     .?3?Q?n?.?.?.?.?
 8004c44:	3fff 401c 4039 4056 4073 4090 40ad 40ca     .?.@9@V@s@.@.@.@
 8004c54:	40e7 4103 4120 413d 415a 4177 4194 41b0     .@.A A=AZAwA.A.A
 8004c64:	41cd 41ea 4207 4223 4240 425d 4279 4296     .A.A.B#B@B]ByB.B
 8004c74:	42b2 42cf 42ec 4308 4325 4341 435e 437a     .B.B.B.C%CAC^CzC
 8004c84:	4397 43b3 43d0 43ec 4408 4425 4441 445d     .C.C.C.C.D%DAD]D
 8004c94:	447a 4496 44b2 44cf 44eb 4507 4523 453f     zD.D.D.D.D.E#E?E
 8004ca4:	455c 4578 4594 45b0 45cc 45e8 4604 4620     \ExE.E.E.E.E.F F
 8004cb4:	463c 4658 4674 4690 46ac 46c8 46e4 4700     <FXFtF.F.F.F.F.G
 8004cc4:	471c 4738 4754 476f 478b 47a7 47c3 47de     .G8GTGoG.G.G.G.G
 8004cd4:	47fa 4816 4832 484d 4869 4884 48a0 48bc     .G.H2HMHiH.H.H.H
 8004ce4:	48d7 48f3 490e 492a 4945 4961 497c 4998     .H.H.I*IEIaI|I.I
 8004cf4:	49b3 49ce 49ea 4a05 4a20 4a3c 4a57 4a72     .I.I.I.J J<JWJrJ
 8004d04:	4a8e 4aa9 4ac4 4adf 4afa 4b15 4b31 4b4c     .J.J.J.J.J.K1KLK
 8004d14:	4b67 4b82 4b9d 4bb8 4bd3 4bee 4c09 4c24     gK.K.K.K.K.K.L$L
 8004d24:	4c3f 4c5a 4c75 4c8f 4caa 4cc5 4ce0 4cfb     ?LZLuL.L.L.L.L.L
 8004d34:	4d15 4d30 4d4b 4d66 4d80 4d9b 4db6 4dd0     .M0MKMfM.M.M.M.M
 8004d44:	4deb 4e05 4e20 4e3a 4e55 4e6f 4e8a 4ea4     .M.N N:NUNoN.N.N
 8004d54:	4ebf 4ed9 4ef4 4f0e 4f28 4f43 4f5d 4f77     .N.N.N.O(OCO]OwO
 8004d64:	4f91 4fac 4fc6 4fe0 4ffa 5014 502f 5049     .O.O.O.O.O.P/PIP
 8004d74:	5063 507d 5097 50b1 50cb 50e5 50ff 5119     cP}P.P.P.P.P.P.Q
 8004d84:	5133 514d 5166 5180 519a 51b4 51ce 51e7     3QMQfQ.Q.Q.Q.Q.Q
 8004d94:	5201 521b 5235 524e 5268 5282 529b 52b5     .R.R5RNRhR.R.R.R
 8004da4:	52ce 52e8 5301 531b 5334 534e 5367 5381     .R.R.S.S4SNSgS.S
 8004db4:	539a 53b3 53cd 53e6 53ff 5419 5432 544b     .S.S.S.S.S.T2TKT
 8004dc4:	5464 547d 5497 54b0 54c9 54e2 54fb 5514     dT}T.T.T.T.T.T.U
 8004dd4:	552d 5546 555f 5578 5591 55aa 55c3 55dc     -UFU_UxU.U.U.U.U
 8004de4:	55f4 560d 5626 563f 5658 5670 5689 56a2     .U.V&V?VXVpV.V.V
 8004df4:	56ba 56d3 56ec 5704 571d 5735 574e 5766     .V.V.V.W.W5WNWfW
 8004e04:	577f 5797 57b0 57c8 57e0 57f9 5811 5829     .W.W.W.W.W.W.X)X
 8004e14:	5842 585a 5872 588a 58a3 58bb 58d3 58eb     BXZXrX.X.X.X.X.X
 8004e24:	5903 591b 5933 594b 5963 597b 5993 59ab     .Y.Y3YKYcY{Y.Y.Y
 8004e34:	59c3 59db 59f3 5a0a 5a22 5a3a 5a52 5a6a     .Y.Y.Y.Z"Z:ZRZjZ
 8004e44:	5a81 5a99 5ab1 5ac8 5ae0 5af7 5b0f 5b27     .Z.Z.Z.Z.Z.Z.['[
 8004e54:	5b3e 5b56 5b6d 5b84 5b9c 5bb3 5bcb 5be2     >[V[m[.[.[.[.[.[
 8004e64:	5bf9 5c11 5c28 5c3f 5c56 5c6d 5c85 5c9c     .[.\(\?\V\m\.\.\
 8004e74:	5cb3 5cca 5ce1 5cf8 5d0f 5d26 5d3d 5d54     .\.\.\.\.]&]=]T]
 8004e84:	5d6b 5d82 5d99 5db0 5dc6 5ddd 5df4 5e0b     k].].].].].].].^
 8004e94:	5e21 5e38 5e4f 5e65 5e7c 5e93 5ea9 5ec0     !^8^O^e^|^.^.^.^
 8004ea4:	5ed6 5eed 5f03 5f1a 5f30 5f46 5f5d 5f73     .^.^._._0_F_]_s_
 8004eb4:	5f89 5fa0 5fb6 5fcc 5fe2 5ff9 600f 6025     ._._._._._._.`%`
 8004ec4:	603b 6051 6067 607d 6093 60a9 60bf 60d5     ;`Q`g`}`.`.`.`.`
 8004ed4:	60eb 6101 6117 612c 6142 6158 616e 6184     .`.a.a,aBaXana.a
 8004ee4:	6199 61af 61c5 61da 61f0 6205 621b 6230     .a.a.a.a.a.b.b0b
 8004ef4:	6246 625b 6271 6286 629b 62b1 62c6 62db     Fb[bqb.b.b.b.b.b
 8004f04:	62f1 6306 631b 6330 6346 635b 6370 6385     .b.c.c0cFc[cpc.c
 8004f14:	639a 63af 63c4 63d9 63ee 6403 6418 642d     .c.c.c.c.c.d.d-d
 8004f24:	6441 6456 646b 6480 6495 64a9 64be 64d3     AdVdkd.d.d.d.d.d
 8004f34:	64e7 64fc 6510 6525 6539 654e 6562 6577     .d.d.e%e9eNebewe
 8004f44:	658b 65a0 65b4 65c8 65dd 65f1 6605 6619     .e.e.e.e.e.e.f.f
 8004f54:	662e 6642 6656 666a 667e 6692 66a6 66ba     .fBfVfjf~f.f.f.f
 8004f64:	66ce 66e2 66f6 670a 671e 6732 6745 6759     .f.f.f.g.g2gEgYg
 8004f74:	676d 6781 6794 67a8 67bc 67cf 67e3 67f6     mg.g.g.g.g.g.g.g
 8004f84:	680a 681e 6831 6844 6858 686b 687f 6892     .h.h1hDhXhkh.h.h
 8004f94:	68a5 68b9 68cc 68df 68f2 6905 6919 692c     .h.h.h.h.h.i.i,i
 8004fa4:	693f 6952 6965 6978 698b 699e 69b1 69c4     ?iRieixi.i.i.i.i
 8004fb4:	69d6 69e9 69fc 6a0f 6a22 6a34 6a47 6a5a     .i.i.i.j"j4jGjZj
 8004fc4:	6a6c 6a7f 6a91 6aa4 6ab6 6ac9 6adb 6aee     lj.j.j.j.j.j.j.j
 8004fd4:	6b00 6b13 6b25 6b37 6b4a 6b5c 6b6e 6b80     .k.k%k7kJk\knk.k
 8004fe4:	6b92 6ba5 6bb7 6bc9 6bdb 6bed 6bff 6c11     .k.k.k.k.k.k.k.l
 8004ff4:	6c23 6c35 6c47 6c58 6c6a 6c7c 6c8e 6ca0     #l5lGlXljl|l.l.l
 8005004:	6cb1 6cc3 6cd5 6ce6 6cf8 6d09 6d1b 6d2c     .l.l.l.l.l.m.m,m
 8005014:	6d3e 6d4f 6d61 6d72 6d84 6d95 6da6 6db7     >mOmamrm.m.m.m.m
 8005024:	6dc9 6dda 6deb 6dfc 6e0d 6e1e 6e30 6e41     .m.m.m.m.n.n0nAn
 8005034:	6e52 6e63 6e73 6e84 6e95 6ea6 6eb7 6ec8     Rncnsn.n.n.n.n.n
 8005044:	6ed9 0000                                   .n..

08005048 <STATUS_DISABLE>:
 8005048:	4000 4004 8100 4802 0000 0000 0000 0000     .@.@...H........
	...
 8005060:	0105 0000 3f05 0200 0200 0000               .....?......

0800506c <CONTROL_LOOP>:
 800506c:	3c38 0000                                   8<..

08005070 <ACQUISITION_LOOP>:
 8005070:	3f39 0100                                   9?..

08005074 <group_init_handle0>:
	...

08005088 <group_init_handle1>:
	...

0800509c <group_init_handle2>:
	...

080050b0 <group_init_handle3>:
	...

080050c4 <global_config>:
 80050c4:	0000 0000 0003 0000 0000 0000 0000 0000     ................
	...

080050dc <sinTable_f32>:
 80050dc:	0000 0000 0e92 3c49 0ab1 3cc9 c32b 3d16     ......I<...<+..=
 80050ec:	fb2e 3d48 2b75 3d7b a904 3d96 b680 3daf     ..H=u+{=...=...=
 80050fc:	bd36 3dc8 bc2f 3de1 b273 3dfa cf87 3e09     6..=/..=s..=...>
 800510c:	4083 3e16 abb5 3e22 10a2 3e2f 6ecf 3e3b     .@.>..">../>.n;>
 800511c:	c5c2 3e47 1501 3e54 5c13 3e60 9a7f 3e6c     ..G>..T>.\`>..l>
 800512c:	cfcc 3e78 7dc0 3e82 8e93 3e88 9a22 3e8e     ..x>.}.>...>"..>
 800513c:	a032 3e94 a086 3e9a 9ae5 3ea0 8f12 3ea6     2..>...>...>...>
 800514c:	7cd4 3eac 63ef 3eb2 442a 3eb8 1d49 3ebe     .|.>.c.>*D.>I..>
 800515c:	ef15 3ec3 b953 3ec9 7bca 3ecf 3641 3ed5     ...>S..>.{.>A6.>
 800516c:	e880 3eda 924f 3ee0 3375 3ee6 cbbb 3eeb     ...>O..>u3.>...>
 800517c:	5aea 3ef1 e0cb 3ef6 5d27 3efc e7e4 3f00     .Z.>...>'].>...?
 800518c:	9c3d 3f03 4b82 3f06 f59b 3f08 9a6b 3f0b     =..?.K.?...?k..?
 800519c:	39da 3f0e d3cd 3f10 682a 3f13 f6d9 3f15     .9.?...?*h.?...?
 80051ac:	7fc0 3f18 02c6 3f1b 7fd1 3f1d f6cb 3f1f     ...?...?...?...?
 80051bc:	6799 3f22 d225 3f24 3656 3f27 9415 3f29     .g"?%.$?V6'?..)?
 80051cc:	eb4a 3f2b 3bde 3f2e 85bb 3f30 c8c9 3f32     J.+?.;.?..0?..2?
 80051dc:	04f3 3f35 3a23 3f37 6842 3f39 8f3b 3f3b     ..5?#:7?Bh9?;.;?
 80051ec:	aef9 3f3d c767 3f3f d870 3f41 e201 3f43     ..=?g.??p.A?..C?
 80051fc:	e403 3f45 de65 3f47 d112 3f49 bbf8 3f4b     ..E?e.G?..I?..K?
 800520c:	9f02 3f4d 7a20 3f4f 4d3d 3f51 1849 3f53     ..M? zO?=MQ?I.S?
 800521c:	db31 3f54 95e5 3f56 4853 3f58 f26a 3f59     1.T?..V?SHX?j.Y?
 800522c:	941a 3f5b 2d53 3f5d be05 3f5e 4621 3f60     ..[?S-]?..^?!F`?
 800523c:	c597 3f61 3c5a 3f63 aa59 3f64 0f88 3f66     ..a?Z<c?Y.d?..f?
 800524c:	6bd8 3f67 bf3c 3f68 09a7 3f6a 4b0c 3f6b     .kg?<.h?..j?.Kk?
 800525c:	835e 3f6c b293 3f6d d89e 3f6e f573 3f6f     ^.l?..m?..n?s.o?
 800526c:	0908 3f71 1352 3f72 1447 3f73 0bdd 3f74     ..q?R.r?G.s?..t?
 800527c:	fa0b 3f74 dec6 3f75 ba07 3f76 8bc5 3f77     ..t?..u?..v?..w?
 800528c:	53f8 3f78 1298 3f79 c79d 3f79 7302 3f7a     .Sx?..y?..y?.sz?
 800529c:	14be 3f7b accd 3f7b 3b28 3f7c bfc9 3f7c     ..{?..{?(;|?..|?
 80052ac:	3aac 3f7d abcc 3f7d 1323 3f7e 70b0 3f7e     .:}?..}?#.~?.p~?
 80052bc:	c46d 3f7e 0e58 3f7f 4e6d 3f7f 84ab 3f7f     m.~?X..?mN.?...?
 80052cc:	b10f 3f7f d397 3f7f ec43 3f7f fb11 3f7f     ...?...?C..?...?
 80052dc:	0000 3f80 fb11 3f7f ec43 3f7f d397 3f7f     ...?...?C..?...?
 80052ec:	b10f 3f7f 84ab 3f7f 4e6d 3f7f 0e58 3f7f     ...?...?mN.?X..?
 80052fc:	c46d 3f7e 70b0 3f7e 1323 3f7e abcc 3f7d     m.~?.p~?#.~?..}?
 800530c:	3aac 3f7d bfc9 3f7c 3b28 3f7c accd 3f7b     .:}?..|?(;|?..{?
 800531c:	14be 3f7b 7302 3f7a c79d 3f79 1298 3f79     ..{?.sz?..y?..y?
 800532c:	53f8 3f78 8bc5 3f77 ba07 3f76 dec6 3f75     .Sx?..w?..v?..u?
 800533c:	fa0b 3f74 0bdd 3f74 1447 3f73 1352 3f72     ..t?..t?G.s?R.r?
 800534c:	0908 3f71 f573 3f6f d89e 3f6e b293 3f6d     ..q?s.o?..n?..m?
 800535c:	835e 3f6c 4b0c 3f6b 09a7 3f6a bf3c 3f68     ^.l?.Kk?..j?<.h?
 800536c:	6bd8 3f67 0f88 3f66 aa59 3f64 3c5a 3f63     .kg?..f?Y.d?Z<c?
 800537c:	c597 3f61 4621 3f60 be05 3f5e 2d53 3f5d     ..a?!F`?..^?S-]?
 800538c:	941a 3f5b f26a 3f59 4853 3f58 95e5 3f56     ..[?j.Y?SHX?..V?
 800539c:	db31 3f54 1849 3f53 4d3d 3f51 7a20 3f4f     1.T?I.S?=MQ? zO?
 80053ac:	9f02 3f4d bbf8 3f4b d112 3f49 de65 3f47     ..M?..K?..I?e.G?
 80053bc:	e403 3f45 e201 3f43 d870 3f41 c767 3f3f     ..E?..C?p.A?g.??
 80053cc:	aef9 3f3d 8f3b 3f3b 6842 3f39 3a23 3f37     ..=?;.;?Bh9?#:7?
 80053dc:	04f3 3f35 c8c9 3f32 85bb 3f30 3bde 3f2e     ..5?..2?..0?.;.?
 80053ec:	eb4a 3f2b 9415 3f29 3656 3f27 d225 3f24     J.+?..)?V6'?%.$?
 80053fc:	6799 3f22 f6cb 3f1f 7fd1 3f1d 02c6 3f1b     .g"?...?...?...?
 800540c:	7fc0 3f18 f6d9 3f15 682a 3f13 d3cd 3f10     ...?...?*h.?...?
 800541c:	39da 3f0e 9a6b 3f0b f59b 3f08 4b82 3f06     .9.?k..?...?.K.?
 800542c:	9c3d 3f03 e7e4 3f00 5d27 3efc e0cb 3ef6     =..?...?'].>...>
 800543c:	5aea 3ef1 cbbb 3eeb 3375 3ee6 924f 3ee0     .Z.>...>u3.>O..>
 800544c:	e880 3eda 3641 3ed5 7bca 3ecf b953 3ec9     ...>A6.>.{.>S..>
 800545c:	ef15 3ec3 1d49 3ebe 442a 3eb8 63ef 3eb2     ...>I..>*D.>.c.>
 800546c:	7cd4 3eac 8f12 3ea6 9ae5 3ea0 a086 3e9a     .|.>...>...>...>
 800547c:	a032 3e94 9a22 3e8e 8e93 3e88 7dc0 3e82     2..>"..>...>.}.>
 800548c:	cfcc 3e78 9a7f 3e6c 5c13 3e60 1501 3e54     ..x>..l>.\`>..T>
 800549c:	c5c2 3e47 6ecf 3e3b 10a2 3e2f abb5 3e22     ..G>.n;>../>..">
 80054ac:	4083 3e16 cf87 3e09 b273 3dfa bc2f 3de1     .@.>...>s..=/..=
 80054bc:	bd36 3dc8 b680 3daf a904 3d96 2b75 3d7b     6..=...=...=u+{=
 80054cc:	fb2e 3d48 c32b 3d16 0ab1 3cc9 0e92 3c49     ..H=+..=...<..I<
 80054dc:	0000 0000 0e92 bc49 0ab1 bcc9 c32b bd16     ......I.....+...
 80054ec:	fb2e bd48 2b75 bd7b a904 bd96 b680 bdaf     ..H.u+{.........
 80054fc:	bd36 bdc8 bc2f bde1 b273 bdfa cf87 be09     6.../...s.......
 800550c:	4083 be16 abb5 be22 10a2 be2f 6ecf be3b     .@....".../..n;.
 800551c:	c5c2 be47 1501 be54 5c13 be60 9a7f be6c     ..G...T..\`...l.
 800552c:	cfcc be78 7dc0 be82 8e93 be88 9a22 be8e     ..x..}......"...
 800553c:	a032 be94 a086 be9a 9ae5 bea0 8f12 bea6     2...............
 800554c:	7cd4 beac 63ef beb2 442a beb8 1d49 bebe     .|...c..*D..I...
 800555c:	ef15 bec3 b953 bec9 7bca becf 3641 bed5     ....S....{..A6..
 800556c:	e880 beda 924f bee0 3375 bee6 cbbb beeb     ....O...u3......
 800557c:	5aea bef1 e0cb bef6 5d27 befc e7e4 bf00     .Z......']......
 800558c:	9c3d bf03 4b82 bf06 f59b bf08 9a6b bf0b     =....K......k...
 800559c:	39da bf0e d3cd bf10 682a bf13 f6d9 bf15     .9......*h......
 80055ac:	7fc0 bf18 02c6 bf1b 7fd1 bf1d f6cb bf1f     ................
 80055bc:	6799 bf22 d225 bf24 3656 bf27 9415 bf29     .g".%.$.V6'...).
 80055cc:	eb4a bf2b 3bde bf2e 85bb bf30 c8c9 bf32     J.+..;....0...2.
 80055dc:	04f3 bf35 3a23 bf37 6842 bf39 8f3b bf3b     ..5.#:7.Bh9.;.;.
 80055ec:	aef9 bf3d c767 bf3f d870 bf41 e201 bf43     ..=.g.?.p.A...C.
 80055fc:	e403 bf45 de65 bf47 d112 bf49 bbf8 bf4b     ..E.e.G...I...K.
 800560c:	9f02 bf4d 7a20 bf4f 4d3d bf51 1849 bf53     ..M. zO.=MQ.I.S.
 800561c:	db31 bf54 95e5 bf56 4853 bf58 f26a bf59     1.T...V.SHX.j.Y.
 800562c:	941a bf5b 2d53 bf5d be05 bf5e 4621 bf60     ..[.S-]...^.!F`.
 800563c:	c597 bf61 3c5a bf63 aa59 bf64 0f88 bf66     ..a.Z<c.Y.d...f.
 800564c:	6bd8 bf67 bf3c bf68 09a7 bf6a 4b0c bf6b     .kg.<.h...j..Kk.
 800565c:	835e bf6c b293 bf6d d89e bf6e f573 bf6f     ^.l...m...n.s.o.
 800566c:	0908 bf71 1352 bf72 1447 bf73 0bdd bf74     ..q.R.r.G.s...t.
 800567c:	fa0b bf74 dec6 bf75 ba07 bf76 8bc5 bf77     ..t...u...v...w.
 800568c:	53f8 bf78 1298 bf79 c79d bf79 7302 bf7a     .Sx...y...y..sz.
 800569c:	14be bf7b accd bf7b 3b28 bf7c bfc9 bf7c     ..{...{.(;|...|.
 80056ac:	3aac bf7d abcc bf7d 1323 bf7e 70b0 bf7e     .:}...}.#.~..p~.
 80056bc:	c46d bf7e 0e58 bf7f 4e6d bf7f 84ab bf7f     m.~.X...mN......
 80056cc:	b10f bf7f d397 bf7f ec43 bf7f fb11 bf7f     ........C.......
 80056dc:	0000 bf80 fb11 bf7f ec43 bf7f d397 bf7f     ........C.......
 80056ec:	b10f bf7f 84ab bf7f 4e6d bf7f 0e58 bf7f     ........mN..X...
 80056fc:	c46d bf7e 70b0 bf7e 1323 bf7e abcc bf7d     m.~..p~.#.~...}.
 800570c:	3aac bf7d bfc9 bf7c 3b28 bf7c accd bf7b     .:}...|.(;|...{.
 800571c:	14be bf7b 7302 bf7a c79d bf79 1298 bf79     ..{..sz...y...y.
 800572c:	53f8 bf78 8bc5 bf77 ba07 bf76 dec6 bf75     .Sx...w...v...u.
 800573c:	fa0b bf74 0bdd bf74 1447 bf73 1352 bf72     ..t...t.G.s.R.r.
 800574c:	0908 bf71 f573 bf6f d89e bf6e b293 bf6d     ..q.s.o...n...m.
 800575c:	835e bf6c 4b0c bf6b 09a7 bf6a bf3c bf68     ^.l..Kk...j.<.h.
 800576c:	6bd8 bf67 0f88 bf66 aa59 bf64 3c5a bf63     .kg...f.Y.d.Z<c.
 800577c:	c597 bf61 4621 bf60 be05 bf5e 2d53 bf5d     ..a.!F`...^.S-].
 800578c:	941a bf5b f26a bf59 4853 bf58 95e5 bf56     ..[.j.Y.SHX...V.
 800579c:	db31 bf54 1849 bf53 4d3d bf51 7a20 bf4f     1.T.I.S.=MQ. zO.
 80057ac:	9f02 bf4d bbf8 bf4b d112 bf49 de65 bf47     ..M...K...I.e.G.
 80057bc:	e403 bf45 e201 bf43 d870 bf41 c767 bf3f     ..E...C.p.A.g.?.
 80057cc:	aef9 bf3d 8f3b bf3b 6842 bf39 3a23 bf37     ..=.;.;.Bh9.#:7.
 80057dc:	04f3 bf35 c8c9 bf32 85bb bf30 3bde bf2e     ..5...2...0..;..
 80057ec:	eb4a bf2b 9415 bf29 3656 bf27 d225 bf24     J.+...).V6'.%.$.
 80057fc:	6799 bf22 f6cb bf1f 7fd1 bf1d 02c6 bf1b     .g".............
 800580c:	7fc0 bf18 f6d9 bf15 682a bf13 d3cd bf10     ........*h......
 800581c:	39da bf0e 9a6b bf0b f59b bf08 4b82 bf06     .9..k........K..
 800582c:	9c3d bf03 e7e4 bf00 5d27 befc e0cb bef6     =.......']......
 800583c:	5aea bef1 cbbb beeb 3375 bee6 924f bee0     .Z......u3..O...
 800584c:	e880 beda 3641 bed5 7bca becf b953 bec9     ....A6...{..S...
 800585c:	ef15 bec3 1d49 bebe 442a beb8 63ef beb2     ....I...*D...c..
 800586c:	7cd4 beac 8f12 bea6 9ae5 bea0 a086 be9a     .|..............
 800587c:	a032 be94 9a22 be8e 8e93 be88 7dc0 be82     2..."........}..
 800588c:	cfcc be78 9a7f be6c 5c13 be60 1501 be54     ..x...l..\`...T.
 800589c:	c5c2 be47 6ecf be3b 10a2 be2f abb5 be22     ..G..n;.../...".
 80058ac:	4083 be16 cf87 be09 b273 bdfa bc2f bde1     .@......s.../...
 80058bc:	bd36 bdc8 b680 bdaf a904 bd96 2b75 bd7b     6...........u+{.
 80058cc:	fb2e bd48 c32b bd16 0ab1 bcc9 0e92 bc49     ..H.+.........I.
 80058dc:	0000 8000 0250 0104 0000 0001 0000 0000     ....P...........
 80058ec:	0000 0001 0101 0101                         ........

080058f4 <ADC_QUEUE_0_reqsrc_config_0>:
	...

08005904 <ADC_QUEUE_0_init_config_0>:
	...

08005910 <group_ptrs>:
 8005910:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

08005920 <ADC_CURRENT_A_ch_config>:
 8005920:	0000 002f 0000 0000 ff01 0000               ../.........

0800592c <ADC_CURRENT_A_res_config>:
 800592c:	0000 0000                                   ....

08005930 <ADC_CURRENT_A_handle>:
 8005930:	5920 0800 592c 0800 0700 0000                Y..,Y......

0800593c <ADC_CURRENT_B_ch_config>:
 800593c:	0000 0024 0000 0000 ff01 0000               ..$.........

08005948 <ADC_CURRENT_B_res_config>:
 8005948:	0000 0000                                   ....

0800594c <ADC_CURRENT_B_handle>:
 800594c:	593c 0800 5948 0800 0500 0000               <Y..HY......

08005958 <ADC_CURRENT_C_ch_config>:
 8005958:	0000 0025 0000 0000 ff01 0000               ..%.........

08005964 <ADC_CURRENT_C_res_config>:
 8005964:	0000 0000                                   ....

08005968 <ADC_CURRENT_C_handle>:
 8005968:	5958 0800 5964 0800 0300 0000               XY..dY......

08005974 <ADC_V_DC_ch_config>:
 8005974:	0000 0028 0000 0000 ff01 0000               ..(.........

08005980 <ADC_V_DC_res_config>:
 8005980:	0000 0000                                   ....

08005984 <ADC_V_DC_handle>:
 8005984:	5974 0800 5980 0800 0100 0000               tY...Y......

08005990 <ADC_RPM_COS_ch_config>:
 8005990:	0000 0029 0000 0000 ff01 0000               ..).........

0800599c <ADC_RPM_COS_res_config>:
 800599c:	0000 0000                                   ....

080059a0 <ADC_RPM_COS_handle>:
 80059a0:	5990 0800 599c 0800 0000 0000               .Y...Y......

080059ac <ADC_RPM_SIN_ch_config>:
 80059ac:	0000 0026 0000 0000 ff01 0000               ..&.........

080059b8 <ADC_RPM_SIN_res_config>:
 80059b8:	0000 0000                                   ....

080059bc <ADC_RPM_SIN_handle>:
 80059bc:	59ac 0800 59b8 0800 0400 0000               .Y...Y......

080059c8 <ADC_TEMP_SENS_MOT_ch_config>:
 80059c8:	0000 002b 0000 0000 ff01 0000               ..+.........

080059d4 <ADC_TEMP_SENS_MOT_res_config>:
 80059d4:	0000 0000                                   ....

080059d8 <ADC_TEMP_SENS_MOT_handle>:
 80059d8:	59c8 0800 59d4 0800 0200 0000               .Y...Y......

080059e4 <ADC_TEMP_SENS_IGBT_ch_config>:
 80059e4:	0000 002c 0000 0000 ff01 0000               ..,.........

080059f0 <ADC_TEMP_SENS_IGBT_res_config>:
 80059f0:	0000 0000                                   ....

080059f4 <ADC_TEMP_SENS_IGBT_handle>:
 80059f4:	59e4 0800 59f0 0800 0600 0000               .Y...Y......

08005a00 <ADC_CURRENT_A_queue_entry_0>:
 8005a00:	0000 0000 0700 0100 0000 0000               ............

08005a0c <ADC_CURRENT_B_queue_entry_1>:
 8005a0c:	0000 0000 0501 0100 0000 0000               ............

08005a18 <ADC_CURRENT_C_queue_entry_2>:
 8005a18:	0000 0000 0302 0100 0000 0000               ............

08005a24 <ADC_V_DC_queue_entry_3>:
 8005a24:	0000 0000 0103 0100 0000 0000               ............

08005a30 <ADC_RPM_COS_queue_entry_4>:
 8005a30:	0000 0000 0004 0100 0000 0000               ............

08005a3c <ADC_RPM_SIN_queue_entry_5>:
 8005a3c:	0000 0000 0405 0100 0000 0000               ............

08005a48 <ADC_TEMP_SENS_MOT_queue_entry_6>:
 8005a48:	0000 0000 0206 0100 0000 0000               ............

08005a54 <ADC_TEMP_SENS_IGBT_queue_entry_7>:
 8005a54:	0000 0000 0607 0100 0000 0000               ............

08005a60 <ADC>:
 8005a60:	01d4 2000 01b4 2000 0000 0000 0194 2000     ... ... ....... 
 8005a70:	01f4 2000 0002 0808 0001 0000               ... ........

08005a7c <FIR_CURRENT_pCoeffs>:
 8005a7c:	c3ed 3b81 de93 baa1 c437 baf3 951a bb15     ...;....7.......
 8005a8c:	2240 bb00 c494 ba3c 510c 3a87 fea5 3b22     @"....<..Q.:..";
 8005a9c:	68bd 3b37 5ab2 3ace c5d9 ba53 9adb bb55     .h7;.Z.:..S...U.
 8005aac:	ca42 bb91 ee2b bb64 2c35 ba08 58cf 3b53     B...+.d.5,...XS;
 8005abc:	049a 3bc0 920c 3bbd a589 3b29 53fe bb26     ...;...;..);.S&.
 8005acc:	3126 bbeb c371 bc0f e06b bbc3 683d 39f1     &1..q...k...=h.9
 8005adc:	6c40 3bfc a3e2 3c45 e56f 3c2f fe14 3b62     @l.;..E<o./<..b;
 8005aec:	024f bbe3 afa1 bc7d 099c bc8e 028f bc28     O.....}.......(.
 8005afc:	a880 3b75 b682 3c98 b15e 3cda afda 3cb4     ..u;...<^..<...<
 8005b0c:	7d83 3b85 d4ae bcad d958 bd2d c5e2 bd3f     .}.;....X.-...?.
 8005b1c:	992f bccf 94f4 3cbb 8d32 3db6 c7ab 3e20     /......<2..=.. >
 8005b2c:	b9cd 3e54 f34c 3e67 b9cd 3e54 c7ab 3e20     ..T>L.g>..T>.. >
 8005b3c:	8d32 3db6 94f4 3cbb 992f bccf c5e2 bd3f     2..=...</.....?.
 8005b4c:	d958 bd2d d4ae bcad 7d83 3b85 afda 3cb4     X.-......}.;...<
 8005b5c:	b15e 3cda b682 3c98 a880 3b75 028f bc28     ^..<...<..u;..(.
 8005b6c:	099c bc8e afa1 bc7d 024f bbe3 fe14 3b62     ......}.O.....b;
 8005b7c:	e56f 3c2f a3e2 3c45 6c40 3bfc 683d 39f1     o./<..E<@l.;=h.9
 8005b8c:	e06b bbc3 c371 bc0f 3126 bbeb 53fe bb26     k...q...&1...S&.
 8005b9c:	a589 3b29 920c 3bbd 049a 3bc0 58cf 3b53     ..);...;...;.XS;
 8005bac:	2c35 ba08 ee2b bb64 ca42 bb91 9adb bb55     5,..+.d.B.....U.
 8005bbc:	c5d9 ba53 5ab2 3ace 68bd 3b37 fea5 3b22     ..S..Z.:.h7;..";
 8005bcc:	510c 3a87 c494 ba3c 2240 bb00 951a bb15     .Q.:..<.@"......
 8005bdc:	c437 baf3 de93 baa1 c3ed 3b81               7..........;

Disassembly of section .ram_code:

10000800 <PWM_SVM_lSymCompValUpdate>:
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        (uint16_t)(HandlePtr->v_tb + (uint16_t)((uint16_t) HandlePtr->tb >> (uint16_t) 1) + (uint16_t) HandlePtr->ta));

}
static void PWM_SVM_lSymCompValUpdate(PWM_SVM_t* const HandlePtr)
{
10000800:	b480      	push	{r7}
10000802:	b083      	sub	sp, #12
10000804:	af00      	add	r7, sp, #0
10000806:	6078      	str	r0, [r7, #4]
  /*Update the compare register with appropriate value  based on sector*/
  switch ((HandlePtr->sector & 7U))
10000808:	687b      	ldr	r3, [r7, #4]
1000080a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1000080e:	f003 0307 	and.w	r3, r3, #7
10000812:	2b04      	cmp	r3, #4
10000814:	f200 8086 	bhi.w	10000924 <__initial_sp+0x124>
10000818:	a201      	add	r2, pc, #4	; (adr r2, 10000820 <__initial_sp+0x20>)
1000081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000081e:	bf00      	nop
10000820:	10000835 	.word	0x10000835
10000824:	10000865 	.word	0x10000865
10000828:	10000895 	.word	0x10000895
1000082c:	100008c5 	.word	0x100008c5
10000830:	100008f5 	.word	0x100008f5
    {
    case 0:/*sector 0*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000834:	687b      	ldr	r3, [r7, #4]
10000836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000838:	687a      	ldr	r2, [r7, #4]
1000083a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000083e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
10000840:	687b      	ldr	r3, [r7, #4]
10000842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000844:	687a      	ldr	r2, [r7, #4]
10000846:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000084a:	4611      	mov	r1, r2
1000084c:	687a      	ldr	r2, [r7, #4]
1000084e:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000852:	440a      	add	r2, r1
10000854:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000856:	687b      	ldr	r3, [r7, #4]
10000858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000085a:	687a      	ldr	r2, [r7, #4]
1000085c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000860:	601a      	str	r2, [r3, #0]
       break;
10000862:	e077      	b.n	10000954 <__initial_sp+0x154>
    case 1:/*sector 1*/
      *HandlePtr->phaseu_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->ta);
10000864:	687b      	ldr	r3, [r7, #4]
10000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000868:	687a      	ldr	r2, [r7, #4]
1000086a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000086e:	4611      	mov	r1, r2
10000870:	687a      	ldr	r2, [r7, #4]
10000872:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
10000876:	440a      	add	r2, r1
10000878:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb);
1000087a:	687b      	ldr	r3, [r7, #4]
1000087c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000087e:	687a      	ldr	r2, [r7, #4]
10000880:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000884:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000886:	687b      	ldr	r3, [r7, #4]
10000888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000088a:	687a      	ldr	r2, [r7, #4]
1000088c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000890:	601a      	str	r2, [r3, #0]
       break;
10000892:	e05f      	b.n	10000954 <__initial_sp+0x154>
    case 2:/*sector 2*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
10000894:	687b      	ldr	r3, [r7, #4]
10000896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000898:	687a      	ldr	r2, [r7, #4]
1000089a:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000089e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_tb;
100008a0:	687b      	ldr	r3, [r7, #4]
100008a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008a4:	687a      	ldr	r2, [r7, #4]
100008a6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008aa:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
100008ac:	687b      	ldr	r3, [r7, #4]
100008ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008b0:	687a      	ldr	r2, [r7, #4]
100008b2:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008b6:	4611      	mov	r1, r2
100008b8:	687a      	ldr	r2, [r7, #4]
100008ba:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
100008be:	440a      	add	r2, r1
100008c0:	601a      	str	r2, [r3, #0]
       break;
100008c2:	e047      	b.n	10000954 <__initial_sp+0x154>
    case 3:/*sector 3*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
100008c4:	687b      	ldr	r3, [r7, #4]
100008c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008c8:	687a      	ldr	r2, [r7, #4]
100008ca:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
100008ce:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t)( HandlePtr->v_tb+ HandlePtr->ta);
100008d0:	687b      	ldr	r3, [r7, #4]
100008d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008d4:	687a      	ldr	r2, [r7, #4]
100008d6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008da:	4611      	mov	r1, r2
100008dc:	687a      	ldr	r2, [r7, #4]
100008de:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
100008e2:	440a      	add	r2, r1
100008e4:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
100008e6:	687b      	ldr	r3, [r7, #4]
100008e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008ea:	687a      	ldr	r2, [r7, #4]
100008ec:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008f0:	601a      	str	r2, [r3, #0]
       break;
100008f2:	e02f      	b.n	10000954 <__initial_sp+0x154>
    case 4:/*sector 4*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->tb;
100008f4:	687b      	ldr	r3, [r7, #4]
100008f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008f8:	687a      	ldr	r2, [r7, #4]
100008fa:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008fe:	4611      	mov	r1, r2
10000900:	687a      	ldr	r2, [r7, #4]
10000902:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000906:	440a      	add	r2, r1
10000908:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
1000090a:	687b      	ldr	r3, [r7, #4]
1000090c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000090e:	687a      	ldr	r2, [r7, #4]
10000910:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000914:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
10000916:	687b      	ldr	r3, [r7, #4]
10000918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000091a:	687a      	ldr	r2, [r7, #4]
1000091c:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000920:	601a      	str	r2, [r3, #0]
       break;
10000922:	e017      	b.n	10000954 <__initial_sp+0x154>
    default:/*sector 5*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000924:	687b      	ldr	r3, [r7, #4]
10000926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000928:	687a      	ldr	r2, [r7, #4]
1000092a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000092e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
10000930:	687b      	ldr	r3, [r7, #4]
10000932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000934:	687a      	ldr	r2, [r7, #4]
10000936:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000093a:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->ta;
1000093c:	687b      	ldr	r3, [r7, #4]
1000093e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10000940:	687a      	ldr	r2, [r7, #4]
10000942:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000946:	4611      	mov	r1, r2
10000948:	687a      	ldr	r2, [r7, #4]
1000094a:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1000094e:	440a      	add	r2, r1
10000950:	601a      	str	r2, [r3, #0]
      break;
10000952:	bf00      	nop
    }
}
10000954:	370c      	adds	r7, #12
10000956:	46bd      	mov	sp, r7
10000958:	f85d 7b04 	ldr.w	r7, [sp], #4
1000095c:	4770      	bx	lr
1000095e:	bf00      	nop

10000960 <PWM_SVM_CalCmpValueSym7>:

/**
 * This function calculates the CCU8 slice compare valuefor Symmetric 7-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym7(PWM_SVM_t* const HandlePtr)
{
10000960:	b580      	push	{r7, lr}
10000962:	b082      	sub	sp, #8
10000964:	af00      	add	r7, sp, #0
10000966:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < (uint16_t) HandlePtr->tmin)
10000968:	687b      	ldr	r3, [r7, #4]
1000096a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1000096e:	687b      	ldr	r3, [r7, #4]
10000970:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000974:	429a      	cmp	r2, r3
10000976:	d205      	bcs.n	10000984 <PWM_SVM_CalCmpValueSym7+0x24>
  {
    HandlePtr->ta = (uint16_t) HandlePtr->tmin;
10000978:	687b      	ldr	r3, [r7, #4]
1000097a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000097e:	687b      	ldr	r3, [r7, #4]
10000980:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < (uint16_t) HandlePtr->tmin)
10000984:	687b      	ldr	r3, [r7, #4]
10000986:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
1000098a:	687b      	ldr	r3, [r7, #4]
1000098c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000990:	429a      	cmp	r2, r3
10000992:	d205      	bcs.n	100009a0 <PWM_SVM_CalCmpValueSym7+0x40>
  {
    HandlePtr->tb = (uint16_t) HandlePtr->tmin;
10000994:	687b      	ldr	r3, [r7, #4]
10000996:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000099a:	687b      	ldr	r3, [r7, #4]
1000099c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }

  HandlePtr->v_ta = (uint16_t)(((uint32_t) HandlePtr->period + (uint16_t) HandlePtr->ta) + (uint16_t) HandlePtr->tb)
100009a0:	687b      	ldr	r3, [r7, #4]
100009a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009a6:	b29a      	uxth	r2, r3
100009a8:	687b      	ldr	r3, [r7, #4]
100009aa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
100009ae:	4413      	add	r3, r2
100009b0:	b29a      	uxth	r2, r3
100009b2:	687b      	ldr	r3, [r7, #4]
100009b4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009b8:	4413      	add	r3, r2
100009ba:	b29b      	uxth	r3, r3
100009bc:	085b      	lsrs	r3, r3, #1
100009be:	b29a      	uxth	r2, r3
100009c0:	687b      	ldr	r3, [r7, #4]
100009c2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
                     >> (uint16_t) 1;
  HandlePtr->v_tb = (uint16_t)((uint16_t) HandlePtr->period - ((uint16_t) HandlePtr->ta + (uint16_t) HandlePtr->tb))
100009c6:	687b      	ldr	r3, [r7, #4]
100009c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009cc:	b29a      	uxth	r2, r3
100009ce:	687b      	ldr	r3, [r7, #4]
100009d0:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
100009d4:	687b      	ldr	r3, [r7, #4]
100009d6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009da:	440b      	add	r3, r1
100009dc:	b29b      	uxth	r3, r3
100009de:	1ad3      	subs	r3, r2, r3
100009e0:	b29b      	uxth	r3, r3
100009e2:	085b      	lsrs	r3, r3, #1
100009e4:	b29a      	uxth	r2, r3
100009e6:	687b      	ldr	r3, [r7, #4]
100009e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
100009ec:	6878      	ldr	r0, [r7, #4]
100009ee:	f7ff ff07 	bl	10000800 <PWM_SVM_lSymCompValUpdate>

}
100009f2:	3708      	adds	r7, #8
100009f4:	46bd      	mov	sp, r7
100009f6:	bd80      	pop	{r7, pc}

100009f8 <PWM_SVM_CalCmpValueSym5>:

/**
 * This function calculates the CCU8 slice compare value for Symmetric 5-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym5(PWM_SVM_t* const HandlePtr)
{
100009f8:	b580      	push	{r7, lr}
100009fa:	b082      	sub	sp, #8
100009fc:	af00      	add	r7, sp, #0
100009fe:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < HandlePtr->tmin)
10000a00:	687b      	ldr	r3, [r7, #4]
10000a02:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000a06:	687b      	ldr	r3, [r7, #4]
10000a08:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a0c:	429a      	cmp	r2, r3
10000a0e:	d205      	bcs.n	10000a1c <PWM_SVM_CalCmpValueSym5+0x24>
  {
    HandlePtr->ta = HandlePtr->tmin;
10000a10:	687b      	ldr	r3, [r7, #4]
10000a12:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a16:	687b      	ldr	r3, [r7, #4]
10000a18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < HandlePtr->tmin)
10000a1c:	687b      	ldr	r3, [r7, #4]
10000a1e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
10000a22:	687b      	ldr	r3, [r7, #4]
10000a24:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a28:	429a      	cmp	r2, r3
10000a2a:	d205      	bcs.n	10000a38 <PWM_SVM_CalCmpValueSym5+0x40>
  {
    HandlePtr->tb = HandlePtr->tmin;
10000a2c:	687b      	ldr	r3, [r7, #4]
10000a2e:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a32:	687b      	ldr	r3, [r7, #4]
10000a34:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }
  HandlePtr->v_ta = (uint16_t) HandlePtr->period + 1U;
10000a38:	687b      	ldr	r3, [r7, #4]
10000a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a3e:	b29b      	uxth	r3, r3
10000a40:	3301      	adds	r3, #1
10000a42:	b29a      	uxth	r2, r3
10000a44:	687b      	ldr	r3, [r7, #4]
10000a46:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  HandlePtr->v_tb = ((uint16_t) HandlePtr->period - HandlePtr->ta) - HandlePtr->tb;
10000a4a:	687b      	ldr	r3, [r7, #4]
10000a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a50:	b29a      	uxth	r2, r3
10000a52:	687b      	ldr	r3, [r7, #4]
10000a54:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000a58:	1ad3      	subs	r3, r2, r3
10000a5a:	b29a      	uxth	r2, r3
10000a5c:	687b      	ldr	r3, [r7, #4]
10000a5e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000a62:	1ad3      	subs	r3, r2, r3
10000a64:	b29a      	uxth	r2, r3
10000a66:	687b      	ldr	r3, [r7, #4]
10000a68:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
10000a6c:	6878      	ldr	r0, [r7, #4]
10000a6e:	f7ff fec7 	bl	10000800 <PWM_SVM_lSymCompValUpdate>
}
10000a72:	3708      	adds	r7, #8
10000a74:	46bd      	mov	sp, r7
10000a76:	bd80      	pop	{r7, pc}

10000a78 <PWM_SVM_TimecalcUsingLUT>:
#if(1U == PWM_SVM_IS_LUT_ENABLE)
/*
 * SVM Segment Time calculation using Look up table
 */
void PWM_SVM_TimecalcUsingLUT(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000a78:	b480      	push	{r7}
10000a7a:	b08b      	sub	sp, #44	; 0x2c
10000a7c:	af00      	add	r7, sp, #0
10000a7e:	60f8      	str	r0, [r7, #12]
10000a80:	460b      	mov	r3, r1
10000a82:	607a      	str	r2, [r7, #4]
10000a84:	817b      	strh	r3, [r7, #10]
  uint16_t ta_tb,ta;
  uint32_t Dividend_Sine, Divisor_Sine;        /*Ts x sin(θrel), sin(θrel)+sin(60°-θrel)*/
  XMC_ASSERT("PWM_SVM_lTimecalcUsingLUT:NULL Handle Pointer",
      (HandlePtr != (PWM_SVM_t *)NULL));

  angletemp = (uint32_t)((Angle & (uint32_t)0xFFFFFF) >> 14U) * 6U;
10000a86:	687b      	ldr	r3, [r7, #4]
10000a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
10000a8c:	0b9a      	lsrs	r2, r3, #14
10000a8e:	4613      	mov	r3, r2
10000a90:	005b      	lsls	r3, r3, #1
10000a92:	4413      	add	r3, r2
10000a94:	005b      	lsls	r3, r3, #1
10000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HandlePtr->sector_angle = (uint32_t)(angletemp & (uint32_t) 0x003FF);
10000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000a9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
10000a9e:	68fb      	ldr	r3, [r7, #12]
10000aa0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  HandlePtr->sector = (uint32_t)((angletemp >> 10U) & 7U);
10000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000aa6:	0a9b      	lsrs	r3, r3, #10
10000aa8:	f003 0207 	and.w	r2, r3, #7
10000aac:	68fb      	ldr	r3, [r7, #12]
10000aae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  if ((uint16_t)Amplitude > (HandlePtr->max_amplitude))
10000ab2:	68fb      	ldr	r3, [r7, #12]
10000ab4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ab8:	897a      	ldrh	r2, [r7, #10]
10000aba:	429a      	cmp	r2, r3
10000abc:	d903      	bls.n	10000ac6 <PWM_SVM_TimecalcUsingLUT+0x4e>
  {
    Amplitude = HandlePtr->max_amplitude;
10000abe:	68fb      	ldr	r3, [r7, #12]
10000ac0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ac4:	817b      	strh	r3, [r7, #10]
  }
  HandlePtr->tb = (uint16_t)((Amplitude* Sinus60_tab[1023U - HandlePtr->sector_angle])>> 15U);
10000ac6:	897a      	ldrh	r2, [r7, #10]
10000ac8:	68fb      	ldr	r3, [r7, #12]
10000aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ace:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000ad2:	3303      	adds	r3, #3
10000ad4:	4949      	ldr	r1, [pc, #292]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000ad6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
10000ada:	fb03 f302 	mul.w	r3, r3, r2
10000ade:	13db      	asrs	r3, r3, #15
10000ae0:	b29a      	uxth	r2, r3
10000ae2:	68fb      	ldr	r3, [r7, #12]
10000ae4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  HandlePtr->tb = (uint16_t)((HandlePtr->tb * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000ae8:	68fb      	ldr	r3, [r7, #12]
10000aea:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000aee:	461a      	mov	r2, r3
10000af0:	68fb      	ldr	r3, [r7, #12]
10000af2:	681b      	ldr	r3, [r3, #0]
10000af4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000af8:	fb03 f302 	mul.w	r3, r3, r2
10000afc:	129b      	asrs	r3, r3, #10
10000afe:	b29a      	uxth	r2, r3
10000b00:	68fb      	ldr	r3, [r7, #12]
10000b02:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  HandlePtr->ta = (uint16_t)((Amplitude* Sinus60_tab[HandlePtr->sector_angle])>> 15U);
10000b06:	897b      	ldrh	r3, [r7, #10]
10000b08:	68fa      	ldr	r2, [r7, #12]
10000b0a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b0e:	493b      	ldr	r1, [pc, #236]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b14:	fb02 f303 	mul.w	r3, r2, r3
10000b18:	13db      	asrs	r3, r3, #15
10000b1a:	b29a      	uxth	r2, r3
10000b1c:	68fb      	ldr	r3, [r7, #12]
10000b1e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  HandlePtr->ta = (uint16_t)((HandlePtr->ta * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000b22:	68fb      	ldr	r3, [r7, #12]
10000b24:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000b28:	461a      	mov	r2, r3
10000b2a:	68fb      	ldr	r3, [r7, #12]
10000b2c:	681b      	ldr	r3, [r3, #0]
10000b2e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000b32:	fb03 f302 	mul.w	r3, r3, r2
10000b36:	129b      	asrs	r3, r3, #10
10000b38:	b29a      	uxth	r2, r3
10000b3a:	68fb      	ldr	r3, [r7, #12]
10000b3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ta_tb = HandlePtr->ta + HandlePtr->tb;
10000b40:	68fb      	ldr	r3, [r7, #12]
10000b42:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000b46:	68fb      	ldr	r3, [r7, #12]
10000b48:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000b4c:	4413      	add	r3, r2
10000b4e:	847b      	strh	r3, [r7, #34]	; 0x22
  HandlePtr->t0 = (uint16_t)(HandlePtr->period - ta_tb);
10000b50:	68fb      	ldr	r3, [r7, #12]
10000b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b56:	b29a      	uxth	r2, r3
10000b58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10000b5a:	1ad3      	subs	r3, r2, r3
10000b5c:	b29a      	uxth	r2, r3
10000b5e:	68fb      	ldr	r3, [r7, #12]
10000b60:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  if (ta_tb > (HandlePtr->period))
10000b64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10000b66:	68fb      	ldr	r3, [r7, #12]
10000b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b6c:	429a      	cmp	r2, r3
10000b6e:	d93f      	bls.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
  {
    if (HandlePtr->over_modulation_enable == 1U)
10000b70:	68fb      	ldr	r3, [r7, #12]
10000b72:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
10000b76:	2b01      	cmp	r3, #1
10000b78:	d13a      	bne.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
      /* Above Ta and Tb are not used for SVM PWM.*/

      /* Calculate new T1 and T2 of maximum Vref on SVM Hexagon edges,
       * where T0 = 0 (i.e.: T1+T2 = PERIOD_REG). Relative angle θrel kept the same.
       */
      Dividend_Sine = HandlePtr->period * Sinus60_tab[HandlePtr->sector_angle];
10000b7a:	68fb      	ldr	r3, [r7, #12]
10000b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b80:	68fa      	ldr	r2, [r7, #12]
10000b82:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b86:	491d      	ldr	r1, [pc, #116]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b8c:	fb02 f303 	mul.w	r3, r2, r3
10000b90:	61fb      	str	r3, [r7, #28]
      Divisor_Sine  = Sinus60_tab[HandlePtr->sector_angle] + Sinus60_tab[1023U - HandlePtr->sector_angle];
10000b92:	68fb      	ldr	r3, [r7, #12]
10000b94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000b98:	4a18      	ldr	r2, [pc, #96]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000b9e:	4619      	mov	r1, r3
10000ba0:	68fb      	ldr	r3, [r7, #12]
10000ba2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ba6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000baa:	3303      	adds	r3, #3
10000bac:	4a13      	ldr	r2, [pc, #76]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000bb2:	440b      	add	r3, r1
10000bb4:	61bb      	str	r3, [r7, #24]
      /* Unsigned Div. Dividend << SHIFT_OVERMODULATION, Quotient >> SHIFT_OVERMODULATION, Divisor no shift.*/
      MATH->DIVCON = (0x00008004 | (PWM_SVM_SHIFT_OVERMODULATION << 16U) | (PWM_SVM_SHIFT_OVERMODULATION << 8U));
      MATH->DVD = Dividend_Sine;
      MATH->DVS = Divisor_Sine;
      #else
      ta = (uint16_t)(Dividend_Sine/Divisor_Sine);
10000bb6:	69fa      	ldr	r2, [r7, #28]
10000bb8:	69bb      	ldr	r3, [r7, #24]
10000bba:	fbb2 f3f3 	udiv	r3, r2, r3
10000bbe:	82fb      	strh	r3, [r7, #22]
      #endif
      /*###* CPU computes the following simultaneously when DIV #2 is computing ###*/
      HandlePtr->t0 = 0U;
10000bc0:	68fb      	ldr	r3, [r7, #12]
10000bc2:	2200      	movs	r2, #0
10000bc4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
      ta_tb = (uint16_t)HandlePtr->period;                /* Make sure below T0/2 >= 0.*/
10000bc8:	68fb      	ldr	r3, [r7, #12]
10000bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bce:	847b      	strh	r3, [r7, #34]	; 0x22
      #if defined (MATH)
      /*###* Results of DIV #2 for T2 of Over-Modulation ###*/
      while (MATH->DIVST) continue;          /* Wait if DIV is still running calculation.*/
      ta = MATH->QUOT;     /* Read DIV Quotient result. T2 = Ts x sin(theta) / (sin(theta)+sin(60-theta)).*/
      #endif
      HandlePtr->ta = ta;
10000bd0:	68fb      	ldr	r3, [r7, #12]
10000bd2:	8afa      	ldrh	r2, [r7, #22]
10000bd4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
      /* Ta + Tb = PERIOD_REG for Vref on SVM Hexagon edges.*/
      HandlePtr->tb = (uint16_t)(HandlePtr->period - HandlePtr->ta);
10000bd8:	68fb      	ldr	r3, [r7, #12]
10000bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bde:	b29a      	uxth	r2, r3
10000be0:	68fb      	ldr	r3, [r7, #12]
10000be2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000be6:	1ad3      	subs	r3, r2, r3
10000be8:	b29a      	uxth	r2, r3
10000bea:	68fb      	ldr	r3, [r7, #12]
10000bec:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

    }
  }
}
10000bf0:	372c      	adds	r7, #44	; 0x2c
10000bf2:	46bd      	mov	sp, r7
10000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bf8:	4770      	bx	lr
10000bfa:	bf00      	nop
10000bfc:	08004844 	.word	0x08004844

10000c00 <PWM_SVM_SVMUpdate>:
 * This is the SVM algorithm for sinusoidal commutation.
 * It updates the compare registers of the CCU8 slices as per calculated
 * duty cycle.
 */
void PWM_SVM_SVMUpdate(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000c00:	b580      	push	{r7, lr}
10000c02:	b086      	sub	sp, #24
10000c04:	af00      	add	r7, sp, #0
10000c06:	60f8      	str	r0, [r7, #12]
10000c08:	460b      	mov	r3, r1
10000c0a:	607a      	str	r2, [r7, #4]
10000c0c:	817b      	strh	r3, [r7, #10]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
10000c0e:	68fb      	ldr	r3, [r7, #12]
10000c10:	681b      	ldr	r3, [r3, #0]
10000c12:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_SVM_SVMUpdate:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));

  /*This function calculates segment time ta, tb using CORDIC or LUT as per UI configuration */
  HandlePtr->seg_time_calc_ptr(HandlePtr, (uint16_t) Amplitude, (uint32_t) Angle);
10000c14:	68fb      	ldr	r3, [r7, #12]
10000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10000c1a:	897a      	ldrh	r2, [r7, #10]
10000c1c:	68f8      	ldr	r0, [r7, #12]
10000c1e:	4611      	mov	r1, r2
10000c20:	687a      	ldr	r2, [r7, #4]
10000c22:	4798      	blx	r3
  /*This function calculates and updates compare values in compare register*/
  HandlePtr->svm_schemesel_ptr(HandlePtr);
10000c24:	68fb      	ldr	r3, [r7, #12]
10000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000c2a:	68f8      	ldr	r0, [r7, #12]
10000c2c:	4798      	blx	r3

  /*Enable the shadow transfer for all three slice*/
  HandlePtr->global_ptr->GCSS |= svmptr->shadow_transfer_mask;
10000c2e:	68fb      	ldr	r3, [r7, #12]
10000c30:	685b      	ldr	r3, [r3, #4]
10000c32:	68fa      	ldr	r2, [r7, #12]
10000c34:	6852      	ldr	r2, [r2, #4]
10000c36:	6911      	ldr	r1, [r2, #16]
10000c38:	697a      	ldr	r2, [r7, #20]
10000c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
10000c3c:	430a      	orrs	r2, r1
10000c3e:	611a      	str	r2, [r3, #16]
}
10000c40:	3718      	adds	r7, #24
10000c42:	46bd      	mov	sp, r7
10000c44:	bd80      	pop	{r7, pc}
10000c46:	bf00      	nop
