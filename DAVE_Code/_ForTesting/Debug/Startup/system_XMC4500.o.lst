   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "system_XMC4500.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global SystemCoreClock
  20              	 .section .no_init,"aw",%progbits
  21              	 .align 2
  24              	SystemCoreClock:
  25 0000 00000000 	 .space 4
  26              	 .global g_chipid
  27              	 .align 2
  30              	g_chipid:
  31 0004 00000000 	 .space 16
  31      00000000 
  31      00000000 
  31      00000000 
  32              	 .section .text.delay,"ax",%progbits
  33              	 .align 2
  34              	 .thumb
  35              	 .thumb_func
  37              	delay:
  38              	.LFB133:
  39              	 .file 1 "../Startup/system_XMC4500.c"
   1:../Startup/system_XMC4500.c **** /**************************************************************************************************
   2:../Startup/system_XMC4500.c ****  * @file     system_XMC4500.c
   3:../Startup/system_XMC4500.c ****  * @brief    CMSIS Cortex-M4 Device Peripheral Access Layer Header File for the Infineon XMC4500 De
   4:../Startup/system_XMC4500.c ****  * @version  V3.1.7
   5:../Startup/system_XMC4500.c ****  * @date     27. Aug 2020
   6:../Startup/system_XMC4500.c ****  *
   7:../Startup/system_XMC4500.c ****  * @cond
   8:../Startup/system_XMC4500.c ****  **************************************************************************************************
   9:../Startup/system_XMC4500.c ****  * Copyright (c) 2014-2020, Infineon Technologies AG
  10:../Startup/system_XMC4500.c ****  * All rights reserved.                        
  11:../Startup/system_XMC4500.c ****  *                                             
  12:../Startup/system_XMC4500.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:../Startup/system_XMC4500.c ****  * 
  14:../Startup/system_XMC4500.c ****  * Permission is hereby granted, free of charge, to any person or organization
  15:../Startup/system_XMC4500.c ****  * obtaining a copy of the software and accompanying documentation covered by
  16:../Startup/system_XMC4500.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:../Startup/system_XMC4500.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:../Startup/system_XMC4500.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:../Startup/system_XMC4500.c ****  * do so, all subject to the following:
  20:../Startup/system_XMC4500.c ****  * 
  21:../Startup/system_XMC4500.c ****  * The copyright notices in the Software and this entire statement, including
  22:../Startup/system_XMC4500.c ****  * the above license grant, this restriction and the following disclaimer,
  23:../Startup/system_XMC4500.c ****  * must be included in all copies of the Software, in whole or in part, and
  24:../Startup/system_XMC4500.c ****  * all derivative works of the Software, unless such copies or derivative
  25:../Startup/system_XMC4500.c ****  * works are solely in the form of machine-executable object code generated by
  26:../Startup/system_XMC4500.c ****  * a source language processor.
  27:../Startup/system_XMC4500.c ****  * 
  28:../Startup/system_XMC4500.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:../Startup/system_XMC4500.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:../Startup/system_XMC4500.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:../Startup/system_XMC4500.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:../Startup/system_XMC4500.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:../Startup/system_XMC4500.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:../Startup/system_XMC4500.c ****  * DEALINGS IN THE SOFTWARE.
  35:../Startup/system_XMC4500.c ****  *                                                                              
  36:../Startup/system_XMC4500.c ****  * To improve the quality of the software, users are encouraged to share 
  37:../Startup/system_XMC4500.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG 
  38:../Startup/system_XMC4500.c ****  * at XMCSupport@infineon.com.
  39:../Startup/system_XMC4500.c ****  **************************************************************************************************
  40:../Startup/system_XMC4500.c ****  *
  41:../Startup/system_XMC4500.c ****  ********************** Version History ***************************************
  42:../Startup/system_XMC4500.c ****  * V3.1.0, Dec 2014, Added options to configure clock settings
  43:../Startup/system_XMC4500.c ****  * V3.1.1, 01. Jun 2016, Fix masking of OSCHPCTRL value 
  44:../Startup/system_XMC4500.c ****  * V3.1.2, 09. Feb 2017, Fix activation of USBPLL when SDMMC clock is enabled
  45:../Startup/system_XMC4500.c ****  * V3.1.3, 19. Jun 2017, Rely on cmsis_compiler.h instead of defining __WEAK
  46:../Startup/system_XMC4500.c ****  *                       Added support for ARM Compiler 6 (armclang)
  47:../Startup/system_XMC4500.c ****  * V3.1.4, 26. Sep 2017, Disable FPU if FPU_USED is zero   
  48:../Startup/system_XMC4500.c ****  *                       Fixed include files
  49:../Startup/system_XMC4500.c ****  * V3.1.5, 29. Oct 2018, Fix variable location of SystemCoreClock and g_chipid for ARMCC compiler
  50:../Startup/system_XMC4500.c ****  * V3.1.6, 02. Dec 2019, Fix including device header file following the convention: angle brackets 
  51:../Startup/system_XMC4500.c ****  *                       Fix external clock monitoring pin settings
  52:../Startup/system_XMC4500.c ****  * V3.1.7, 27. Aug 2020. Fix K1 divider input clock for PLL in prescaler mode
  53:../Startup/system_XMC4500.c ****  *                       Added compiler checks for input VCO and VCO frequencies
  54:../Startup/system_XMC4500.c ****  *                       Added wait for K2 divider ready after updating the K2 divider in the PLL r
  55:../Startup/system_XMC4500.c ****  *                       Removed wait for lock after changing the K2 divider in the PLL ramp up sin
  56:../Startup/system_XMC4500.c ****  ******************************************************************************
  57:../Startup/system_XMC4500.c ****  * @endcond
  58:../Startup/system_XMC4500.c ****  */
  59:../Startup/system_XMC4500.c **** 
  60:../Startup/system_XMC4500.c **** /*******************************************************************************
  61:../Startup/system_XMC4500.c ****  * HEADER FILES
  62:../Startup/system_XMC4500.c ****  *******************************************************************************/
  63:../Startup/system_XMC4500.c **** #include <string.h>
  64:../Startup/system_XMC4500.c **** 
  65:../Startup/system_XMC4500.c **** #include "XMC4500.h"
  66:../Startup/system_XMC4500.c **** #include "system_XMC4500.h"
  67:../Startup/system_XMC4500.c **** 
  68:../Startup/system_XMC4500.c **** /*******************************************************************************
  69:../Startup/system_XMC4500.c ****  * MACROS
  70:../Startup/system_XMC4500.c ****  *******************************************************************************/
  71:../Startup/system_XMC4500.c **** #define CHIPID_LOC ((uint8_t *)0x20000000UL)
  72:../Startup/system_XMC4500.c **** 
  73:../Startup/system_XMC4500.c **** #define PMU_FLASH_WS          (0x3U)
  74:../Startup/system_XMC4500.c **** 
  75:../Startup/system_XMC4500.c **** #define FPLL_FREQUENCY        (120000000U)
  76:../Startup/system_XMC4500.c **** #define FOSCREF               (2500000U)
  77:../Startup/system_XMC4500.c **** #define DELAY_CNT_50US_50MHZ  (2500UL)
  78:../Startup/system_XMC4500.c **** #define DELAY_CNT_150US_50MHZ (7500UL)
  79:../Startup/system_XMC4500.c **** #define DELAY_CNT_50US_60MHZ  (3000UL)
  80:../Startup/system_XMC4500.c **** #define DELAY_CNT_50US_90MHZ  (4500UL)
  81:../Startup/system_XMC4500.c **** #define DELAY_CNT_50US_120MHZ (6000UL)
  82:../Startup/system_XMC4500.c **** 
  83:../Startup/system_XMC4500.c **** #define VCO_INPUT_MIN         (4000000UL)
  84:../Startup/system_XMC4500.c **** #define VCO_INPUT_MAX         (16000000UL)
  85:../Startup/system_XMC4500.c **** #define VCO_MIN               (260000000UL)
  86:../Startup/system_XMC4500.c **** #define VCO_MAX               (520000000UL)
  87:../Startup/system_XMC4500.c **** 
  88:../Startup/system_XMC4500.c **** #define SCU_PLL_PLLSTAT_OSC_USABLE  (SCU_PLL_PLLSTAT_PLLHV_Msk | \
  89:../Startup/system_XMC4500.c ****                                      SCU_PLL_PLLSTAT_PLLLV_Msk | \
  90:../Startup/system_XMC4500.c ****                                      SCU_PLL_PLLSTAT_PLLSP_Msk)
  91:../Startup/system_XMC4500.c **** 
  92:../Startup/system_XMC4500.c **** /*
  93:../Startup/system_XMC4500.c **** //-------- <<< Use Configuration Wizard in Context Menu >>> ------------------
  94:../Startup/system_XMC4500.c **** */
  95:../Startup/system_XMC4500.c **** 
  96:../Startup/system_XMC4500.c **** /*
  97:../Startup/system_XMC4500.c **** // <h> Clock configuration
  98:../Startup/system_XMC4500.c **** */
  99:../Startup/system_XMC4500.c **** 
 100:../Startup/system_XMC4500.c **** /*
 101:../Startup/system_XMC4500.c **** //    <o> External crystal frequency [Hz]
 102:../Startup/system_XMC4500.c **** //       <8000000=> 8MHz
 103:../Startup/system_XMC4500.c **** //       <12000000=> 12MHz
 104:../Startup/system_XMC4500.c **** //       <16000000=> 16MHz
 105:../Startup/system_XMC4500.c **** //    <i> Defines external crystal frequency
 106:../Startup/system_XMC4500.c **** //    <i> Default: 8MHz
 107:../Startup/system_XMC4500.c **** */
 108:../Startup/system_XMC4500.c **** #define OSCHP_FREQUENCY (12000000U)
 109:../Startup/system_XMC4500.c **** 
 110:../Startup/system_XMC4500.c **** #if OSCHP_FREQUENCY == 8000000U
 111:../Startup/system_XMC4500.c **** #define USB_PDIV (1U)
 112:../Startup/system_XMC4500.c **** #define USB_NDIV (95U)
 113:../Startup/system_XMC4500.c **** #define USB_DIV (3U)
 114:../Startup/system_XMC4500.c **** 
 115:../Startup/system_XMC4500.c **** #elif OSCHP_FREQUENCY == 12000000U
 116:../Startup/system_XMC4500.c **** #define USB_PDIV (1U)
 117:../Startup/system_XMC4500.c **** #define USB_NDIV (63U)
 118:../Startup/system_XMC4500.c **** #define USB_DIV (3U)
 119:../Startup/system_XMC4500.c **** 
 120:../Startup/system_XMC4500.c **** #elif OSCHP_FREQUENCY == 16000000U
 121:../Startup/system_XMC4500.c **** #define USB_PDIV (1U)
 122:../Startup/system_XMC4500.c **** #define USB_NDIV (47U)
 123:../Startup/system_XMC4500.c **** #define USB_DIV (3U)
 124:../Startup/system_XMC4500.c **** 
 125:../Startup/system_XMC4500.c **** #else
 126:../Startup/system_XMC4500.c **** #error "External crystal frequency not supported"
 127:../Startup/system_XMC4500.c **** 
 128:../Startup/system_XMC4500.c **** #endif
 129:../Startup/system_XMC4500.c **** 
 130:../Startup/system_XMC4500.c **** #define USB_VCO ((OSCHP_FREQUENCY / (USB_PDIV + 1UL)) * (USB_NDIV + 1UL))
 131:../Startup/system_XMC4500.c **** #define USB_VCO_INPUT (OSCHP_FREQUENCY / (USB_PDIV + 1UL))
 132:../Startup/system_XMC4500.c **** 
 133:../Startup/system_XMC4500.c **** /*
 134:../Startup/system_XMC4500.c **** //    <o> System clock (fSYS) source selection
 135:../Startup/system_XMC4500.c **** //       <0=> Backup clock (24MHz)
 136:../Startup/system_XMC4500.c **** //       <1=> Maximum clock frequency using PLL (120MHz)
 137:../Startup/system_XMC4500.c **** //    <i> Default: Maximum clock frequency using PLL (120MHz)
 138:../Startup/system_XMC4500.c **** */
 139:../Startup/system_XMC4500.c **** #define SYS_CLOCK_SRC 1
 140:../Startup/system_XMC4500.c **** #define SYS_CLOCK_SRC_OFI 0
 141:../Startup/system_XMC4500.c **** #define SYS_CLOCK_SRC_PLL 1
 142:../Startup/system_XMC4500.c **** 
 143:../Startup/system_XMC4500.c **** /*
 144:../Startup/system_XMC4500.c **** //    <o> Backup clock calibration mode
 145:../Startup/system_XMC4500.c **** //       <0=> Factory calibration
 146:../Startup/system_XMC4500.c **** //       <1=> Automatic calibration
 147:../Startup/system_XMC4500.c **** //    <i> Default: Automatic calibration
 148:../Startup/system_XMC4500.c **** */
 149:../Startup/system_XMC4500.c **** #define FOFI_CALIBRATION_MODE 1
 150:../Startup/system_XMC4500.c **** #define FOFI_CALIBRATION_MODE_FACTORY 0
 151:../Startup/system_XMC4500.c **** #define FOFI_CALIBRATION_MODE_AUTOMATIC 1
 152:../Startup/system_XMC4500.c **** 
 153:../Startup/system_XMC4500.c **** /*
 154:../Startup/system_XMC4500.c **** //    <o> Standby clock (fSTDBY) source selection
 155:../Startup/system_XMC4500.c **** //       <0=> Internal slow oscillator (32768Hz)
 156:../Startup/system_XMC4500.c **** //       <1=> External crystal (32768Hz)
 157:../Startup/system_XMC4500.c **** //    <i> Default: Internal slow oscillator (32768Hz)
 158:../Startup/system_XMC4500.c **** */
 159:../Startup/system_XMC4500.c **** #define STDBY_CLOCK_SRC 0
 160:../Startup/system_XMC4500.c **** #define STDBY_CLOCK_SRC_OSI 0
 161:../Startup/system_XMC4500.c **** #define STDBY_CLOCK_SRC_OSCULP 1
 162:../Startup/system_XMC4500.c **** 
 163:../Startup/system_XMC4500.c **** /*
 164:../Startup/system_XMC4500.c **** //    <o> PLL clock source selection
 165:../Startup/system_XMC4500.c **** //       <0=> External crystal
 166:../Startup/system_XMC4500.c **** //       <1=> External direct input
 167:../Startup/system_XMC4500.c **** //       <2=> Internal fast oscillator
 168:../Startup/system_XMC4500.c **** //    <i> Default: External crystal
 169:../Startup/system_XMC4500.c **** */
 170:../Startup/system_XMC4500.c **** #define PLL_CLOCK_SRC 0
 171:../Startup/system_XMC4500.c **** #define PLL_CLOCK_SRC_EXT_XTAL 0
 172:../Startup/system_XMC4500.c **** #define PLL_CLOCK_SRC_EXT_DIRECT 1
 173:../Startup/system_XMC4500.c **** #define PLL_CLOCK_SRC_OFI 2
 174:../Startup/system_XMC4500.c **** 
 175:../Startup/system_XMC4500.c **** #if PLL_CLOCK_SRC == PLL_CLOCK_SRC_EXT_XTAL
 176:../Startup/system_XMC4500.c **** #if OSCHP_FREQUENCY == 8000000U
 177:../Startup/system_XMC4500.c **** #define PLL_PDIV (1U)
 178:../Startup/system_XMC4500.c **** #define PLL_NDIV (89U)
 179:../Startup/system_XMC4500.c **** #define PLL_K2DIV (2U)
 180:../Startup/system_XMC4500.c **** 
 181:../Startup/system_XMC4500.c **** #elif OSCHP_FREQUENCY == 12000000U
 182:../Startup/system_XMC4500.c **** #define PLL_PDIV (1U)
 183:../Startup/system_XMC4500.c **** #define PLL_NDIV (79U)
 184:../Startup/system_XMC4500.c **** #define PLL_K2DIV (3U)
 185:../Startup/system_XMC4500.c **** 
 186:../Startup/system_XMC4500.c **** #elif OSCHP_FREQUENCY == 16000000U
 187:../Startup/system_XMC4500.c **** #define PLL_PDIV (1U)
 188:../Startup/system_XMC4500.c **** #define PLL_NDIV (59U)
 189:../Startup/system_XMC4500.c **** #define PLL_K2DIV (3U)
 190:../Startup/system_XMC4500.c **** 
 191:../Startup/system_XMC4500.c **** #else
 192:../Startup/system_XMC4500.c **** #error "External crystal frequency not supported"
 193:../Startup/system_XMC4500.c **** 
 194:../Startup/system_XMC4500.c **** #endif
 195:../Startup/system_XMC4500.c **** 
 196:../Startup/system_XMC4500.c **** #define VCO ((OSCHP_FREQUENCY / (PLL_PDIV + 1UL)) * (PLL_NDIV + 1UL))
 197:../Startup/system_XMC4500.c **** #define VCO_INPUT (OSCHP_FREQUENCY / (PLL_PDIV + 1UL))
 198:../Startup/system_XMC4500.c **** 
 199:../Startup/system_XMC4500.c **** #else /* PLL_CLOCK_SRC == PLL_CLOCK_SRC_EXT_XTAL */
 200:../Startup/system_XMC4500.c **** 
 201:../Startup/system_XMC4500.c **** #define PLL_PDIV (1U)
 202:../Startup/system_XMC4500.c **** #define PLL_NDIV (39U)
 203:../Startup/system_XMC4500.c **** #define PLL_K2DIV (3U)
 204:../Startup/system_XMC4500.c **** 
 205:../Startup/system_XMC4500.c **** #define VCO ((OFI_FREQUENCY / (PLL_PDIV + 1UL)) * (PLL_NDIV + 1UL))
 206:../Startup/system_XMC4500.c **** #define VCO_INPUT (OFI_FREQUENCY / (PLL_PDIV + 1UL))
 207:../Startup/system_XMC4500.c **** 
 208:../Startup/system_XMC4500.c **** #endif /* PLL_CLOCK_SRC == PLL_CLOCK_SRC_OFI */
 209:../Startup/system_XMC4500.c **** 
 210:../Startup/system_XMC4500.c **** #if (VCO_INPUT < VCO_INPUT_MIN) || (VCO_INPUT > VCO_INPUT_MAX)
 211:../Startup/system_XMC4500.c **** #error VCO_INPUT frequency out of range.
 212:../Startup/system_XMC4500.c **** #endif
 213:../Startup/system_XMC4500.c **** 
 214:../Startup/system_XMC4500.c **** #if (VCO < VCO_MIN) || (VCO > VCO_MAX)
 215:../Startup/system_XMC4500.c **** #error VCO frequency out of range.
 216:../Startup/system_XMC4500.c **** #endif
 217:../Startup/system_XMC4500.c **** 
 218:../Startup/system_XMC4500.c **** #if (USB_VCO_INPUT < VCO_INPUT_MIN) || (USB_VCO_INPUT > VCO_INPUT_MAX)
 219:../Startup/system_XMC4500.c **** #error USB_VCO_INPUT frequency out of range.
 220:../Startup/system_XMC4500.c **** #endif
 221:../Startup/system_XMC4500.c **** 
 222:../Startup/system_XMC4500.c **** #if (USB_VCO < VCO_MIN) || (USB_VCO > VCO_MAX)
 223:../Startup/system_XMC4500.c **** #error USB_VCO frequency out of range.
 224:../Startup/system_XMC4500.c **** #endif
 225:../Startup/system_XMC4500.c **** 
 226:../Startup/system_XMC4500.c **** #define PLL_K2DIV_0 ((VCO / OFI_FREQUENCY) - 1UL)
 227:../Startup/system_XMC4500.c **** #define PLL_K2DIV_1 ((VCO / 60000000U) - 1UL)
 228:../Startup/system_XMC4500.c **** #define PLL_K2DIV_2 ((VCO / 90000000U) - 1UL)
 229:../Startup/system_XMC4500.c **** 
 230:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_USBCLK SCU_CLK_CLKCLR_USBCDI_Msk
 231:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_MMCCLK SCU_CLK_CLKCLR_MMCCDI_Msk
 232:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_ETHCLK SCU_CLK_CLKCLR_ETH0CDI_Msk
 233:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_EBUCLK SCU_CLK_CLKCLR_EBUCDI_Msk
 234:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_CCUCLK SCU_CLK_CLKCLR_CCUCDI_Msk
 235:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_WDTCLK SCU_CLK_CLKCLR_WDTCDI_Msk
 236:../Startup/system_XMC4500.c **** 
 237:../Startup/system_XMC4500.c **** #define SCU_CLK_USBCLKCR_USBSEL_USBPLL (0U << SCU_CLK_USBCLKCR_USBSEL_Pos)
 238:../Startup/system_XMC4500.c **** #define SCU_CLK_USBCLKCR_USBSEL_PLL    (1U << SCU_CLK_USBCLKCR_USBSEL_Pos)
 239:../Startup/system_XMC4500.c **** 
 240:../Startup/system_XMC4500.c **** #define SCU_CLK_WDTCLKCR_WDTSEL_OFI      (0U << SCU_CLK_WDTCLKCR_WDTSEL_Pos)
 241:../Startup/system_XMC4500.c **** #define SCU_CLK_WDTCLKCR_WDTSEL_STANDBY  (1U << SCU_CLK_WDTCLKCR_WDTSEL_Pos)
 242:../Startup/system_XMC4500.c **** #define SCU_CLK_WDTCLKCR_WDTSEL_PLL      (2U << SCU_CLK_WDTCLKCR_WDTSEL_Pos)
 243:../Startup/system_XMC4500.c **** 
 244:../Startup/system_XMC4500.c **** #define SCU_CLK_EXTCLKCR_ECKSEL_SYS      (0U << SCU_CLK_EXTCLKCR_ECKSEL_Pos)
 245:../Startup/system_XMC4500.c **** #define SCU_CLK_EXTCLKCR_ECKSEL_USBPLL   (2U << SCU_CLK_EXTCLKCR_ECKSEL_Pos)
 246:../Startup/system_XMC4500.c **** #define SCU_CLK_EXTCLKCR_ECKSEL_PLL      (3U << SCU_CLK_EXTCLKCR_ECKSEL_Pos)
 247:../Startup/system_XMC4500.c **** 
 248:../Startup/system_XMC4500.c **** #define EXTCLK_PIN_P0_8  (0)
 249:../Startup/system_XMC4500.c **** #define EXTCLK_PIN_P1_15 (1)
 250:../Startup/system_XMC4500.c **** 
 251:../Startup/system_XMC4500.c **** /*
 252:../Startup/system_XMC4500.c **** //    <h> Clock tree
 253:../Startup/system_XMC4500.c **** //        <o1.0> CPU clock divider
 254:../Startup/system_XMC4500.c **** //                   <0=> fCPU = fSYS
 255:../Startup/system_XMC4500.c **** //                   <1=> fCPU = fSYS / 2
 256:../Startup/system_XMC4500.c **** //        <o2.0>  Peripheral clock divider
 257:../Startup/system_XMC4500.c **** //                     <0=> fPB	= fCPU
 258:../Startup/system_XMC4500.c **** //                     <1=> fPB	= fCPU / 2
 259:../Startup/system_XMC4500.c **** //        <e.4> Enable CCU clock
 260:../Startup/system_XMC4500.c **** //             <o3.0>  CCU clock divider
 261:../Startup/system_XMC4500.c **** //                     <0=> fCCU = fCPU
 262:../Startup/system_XMC4500.c **** //                     <1=> fCCU = fCPU / 2
 263:../Startup/system_XMC4500.c **** //        </e>
 264:../Startup/system_XMC4500.c **** //        <e.5> Enable WDT clock
 265:../Startup/system_XMC4500.c **** //             <o4.0..7>  WDT clock divider <1-256><#-1>
 266:../Startup/system_XMC4500.c **** //             <o4.16..17> WDT clock source <0=> fOFI
 267:../Startup/system_XMC4500.c **** //                                          <1=> fSTDBY
 268:../Startup/system_XMC4500.c **** //                                          <2=> fPLL
 269:../Startup/system_XMC4500.c **** //        </e>
 270:../Startup/system_XMC4500.c **** //        <e.3> Enable EBU clock
 271:../Startup/system_XMC4500.c **** //             <o5.0..5>  EBU clock divider  <1-64><#-1>
 272:../Startup/system_XMC4500.c **** //        </e>
 273:../Startup/system_XMC4500.c **** //        <e.2> Enable ETH clock
 274:../Startup/system_XMC4500.c **** //        </e>
 275:../Startup/system_XMC4500.c **** //        <e.1> Enable MMC clock
 276:../Startup/system_XMC4500.c **** //        </e>
 277:../Startup/system_XMC4500.c **** //        <e.0> Enable USB clock
 278:../Startup/system_XMC4500.c **** //             <o6.16> USB clock source <0=> USBPLL
 279:../Startup/system_XMC4500.c **** //                                      <1=> PLL
 280:../Startup/system_XMC4500.c **** //        </e>
 281:../Startup/system_XMC4500.c **** //        <e7> External Clock configuration
 282:../Startup/system_XMC4500.c **** //            <o8.0..1> External Clock Source Selection
 283:../Startup/system_XMC4500.c **** //                  <0=> System clock
 284:../Startup/system_XMC4500.c **** //                  <2=> USB PLL clock
 285:../Startup/system_XMC4500.c **** //                  <3=> PLL clock
 286:../Startup/system_XMC4500.c **** //            <o8.16..24> External Clock divider <1-512><#-1>
 287:../Startup/system_XMC4500.c **** //            <i> Only valid for USB PLL and PLL clocks
 288:../Startup/system_XMC4500.c **** //            <o9.0> External Clock Pin Selection
 289:../Startup/system_XMC4500.c **** //                  <0=> P0.8
 290:../Startup/system_XMC4500.c **** //                  <1=> P1.15
 291:../Startup/system_XMC4500.c **** //        </e>
 292:../Startup/system_XMC4500.c **** //    </h>
 293:../Startup/system_XMC4500.c **** */
 294:../Startup/system_XMC4500.c **** #define ENABLE_SCUCLK (0U)
 295:../Startup/system_XMC4500.c **** #define CPUCLKDIV (0U)
 296:../Startup/system_XMC4500.c **** #define PBCLKDIV (0U)
 297:../Startup/system_XMC4500.c **** #define CCUCLKDIV (0U)
 298:../Startup/system_XMC4500.c **** #define WDTCLKDIV (0U | SCU_CLK_WDTCLKCR_WDTSEL_OFI)
 299:../Startup/system_XMC4500.c **** #define EBUCLKDIV (0U)
 300:../Startup/system_XMC4500.c **** #define USBCLKDIV (0U | SCU_CLK_USBCLKCR_USBSEL_USBPLL | USB_DIV)
 301:../Startup/system_XMC4500.c **** 
 302:../Startup/system_XMC4500.c **** #define ENABLE_EXTCLK (0U)
 303:../Startup/system_XMC4500.c **** #define EXTCLKDIV (0U | SCU_CLK_EXTCLKCR_ECKSEL_SYS)
 304:../Startup/system_XMC4500.c **** #define EXTCLK_PIN (0U)
 305:../Startup/system_XMC4500.c **** 
 306:../Startup/system_XMC4500.c **** #define ENABLE_PLL \
 307:../Startup/system_XMC4500.c ****     (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL) || \
 308:../Startup/system_XMC4500.c ****     ((ENABLE_SCUCLK & SCU_CLK_CLKSET_EBUCEN_Msk) != 0) || \
 309:../Startup/system_XMC4500.c ****     (((ENABLE_SCUCLK & SCU_CLK_CLKSET_USBCEN_Msk) != 0) && ((USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Ms
 310:../Startup/system_XMC4500.c ****     (((ENABLE_SCUCLK & SCU_CLK_CLKSET_WDTCEN_Msk) != 0) && ((WDTCLKDIV & SCU_CLK_WDTCLKCR_WDTSEL_Ms
 311:../Startup/system_XMC4500.c **** 
 312:../Startup/system_XMC4500.c **** #define ENABLE_USBPLL \
 313:../Startup/system_XMC4500.c ****     ((((ENABLE_SCUCLK & SCU_CLK_CLKSET_USBCEN_Msk) != 0) && ((USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_M
 314:../Startup/system_XMC4500.c ****      (((ENABLE_SCUCLK & SCU_CLK_CLKCLR_ENABLE_MMCCLK) != 0) && ((USBCLKDIV & SCU_CLK_USBCLKCR_USBSE
 315:../Startup/system_XMC4500.c **** /*
 316:../Startup/system_XMC4500.c **** // </h>
 317:../Startup/system_XMC4500.c **** */
 318:../Startup/system_XMC4500.c **** 
 319:../Startup/system_XMC4500.c **** /*
 320:../Startup/system_XMC4500.c **** //-------- <<< end of configuration section >>> ------------------
 321:../Startup/system_XMC4500.c **** */
 322:../Startup/system_XMC4500.c ****                                      
 323:../Startup/system_XMC4500.c **** /*******************************************************************************
 324:../Startup/system_XMC4500.c ****  * GLOBAL VARIABLES
 325:../Startup/system_XMC4500.c ****  *******************************************************************************/
 326:../Startup/system_XMC4500.c **** #if defined ( __CC_ARM )
 327:../Startup/system_XMC4500.c **** uint32_t SystemCoreClock __attribute__((at(0x2000FFC0)));
 328:../Startup/system_XMC4500.c **** uint8_t g_chipid[16] __attribute__((at(0x2000FFC4)));
 329:../Startup/system_XMC4500.c **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 330:../Startup/system_XMC4500.c **** uint32_t SystemCoreClock __attribute__((section(".bss.ARM.__at_0x2000FFC0")));
 331:../Startup/system_XMC4500.c **** uint8_t g_chipid[16] __attribute__((section(".bss.ARM.__at_0x2000FFC4")));
 332:../Startup/system_XMC4500.c **** #elif defined ( __ICCARM__ )
 333:../Startup/system_XMC4500.c **** __no_init uint32_t SystemCoreClock;
 334:../Startup/system_XMC4500.c **** __no_init uint8_t g_chipid[16];
 335:../Startup/system_XMC4500.c **** #elif defined ( __GNUC__ )
 336:../Startup/system_XMC4500.c **** uint32_t SystemCoreClock __attribute__((section(".no_init")));
 337:../Startup/system_XMC4500.c **** uint8_t g_chipid[16] __attribute__((section(".no_init")));
 338:../Startup/system_XMC4500.c **** #elif defined ( __TASKING__ )
 339:../Startup/system_XMC4500.c **** uint32_t SystemCoreClock __at( 0x2000FFC0 );
 340:../Startup/system_XMC4500.c **** uint8_t g_chipid[16] __at( 0x2000FFC4 );
 341:../Startup/system_XMC4500.c **** #endif
 342:../Startup/system_XMC4500.c **** 
 343:../Startup/system_XMC4500.c **** extern uint32_t __Vectors;
 344:../Startup/system_XMC4500.c **** 
 345:../Startup/system_XMC4500.c **** /*******************************************************************************
 346:../Startup/system_XMC4500.c ****  * LOCAL FUNCTIONS
 347:../Startup/system_XMC4500.c ****  *******************************************************************************/
 348:../Startup/system_XMC4500.c **** static void delay(uint32_t cycles)
 349:../Startup/system_XMC4500.c **** {
  40              	 .loc 1 349 0
  41              	 .cfi_startproc
  42              	 
  43              	 
  44              	 
  45 0000 80B4     	 push {r7}
  46              	.LCFI0:
  47              	 .cfi_def_cfa_offset 4
  48              	 .cfi_offset 7,-4
  49 0002 85B0     	 sub sp,sp,#20
  50              	.LCFI1:
  51              	 .cfi_def_cfa_offset 24
  52 0004 00AF     	 add r7,sp,#0
  53              	.LCFI2:
  54              	 .cfi_def_cfa_register 7
  55 0006 7860     	 str r0,[r7,#4]
 350:../Startup/system_XMC4500.c ****   volatile uint32_t i;
 351:../Startup/system_XMC4500.c **** 
 352:../Startup/system_XMC4500.c ****   for(i = 0UL; i < cycles ;++i)
  56              	 .loc 1 352 0
  57 0008 0023     	 movs r3,#0
  58 000a FB60     	 str r3,[r7,#12]
  59 000c 03E0     	 b .L2
  60              	.L3:
 353:../Startup/system_XMC4500.c ****   {
 354:../Startup/system_XMC4500.c ****     __NOP();
  61              	 .loc 1 354 0 discriminator 3
  62              	
  63 000e 00BF     	 nop
  64              	
 352:../Startup/system_XMC4500.c ****   {
  65              	 .loc 1 352 0 discriminator 3
  66              	 .thumb
  67 0010 FB68     	 ldr r3,[r7,#12]
  68 0012 0133     	 adds r3,r3,#1
  69 0014 FB60     	 str r3,[r7,#12]
  70              	.L2:
 352:../Startup/system_XMC4500.c ****   {
  71              	 .loc 1 352 0 is_stmt 0 discriminator 1
  72 0016 FA68     	 ldr r2,[r7,#12]
  73 0018 7B68     	 ldr r3,[r7,#4]
  74 001a 9A42     	 cmp r2,r3
  75 001c F7D3     	 bcc .L3
 355:../Startup/system_XMC4500.c ****   }
 356:../Startup/system_XMC4500.c **** }
  76              	 .loc 1 356 0 is_stmt 1
  77 001e 1437     	 adds r7,r7,#20
  78              	.LCFI3:
  79              	 .cfi_def_cfa_offset 4
  80 0020 BD46     	 mov sp,r7
  81              	.LCFI4:
  82              	 .cfi_def_cfa_register 13
  83              	 
  84 0022 5DF8047B 	 ldr r7,[sp],#4
  85              	.LCFI5:
  86              	 .cfi_restore 7
  87              	 .cfi_def_cfa_offset 0
  88 0026 7047     	 bx lr
  89              	 .cfi_endproc
  90              	.LFE133:
  92              	 .section .text.SystemInit,"ax",%progbits
  93              	 .align 2
  94              	 .weak SystemInit
  95              	 .thumb
  96              	 .thumb_func
  98              	SystemInit:
  99              	.LFB134:
 357:../Startup/system_XMC4500.c **** 
 358:../Startup/system_XMC4500.c **** /*******************************************************************************
 359:../Startup/system_XMC4500.c ****  * API IMPLEMENTATION
 360:../Startup/system_XMC4500.c ****  *******************************************************************************/
 361:../Startup/system_XMC4500.c **** 
 362:../Startup/system_XMC4500.c **** __WEAK void SystemInit(void)
 363:../Startup/system_XMC4500.c **** {
 100              	 .loc 1 363 0
 101              	 .cfi_startproc
 102              	 
 103              	 
 104 0000 98B5     	 push {r3,r4,r7,lr}
 105              	.LCFI6:
 106              	 .cfi_def_cfa_offset 16
 107              	 .cfi_offset 3,-16
 108              	 .cfi_offset 4,-12
 109              	 .cfi_offset 7,-8
 110              	 .cfi_offset 14,-4
 111 0002 00AF     	 add r7,sp,#0
 112              	.LCFI7:
 113              	 .cfi_def_cfa_register 7
 364:../Startup/system_XMC4500.c ****   memcpy(g_chipid, CHIPID_LOC, 16);
 114              	 .loc 1 364 0
 115 0004 054A     	 ldr r2,.L5
 116 0006 4FF00053 	 mov r3,#536870912
 117 000a 1446     	 mov r4,r2
 118 000c 0FCB     	 ldmia r3,{r0,r1,r2,r3}
 119 000e 84E80F00 	 stmia r4,{r0,r1,r2,r3}
 365:../Startup/system_XMC4500.c **** 
 366:../Startup/system_XMC4500.c ****   SystemCoreSetup();
 120              	 .loc 1 366 0
 121 0012 FFF7FEFF 	 bl SystemCoreSetup
 367:../Startup/system_XMC4500.c ****   SystemCoreClockSetup(); 
 122              	 .loc 1 367 0
 123 0016 FFF7FEFF 	 bl SystemCoreClockSetup
 368:../Startup/system_XMC4500.c **** }
 124              	 .loc 1 368 0
 125 001a 98BD     	 pop {r3,r4,r7,pc}
 126              	.L6:
 127              	 .align 2
 128              	.L5:
 129 001c 00000000 	 .word g_chipid
 130              	 .cfi_endproc
 131              	.LFE134:
 133              	 .section .text.SystemCoreSetup,"ax",%progbits
 134              	 .align 2
 135              	 .weak SystemCoreSetup
 136              	 .thumb
 137              	 .thumb_func
 139              	SystemCoreSetup:
 140              	.LFB135:
 369:../Startup/system_XMC4500.c **** 
 370:../Startup/system_XMC4500.c **** __WEAK void SystemCoreSetup(void)
 371:../Startup/system_XMC4500.c **** {
 141              	 .loc 1 371 0
 142              	 .cfi_startproc
 143              	 
 144              	 
 145              	 
 146 0000 80B4     	 push {r7}
 147              	.LCFI8:
 148              	 .cfi_def_cfa_offset 4
 149              	 .cfi_offset 7,-4
 150 0002 83B0     	 sub sp,sp,#12
 151              	.LCFI9:
 152              	 .cfi_def_cfa_offset 16
 153 0004 00AF     	 add r7,sp,#0
 154              	.LCFI10:
 155              	 .cfi_def_cfa_register 7
 156              	.LBB8:
 157              	.LBB9:
 158              	 .file 2 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V5.3.0
   5:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     26. March 2020
   6:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /*
   8:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Copyright (c) 2009-2020 Arm Limited. All rights reserved.
   9:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  10:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  12:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  16:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  18:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * limitations under the License.
  23:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  24:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  25:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  28:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  38:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  39:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ASM
  41:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  43:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  46:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  49:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif                                           
  52:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  55:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __USED
  56:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  58:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  61:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  64:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  67:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  70:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  78:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  86:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  94:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 102:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 110:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 113:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 116:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 119:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 120:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 122:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 124:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 125:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            in the used linker script.
 129:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 130:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 131:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 133:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 135:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   typedef struct {
 136:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t const* src;
 137:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t* dest;
 138:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t  wlen;
 139:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   } __copy_table_t;
 140:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 141:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   typedef struct {
 142:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t* dest;
 143:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t  wlen;
 144:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   } __zero_table_t;
 145:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 146:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 151:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     }
 155:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
 156:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  
 157:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     }
 161:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
 162:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  
 163:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   _start();
 164:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 165:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 166:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 168:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 169:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 172:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 173:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 176:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 177:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 180:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 181:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 184:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 185:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 189:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 190:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 191:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 192:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 196:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 198:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 200:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 201:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 202:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 203:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 207:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 209:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 159              	 .loc 2 209 0
 160              	
 161 0006 72B6     	 cpsid i
 162              	
 163              	 .thumb
 164              	.LBE9:
 165              	.LBE8:
 372:../Startup/system_XMC4500.c ****   uint32_t temp;
 373:../Startup/system_XMC4500.c **** 	
 374:../Startup/system_XMC4500.c ****   /* relocate vector table */
 375:../Startup/system_XMC4500.c ****   __disable_irq();
 376:../Startup/system_XMC4500.c ****   SCB->VTOR = (uint32_t)(&__Vectors);
 166              	 .loc 1 376 0
 167 0008 164B     	 ldr r3,.L8
 168 000a 174A     	 ldr r2,.L8+4
 169 000c 9A60     	 str r2,[r3,#8]
 170              	.LBB10:
 171              	.LBB11:
 210:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 211:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 212:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 213:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 214:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
 215:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
 217:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 218:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 220:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 221:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 222:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 224:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 225:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 226:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 227:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 229:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               non-secure Control Register value
 232:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 233:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 235:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 236:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 237:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 239:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 240:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 241:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 243:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 244:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
 245:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 248:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 250:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 252:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 253:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 254:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 256:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 260:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 262:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 264:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 265:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 266:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 267:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 268:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 269:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 271:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 272:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 274:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 275:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 276:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 278:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 279:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 280:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 281:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 282:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 283:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 285:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 286:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 288:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 289:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 290:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 292:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 293:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 294:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 295:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 296:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 297:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               xPSR Register value
 299:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 300:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 302:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 303:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 304:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 306:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 307:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 308:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 310:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 313:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 314:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 316:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 317:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 318:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 320:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 321:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 322:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 323:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 325:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 328:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 329:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 331:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 332:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 333:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 335:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 336:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 337:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 338:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 339:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 340:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 344:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 346:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 348:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 350:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 352:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 356:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 358:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 360:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 361:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 362:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 363:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 364:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 367:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 368:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 370:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 371:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 372:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 374:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 375:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 376:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 377:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 379:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 382:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 383:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 385:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 386:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 387:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 389:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 390:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 391:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 392:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 393:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 394:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 398:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 400:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 402:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 403:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 404:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 406:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 410:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 412:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 414:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 415:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 416:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 417:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 419:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               SP Register value
 422:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 423:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 425:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 426:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 427:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 429:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 430:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 431:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 432:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 433:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 437:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 439:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 441:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 442:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 443:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 444:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 445:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 446:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 448:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 449:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 451:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 452:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 453:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 454:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 455:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 456:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 457:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 458:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 460:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 463:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 464:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 466:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 467:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 468:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 469:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 470:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 471:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 472:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 473:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 474:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 475:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 476:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 479:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 481:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 483:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 484:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 485:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 487:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 491:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 493:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 495:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 496:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 497:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 498:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 502:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 503:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 506:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 508:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 510:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 511:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 512:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 513:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 514:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 517:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 519:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 521:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 522:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 523:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 524:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 525:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 527:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 528:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 530:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 531:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 532:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 534:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 535:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 536:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 537:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 539:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 542:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 543:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 545:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 546:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 547:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 549:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 550:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 551:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 552:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 553:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 554:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority
 555:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 558:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 560:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 562:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 563:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 564:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 566:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 570:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 572:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 574:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 575:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 576:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 577:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 578:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 583:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 585:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 587:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 588:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 589:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 590:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask
 591:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 593:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 594:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 596:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 597:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 598:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 600:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 601:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 602:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 603:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 605:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 608:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 609:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 611:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 612:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 613:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 615:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 616:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 617:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 618:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 619:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 620:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask
 621:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 624:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 626:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 628:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 629:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 630:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 632:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 636:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 638:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 640:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 641:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 642:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 646:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 647:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 650:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 651:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 655:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 656:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 658:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 659:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 661:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 665:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 666:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 667:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 669:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 670:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 671:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 672:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 674:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 678:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 680:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 681:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 683:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 686:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 687:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 688:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 690:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 691:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 692:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 693:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 694:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 695:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 696:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 700:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 701:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 704:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 706:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 711:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 713:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 714:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 715:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 716:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 718:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 722:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 725:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 727:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 731:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 733:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 734:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 735:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 736:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 737:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 738:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 742:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 743:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 745:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 746:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 748:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 752:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 753:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 754:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 756:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 757:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 758:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 759:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 760:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 762:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 766:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 768:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 769:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 771:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 774:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 775:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 776:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 778:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 779:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 780:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 781:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 782:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 783:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 784:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 788:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 789:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 792:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 794:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 799:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 801:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 802:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 803:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 804:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 806:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 810:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 813:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 815:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 819:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 821:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 822:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 823:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 824:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 827:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 828:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 829:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get FPSCR
 830:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 833:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 835:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 843:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 844:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 845:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 847:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 848:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 849:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(0U);
 850:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 851:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 852:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 853:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 854:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 855:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set FPSCR
 856:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 859:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 861:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 869:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 871:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 872:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)fpscr;
 873:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 874:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 875:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 876:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 877:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 879:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 880:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   Access to dedicated instructions
 883:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 884:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** */
 885:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 886:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 894:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 898:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 899:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 900:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   No Operation
 901:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 903:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 905:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 906:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 909:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 910:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 911:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 912:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 913:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Event
 914:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 917:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 918:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 919:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 920:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 921:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Send Event
 922:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 924:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 926:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 927:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 928:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            after the instruction has been completed.
 932:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 933:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 935:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 937:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 938:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 939:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 940:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 944:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 946:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 172              	 .loc 2 946 0
 173              	
 174 000e BFF34F8F 	 dsb 0xF
 175              	
 176              	 .thumb
 177              	.LBE11:
 178              	.LBE10:
 179              	.LBB12:
 180              	.LBB13:
 198:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 181              	 .loc 2 198 0
 182              	
 183 0012 62B6     	 cpsie i
 184              	
 185              	 .thumb
 186              	.LBE13:
 187              	.LBE12:
 377:../Startup/system_XMC4500.c ****   __DSB();
 378:../Startup/system_XMC4500.c ****   __enable_irq();
 379:../Startup/system_XMC4500.c ****     
 380:../Startup/system_XMC4500.c ****   /* __FPU_PRESENT = 1 defined in device header file */
 381:../Startup/system_XMC4500.c ****   /* __FPU_USED value depends on compiler/linker options. */
 382:../Startup/system_XMC4500.c ****   /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
 383:../Startup/system_XMC4500.c ****   /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */
 384:../Startup/system_XMC4500.c **** 
 385:../Startup/system_XMC4500.c **** #if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
 386:../Startup/system_XMC4500.c ****   SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 188              	 .loc 1 386 0
 189 0014 134A     	 ldr r2,.L8
 190 0016 134B     	 ldr r3,.L8
 191 0018 D3F88830 	 ldr r3,[r3,#136]
 192 001c 43F47003 	 orr r3,r3,#15728640
 193 0020 C2F88830 	 str r3,[r2,#136]
 387:../Startup/system_XMC4500.c ****                  (3UL << 11*2)  );               /* set CP11 Full Access */
 388:../Startup/system_XMC4500.c **** #else
 389:../Startup/system_XMC4500.c ****   SCB->CPACR = 0;
 390:../Startup/system_XMC4500.c **** #endif
 391:../Startup/system_XMC4500.c **** 
 392:../Startup/system_XMC4500.c ****   /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
 393:../Startup/system_XMC4500.c ****   SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 194              	 .loc 1 393 0
 195 0024 0F4A     	 ldr r2,.L8
 196 0026 0F4B     	 ldr r3,.L8
 197 0028 5B69     	 ldr r3,[r3,#20]
 198 002a 23F00803 	 bic r3,r3,#8
 199 002e 5361     	 str r3,[r2,#20]
 394:../Startup/system_XMC4500.c **** 
 395:../Startup/system_XMC4500.c ****   temp = FLASH0->FCON;
 200              	 .loc 1 395 0
 201 0030 0E4B     	 ldr r3,.L8+8
 202 0032 03F58053 	 add r3,r3,#4096
 203 0036 1433     	 adds r3,r3,#20
 204 0038 1B68     	 ldr r3,[r3]
 205 003a 7B60     	 str r3,[r7,#4]
 396:../Startup/system_XMC4500.c ****   temp &= ~FLASH_FCON_WSPFLASH_Msk;
 206              	 .loc 1 396 0
 207 003c 7B68     	 ldr r3,[r7,#4]
 208 003e 23F00F03 	 bic r3,r3,#15
 209 0042 7B60     	 str r3,[r7,#4]
 397:../Startup/system_XMC4500.c ****   temp |= PMU_FLASH_WS;
 210              	 .loc 1 397 0
 211 0044 7B68     	 ldr r3,[r7,#4]
 212 0046 43F00303 	 orr r3,r3,#3
 213 004a 7B60     	 str r3,[r7,#4]
 398:../Startup/system_XMC4500.c ****   FLASH0->FCON = temp;
 214              	 .loc 1 398 0
 215 004c 074B     	 ldr r3,.L8+8
 216 004e 03F58053 	 add r3,r3,#4096
 217 0052 1433     	 adds r3,r3,#20
 218 0054 7A68     	 ldr r2,[r7,#4]
 219 0056 1A60     	 str r2,[r3]
 399:../Startup/system_XMC4500.c **** }
 220              	 .loc 1 399 0
 221 0058 0C37     	 adds r7,r7,#12
 222              	.LCFI11:
 223              	 .cfi_def_cfa_offset 4
 224 005a BD46     	 mov sp,r7
 225              	.LCFI12:
 226              	 .cfi_def_cfa_register 13
 227              	 
 228 005c 5DF8047B 	 ldr r7,[sp],#4
 229              	.LCFI13:
 230              	 .cfi_restore 7
 231              	 .cfi_def_cfa_offset 0
 232 0060 7047     	 bx lr
 233              	.L9:
 234 0062 00BF     	 .align 2
 235              	.L8:
 236 0064 00ED00E0 	 .word -536810240
 237 0068 00000000 	 .word __Vectors
 238 006c 00100058 	 .word 1476399104
 239              	 .cfi_endproc
 240              	.LFE135:
 242              	 .section .text.SystemCoreClockSetup,"ax",%progbits
 243              	 .align 2
 244              	 .weak SystemCoreClockSetup
 245              	 .thumb
 246              	 .thumb_func
 248              	SystemCoreClockSetup:
 249              	.LFB136:
 400:../Startup/system_XMC4500.c **** 
 401:../Startup/system_XMC4500.c **** __WEAK void SystemCoreClockSetup(void)
 402:../Startup/system_XMC4500.c **** {
 250              	 .loc 1 402 0
 251              	 .cfi_startproc
 252              	 
 253              	 
 254 0000 80B5     	 push {r7,lr}
 255              	.LCFI14:
 256              	 .cfi_def_cfa_offset 8
 257              	 .cfi_offset 7,-8
 258              	 .cfi_offset 14,-4
 259 0002 00AF     	 add r7,sp,#0
 260              	.LCFI15:
 261              	 .cfi_def_cfa_register 7
 403:../Startup/system_XMC4500.c **** #if FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_FACTORY
 404:../Startup/system_XMC4500.c ****   /* Enable factory calibration */
 405:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FOTR_Msk;
 406:../Startup/system_XMC4500.c **** #else
 407:../Startup/system_XMC4500.c ****   /* Automatic calibration uses the fSTDBY */
 408:../Startup/system_XMC4500.c **** 
 409:../Startup/system_XMC4500.c ****   /* Enable HIB domain */
 410:../Startup/system_XMC4500.c ****   /* Power up HIB domain if and only if it is currently powered down */
 411:../Startup/system_XMC4500.c ****   if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 262              	 .loc 1 411 0
 263 0004 774B     	 ldr r3,.L22
 264 0006 1B68     	 ldr r3,[r3]
 265 0008 03F00103 	 and r3,r3,#1
 266 000c 002B     	 cmp r3,#0
 267 000e 0CD1     	 bne .L11
 412:../Startup/system_XMC4500.c ****   {
 413:../Startup/system_XMC4500.c ****     SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 268              	 .loc 1 413 0
 269 0010 744A     	 ldr r2,.L22
 270 0012 744B     	 ldr r3,.L22
 271 0014 5B68     	 ldr r3,[r3,#4]
 272 0016 43F00103 	 orr r3,r3,#1
 273 001a 5360     	 str r3,[r2,#4]
 414:../Startup/system_XMC4500.c **** 
 415:../Startup/system_XMC4500.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 274              	 .loc 1 415 0
 275 001c 00BF     	 nop
 276              	.L12:
 277              	 .loc 1 415 0 is_stmt 0 discriminator 1
 278 001e 714B     	 ldr r3,.L22
 279 0020 1B68     	 ldr r3,[r3]
 280 0022 03F00103 	 and r3,r3,#1
 281 0026 002B     	 cmp r3,#0
 282 0028 F9D0     	 beq .L12
 283              	.L11:
 416:../Startup/system_XMC4500.c ****     {
 417:../Startup/system_XMC4500.c ****       /* wait until HIB domain is enabled */
 418:../Startup/system_XMC4500.c ****     }
 419:../Startup/system_XMC4500.c ****   }
 420:../Startup/system_XMC4500.c **** 
 421:../Startup/system_XMC4500.c ****   /* Remove the reset only if HIB domain were in a state of reset */
 422:../Startup/system_XMC4500.c ****   if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 284              	 .loc 1 422 0 is_stmt 1
 285 002a 6F4B     	 ldr r3,.L22+4
 286 002c 1B68     	 ldr r3,[r3]
 287 002e 03F40073 	 and r3,r3,#512
 288 0032 002B     	 cmp r3,#0
 289 0034 09D0     	 beq .L13
 423:../Startup/system_XMC4500.c ****   {
 424:../Startup/system_XMC4500.c ****     SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 290              	 .loc 1 424 0
 291 0036 6C4A     	 ldr r2,.L22+4
 292 0038 6B4B     	 ldr r3,.L22+4
 293 003a 9B68     	 ldr r3,[r3,#8]
 294 003c 43F40073 	 orr r3,r3,#512
 295 0040 9360     	 str r3,[r2,#8]
 425:../Startup/system_XMC4500.c ****     delay(DELAY_CNT_150US_50MHZ);
 296              	 .loc 1 425 0
 297 0042 41F64C50 	 movw r0,#7500
 298 0046 FFF7FEFF 	 bl delay
 299              	.L13:
 426:../Startup/system_XMC4500.c ****   }
 427:../Startup/system_XMC4500.c ****   
 428:../Startup/system_XMC4500.c **** #if STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP
 429:../Startup/system_XMC4500.c ****   /* Enable OSC_ULP */
 430:../Startup/system_XMC4500.c ****   if ((SCU_HIBERNATE->OSCULCTRL & SCU_HIBERNATE_OSCULCTRL_MODE_Msk) != 0UL)
 431:../Startup/system_XMC4500.c ****   {
 432:../Startup/system_XMC4500.c ****     /*enable OSC_ULP*/
 433:../Startup/system_XMC4500.c ****     while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 434:../Startup/system_XMC4500.c ****     {
 435:../Startup/system_XMC4500.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 436:../Startup/system_XMC4500.c ****     }
 437:../Startup/system_XMC4500.c ****     SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 438:../Startup/system_XMC4500.c **** 
 439:../Startup/system_XMC4500.c ****     /* Check if the clock is OK using OSCULP Oscillator Watchdog*/
 440:../Startup/system_XMC4500.c ****     while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 441:../Startup/system_XMC4500.c ****     {
 442:../Startup/system_XMC4500.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 443:../Startup/system_XMC4500.c ****     }
 444:../Startup/system_XMC4500.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 445:../Startup/system_XMC4500.c **** 
 446:../Startup/system_XMC4500.c ****     /* wait till clock is stable */
 447:../Startup/system_XMC4500.c ****     do
 448:../Startup/system_XMC4500.c ****     {
 449:../Startup/system_XMC4500.c ****       while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 450:../Startup/system_XMC4500.c ****       {
 451:../Startup/system_XMC4500.c ****         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 452:../Startup/system_XMC4500.c ****       }
 453:../Startup/system_XMC4500.c ****       SCU_HIBERNATE->HDCLR |= SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 454:../Startup/system_XMC4500.c **** 
 455:../Startup/system_XMC4500.c ****       delay(DELAY_CNT_50US_50MHZ);
 456:../Startup/system_XMC4500.c **** 
 457:../Startup/system_XMC4500.c ****     } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 458:../Startup/system_XMC4500.c **** 
 459:../Startup/system_XMC4500.c ****   }
 460:../Startup/system_XMC4500.c **** 
 461:../Startup/system_XMC4500.c ****   /* now OSC_ULP is running and can be used*/
 462:../Startup/system_XMC4500.c ****   /* Select OSC_ULP as the clock source for RTC and STDBY*/
 463:../Startup/system_XMC4500.c ****   while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 464:../Startup/system_XMC4500.c ****   {
 465:../Startup/system_XMC4500.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 466:../Startup/system_XMC4500.c ****   }
 467:../Startup/system_XMC4500.c ****   SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
 468:../Startup/system_XMC4500.c **** 
 469:../Startup/system_XMC4500.c **** #endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */
 470:../Startup/system_XMC4500.c **** 
 471:../Startup/system_XMC4500.c ****   /* Enable automatic calibration of internal fast oscillator */
 472:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 300              	 .loc 1 472 0
 301 004a 684A     	 ldr r2,.L22+8
 302 004c 674B     	 ldr r3,.L22+8
 303 004e 5B68     	 ldr r3,[r3,#4]
 304 0050 43F40023 	 orr r3,r3,#524288
 305 0054 5360     	 str r3,[r2,#4]
 473:../Startup/system_XMC4500.c **** #endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */
 474:../Startup/system_XMC4500.c **** 
 475:../Startup/system_XMC4500.c ****   delay(DELAY_CNT_50US_50MHZ);
 306              	 .loc 1 475 0
 307 0056 40F6C410 	 movw r0,#2500
 308 005a FFF7FEFF 	 bl delay
 476:../Startup/system_XMC4500.c **** 
 477:../Startup/system_XMC4500.c **** #if ENABLE_PLL
 478:../Startup/system_XMC4500.c **** 
 479:../Startup/system_XMC4500.c ****   /* enable PLL */
 480:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 309              	 .loc 1 480 0
 310 005e 634A     	 ldr r2,.L22+8
 311 0060 624B     	 ldr r3,.L22+8
 312 0062 5B68     	 ldr r3,[r3,#4]
 313 0064 23F48033 	 bic r3,r3,#65536
 314 0068 23F00203 	 bic r3,r3,#2
 315 006c 5360     	 str r3,[r2,#4]
 481:../Startup/system_XMC4500.c **** 
 482:../Startup/system_XMC4500.c **** #if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
 483:../Startup/system_XMC4500.c ****   /* enable OSC_HP */
 484:../Startup/system_XMC4500.c ****   if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 316              	 .loc 1 484 0
 317 006e 604B     	 ldr r3,.L22+12
 318 0070 5B68     	 ldr r3,[r3,#4]
 319 0072 03F03003 	 and r3,r3,#48
 320 0076 002B     	 cmp r3,#0
 321 0078 26D0     	 beq .L14
 485:../Startup/system_XMC4500.c ****   {
 486:../Startup/system_XMC4500.c ****     SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 322              	 .loc 1 486 0
 323 007a 5D4A     	 ldr r2,.L22+12
 324 007c 5C4B     	 ldr r3,.L22+12
 325 007e 5B68     	 ldr r3,[r3,#4]
 326 0080 23F47023 	 bic r3,r3,#983040
 327 0084 23F03003 	 bic r3,r3,#48
 328 0088 5360     	 str r3,[r2,#4]
 487:../Startup/system_XMC4500.c ****     SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 329              	 .loc 1 487 0
 330 008a FFF7FEFF 	 bl OSCHP_GetFrequency
 331 008e 0246     	 mov r2,r0
 332 0090 584B     	 ldr r3,.L22+16
 333 0092 A3FB0223 	 umull r2,r3,r3,r2
 334 0096 1B0D     	 lsrs r3,r3,#20
 335 0098 013B     	 subs r3,r3,#1
 336 009a 1B04     	 lsls r3,r3,#16
 337 009c 5449     	 ldr r1,.L22+12
 338 009e 544A     	 ldr r2,.L22+12
 339 00a0 5268     	 ldr r2,[r2,#4]
 340 00a2 1343     	 orrs r3,r3,r2
 341 00a4 4B60     	 str r3,[r1,#4]
 488:../Startup/system_XMC4500.c **** 
 489:../Startup/system_XMC4500.c ****     /* select OSC_HP clock as PLL input */
 490:../Startup/system_XMC4500.c ****     SCU_PLL->PLLCON2 = 0;
 342              	 .loc 1 490 0
 343 00a6 514B     	 ldr r3,.L22+8
 344 00a8 0022     	 movs r2,#0
 345 00aa DA60     	 str r2,[r3,#12]
 491:../Startup/system_XMC4500.c **** 
 492:../Startup/system_XMC4500.c ****     /* restart OSC Watchdog */
 493:../Startup/system_XMC4500.c ****     SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 346              	 .loc 1 493 0
 347 00ac 4F4A     	 ldr r2,.L22+8
 348 00ae 4F4B     	 ldr r3,.L22+8
 349 00b0 5B68     	 ldr r3,[r3,#4]
 350 00b2 23F40033 	 bic r3,r3,#131072
 351 00b6 5360     	 str r3,[r2,#4]
 494:../Startup/system_XMC4500.c **** 
 495:../Startup/system_XMC4500.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 352              	 .loc 1 495 0
 353 00b8 00BF     	 nop
 354              	.L15:
 355              	 .loc 1 495 0 is_stmt 0 discriminator 1
 356 00ba 4C4B     	 ldr r3,.L22+8
 357 00bc 1B68     	 ldr r3,[r3]
 358 00be 03F46073 	 and r3,r3,#896
 359 00c2 B3F5607F 	 cmp r3,#896
 360 00c6 F8D1     	 bne .L15
 361              	.L14:
 496:../Startup/system_XMC4500.c ****     {
 497:../Startup/system_XMC4500.c ****       /* wait till OSC_HP output frequency is usable */
 498:../Startup/system_XMC4500.c ****     }
 499:../Startup/system_XMC4500.c ****   }
 500:../Startup/system_XMC4500.c **** #else /* PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI */
 501:../Startup/system_XMC4500.c **** 
 502:../Startup/system_XMC4500.c ****   /* select backup clock as PLL input */
 503:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON2 = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk;
 504:../Startup/system_XMC4500.c **** #endif
 505:../Startup/system_XMC4500.c **** 
 506:../Startup/system_XMC4500.c ****   /* Go to bypass the Main PLL */
 507:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 362              	 .loc 1 507 0 is_stmt 1
 363 00c8 484A     	 ldr r2,.L22+8
 364 00ca 484B     	 ldr r3,.L22+8
 365 00cc 5B68     	 ldr r3,[r3,#4]
 366 00ce 43F00103 	 orr r3,r3,#1
 367 00d2 5360     	 str r3,[r2,#4]
 508:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 368              	 .loc 1 508 0
 369 00d4 00BF     	 nop
 370              	.L16:
 371              	 .loc 1 508 0 is_stmt 0 discriminator 1
 372 00d6 454B     	 ldr r3,.L22+8
 373 00d8 1B68     	 ldr r3,[r3]
 374 00da 03F00103 	 and r3,r3,#1
 375 00de 002B     	 cmp r3,#0
 376 00e0 F9D0     	 beq .L16
 509:../Startup/system_XMC4500.c ****   {
 510:../Startup/system_XMC4500.c ****     /* wait for prescaler mode */
 511:../Startup/system_XMC4500.c ****   }
 512:../Startup/system_XMC4500.c **** 
 513:../Startup/system_XMC4500.c ****   /* disconnect Oscillator from PLL */
 514:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 377              	 .loc 1 514 0 is_stmt 1
 378 00e2 424A     	 ldr r2,.L22+8
 379 00e4 414B     	 ldr r3,.L22+8
 380 00e6 5B68     	 ldr r3,[r3,#4]
 381 00e8 43F01003 	 orr r3,r3,#16
 382 00ec 5360     	 str r3,[r2,#4]
 515:../Startup/system_XMC4500.c **** 
 516:../Startup/system_XMC4500.c ****   /* Setup divider settings for main PLL */
 517:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 383              	 .loc 1 517 0
 384 00ee 3F4B     	 ldr r3,.L22+8
 385 00f0 414A     	 ldr r2,.L22+20
 386 00f2 9A60     	 str r2,[r3,#8]
 518:../Startup/system_XMC4500.c ****                       (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
 519:../Startup/system_XMC4500.c ****                       (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 520:../Startup/system_XMC4500.c **** 
 521:../Startup/system_XMC4500.c ****   /* Set OSCDISCDIS */
 522:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 387              	 .loc 1 522 0
 388 00f4 3D4A     	 ldr r2,.L22+8
 389 00f6 3D4B     	 ldr r3,.L22+8
 390 00f8 5B68     	 ldr r3,[r3,#4]
 391 00fa 43F04003 	 orr r3,r3,#64
 392 00fe 5360     	 str r3,[r2,#4]
 523:../Startup/system_XMC4500.c **** 
 524:../Startup/system_XMC4500.c ****   /* connect Oscillator to PLL */
 525:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 393              	 .loc 1 525 0
 394 0100 3A4A     	 ldr r2,.L22+8
 395 0102 3A4B     	 ldr r3,.L22+8
 396 0104 5B68     	 ldr r3,[r3,#4]
 397 0106 23F01003 	 bic r3,r3,#16
 398 010a 5360     	 str r3,[r2,#4]
 526:../Startup/system_XMC4500.c **** 
 527:../Startup/system_XMC4500.c ****   /* restart PLL Lock detection */
 528:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 399              	 .loc 1 528 0
 400 010c 374A     	 ldr r2,.L22+8
 401 010e 374B     	 ldr r3,.L22+8
 402 0110 5B68     	 ldr r3,[r3,#4]
 403 0112 43F48023 	 orr r3,r3,#262144
 404 0116 5360     	 str r3,[r2,#4]
 529:../Startup/system_XMC4500.c **** 
 530:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 405              	 .loc 1 530 0
 406 0118 00BF     	 nop
 407              	.L17:
 408              	 .loc 1 530 0 is_stmt 0 discriminator 1
 409 011a 344B     	 ldr r3,.L22+8
 410 011c 1B68     	 ldr r3,[r3]
 411 011e 03F00403 	 and r3,r3,#4
 412 0122 002B     	 cmp r3,#0
 413 0124 F9D0     	 beq .L17
 531:../Startup/system_XMC4500.c ****   {
 532:../Startup/system_XMC4500.c ****     /* wait for PLL Lock */
 533:../Startup/system_XMC4500.c ****   }
 534:../Startup/system_XMC4500.c **** 
 535:../Startup/system_XMC4500.c ****   /* Disable bypass- put PLL clock back */
 536:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 414              	 .loc 1 536 0 is_stmt 1
 415 0126 314A     	 ldr r2,.L22+8
 416 0128 304B     	 ldr r3,.L22+8
 417 012a 5B68     	 ldr r3,[r3,#4]
 418 012c 23F00103 	 bic r3,r3,#1
 419 0130 5360     	 str r3,[r2,#4]
 537:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 420              	 .loc 1 537 0
 421 0132 00BF     	 nop
 422              	.L18:
 423              	 .loc 1 537 0 is_stmt 0 discriminator 1
 424 0134 2D4B     	 ldr r3,.L22+8
 425 0136 1B68     	 ldr r3,[r3]
 426 0138 03F00103 	 and r3,r3,#1
 427 013c 002B     	 cmp r3,#0
 428 013e F9D1     	 bne .L18
 538:../Startup/system_XMC4500.c ****   {
 539:../Startup/system_XMC4500.c ****     /* wait for normal mode */
 540:../Startup/system_XMC4500.c ****   }
 541:../Startup/system_XMC4500.c **** #endif /* ENABLE_PLL */
 542:../Startup/system_XMC4500.c **** 
 543:../Startup/system_XMC4500.c **** #if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
 544:../Startup/system_XMC4500.c ****   /* Switch system clock to PLL */
 545:../Startup/system_XMC4500.c ****   SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 429              	 .loc 1 545 0 is_stmt 1
 430 0140 2E4A     	 ldr r2,.L22+24
 431 0142 2E4B     	 ldr r3,.L22+24
 432 0144 DB68     	 ldr r3,[r3,#12]
 433 0146 43F48033 	 orr r3,r3,#65536
 434 014a D360     	 str r3,[r2,#12]
 546:../Startup/system_XMC4500.c **** #else
 547:../Startup/system_XMC4500.c ****   /* Switch system clock to backup clock */
 548:../Startup/system_XMC4500.c ****   SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 549:../Startup/system_XMC4500.c **** #endif
 550:../Startup/system_XMC4500.c **** 
 551:../Startup/system_XMC4500.c ****   /* Before scaling to final frequency we need to setup the clock dividers */
 552:../Startup/system_XMC4500.c ****   SCU_CLK->PBCLKCR = PBCLKDIV;
 435              	 .loc 1 552 0
 436 014c 2B4B     	 ldr r3,.L22+24
 437 014e 0022     	 movs r2,#0
 438 0150 5A61     	 str r2,[r3,#20]
 553:../Startup/system_XMC4500.c ****   SCU_CLK->CPUCLKCR = CPUCLKDIV;
 439              	 .loc 1 553 0
 440 0152 2A4B     	 ldr r3,.L22+24
 441 0154 0022     	 movs r2,#0
 442 0156 1A61     	 str r2,[r3,#16]
 554:../Startup/system_XMC4500.c ****   SCU_CLK->CCUCLKCR = CCUCLKDIV;
 443              	 .loc 1 554 0
 444 0158 284B     	 ldr r3,.L22+24
 445 015a 0022     	 movs r2,#0
 446 015c 1A62     	 str r2,[r3,#32]
 555:../Startup/system_XMC4500.c ****   SCU_CLK->WDTCLKCR = WDTCLKDIV;
 447              	 .loc 1 555 0
 448 015e 274B     	 ldr r3,.L22+24
 449 0160 0022     	 movs r2,#0
 450 0162 5A62     	 str r2,[r3,#36]
 556:../Startup/system_XMC4500.c ****   SCU_CLK->EBUCLKCR = EBUCLKDIV;
 451              	 .loc 1 556 0
 452 0164 254B     	 ldr r3,.L22+24
 453 0166 0022     	 movs r2,#0
 454 0168 DA61     	 str r2,[r3,#28]
 557:../Startup/system_XMC4500.c ****   SCU_CLK->USBCLKCR = USBCLKDIV;
 455              	 .loc 1 557 0
 456 016a 244B     	 ldr r3,.L22+24
 457 016c 0322     	 movs r2,#3
 458 016e 9A61     	 str r2,[r3,#24]
 558:../Startup/system_XMC4500.c **** 
 559:../Startup/system_XMC4500.c **** #if ENABLE_PLL
 560:../Startup/system_XMC4500.c ****   /* PLL frequency stepping...*/
 561:../Startup/system_XMC4500.c ****   /* Reset OSCDISCDIS */
 562:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 459              	 .loc 1 562 0
 460 0170 1E4A     	 ldr r2,.L22+8
 461 0172 1E4B     	 ldr r3,.L22+8
 462 0174 5B68     	 ldr r3,[r3,#4]
 463 0176 23F04003 	 bic r3,r3,#64
 464 017a 5360     	 str r3,[r2,#4]
 563:../Startup/system_XMC4500.c **** 
 564:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 465              	 .loc 1 564 0
 466 017c 1B4B     	 ldr r3,.L22+8
 467 017e 204A     	 ldr r2,.L22+28
 468 0180 9A60     	 str r2,[r3,#8]
 565:../Startup/system_XMC4500.c **** 	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
 566:../Startup/system_XMC4500.c **** 	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 567:../Startup/system_XMC4500.c **** 
 568:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 469              	 .loc 1 568 0
 470 0182 00BF     	 nop
 471              	.L19:
 472              	 .loc 1 568 0 is_stmt 0 discriminator 1
 473 0184 194B     	 ldr r3,.L22+8
 474 0186 1B68     	 ldr r3,[r3]
 475 0188 03F02003 	 and r3,r3,#32
 476 018c 002B     	 cmp r3,#0
 477 018e F9D0     	 beq .L19
 569:../Startup/system_XMC4500.c ****   {
 570:../Startup/system_XMC4500.c ****     /* wait until K2-divider operates on the configured value  */
 571:../Startup/system_XMC4500.c ****   }
 572:../Startup/system_XMC4500.c **** 
 573:../Startup/system_XMC4500.c ****   delay(DELAY_CNT_50US_60MHZ);
 478              	 .loc 1 573 0 is_stmt 1
 479 0190 40F6B830 	 movw r0,#3000
 480 0194 FFF7FEFF 	 bl delay
 574:../Startup/system_XMC4500.c **** 
 575:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 481              	 .loc 1 575 0
 482 0198 144B     	 ldr r3,.L22+8
 483 019a 1A4A     	 ldr r2,.L22+32
 484 019c 9A60     	 str r2,[r3,#8]
 576:../Startup/system_XMC4500.c **** 	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
 577:../Startup/system_XMC4500.c **** 	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 578:../Startup/system_XMC4500.c **** 
 579:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 485              	 .loc 1 579 0
 486 019e 00BF     	 nop
 487              	.L20:
 488              	 .loc 1 579 0 is_stmt 0 discriminator 1
 489 01a0 124B     	 ldr r3,.L22+8
 490 01a2 1B68     	 ldr r3,[r3]
 491 01a4 03F02003 	 and r3,r3,#32
 492 01a8 002B     	 cmp r3,#0
 493 01aa F9D0     	 beq .L20
 580:../Startup/system_XMC4500.c ****   {
 581:../Startup/system_XMC4500.c ****     /* wait until K2-divider operates on the configured value  */
 582:../Startup/system_XMC4500.c ****   }
 583:../Startup/system_XMC4500.c **** 
 584:../Startup/system_XMC4500.c ****   delay(DELAY_CNT_50US_90MHZ);
 494              	 .loc 1 584 0 is_stmt 1
 495 01ac 41F29410 	 movw r0,#4500
 496 01b0 FFF7FEFF 	 bl delay
 585:../Startup/system_XMC4500.c **** 
 586:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 497              	 .loc 1 586 0
 498 01b4 0D4B     	 ldr r3,.L22+8
 499 01b6 144A     	 ldr r2,.L22+36
 500 01b8 9A60     	 str r2,[r3,#8]
 587:../Startup/system_XMC4500.c **** 	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
 588:../Startup/system_XMC4500.c **** 	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 589:../Startup/system_XMC4500.c **** 
 590:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 501              	 .loc 1 590 0
 502 01ba 00BF     	 nop
 503              	.L21:
 504              	 .loc 1 590 0 is_stmt 0 discriminator 1
 505 01bc 0B4B     	 ldr r3,.L22+8
 506 01be 1B68     	 ldr r3,[r3]
 507 01c0 03F02003 	 and r3,r3,#32
 508 01c4 002B     	 cmp r3,#0
 509 01c6 F9D0     	 beq .L21
 591:../Startup/system_XMC4500.c ****   {
 592:../Startup/system_XMC4500.c ****     /* wait until K2-divider operates on the configured value  */
 593:../Startup/system_XMC4500.c ****   }
 594:../Startup/system_XMC4500.c **** 
 595:../Startup/system_XMC4500.c ****   delay(DELAY_CNT_50US_120MHZ);
 510              	 .loc 1 595 0 is_stmt 1
 511 01c8 41F27070 	 movw r0,#6000
 512 01cc FFF7FEFF 	 bl delay
 596:../Startup/system_XMC4500.c **** 
 597:../Startup/system_XMC4500.c ****   SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 513              	 .loc 1 597 0
 514 01d0 0E4B     	 ldr r3,.L22+40
 515 01d2 0522     	 movs r2,#5
 516 01d4 DA60     	 str r2,[r3,#12]
 598:../Startup/system_XMC4500.c **** #endif /* ENABLE_PLL */
 599:../Startup/system_XMC4500.c **** 
 600:../Startup/system_XMC4500.c **** #if ENABLE_USBPLL
 601:../Startup/system_XMC4500.c ****   /* enable USB PLL first */
 602:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 603:../Startup/system_XMC4500.c **** 
 604:../Startup/system_XMC4500.c ****   /* USB PLL uses as clock input the OSC_HP */
 605:../Startup/system_XMC4500.c ****   /* check and if not already running enable OSC_HP */
 606:../Startup/system_XMC4500.c ****   if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 607:../Startup/system_XMC4500.c ****   {
 608:../Startup/system_XMC4500.c ****     /* check if Main PLL is switched on for OSC WDG*/
 609:../Startup/system_XMC4500.c ****     if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 610:../Startup/system_XMC4500.c ****     {
 611:../Startup/system_XMC4500.c ****       /* enable PLL first */
 612:../Startup/system_XMC4500.c ****       SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 613:../Startup/system_XMC4500.c ****     }
 614:../Startup/system_XMC4500.c **** 
 615:../Startup/system_XMC4500.c ****     SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 616:../Startup/system_XMC4500.c ****     SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 617:../Startup/system_XMC4500.c **** 
 618:../Startup/system_XMC4500.c ****     /* restart OSC Watchdog */
 619:../Startup/system_XMC4500.c ****     SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 620:../Startup/system_XMC4500.c **** 
 621:../Startup/system_XMC4500.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 622:../Startup/system_XMC4500.c ****     {
 623:../Startup/system_XMC4500.c ****       /* wait till OSC_HP output frequency is usable */
 624:../Startup/system_XMC4500.c ****     }
 625:../Startup/system_XMC4500.c ****   }
 626:../Startup/system_XMC4500.c **** 
 627:../Startup/system_XMC4500.c ****   /* Setup USB PLL */
 628:../Startup/system_XMC4500.c ****   /* Go to bypass the USB PLL */
 629:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 630:../Startup/system_XMC4500.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 631:../Startup/system_XMC4500.c ****   {
 632:../Startup/system_XMC4500.c ****     /* wait for prescaler mode */
 633:../Startup/system_XMC4500.c ****   }
 634:../Startup/system_XMC4500.c **** 
 635:../Startup/system_XMC4500.c ****   /* disconnect Oscillator from USB PLL */
 636:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 637:../Startup/system_XMC4500.c **** 
 638:../Startup/system_XMC4500.c ****   /* Setup Divider settings for USB PLL */
 639:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 640:../Startup/system_XMC4500.c ****                         (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));
 641:../Startup/system_XMC4500.c **** 
 642:../Startup/system_XMC4500.c ****   /* Set OSCDISCDIS */
 643:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 644:../Startup/system_XMC4500.c **** 
 645:../Startup/system_XMC4500.c ****   /* connect Oscillator to USB PLL */
 646:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 647:../Startup/system_XMC4500.c **** 
 648:../Startup/system_XMC4500.c ****   /* restart PLL Lock detection */
 649:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 650:../Startup/system_XMC4500.c **** 
 651:../Startup/system_XMC4500.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 652:../Startup/system_XMC4500.c ****   {
 653:../Startup/system_XMC4500.c ****     /* wait for PLL Lock */
 654:../Startup/system_XMC4500.c ****   }
 655:../Startup/system_XMC4500.c **** 
 656:../Startup/system_XMC4500.c ****   /* Disable bypass- put PLL clock back */
 657:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 658:../Startup/system_XMC4500.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 659:../Startup/system_XMC4500.c ****   {
 660:../Startup/system_XMC4500.c ****     /* wait for normal mode */
 661:../Startup/system_XMC4500.c ****   }
 662:../Startup/system_XMC4500.c **** 
 663:../Startup/system_XMC4500.c ****   /* Reset OSCDISCDIS */
 664:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 665:../Startup/system_XMC4500.c **** 
 666:../Startup/system_XMC4500.c ****   SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 667:../Startup/system_XMC4500.c **** #endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */
 668:../Startup/system_XMC4500.c **** 
 669:../Startup/system_XMC4500.c ****   /* Enable selected clocks */
 670:../Startup/system_XMC4500.c ****   SCU_CLK->CLKSET = ENABLE_SCUCLK;
 517              	 .loc 1 670 0
 518 01d6 094B     	 ldr r3,.L22+24
 519 01d8 0022     	 movs r2,#0
 520 01da 5A60     	 str r2,[r3,#4]
 671:../Startup/system_XMC4500.c **** 
 672:../Startup/system_XMC4500.c **** #if ENABLE_EXTCLK == 1
 673:../Startup/system_XMC4500.c ****   /* Configure external clock */
 674:../Startup/system_XMC4500.c ****   SCU_CLK->EXTCLKCR = EXTCLKDIV;
 675:../Startup/system_XMC4500.c **** 
 676:../Startup/system_XMC4500.c **** #if EXTCLK_PIN == EXTCLK_PIN_P1_15
 677:../Startup/system_XMC4500.c ****   /* P1.15 */
 678:../Startup/system_XMC4500.c ****   PORT1->PDR1 &= ~PORT1_PDR1_PD15_Msk;
 679:../Startup/system_XMC4500.c ****   PORT1->IOCR12 = (PORT1->IOCR12 & ~PORT1_IOCR12_PC15_Msk) | (0x11U << PORT1_IOCR12_PC15_Pos);
 680:../Startup/system_XMC4500.c **** #else
 681:../Startup/system_XMC4500.c ****   /* P0.8 */
 682:../Startup/system_XMC4500.c ****   PORT0->HWSEL &= ~PORT0_HWSEL_HW8_Msk;
 683:../Startup/system_XMC4500.c ****   PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
 684:../Startup/system_XMC4500.c ****   PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
 685:../Startup/system_XMC4500.c **** #endif
 686:../Startup/system_XMC4500.c **** 
 687:../Startup/system_XMC4500.c **** #endif  /* ENABLE_EXTCLK == 1  */
 688:../Startup/system_XMC4500.c **** 
 689:../Startup/system_XMC4500.c ****   SystemCoreClockUpdate();
 521              	 .loc 1 689 0
 522 01dc FFF7FEFF 	 bl SystemCoreClockUpdate
 690:../Startup/system_XMC4500.c **** }
 523              	 .loc 1 690 0
 524 01e0 80BD     	 pop {r7,pc}
 525              	.L23:
 526 01e2 00BF     	 .align 2
 527              	.L22:
 528 01e4 00420050 	 .word 1342194176
 529 01e8 00440050 	 .word 1342194688
 530 01ec 10470050 	 .word 1342195472
 531 01f0 00470050 	 .word 1342195456
 532 01f4 6BCA5F6B 	 .word 1801439851
 533 01f8 004F1301 	 .word 18042624
 534 01fc 00460050 	 .word 1342195200
 535 0200 004F0701 	 .word 17256192
 536 0204 004F0401 	 .word 17059584
 537 0208 004F0301 	 .word 16994048
 538 020c 60410050 	 .word 1342194016
 539              	 .cfi_endproc
 540              	.LFE136:
 542              	 .section .text.SystemCoreClockUpdate,"ax",%progbits
 543              	 .align 2
 544              	 .weak SystemCoreClockUpdate
 545              	 .thumb
 546              	 .thumb_func
 548              	SystemCoreClockUpdate:
 549              	.LFB137:
 691:../Startup/system_XMC4500.c **** 
 692:../Startup/system_XMC4500.c **** __WEAK void SystemCoreClockUpdate(void)
 693:../Startup/system_XMC4500.c **** {
 550              	 .loc 1 693 0
 551              	 .cfi_startproc
 552              	 
 553              	 
 554 0000 80B5     	 push {r7,lr}
 555              	.LCFI16:
 556              	 .cfi_def_cfa_offset 8
 557              	 .cfi_offset 7,-8
 558              	 .cfi_offset 14,-4
 559 0002 84B0     	 sub sp,sp,#16
 560              	.LCFI17:
 561              	 .cfi_def_cfa_offset 24
 562 0004 00AF     	 add r7,sp,#0
 563              	.LCFI18:
 564              	 .cfi_def_cfa_register 7
 694:../Startup/system_XMC4500.c ****   uint32_t pdiv;
 695:../Startup/system_XMC4500.c ****   uint32_t ndiv;
 696:../Startup/system_XMC4500.c ****   uint32_t kdiv;
 697:../Startup/system_XMC4500.c ****   uint32_t temp;
 698:../Startup/system_XMC4500.c **** 
 699:../Startup/system_XMC4500.c ****   if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 565              	 .loc 1 699 0
 566 0006 2F4B     	 ldr r3,.L31
 567 0008 DB68     	 ldr r3,[r3,#12]
 568 000a 03F48033 	 and r3,r3,#65536
 569 000e 002B     	 cmp r3,#0
 570 0010 3ED0     	 beq .L25
 700:../Startup/system_XMC4500.c ****   {
 701:../Startup/system_XMC4500.c ****     /* fPLL is clock source for fSYS */
 702:../Startup/system_XMC4500.c ****     if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 571              	 .loc 1 702 0
 572 0012 2D4B     	 ldr r3,.L31+4
 573 0014 DB68     	 ldr r3,[r3,#12]
 574 0016 03F00103 	 and r3,r3,#1
 575 001a 002B     	 cmp r3,#0
 576 001c 02D0     	 beq .L26
 703:../Startup/system_XMC4500.c ****     {
 704:../Startup/system_XMC4500.c ****       /* PLL input clock is the backup clock (fOFI) */
 705:../Startup/system_XMC4500.c ****       temp = OFI_FREQUENCY;
 577              	 .loc 1 705 0
 578 001e 2B4B     	 ldr r3,.L31+8
 579 0020 FB60     	 str r3,[r7,#12]
 580 0022 02E0     	 b .L27
 581              	.L26:
 706:../Startup/system_XMC4500.c ****     }
 707:../Startup/system_XMC4500.c ****     else
 708:../Startup/system_XMC4500.c ****     {
 709:../Startup/system_XMC4500.c ****       /* PLL input clock is the high performance osicllator (fOSCHP) */
 710:../Startup/system_XMC4500.c ****       temp = OSCHP_GetFrequency();
 582              	 .loc 1 710 0
 583 0024 FFF7FEFF 	 bl OSCHP_GetFrequency
 584 0028 F860     	 str r0,[r7,#12]
 585              	.L27:
 711:../Startup/system_XMC4500.c ****     }
 712:../Startup/system_XMC4500.c **** 
 713:../Startup/system_XMC4500.c ****     /* check if PLL is locked */
 714:../Startup/system_XMC4500.c ****     if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 586              	 .loc 1 714 0
 587 002a 274B     	 ldr r3,.L31+4
 588 002c 1B68     	 ldr r3,[r3]
 589 002e 03F00403 	 and r3,r3,#4
 590 0032 002B     	 cmp r3,#0
 591 0034 20D0     	 beq .L28
 715:../Startup/system_XMC4500.c ****     {
 716:../Startup/system_XMC4500.c ****       /* PLL normal mode */
 717:../Startup/system_XMC4500.c ****       /* read back divider settings */
 718:../Startup/system_XMC4500.c ****       pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 592              	 .loc 1 718 0
 593 0036 244B     	 ldr r3,.L31+4
 594 0038 9B68     	 ldr r3,[r3,#8]
 595 003a 03F07063 	 and r3,r3,#251658240
 596 003e 1B0E     	 lsrs r3,r3,#24
 597 0040 0133     	 adds r3,r3,#1
 598 0042 BB60     	 str r3,[r7,#8]
 719:../Startup/system_XMC4500.c ****       ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 599              	 .loc 1 719 0
 600 0044 204B     	 ldr r3,.L31+4
 601 0046 9B68     	 ldr r3,[r3,#8]
 602 0048 03F4FE43 	 and r3,r3,#32512
 603 004c 1B0A     	 lsrs r3,r3,#8
 604 004e 0133     	 adds r3,r3,#1
 605 0050 7B60     	 str r3,[r7,#4]
 720:../Startup/system_XMC4500.c ****       kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 606              	 .loc 1 720 0
 607 0052 1D4B     	 ldr r3,.L31+4
 608 0054 9B68     	 ldr r3,[r3,#8]
 609 0056 03F4FE03 	 and r3,r3,#8323072
 610 005a 1B0C     	 lsrs r3,r3,#16
 611 005c 0133     	 adds r3,r3,#1
 612 005e 3B60     	 str r3,[r7]
 721:../Startup/system_XMC4500.c **** 
 722:../Startup/system_XMC4500.c ****       temp = (temp / (pdiv * kdiv)) * ndiv;
 613              	 .loc 1 722 0
 614 0060 BB68     	 ldr r3,[r7,#8]
 615 0062 3A68     	 ldr r2,[r7]
 616 0064 02FB03F3 	 mul r3,r2,r3
 617 0068 FA68     	 ldr r2,[r7,#12]
 618 006a B2FBF3F3 	 udiv r3,r2,r3
 619 006e 7A68     	 ldr r2,[r7,#4]
 620 0070 02FB03F3 	 mul r3,r2,r3
 621 0074 FB60     	 str r3,[r7,#12]
 622 0076 0DE0     	 b .L30
 623              	.L28:
 723:../Startup/system_XMC4500.c ****     }
 724:../Startup/system_XMC4500.c ****     else
 725:../Startup/system_XMC4500.c ****     {
 726:../Startup/system_XMC4500.c ****       /* PLL prescalar mode */
 727:../Startup/system_XMC4500.c ****       /* read back divider settings */
 728:../Startup/system_XMC4500.c ****       kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 624              	 .loc 1 728 0
 625 0078 134B     	 ldr r3,.L31+4
 626 007a 9B68     	 ldr r3,[r3,#8]
 627 007c 03F07F03 	 and r3,r3,#127
 628 0080 0133     	 adds r3,r3,#1
 629 0082 3B60     	 str r3,[r7]
 729:../Startup/system_XMC4500.c ****       
 730:../Startup/system_XMC4500.c ****       temp = (temp / kdiv);
 630              	 .loc 1 730 0
 631 0084 FA68     	 ldr r2,[r7,#12]
 632 0086 3B68     	 ldr r3,[r7]
 633 0088 B2FBF3F3 	 udiv r3,r2,r3
 634 008c FB60     	 str r3,[r7,#12]
 635 008e 01E0     	 b .L30
 636              	.L25:
 731:../Startup/system_XMC4500.c ****     }
 732:../Startup/system_XMC4500.c ****   }
 733:../Startup/system_XMC4500.c ****   else
 734:../Startup/system_XMC4500.c ****   {
 735:../Startup/system_XMC4500.c ****     /* fOFI is clock source for fSYS */    
 736:../Startup/system_XMC4500.c ****     temp = OFI_FREQUENCY;
 637              	 .loc 1 736 0
 638 0090 0E4B     	 ldr r3,.L31+8
 639 0092 FB60     	 str r3,[r7,#12]
 640              	.L30:
 737:../Startup/system_XMC4500.c ****   }
 738:../Startup/system_XMC4500.c **** 
 739:../Startup/system_XMC4500.c ****   temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 641              	 .loc 1 739 0
 642 0094 0B4B     	 ldr r3,.L31
 643 0096 DB68     	 ldr r3,[r3,#12]
 644 0098 DBB2     	 uxtb r3,r3
 645 009a 0133     	 adds r3,r3,#1
 646 009c FA68     	 ldr r2,[r7,#12]
 647 009e B2FBF3F3 	 udiv r3,r2,r3
 648 00a2 FB60     	 str r3,[r7,#12]
 740:../Startup/system_XMC4500.c ****   temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 649              	 .loc 1 740 0
 650 00a4 074B     	 ldr r3,.L31
 651 00a6 1B69     	 ldr r3,[r3,#16]
 652 00a8 03F00103 	 and r3,r3,#1
 653 00ac 0133     	 adds r3,r3,#1
 654 00ae FA68     	 ldr r2,[r7,#12]
 655 00b0 B2FBF3F3 	 udiv r3,r2,r3
 656 00b4 FB60     	 str r3,[r7,#12]
 741:../Startup/system_XMC4500.c **** 
 742:../Startup/system_XMC4500.c ****   SystemCoreClock = temp;
 657              	 .loc 1 742 0
 658 00b6 064A     	 ldr r2,.L31+12
 659 00b8 FB68     	 ldr r3,[r7,#12]
 660 00ba 1360     	 str r3,[r2]
 743:../Startup/system_XMC4500.c **** }
 661              	 .loc 1 743 0
 662 00bc 1037     	 adds r7,r7,#16
 663              	.LCFI19:
 664              	 .cfi_def_cfa_offset 8
 665 00be BD46     	 mov sp,r7
 666              	.LCFI20:
 667              	 .cfi_def_cfa_register 13
 668              	 
 669 00c0 80BD     	 pop {r7,pc}
 670              	.L32:
 671 00c2 00BF     	 .align 2
 672              	.L31:
 673 00c4 00460050 	 .word 1342195200
 674 00c8 10470050 	 .word 1342195472
 675 00cc 00366E01 	 .word 24000000
 676 00d0 00000000 	 .word SystemCoreClock
 677              	 .cfi_endproc
 678              	.LFE137:
 680              	 .section .text.OSCHP_GetFrequency,"ax",%progbits
 681              	 .align 2
 682              	 .weak OSCHP_GetFrequency
 683              	 .thumb
 684              	 .thumb_func
 686              	OSCHP_GetFrequency:
 687              	.LFB138:
 744:../Startup/system_XMC4500.c **** 
 745:../Startup/system_XMC4500.c **** __WEAK uint32_t OSCHP_GetFrequency(void)
 746:../Startup/system_XMC4500.c **** {
 688              	 .loc 1 746 0
 689              	 .cfi_startproc
 690              	 
 691              	 
 692              	 
 693 0000 80B4     	 push {r7}
 694              	.LCFI21:
 695              	 .cfi_def_cfa_offset 4
 696              	 .cfi_offset 7,-4
 697 0002 00AF     	 add r7,sp,#0
 698              	.LCFI22:
 699              	 .cfi_def_cfa_register 7
 747:../Startup/system_XMC4500.c ****   return OSCHP_FREQUENCY;
 700              	 .loc 1 747 0
 701 0004 024B     	 ldr r3,.L35
 748:../Startup/system_XMC4500.c **** }
 702              	 .loc 1 748 0
 703 0006 1846     	 mov r0,r3
 704 0008 BD46     	 mov sp,r7
 705              	.LCFI23:
 706              	 .cfi_def_cfa_register 13
 707              	 
 708 000a 5DF8047B 	 ldr r7,[sp],#4
 709              	.LCFI24:
 710              	 .cfi_restore 7
 711              	 .cfi_def_cfa_offset 0
 712 000e 7047     	 bx lr
 713              	.L36:
 714              	 .align 2
 715              	.L35:
 716 0010 001BB700 	 .word 12000000
 717              	 .cfi_endproc
 718              	.LFE138:
 720              	 .text
 721              	.Letext0:
 722              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 723              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 724              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/core_cm4.h"
 725              	 .file 6 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_XMC4500.c
    {standard input}:24     .no_init:00000000 SystemCoreClock
    {standard input}:21     .no_init:00000000 $d
    {standard input}:30     .no_init:00000004 g_chipid
    {standard input}:33     .text.delay:00000000 $t
    {standard input}:37     .text.delay:00000000 delay
    {standard input}:93     .text.SystemInit:00000000 $t
    {standard input}:98     .text.SystemInit:00000000 SystemInit
    {standard input}:139    .text.SystemCoreSetup:00000000 SystemCoreSetup
    {standard input}:248    .text.SystemCoreClockSetup:00000000 SystemCoreClockSetup
    {standard input}:129    .text.SystemInit:0000001c $d
    {standard input}:134    .text.SystemCoreSetup:00000000 $t
    {standard input}:236    .text.SystemCoreSetup:00000064 $d
    {standard input}:243    .text.SystemCoreClockSetup:00000000 $t
    {standard input}:686    .text.OSCHP_GetFrequency:00000000 OSCHP_GetFrequency
    {standard input}:548    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
    {standard input}:528    .text.SystemCoreClockSetup:000001e4 $d
    {standard input}:543    .text.SystemCoreClockUpdate:00000000 $t
    {standard input}:673    .text.SystemCoreClockUpdate:000000c4 $d
    {standard input}:681    .text.OSCHP_GetFrequency:00000000 $t
    {standard input}:716    .text.OSCHP_GetFrequency:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__Vectors
