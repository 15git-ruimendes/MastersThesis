   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm UN_FILT_VALS,32,4
  20              	 .comm FILT_VALS,32,4
  21              	 .comm FIR_CURRENT_A,12,4
  22              	 .comm FIR_CURRENT_B,12,4
  23              	 .comm FIR_CURRENT_C,12,4
  24              	 .comm FIR_CURRENT_A_pState,480,4
  25              	 .comm FIR_CURRENT_B_pState,480,4
  26              	 .comm FIR_CURRENT_C_pState,480,4
  27              	 .comm FIR_RPM_COS,12,4
  28              	 .comm FIR_RPM_SIN,12,4
  29              	 .comm FIR_RPM_COS_pState,404,4
  30              	 .comm FIR_RPM_SIN_pState,404,4
  31              	 .comm FIR_V_DC,12,4
  32              	 .comm FIR_V_DC_pState,412,4
  33              	 .global FIR_V_DC_pCoeffs
  34              	 .section .rodata.FIR_V_DC_pCoeffs,"a",%progbits
  35              	 .align 2
  38              	FIR_V_DC_pCoeffs:
  39 0000 00000000 	 .space 412
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              	 .global FIR_RPM_pCoeffs
  41              	 .section .rodata.FIR_RPM_pCoeffs,"a",%progbits
  42              	 .align 2
  45              	FIR_RPM_pCoeffs:
  46 0000 00000000 	 .space 404
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              	 .global FIR_CURRENT_pCoeffs
  48              	 .section .rodata.FIR_CURRENT_pCoeffs,"a",%progbits
  49              	 .align 2
  52              	FIR_CURRENT_pCoeffs:
  53 0000 EDC3813B 	 .word 998360045
  54 0004 93DEA1BA 	 .word -1163796845
  55 0008 37C4F3BA 	 .word -1158429641
  56 000c 1A9515BB 	 .word -1156213478
  57 0010 402200BB 	 .word -1157619136
  58 0014 94C43CBA 	 .word -1170422636
  59 0018 0C51873A 	 .word 981946636
  60 001c A5FE223B 	 .word 992149157
  61 0020 BD68373B 	 .word 993487037
  62 0024 B25ACE3A 	 .word 986602162
  63 0028 D9C553BA 	 .word -1168914983
  64 002c DB9A55BB 	 .word -1152017701
  65 0030 42CA91BB 	 .word -1148073406
  66 0034 2BEE64BB 	 .word -1151013333
  67 0038 352C08BA 	 .word -1173869515
  68 003c CF58533B 	 .word 995317967
  69 0040 9A04C03B 	 .word 1002439834
  70 0044 0C92BD3B 	 .word 1002279436
  71 0048 89A5293B 	 .word 992585097
  72 004c FE5326BB 	 .word -1155116034
  73 0050 2631EBBB 	 .word -1142214362
  74 0054 71C30FBC 	 .word -1139817615
  75 0058 6BE0C3BB 	 .word -1144790933
  76 005c 3D68F139 	 .word 972122173
  77 0060 406CFC3B 	 .word 1006398528
  78 0064 E2A3453C 	 .word 1011196898
  79 0068 6FE52F3C 	 .word 1009771887
  80 006c 14FE623B 	 .word 996343316
  81 0070 4F02E3BB 	 .word -1142750641
  82 0074 A1AF7DBC 	 .word -1132613727
  83 0078 9C098EBC 	 .word -1131542116
  84 007c 8F0228BC 	 .word -1138228593
  85 0080 80A8753B 	 .word 997566592
  86 0084 82B6983C 	 .word 1016641154
  87 0088 5EB1DA3C 	 .word 1020965214
  88 008c DAAFB43C 	 .word 1018474458
  89 0090 837D853B 	 .word 998604163
  90 0094 AED4ADBC 	 .word -1129458514
  91 0098 58D92DBD 	 .word -1121068712
  92 009c E2C53FBD 	 .word -1119894046
  93 00a0 2F99CFBC 	 .word -1127245521
  94 00a4 F494BB3C 	 .word 1018926324
  95 00a8 328DB63D 	 .word 1035373874
  96 00ac ABC7203E 	 .word 1042335659
  97 00b0 CDB9543E 	 .word 1045739981
  98 00b4 4CF3673E 	 .word 1046999884
  99 00b8 CDB9543E 	 .word 1045739981
 100 00bc ABC7203E 	 .word 1042335659
 101 00c0 328DB63D 	 .word 1035373874
 102 00c4 F494BB3C 	 .word 1018926324
 103 00c8 2F99CFBC 	 .word -1127245521
 104 00cc E2C53FBD 	 .word -1119894046
 105 00d0 58D92DBD 	 .word -1121068712
 106 00d4 AED4ADBC 	 .word -1129458514
 107 00d8 837D853B 	 .word 998604163
 108 00dc DAAFB43C 	 .word 1018474458
 109 00e0 5EB1DA3C 	 .word 1020965214
 110 00e4 82B6983C 	 .word 1016641154
 111 00e8 80A8753B 	 .word 997566592
 112 00ec 8F0228BC 	 .word -1138228593
 113 00f0 9C098EBC 	 .word -1131542116
 114 00f4 A1AF7DBC 	 .word -1132613727
 115 00f8 4F02E3BB 	 .word -1142750641
 116 00fc 14FE623B 	 .word 996343316
 117 0100 6FE52F3C 	 .word 1009771887
 118 0104 E2A3453C 	 .word 1011196898
 119 0108 406CFC3B 	 .word 1006398528
 120 010c 3D68F139 	 .word 972122173
 121 0110 6BE0C3BB 	 .word -1144790933
 122 0114 71C30FBC 	 .word -1139817615
 123 0118 2631EBBB 	 .word -1142214362
 124 011c FE5326BB 	 .word -1155116034
 125 0120 89A5293B 	 .word 992585097
 126 0124 0C92BD3B 	 .word 1002279436
 127 0128 9A04C03B 	 .word 1002439834
 128 012c CF58533B 	 .word 995317967
 129 0130 352C08BA 	 .word -1173869515
 130 0134 2BEE64BB 	 .word -1151013333
 131 0138 42CA91BB 	 .word -1148073406
 132 013c DB9A55BB 	 .word -1152017701
 133 0140 D9C553BA 	 .word -1168914983
 134 0144 B25ACE3A 	 .word 986602162
 135 0148 BD68373B 	 .word 993487037
 136 014c A5FE223B 	 .word 992149157
 137 0150 0C51873A 	 .word 981946636
 138 0154 94C43CBA 	 .word -1170422636
 139 0158 402200BB 	 .word -1157619136
 140 015c 1A9515BB 	 .word -1156213478
 141 0160 37C4F3BA 	 .word -1158429641
 142 0164 93DEA1BA 	 .word -1163796845
 143 0168 EDC3813B 	 .word 998360045
 144              	 .comm Controller,68,4
 145              	 .comm COS_RPM,4,4
 146              	 .comm SIN_RPM,4,4
 147              	 .comm VAL_RPM,4,4
 148              	 .comm Ia,4,4
 149              	 .comm Ib,4,4
 150              	 .comm Ic,4,4
 151              	 .comm Val,4,4
 152              	 .comm Vbet,4,4
 153              	 .comm V_DC,4,4
 154              	 .comm Temp_Mot,4,4
 155              	 .comm Temp_IGBT,4,4
 156              	 .comm Theta,4,4
 157              	 .comm RPM_REF,4,4
 158              	 .global time
 159              	 .section .bss.time,"aw",%nobits
 160              	 .align 2
 163              	time:
 164 0000 00000000 	 .space 4
 165              	 .comm unfilt,120,4
 166              	 .comm filt,4,4
 167              	 .comm aux,4,4
 168              	 .global ControlCycleCounter
 169              	 .section .bss.ControlCycleCounter,"aw",%nobits
 170              	 .align 2
 173              	ControlCycleCounter:
 174 0000 00000000 	 .space 4
 175              	 .global MeasurmentCycleCounter
 176              	 .section .bss.MeasurmentCycleCounter,"aw",%nobits
 177              	 .align 2
 180              	MeasurmentCycleCounter:
 181 0000 00000000 	 .space 4
 182              	 .global __aeabi_f2d
 183              	 .global __aeabi_dadd
 184              	 .global __aeabi_d2f
 185              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 186              	 .align 2
 187              	 .global CCU43_1_IRQHandler
 188              	 .thumb
 189              	 .thumb_func
 191              	CCU43_1_IRQHandler:
 192              	.LFB431:
 193              	 .file 1 "../main.c"
   1:../main.c     **** #include <Dave.h>
   2:../main.c     **** #include "FOC.h"
   3:../main.c     **** #include "ADC_MEASUREMENT.h"
   4:../main.c     **** #include <probe_scope.h>
   5:../main.c     **** #include <probe_scope_cfg.h>
   6:../main.c     **** 
   7:../main.c     **** #define SECOND_PER_TICKS 0.001f
   8:../main.c     **** 
   9:../main.c     **** #define KpSpeed 10
  10:../main.c     **** #define KiSpeed 0.01
  11:../main.c     **** #define T_PI_RPM 0.1
  12:../main.c     **** #define ACQUISITION_TIME 0.000050
  13:../main.c     **** #define CONTROL_TIME 0.00083
  14:../main.c     **** #define FAULT_CHECK_TIME 0.001
  15:../main.c     **** 
  16:../main.c     **** /*
  17:../main.c     ****  * 0 - Stand alone inverter (SVM & Bellow Nominal Current Ref)
  18:../main.c     ****  * 1 - Open loop motor test (Nominal Id and Iq Curents)
  19:../main.c     ****  * 2 - Closed loop motor test (no-load,0.75 nominal speed ref)
  20:../main.c     ****  * 3 - Closed loop motor test (0.5 load,nominal speed ref)
  21:../main.c     ****  * 4 - Closed loop nominal load test
  22:../main.c     ****  */
  23:../main.c     **** #define TestVal 0
  24:../main.c     **** 
  25:../main.c     **** // Global Variables
  26:../main.c     **** /*
  27:../main.c     ****  * Main controller structure defined in FOC.h.
  28:../main.c     ****  * Manipulated and engaged in CONTROL_LOOP
  29:../main.c     ****  */
  30:../main.c     **** FOC Controller;
  31:../main.c     **** 
  32:../main.c     **** // ADC Measurements
  33:../main.c     **** /*
  34:../main.c     ****  * Primary measurements, filtered and compensated.
  35:../main.c     ****  * Read and manipulated in ACQUISITION_LOOP
  36:../main.c     ****  */
  37:../main.c     **** float32_t COS_RPM,SIN_RPM,VAL_RPM;
  38:../main.c     **** float32_t Ia,Ib,Ic;
  39:../main.c     **** float32_t Val,Vbet;
  40:../main.c     **** float32_t V_DC;
  41:../main.c     **** float32_t Temp_Mot,Temp_IGBT;
  42:../main.c     **** float32_t Theta;
  43:../main.c     **** 
  44:../main.c     **** // Reference and timing variables
  45:../main.c     **** float32_t RPM_REF;
  46:../main.c     **** float32_t time = 0,unfilt[FIR_CURRENT_blockSize],filt,aux;
  47:../main.c     **** 
  48:../main.c     **** // Cycle counters
  49:../main.c     **** uint32_t ControlCycleCounter = 0;
  50:../main.c     **** uint32_t MeasurmentCycleCounter = 0;
  51:../main.c     **** 
  52:../main.c     **** // Speed Controller
  53:../main.c     **** /*
  54:../main.c     ****  * @brief PI Speed controller tuned to a slower dynamic response then current controller
  55:../main.c     ****  * @params RPM_Val Current speed value in RPM
  56:../main.c     ****  * @params Controller_Var FOC structure, function will change IqRef value limited to IQ_LIM
  57:../main.c     ****  */
  58:../main.c     **** void SpeedController(float RPM_Val, FOC* Controller_Var);
  59:../main.c     **** 
  60:../main.c     **** // Field Weakening
  61:../main.c     **** /*
  62:../main.c     ****  * @brief Implements field weakening by reducing Id reference from nominal when current speed is gr
  63:../main.c     ****  *  					wNominal
  64:../main.c     ****  * Id = IdNominal * ----------------
  65:../main.c     ****  * 							w
  66:../main.c     ****  * @params RPM_Val Current speed value in RPM
  67:../main.c     ****  * @params Controller_Var FOC structure, function will change IdRef value limited to ID_MIN
  68:../main.c     ****  */
  69:../main.c     **** void FieldWeakening(float RPM_Val, FOC* Controller_Var);
  70:../main.c     **** 
  71:../main.c     **** ////////////////////////////////////////////////
  72:../main.c     **** /*
  73:../main.c     ****  * ISR ROUTINES
  74:../main.c     ****  */
  75:../main.c     **** ////////////////////////////////////////////////
  76:../main.c     **** /*
  77:../main.c     ****  * Acquisition Loop
  78:../main.c     ****  * Saved ADC_QUEUE variables to global variables namely:
  79:../main.c     ****  * CURRENT_A - Ia
  80:../main.c     ****  * Current_B - Ib
  81:../main.c     ****  * Current_C - Ic
  82:../main.c     ****  * V_DC - V_DC
  83:../main.c     ****  * RPM_COS - RPM_COS
  84:../main.c     ****  * RPM_SIN - RPM_SIN
  85:../main.c     ****  * TEMP_SENS_MOT - Temp_Mot
  86:../main.c     ****  * TEMP_SENS_IGBT - Temp_IGBT
  87:../main.c     ****  */
  88:../main.c     **** void ACQUISITION_LOOP_FUNC()
  89:../main.c     **** {
 194              	 .loc 1 89 0
 195              	 .cfi_startproc
 196              	 
 197              	 
 198 0000 98B5     	 push {r3,r4,r7,lr}
 199              	.LCFI0:
 200              	 .cfi_def_cfa_offset 16
 201              	 .cfi_offset 3,-16
 202              	 .cfi_offset 4,-12
 203              	 .cfi_offset 7,-8
 204              	 .cfi_offset 14,-4
 205 0002 2DED028B 	 fstmfdd sp!,{d8}
 206              	.LCFI1:
 207              	 .cfi_def_cfa_offset 24
 208              	 .cfi_offset 80,-24
 209              	 .cfi_offset 81,-20
 210 0006 00AF     	 add r7,sp,#0
 211              	.LCFI2:
 212              	 .cfi_def_cfa_register 7
  90:../main.c     **** 	/*CURRENT_A_UNFILT = ((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_CURRENT_A) - CURRENT_SENS_A_OFFSE
  91:../main.c     **** 	CURRENT_B_UNFILT = ((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_CURRENT_B) - CURRENT_SENS_B_OFFSET 
  92:../main.c     **** 	CURRENT_C_UNFILT = ((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_CURRENT_C) - CURRENT_SENS_C_OFFSET)
  93:../main.c     **** 	V_DC_UNFILT = ((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_V_DC) - V_DC_SENS_OFFSET )) * V_DC_SENS_
  94:../main.c     **** 	TEMP_SENS_MOT_UNFILT = ((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_TEMP_SENS_MOT) - TEMP_MOT_SENS_
  95:../main.c     **** 	TEMP_SENS_IGBT_UNFILT = ((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_TEMP_SENS_IGBT) - TEMP_IGBT_SE
  96:../main.c     **** 	RPM_COS_UNFILT = ((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_RPM_COS) - RPM_COS_SENS_OFFSET)) * RP
  97:../main.c     **** 	RPM_SIN_UNFILT = ((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_RPM_SIN) - RPM_SIN_SENS_OFFSET)) * RP
  98:../main.c     **** 
  99:../main.c     **** 	arm_fir_f32(&FIR_CURRENT_A,&(CURRENT_A_UNFILT),&Ia,FIR_CURRENT_blockSize);
 100:../main.c     **** 	arm_fir_f32(&FIR_CURRENT_B,&(CURRENT_B_UNFILT),&Ib,FIR_CURRENT_blockSize);
 101:../main.c     **** 	arm_fir_f32(&FIR_CURRENT_C,&(CURRENT_B_UNFILT),&Ic,FIR_CURRENT_blockSize);
 102:../main.c     **** 
 103:../main.c     **** 	arm_fir_f32(&FIR_V_DC,&(V_DC_UNFILT),&V_DC,FIR_V_DC_blockSize);
 104:../main.c     **** 
 105:../main.c     **** 	arm_fir_f32(&FIR_RPM_COS,&(RPM_COS_UNFILT),&COS_RPM,FIR_RPM_blockSize);
 106:../main.c     **** 	arm_fir_f32(&FIR_RPM_SIN,&(RPM_SIN_UNFILT),&SIN_RPM,FIR_RPM_blockSize);
 107:../main.c     **** 
 108:../main.c     **** 	CheckValues();
 109:../main.c     **** 	VAL_RPM = SpeedSensorCoarse(COS_RPM,SIN_RPM);
 110:../main.c     **** 
 111:../main.c     **** */
 112:../main.c     **** 
 113:../main.c     **** 	unfilt[ControlCycleCounter] = 100*arm_sin_f32(2*PI*time*20) + 12*arm_sin_f32(2*PI*time*900);
 213              	 .loc 1 113 0
 214 0008 3B4B     	 ldr r3,.L3+8
 215 000a 1C68     	 ldr r4,[r3]
 216 000c 3B4B     	 ldr r3,.L3+12
 217 000e D3ED007A 	 flds s15,[r3]
 218 0012 9FED3B7A 	 flds s14,.L3+16
 219 0016 67EE877A 	 fmuls s15,s15,s14
 220 001a B3EE047A 	 fconsts s14,#52
 221 001e 67EE877A 	 fmuls s15,s15,s14
 222 0022 17EE900A 	 fmrs r0,s15
 223 0026 FFF7FEFF 	 bl arm_sin_f32
 224 002a 07EE100A 	 fmsr s14,r0
 225 002e DFED357A 	 flds s15,.L3+20
 226 0032 27EE278A 	 fmuls s16,s14,s15
 227 0036 314B     	 ldr r3,.L3+12
 228 0038 D3ED007A 	 flds s15,[r3]
 229 003c 9FED307A 	 flds s14,.L3+16
 230 0040 67EE877A 	 fmuls s15,s15,s14
 231 0044 9FED307A 	 flds s14,.L3+24
 232 0048 67EE877A 	 fmuls s15,s15,s14
 233 004c 17EE900A 	 fmrs r0,s15
 234 0050 FFF7FEFF 	 bl arm_sin_f32
 235 0054 07EE100A 	 fmsr s14,r0
 236 0058 F2EE087A 	 fconsts s15,#40
 237 005c 67EE277A 	 fmuls s15,s14,s15
 238 0060 78EE277A 	 fadds s15,s16,s15
 239 0064 294A     	 ldr r2,.L3+28
 240 0066 A300     	 lsls r3,r4,#2
 241 0068 1344     	 add r3,r3,r2
 242 006a C3ED007A 	 fsts s15,[r3]
 114:../main.c     **** 	if (ControlCycleCounter % 30 == 0){
 243              	 .loc 1 114 0
 244 006e 224B     	 ldr r3,.L3+8
 245 0070 1968     	 ldr r1,[r3]
 246 0072 274B     	 ldr r3,.L3+32
 247 0074 A3FB0123 	 umull r2,r3,r3,r1
 248 0078 1A09     	 lsrs r2,r3,#4
 249 007a 1346     	 mov r3,r2
 250 007c 1B01     	 lsls r3,r3,#4
 251 007e 9B1A     	 subs r3,r3,r2
 252 0080 5B00     	 lsls r3,r3,#1
 253 0082 CA1A     	 subs r2,r1,r3
 254 0084 002A     	 cmp r2,#0
 255 0086 08D1     	 bne .L2
 115:../main.c     **** 		ControlCycleCounter = 0;
 256              	 .loc 1 115 0
 257 0088 1B4B     	 ldr r3,.L3+8
 258 008a 0022     	 movs r2,#0
 259 008c 1A60     	 str r2,[r3]
 116:../main.c     **** 		arm_fir_f32(&FIR_CURRENT_A,&unfilt,&filt,FIR_CURRENT_blockSize);
 260              	 .loc 1 116 0
 261 008e 2148     	 ldr r0,.L3+36
 262 0090 1E49     	 ldr r1,.L3+28
 263 0092 214A     	 ldr r2,.L3+40
 264 0094 1E23     	 movs r3,#30
 265 0096 FFF7FEFF 	 bl arm_fir_f32
 266              	.L2:
 117:../main.c     **** 	}
 118:../main.c     **** 	aux = unfilt[ControlCycleCounter];
 267              	 .loc 1 118 0
 268 009a 174B     	 ldr r3,.L3+8
 269 009c 1B68     	 ldr r3,[r3]
 270 009e 1B4A     	 ldr r2,.L3+28
 271 00a0 9B00     	 lsls r3,r3,#2
 272 00a2 1344     	 add r3,r3,r2
 273 00a4 1B68     	 ldr r3,[r3]
 274 00a6 1D4A     	 ldr r2,.L3+44
 275 00a8 1360     	 str r3,[r2]
 119:../main.c     **** 	time += ACQUISITION_TIME;
 276              	 .loc 1 119 0
 277 00aa 144B     	 ldr r3,.L3+12
 278 00ac 1B68     	 ldr r3,[r3]
 279 00ae 1846     	 mov r0,r3
 280 00b0 FFF7FEFF 	 bl __aeabi_f2d
 281 00b4 0246     	 mov r2,r0
 282 00b6 0B46     	 mov r3,r1
 283 00b8 1046     	 mov r0,r2
 284 00ba 1946     	 mov r1,r3
 285 00bc 0CA3     	 adr r3,.L3
 286 00be D3E90023 	 ldrd r2,[r3]
 287 00c2 FFF7FEFF 	 bl __aeabi_dadd
 288 00c6 0246     	 mov r2,r0
 289 00c8 0B46     	 mov r3,r1
 290 00ca 1046     	 mov r0,r2
 291 00cc 1946     	 mov r1,r3
 292 00ce FFF7FEFF 	 bl __aeabi_d2f
 293 00d2 0246     	 mov r2,r0
 294 00d4 094B     	 ldr r3,.L3+12
 295 00d6 1A60     	 str r2,[r3]
 120:../main.c     **** 	ControlCycleCounter++;
 296              	 .loc 1 120 0
 297 00d8 074B     	 ldr r3,.L3+8
 298 00da 1B68     	 ldr r3,[r3]
 299 00dc 0133     	 adds r3,r3,#1
 300 00de 064A     	 ldr r2,.L3+8
 301 00e0 1360     	 str r3,[r2]
 121:../main.c     **** 	ProbeScope_Sampling();
 302              	 .loc 1 121 0
 303 00e2 FFF7FEFF 	 bl ProbeScope_Sampling
 122:../main.c     **** }
 304              	 .loc 1 122 0
 305 00e6 BD46     	 mov sp,r7
 306              	.LCFI3:
 307              	 .cfi_def_cfa_register 13
 308              	 
 309 00e8 BDEC028B 	 fldmfdd sp!,{d8}
 310              	.LCFI4:
 311              	 .cfi_restore 80
 312              	 .cfi_restore 81
 313              	 .cfi_def_cfa_offset 16
 314 00ec 98BD     	 pop {r3,r4,r7,pc}
 315              	.L4:
 316 00ee 00BF     	 .align 3
 317              	.L3:
 318 00f0 2D431CEB 	 .word -350469331
 319 00f4 E2360A3F 	 .word 1057634018
 320 00f8 00000000 	 .word ControlCycleCounter
 321 00fc 00000000 	 .word time
 322 0100 DB0FC940 	 .word 1086918619
 323 0104 0000C842 	 .word 1120403456
 324 0108 00006144 	 .word 1147207680
 325 010c 00000000 	 .word unfilt
 326 0110 89888888 	 .word -2004318071
 327 0114 00000000 	 .word FIR_CURRENT_A
 328 0118 00000000 	 .word filt
 329 011c 00000000 	 .word aux
 330              	 .cfi_endproc
 331              	.LFE431:
 333              	 .section .text.main,"ax",%progbits
 334              	 .align 2
 335              	 .global main
 336              	 .thumb
 337              	 .thumb_func
 339              	main:
 340              	.LFB432:
 123:../main.c     **** 
 124:../main.c     **** /*void CONTROL_LOOP_FUNC()
 125:../main.c     **** {
 126:../main.c     **** 	//if (ControlCycleCounter % ) //Subroutine @ 1000Hz
 127:../main.c     **** 	SpeedController(VAL_RPM,&Controller);
 128:../main.c     **** 	FieldWeakening(VAL_RPM,&Controller);
 129:../main.c     **** 
 130:../main.c     **** 	ThetaEstimation(VAL_RPM,&Controller);
 131:../main.c     **** 	ClarkeTransform(0,Ia,Ib,Ic,0,0,0,&Controller);
 132:../main.c     **** 	ParkTransform(&Controller);
 133:../main.c     **** 
 134:../main.c     **** 	CurrentController(&Controller);
 135:../main.c     **** 	InvParkTransform(&Controller,&Val,&Vbet);
 136:../main.c     **** 
 137:../main.c     **** 	PWM_SVM_SVMUpdate(&PWM_SVM_0, Controller.V_Ref, Controller.Theta_Ref);
 138:../main.c     **** }
 139:../main.c     **** */
 140:../main.c     **** int main(void)
 141:../main.c     **** {
 341              	 .loc 1 141 0
 342              	 .cfi_startproc
 343              	 
 344              	 
 345 0000 80B5     	 push {r7,lr}
 346              	.LCFI5:
 347              	 .cfi_def_cfa_offset 8
 348              	 .cfi_offset 7,-8
 349              	 .cfi_offset 14,-4
 350 0002 84B0     	 sub sp,sp,#16
 351              	.LCFI6:
 352              	 .cfi_def_cfa_offset 24
 353 0004 02AF     	 add r7,sp,#8
 354              	.LCFI7:
 355              	 .cfi_def_cfa 7,16
 142:../main.c     **** 	DAVE_STATUS_t status;
 143:../main.c     **** 	status = DAVE_Init();
 356              	 .loc 1 143 0
 357 0006 FFF7FEFF 	 bl DAVE_Init
 358 000a 0346     	 mov r3,r0
 359 000c FB71     	 strb r3,[r7,#7]
 144:../main.c     **** 	/* Initialization of DAVE APPs  */
 145:../main.c     **** 	if (status != DAVE_STATUS_SUCCESS)
 360              	 .loc 1 145 0
 361 000e FB79     	 ldrb r3,[r7,#7]
 362 0010 002B     	 cmp r3,#0
 363 0012 00D0     	 beq .L6
 364              	.L7:
 146:../main.c     **** 	{
 147:../main.c     **** 		/* Placeholder for error handler code. The while loop below can be replaced with an user error ha
 148:../main.c     **** 		XMC_DEBUG("DAVE APPs initialization failed\n");
 149:../main.c     **** 		while (1U)
 150:../main.c     **** 		{
 151:../main.c     **** 		}
 365              	 .loc 1 151 0 discriminator 1
 366 0014 FEE7     	 b .L7
 367              	.L6:
 152:../main.c     **** 	}
 153:../main.c     **** 	PWM_SVM_Start(&PWM_SVM_0);
 368              	 .loc 1 153 0
 369 0016 0A48     	 ldr r0,.L9
 370 0018 FFF7FEFF 	 bl PWM_SVM_Start
 154:../main.c     **** 	arm_fir_init_f32( &FIR_CURRENT_A, 	FIR_CURRENT_numTaps, 	FIR_CURRENT_pCoeffs, 	FIR_CURRENT_A_pStat
 371              	 .loc 1 154 0
 372 001c 1E23     	 movs r3,#30
 373 001e 0093     	 str r3,[sp]
 374 0020 0848     	 ldr r0,.L9+4
 375 0022 5B21     	 movs r1,#91
 376 0024 084A     	 ldr r2,.L9+8
 377 0026 094B     	 ldr r3,.L9+12
 378 0028 FFF7FEFF 	 bl arm_fir_init_f32
 155:../main.c     **** 	ProbeScope_Init(SystemCoreClock / TICKS_PER_SECOND); /// for micrium uScope
 379              	 .loc 1 155 0
 380 002c 084B     	 ldr r3,.L9+16
 381 002e 1B68     	 ldr r3,[r3]
 382 0030 084A     	 ldr r2,.L9+20
 383 0032 A2FB0323 	 umull r2,r3,r2,r3
 384 0036 DB09     	 lsrs r3,r3,#7
 385 0038 1846     	 mov r0,r3
 386 003a FFF7FEFF 	 bl ProbeScope_Init
 387              	.L8:
 156:../main.c     **** 	/* Placeholder for user application code. The while loop below can be replaced with user applicati
 157:../main.c     **** 	while (1U)
 158:../main.c     **** 	{
 159:../main.c     **** 
 160:../main.c     **** 	}
 388              	 .loc 1 160 0 discriminator 2
 389 003e FEE7     	 b .L8
 390              	.L10:
 391              	 .align 2
 392              	.L9:
 393 0040 00000000 	 .word PWM_SVM_0
 394 0044 00000000 	 .word FIR_CURRENT_A
 395 0048 00000000 	 .word FIR_CURRENT_pCoeffs
 396 004c 00000000 	 .word FIR_CURRENT_A_pState
 397 0050 00000000 	 .word SystemCoreClock
 398 0054 D34D6210 	 .word 274877907
 399              	 .cfi_endproc
 400              	.LFE432:
 402              	 .global __aeabi_dmul
 403              	 .section .text.SpeedController,"ax",%progbits
 404              	 .align 2
 405              	 .global SpeedController
 406              	 .thumb
 407              	 .thumb_func
 409              	SpeedController:
 410              	.LFB433:
 161:../main.c     **** }
 162:../main.c     **** 
 163:../main.c     **** void SpeedController(float RPM_Val, FOC* Controller_Var)
 164:../main.c     **** {
 411              	 .loc 1 164 0
 412              	 .cfi_startproc
 413              	 
 414              	 
 415 0000 B0B5     	 push {r4,r5,r7,lr}
 416              	.LCFI8:
 417              	 .cfi_def_cfa_offset 16
 418              	 .cfi_offset 4,-16
 419              	 .cfi_offset 5,-12
 420              	 .cfi_offset 7,-8
 421              	 .cfi_offset 14,-4
 422 0002 84B0     	 sub sp,sp,#16
 423              	.LCFI9:
 424              	 .cfi_def_cfa_offset 32
 425 0004 00AF     	 add r7,sp,#0
 426              	.LCFI10:
 427              	 .cfi_def_cfa_register 7
 428 0006 7860     	 str r0,[r7,#4]
 429 0008 3960     	 str r1,[r7]
 165:../main.c     **** 	static float AccmErrRPM = 0, AuxRPM = 0;
 166:../main.c     **** 
 167:../main.c     **** 	float ErrRPM = RPM_REF - RPM_Val;
 430              	 .loc 1 167 0
 431 000a 374B     	 ldr r3,.L12+16
 432 000c 93ED007A 	 flds s14,[r3]
 433 0010 D7ED017A 	 flds s15,[r7,#4]
 434 0014 77EE677A 	 fsubs s15,s14,s15
 435 0018 C7ED037A 	 fsts s15,[r7,#12]
 168:../main.c     **** 
 169:../main.c     **** 	AuxRPM += 0.5 * T_PI_RPM * (ErrRPM + AccmErrRPM);
 436              	 .loc 1 169 0
 437 001c 334B     	 ldr r3,.L12+20
 438 001e 1B68     	 ldr r3,[r3]
 439 0020 1846     	 mov r0,r3
 440 0022 FFF7FEFF 	 bl __aeabi_f2d
 441 0026 0446     	 mov r4,r0
 442 0028 0D46     	 mov r5,r1
 443 002a 314B     	 ldr r3,.L12+24
 444 002c 93ED007A 	 flds s14,[r3]
 445 0030 D7ED037A 	 flds s15,[r7,#12]
 446 0034 77EE277A 	 fadds s15,s14,s15
 447 0038 17EE900A 	 fmrs r0,s15
 448 003c FFF7FEFF 	 bl __aeabi_f2d
 449 0040 0246     	 mov r2,r0
 450 0042 0B46     	 mov r3,r1
 451 0044 1046     	 mov r0,r2
 452 0046 1946     	 mov r1,r3
 453 0048 23A3     	 adr r3,.L12
 454 004a D3E90023 	 ldrd r2,[r3]
 455 004e FFF7FEFF 	 bl __aeabi_dmul
 456 0052 0246     	 mov r2,r0
 457 0054 0B46     	 mov r3,r1
 458 0056 2046     	 mov r0,r4
 459 0058 2946     	 mov r1,r5
 460 005a FFF7FEFF 	 bl __aeabi_dadd
 461 005e 0246     	 mov r2,r0
 462 0060 0B46     	 mov r3,r1
 463 0062 1046     	 mov r0,r2
 464 0064 1946     	 mov r1,r3
 465 0066 FFF7FEFF 	 bl __aeabi_d2f
 466 006a 0246     	 mov r2,r0
 467 006c 1F4B     	 ldr r3,.L12+20
 468 006e 1A60     	 str r2,[r3]
 170:../main.c     **** 
 171:../main.c     **** 	Controller_Var->Iq_Ref = AuxRPM * KiSpeed + ErrRPM * KpSpeed;
 469              	 .loc 1 171 0
 470 0070 1E4B     	 ldr r3,.L12+20
 471 0072 1B68     	 ldr r3,[r3]
 472 0074 1846     	 mov r0,r3
 473 0076 FFF7FEFF 	 bl __aeabi_f2d
 474 007a 0246     	 mov r2,r0
 475 007c 0B46     	 mov r3,r1
 476 007e 1046     	 mov r0,r2
 477 0080 1946     	 mov r1,r3
 478 0082 17A3     	 adr r3,.L12+8
 479 0084 D3E90023 	 ldrd r2,[r3]
 480 0088 FFF7FEFF 	 bl __aeabi_dmul
 481 008c 0246     	 mov r2,r0
 482 008e 0B46     	 mov r3,r1
 483 0090 1446     	 mov r4,r2
 484 0092 1D46     	 mov r5,r3
 485 0094 D7ED037A 	 flds s15,[r7,#12]
 486 0098 B2EE047A 	 fconsts s14,#36
 487 009c 67EE877A 	 fmuls s15,s15,s14
 488 00a0 17EE900A 	 fmrs r0,s15
 489 00a4 FFF7FEFF 	 bl __aeabi_f2d
 490 00a8 0246     	 mov r2,r0
 491 00aa 0B46     	 mov r3,r1
 492 00ac 2046     	 mov r0,r4
 493 00ae 2946     	 mov r1,r5
 494 00b0 FFF7FEFF 	 bl __aeabi_dadd
 495 00b4 0246     	 mov r2,r0
 496 00b6 0B46     	 mov r3,r1
 497 00b8 1046     	 mov r0,r2
 498 00ba 1946     	 mov r1,r3
 499 00bc FFF7FEFF 	 bl __aeabi_d2f
 500 00c0 0246     	 mov r2,r0
 501 00c2 3B68     	 ldr r3,[r7]
 502 00c4 1A63     	 str r2,[r3,#48]
 172:../main.c     **** 
 173:../main.c     **** 	AccmErrRPM = ErrRPM;
 503              	 .loc 1 173 0
 504 00c6 0A4A     	 ldr r2,.L12+24
 505 00c8 FB68     	 ldr r3,[r7,#12]
 506 00ca 1360     	 str r3,[r2]
 174:../main.c     **** }
 507              	 .loc 1 174 0
 508 00cc 1037     	 adds r7,r7,#16
 509              	.LCFI11:
 510              	 .cfi_def_cfa_offset 16
 511 00ce BD46     	 mov sp,r7
 512              	.LCFI12:
 513              	 .cfi_def_cfa_register 13
 514              	 
 515 00d0 B0BD     	 pop {r4,r5,r7,pc}
 516              	.L13:
 517 00d2 00BFAFF3 	 .align 3
 517      0080
 518              	.L12:
 519 00d8 9A999999 	 .word -1717986918
 520 00dc 9999A93F 	 .word 1068079513
 521 00e0 7B14AE47 	 .word 1202590843
 522 00e4 E17A843F 	 .word 1065646817
 523 00e8 00000000 	 .word RPM_REF
 524 00ec 00000000 	 .word AuxRPM.14119
 525 00f0 00000000 	 .word AccmErrRPM.14118
 526              	 .cfi_endproc
 527              	.LFE433:
 529 00f4 AFF30080 	 .section .text.FieldWeakening,"ax",%progbits
 530              	 .align 2
 531              	 .global FieldWeakening
 532              	 .thumb
 533              	 .thumb_func
 535              	FieldWeakening:
 536              	.LFB434:
 175:../main.c     **** void FieldWeakening(float RPM_Val, FOC* Controller_Var)
 176:../main.c     **** {
 537              	 .loc 1 176 0
 538              	 .cfi_startproc
 539              	 
 540              	 
 541              	 
 542 0000 80B4     	 push {r7}
 543              	.LCFI13:
 544              	 .cfi_def_cfa_offset 4
 545              	 .cfi_offset 7,-4
 546 0002 83B0     	 sub sp,sp,#12
 547              	.LCFI14:
 548              	 .cfi_def_cfa_offset 16
 549 0004 00AF     	 add r7,sp,#0
 550              	.LCFI15:
 551              	 .cfi_def_cfa_register 7
 552 0006 7860     	 str r0,[r7,#4]
 553 0008 3960     	 str r1,[r7]
 177:../main.c     **** 	if (RPM_Val > RPM_NOMINAL)
 554              	 .loc 1 177 0
 555 000a D7ED017A 	 flds s15,[r7,#4]
 556 000e 9FED0C7A 	 flds s14,.L20
 557 0012 F4EEC77A 	 fcmpes s15,s14
 558 0016 F1EE10FA 	 fmstat
 559 001a 09DD     	 ble .L19
 178:../main.c     **** 	{
 179:../main.c     **** 		Controller_Var->Id_Ref = ID_NOMINAL * RPM_NOMINAL / RPM_Val;
 560              	 .loc 1 179 0
 561 001c 9FED097A 	 flds s14,.L20+4
 562 0020 D7ED017A 	 flds s15,[r7,#4]
 563 0024 C7EE277A 	 fdivs s15,s14,s15
 564 0028 3B68     	 ldr r3,[r7]
 565 002a C3ED0B7A 	 fsts s15,[r3,#44]
 566 002e 02E0     	 b .L14
 567              	.L19:
 180:../main.c     **** 	}
 181:../main.c     **** 	else
 182:../main.c     **** 		Controller_Var->Id_Ref = ID_NOMINAL;
 568              	 .loc 1 182 0
 569 0030 3B68     	 ldr r3,[r7]
 570 0032 054A     	 ldr r2,.L20+8
 571 0034 DA62     	 str r2,[r3,#44]
 572              	.L14:
 183:../main.c     **** }
 573              	 .loc 1 183 0
 574 0036 0C37     	 adds r7,r7,#12
 575              	.LCFI16:
 576              	 .cfi_def_cfa_offset 4
 577 0038 BD46     	 mov sp,r7
 578              	.LCFI17:
 579              	 .cfi_def_cfa_register 13
 580              	 
 581 003a 5DF8047B 	 ldr r7,[sp],#4
 582              	.LCFI18:
 583              	 .cfi_restore 7
 584              	 .cfi_def_cfa_offset 0
 585 003e 7047     	 bx lr
 586              	.L21:
 587              	 .align 2
 588              	.L20:
 589 0040 0080BB44 	 .word 1153138688
 590 0044 0085B647 	 .word 1203143936
 591 0048 33337942 	 .word 1115239219
 592              	 .cfi_endproc
 593              	.LFE434:
 595              	 .section .bss.AuxRPM.14119,"aw",%nobits
 596              	 .align 2
 599              	AuxRPM.14119:
 600 0000 00000000 	 .space 4
 601              	 .section .bss.AccmErrRPM.14118,"aw",%nobits
 602              	 .align 2
 605              	AccmErrRPM.14118:
 606 0000 00000000 	 .space 4
 607              	 .text
 608              	.Letext0:
 609              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 610              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 611              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 612              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc/xmc_gpio.h"
 613              	 .file 6 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc/xmc4_gpio.h"
 614              	 .file 7 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc/xmc4_scu.h"
 615              	 .file 8 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc/xmc_ccu8.h"
 616              	 .file 9 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 617              	 .file 10 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/PWM_SVM/pwm_svm.h"
 618              	 .file 11 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc/xmc_vadc.h"
 619              	 .file 12 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 620              	 .file 13 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/Dave.h"
 621              	 .file 14 "../FOC.h"
 622              	 .file 15 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
 623              	 .file 16 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/core_cm4.h"
 624              	 .file 17 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 625              	 .file 18 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 626              	 .file 19 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/ADC_MEASUREMENT_ADV/adc_measurement_adv.h"
 627              	 .file 20 "../ADC_MEASUREMENT.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
                            *COM*:00000020 UN_FILT_VALS
                            *COM*:00000020 FILT_VALS
                            *COM*:0000000c FIR_CURRENT_A
                            *COM*:0000000c FIR_CURRENT_B
                            *COM*:0000000c FIR_CURRENT_C
                            *COM*:000001e0 FIR_CURRENT_A_pState
                            *COM*:000001e0 FIR_CURRENT_B_pState
                            *COM*:000001e0 FIR_CURRENT_C_pState
                            *COM*:0000000c FIR_RPM_COS
                            *COM*:0000000c FIR_RPM_SIN
                            *COM*:00000194 FIR_RPM_COS_pState
                            *COM*:00000194 FIR_RPM_SIN_pState
                            *COM*:0000000c FIR_V_DC
                            *COM*:0000019c FIR_V_DC_pState
    {standard input}:38     .rodata.FIR_V_DC_pCoeffs:00000000 FIR_V_DC_pCoeffs
    {standard input}:35     .rodata.FIR_V_DC_pCoeffs:00000000 $d
    {standard input}:45     .rodata.FIR_RPM_pCoeffs:00000000 FIR_RPM_pCoeffs
    {standard input}:42     .rodata.FIR_RPM_pCoeffs:00000000 $d
    {standard input}:52     .rodata.FIR_CURRENT_pCoeffs:00000000 FIR_CURRENT_pCoeffs
    {standard input}:49     .rodata.FIR_CURRENT_pCoeffs:00000000 $d
                            *COM*:00000044 Controller
                            *COM*:00000004 COS_RPM
                            *COM*:00000004 SIN_RPM
                            *COM*:00000004 VAL_RPM
                            *COM*:00000004 Ia
                            *COM*:00000004 Ib
                            *COM*:00000004 Ic
                            *COM*:00000004 Val
                            *COM*:00000004 Vbet
                            *COM*:00000004 V_DC
                            *COM*:00000004 Temp_Mot
                            *COM*:00000004 Temp_IGBT
                            *COM*:00000004 Theta
                            *COM*:00000004 RPM_REF
    {standard input}:163    .bss.time:00000000 time
    {standard input}:160    .bss.time:00000000 $d
                            *COM*:00000078 unfilt
                            *COM*:00000004 filt
                            *COM*:00000004 aux
    {standard input}:173    .bss.ControlCycleCounter:00000000 ControlCycleCounter
    {standard input}:170    .bss.ControlCycleCounter:00000000 $d
    {standard input}:180    .bss.MeasurmentCycleCounter:00000000 MeasurmentCycleCounter
    {standard input}:177    .bss.MeasurmentCycleCounter:00000000 $d
    {standard input}:186    .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:191    .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:318    .text.CCU43_1_IRQHandler:000000f0 $d
    {standard input}:334    .text.main:00000000 $t
    {standard input}:339    .text.main:00000000 main
    {standard input}:393    .text.main:00000040 $d
    {standard input}:404    .text.SpeedController:00000000 $t
    {standard input}:409    .text.SpeedController:00000000 SpeedController
    {standard input}:519    .text.SpeedController:000000d8 $d
    {standard input}:599    .bss.AuxRPM.14119:00000000 AuxRPM.14119
    {standard input}:605    .bss.AccmErrRPM.14118:00000000 AccmErrRPM.14118
    {standard input}:530    .text.FieldWeakening:00000000 $t
    {standard input}:535    .text.FieldWeakening:00000000 FieldWeakening
    {standard input}:589    .text.FieldWeakening:00000040 $d
    {standard input}:596    .bss.AuxRPM.14119:00000000 $d
    {standard input}:602    .bss.AccmErrRPM.14118:00000000 $d
                     .debug_frame:00000010 $d
    {standard input}:529    .text.SpeedController:000000f4 $t

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
arm_sin_f32
arm_fir_f32
ProbeScope_Sampling
DAVE_Init
PWM_SVM_Start
arm_fir_init_f32
ProbeScope_Init
PWM_SVM_0
SystemCoreClock
__aeabi_dmul
