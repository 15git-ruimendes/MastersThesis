   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_cmplx_mag_squared_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_cmplx_mag_squared_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_cmplx_mag_squared_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_cmplx_mag_squared_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Title:        arm_cmplx_mag_squared_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Description:  Floating-point complex magnitude squared
   5:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @ingroup groupCmplxMath
  33:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @defgroup cmplx_mag_squared Complex Magnitude Squared
  37:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  38:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   Computes the magnitude squared of the elements of a complex data vector.
  39:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   The <code>pSrc</code> points to the source data and
  41:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   <code>pDst</code> points to the where the result should be written.
  42:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   <code>numSamples</code> specifies the number of complex samples
  43:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   in the input array and the data is stored in an interleaved fashion
  44:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   (real, imag, real, imag, ...).
  45:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   The input array has a total of <code>2*numSamples</code> values;
  46:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   the output array has a total of <code>numSamples</code> values.
  47:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  48:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   The underlying algorithm is used:
  49:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  50:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   <pre>
  51:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   for (n = 0; n < numSamples; n++) {
  52:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       pDst[n] = pSrc[(2*n)+0]^2 + pSrc[(2*n)+1]^2;
  53:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
  54:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   </pre>
  55:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  56:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  57:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  58:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  59:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  60:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @addtogroup cmplx_mag_squared
  61:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @{
  62:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  63:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  64:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  65:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @brief         Floating-point complex magnitude squared.
  66:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @param[in]     pSrc        points to input vector
  67:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @param[out]    pDst        points to output vector
  68:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @param[in]     numSamples  number of samples in each vector
  69:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   @return        none
  70:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  71:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  72:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  73:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  74:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** void arm_cmplx_mag_squared_f32(
  75:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   const float32_t * pSrc,
  76:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         float32_t * pDst,
  77:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         uint32_t numSamples)
  78:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** {
  79:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     int32_t blockSize = numSamples;  /* loop counters */
  80:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     uint32_t  blkCnt;           /* loop counters */
  81:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     f32x4x2_t vecSrc;
  82:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     f32x4_t sum;
  83:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     float32_t real, imag;                          /* Temporary input variables */
  84:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  85:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Compute 4 complex samples at a time */
  86:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt = blockSize >> 2;
  87:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     while (blkCnt > 0U)
  88:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     {
  89:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         vecSrc = vld2q(pSrc);
  90:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         sum = vmulq(vecSrc.val[0], vecSrc.val[0]);
  91:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         sum = vfmaq(sum, vecSrc.val[1], vecSrc.val[1]);
  92:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         vst1q(pDst, sum);
  93:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  94:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         pSrc += 8;
  95:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         pDst += 4;
  96:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         
  97:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         /*
  98:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****          * Decrement the blockSize loop counter
  99:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****          */
 100:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         blkCnt--;
 101:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     }
 102:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 103:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Tail */
 104:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt = blockSize & 3;
 105:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     while (blkCnt > 0U)
 106:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     {
 107:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 108:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   
 109:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       real = *pSrc++;
 110:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       imag = *pSrc++;
 111:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   
 112:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       /* store result in destination buffer. */
 113:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       *pDst++ = (real * real) + (imag * imag);
 114:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   
 115:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       /* Decrement loop counter */
 116:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****       blkCnt--;
 117:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     }
 118:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** }
 120:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 121:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #else
 122:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** void arm_cmplx_mag_squared_f32(
 123:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   const float32_t * pSrc,
 124:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         float32_t * pDst,
 125:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         uint32_t numSamples)
 126:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** {
  28              	 .loc 1 126 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 89B0     	 sub sp,sp,#36
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 40
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
 127:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 128:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****         float32_t real, imag;                          /* Temporary input variables */
 129:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 130:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 131:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4x2_t vecA;
 132:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vRealA;
 133:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vImagA;
 134:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vMagSqA;
 135:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 136:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4x2_t vecB;
 137:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vRealB;
 138:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vImagB;
 139:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32x4_t vMagSqB;
 140:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 141:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Loop unrolling: Compute 8 outputs at a time */
 142:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples >> 3;
 143:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 144:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0U)
 145:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 146:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* out = sqrt((real * real) + (imag * imag)) */
 147:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 148:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vecA = vld2q_f32(pSrc);
 149:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pSrc += 8;
 150:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 151:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vRealA = vmulq_f32(vecA.val[0], vecA.val[0]);
 152:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vImagA = vmulq_f32(vecA.val[1], vecA.val[1]);
 153:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vMagSqA = vaddq_f32(vRealA, vImagA);
 154:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 155:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vecB = vld2q_f32(pSrc);
 156:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pSrc += 8;
 157:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 158:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vRealB = vmulq_f32(vecB.val[0], vecB.val[0]);
 159:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vImagB = vmulq_f32(vecB.val[1], vecB.val[1]);
 160:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vMagSqB = vaddq_f32(vRealB, vImagB);
 161:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 162:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Store the result in the destination buffer. */
 163:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vst1q_f32(pDst, vMagSqA);
 164:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst += 4;
 165:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 166:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     vst1q_f32(pDst, vMagSqB);
 167:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst += 4;
 168:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 169:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement the loop counter */
 170:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 171:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 172:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 173:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples & 7;
 174:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 175:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #else
 176:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 177:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 178:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 179:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples >> 2U;
 180:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 181:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0U)
 182:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 183:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 184:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 185:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 186:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 187:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 188:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 189:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 190:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 191:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 192:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 193:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 194:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 195:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 196:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 197:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 198:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 199:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 200:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 201:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement loop counter */
 202:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 203:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 204:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 205:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 206:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples % 0x4U;
 207:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 208:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #else
 209:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 210:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Initialize blkCnt with number of samples */
 211:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples;
  46              	 .loc 1 211 0
  47 000c 7B68     	 ldr r3,[r7,#4]
  48 000e FB61     	 str r3,[r7,#28]
 212:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 213:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 214:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 215:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 216:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0U)
  49              	 .loc 1 216 0
  50 0010 1FE0     	 b .L2
  51              	.L3:
 217:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 218:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 219:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 220:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
  52              	 .loc 1 220 0
  53 0012 FB68     	 ldr r3,[r7,#12]
  54 0014 1A1D     	 adds r2,r3,#4
  55 0016 FA60     	 str r2,[r7,#12]
  56 0018 1B68     	 ldr r3,[r3]
  57 001a BB61     	 str r3,[r7,#24]
 221:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
  58              	 .loc 1 221 0
  59 001c FB68     	 ldr r3,[r7,#12]
  60 001e 1A1D     	 adds r2,r3,#4
  61 0020 FA60     	 str r2,[r7,#12]
  62 0022 1B68     	 ldr r3,[r3]
  63 0024 7B61     	 str r3,[r7,#20]
 222:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 223:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store result in destination buffer. */
 224:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
  64              	 .loc 1 224 0
  65 0026 BB68     	 ldr r3,[r7,#8]
  66 0028 1A1D     	 adds r2,r3,#4
  67 002a BA60     	 str r2,[r7,#8]
  68 002c 97ED067A 	 flds s14,[r7,#24]
  69 0030 D7ED067A 	 flds s15,[r7,#24]
  70 0034 27EE277A 	 fmuls s14,s14,s15
  71 0038 D7ED056A 	 flds s13,[r7,#20]
  72 003c D7ED057A 	 flds s15,[r7,#20]
  73 0040 66EEA77A 	 fmuls s15,s13,s15
  74 0044 77EE277A 	 fadds s15,s14,s15
  75 0048 C3ED007A 	 fsts s15,[r3]
 225:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 226:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement loop counter */
 227:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
  76              	 .loc 1 227 0
  77 004c FB69     	 ldr r3,[r7,#28]
  78 004e 013B     	 subs r3,r3,#1
  79 0050 FB61     	 str r3,[r7,#28]
  80              	.L2:
 216:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
  81              	 .loc 1 216 0
  82 0052 FB69     	 ldr r3,[r7,#28]
  83 0054 002B     	 cmp r3,#0
  84 0056 DCD1     	 bne .L3
 228:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 229:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 230:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** }
  85              	 .loc 1 230 0
  86 0058 2437     	 adds r7,r7,#36
  87              	.LCFI3:
  88              	 .cfi_def_cfa_offset 4
  89 005a BD46     	 mov sp,r7
  90              	.LCFI4:
  91              	 .cfi_def_cfa_register 13
  92              	 
  93 005c 5DF8047B 	 ldr r7,[sp],#4
  94              	.LCFI5:
  95              	 .cfi_restore 7
  96              	 .cfi_def_cfa_offset 0
  97 0060 7047     	 bx lr
  98              	 .cfi_endproc
  99              	.LFE149:
 101 0062 00BF     	 .text
 102              	.Letext0:
 103              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 104              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 105              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 106              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_mag_squared_f32.c
    {standard input}:20     .text.arm_cmplx_mag_squared_f32:00000000 $t
    {standard input}:25     .text.arm_cmplx_mag_squared_f32:00000000 arm_cmplx_mag_squared_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
