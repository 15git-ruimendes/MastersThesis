   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_cmplx_mult_real_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_cmplx_mult_real_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_cmplx_mult_real_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_cmplx_mult_real_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Title:        arm_cmplx_mult_real_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Description:  Floating-point complex by real multiplication
   5:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @ingroup groupCmplxMath
  33:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @defgroup CmplxByRealMult Complex-by-Real Multiplication
  37:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  38:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   Multiplies a complex vector by a real vector and generates a complex result.
  39:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   The data in the complex arrays is stored in an interleaved fashion
  40:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   (real, imag, real, imag, ...).
  41:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   The parameter <code>numSamples</code> represents the number of complex
  42:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   samples processed.  The complex arrays have a total of <code>2*numSamples</code>
  43:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   real values while the real array has a total of <code>numSamples</code>
  44:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   real values.
  45:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  46:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   The underlying algorithm is used:
  47:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  48:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   <pre>
  49:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   for (n = 0; n < numSamples; n++) {
  50:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       pCmplxDst[(2*n)+0] = pSrcCmplx[(2*n)+0] * pSrcReal[n];
  51:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       pCmplxDst[(2*n)+1] = pSrcCmplx[(2*n)+1] * pSrcReal[n];
  52:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   }
  53:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   </pre>
  54:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  55:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  56:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  57:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  58:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /**
  59:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @addtogroup CmplxByRealMult
  60:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @{
  61:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  62:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  63:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** /**
  64:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @brief         Floating-point complex-by-real multiplication.
  65:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @param[in]     pSrcCmplx   points to complex input vector
  66:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @param[in]     pSrcReal    points to real input vector
  67:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @param[out]    pCmplxDst   points to complex output vector
  68:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @param[in]     numSamples  number of samples in each vector
  69:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   @return        none
  70:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****  */
  71:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  72:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  73:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  74:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** void arm_cmplx_mult_real_f32(
  75:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   const float32_t * pSrcCmplx,
  76:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   const float32_t * pSrcReal,
  77:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         float32_t * pCmplxDst,
  78:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         uint32_t numSamples)
  79:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** {
  80:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     const static uint32_t stride_cmplx_x_real_32[4] = { 0, 0, 1, 1 };
  81:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  82:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     uint32_t blockSizeC = numSamples * CMPLX_DIM;   /* loop counters */
  83:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     uint32_t blkCnt;
  84:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     f32x4_t rVec;
  85:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     f32x4_t cmplxVec;
  86:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     f32x4_t dstVec;
  87:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     uint32x4_t strideVec;
  88:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     float32_t in;  
  89:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  90:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  91:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* stride vector for pairs of real generation */
  92:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     strideVec = vld1q(stride_cmplx_x_real_32);
  93:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
  94:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Compute 4 complex outputs at a time */
  95:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt = blockSizeC >> 2;
  96:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     while (blkCnt > 0U) 
  97:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     {
  98:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         cmplxVec = vld1q(pSrcCmplx);
  99:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         rVec = vldrwq_gather_shifted_offset_f32(pSrcReal, strideVec);
 100:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         dstVec = vmulq(cmplxVec, rVec);
 101:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         vst1q(pCmplxDst, dstVec);
 102:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 103:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pSrcReal += 2;
 104:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pSrcCmplx += 4;
 105:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pCmplxDst += 4;
 106:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         blkCnt--;
 107:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     }
 108:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 109:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt = (blockSizeC & 3) >> 1; 
 110:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     while (blkCnt > 0U)
 111:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     {
 112:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 113:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 114:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   
 115:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       in = *pSrcReal++;
 116:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       /* store result in destination buffer. */
 117:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       *pCmplxDst++ = *pSrcCmplx++ * in;
 118:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       *pCmplxDst++ = *pSrcCmplx++ * in;
 119:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   
 120:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       /* Decrement loop counter */
 121:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****       blkCnt--;
 122:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     }
 123:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** }
 124:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #else
 126:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** void arm_cmplx_mult_real_f32(
 127:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   const float32_t * pSrcCmplx,
 128:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   const float32_t * pSrcReal,
 129:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         float32_t * pCmplxDst,
 130:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         uint32_t numSamples)
 131:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** {
  28              	 .loc 1 131 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 87B0     	 sub sp,sp,#28
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 32
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
 132:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 133:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         float32_t in;                                  /* Temporary variable */
 134:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 135:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 136:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     float32x4_t r;
 137:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     float32x4x2_t ab,outCplx;
 138:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 139:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Compute 4 outputs at a time */
 140:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt = numSamples >> 2U;
 141:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 142:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     while (blkCnt > 0U)
 143:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     {
 144:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         ab = vld2q_f32(pSrcCmplx);  // load & separate real/imag pSrcA (de-interleave 2)
 145:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         r = vld1q_f32(pSrcReal);  // load & separate real/imag pSrcB
 146:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 	/* Increment pointers */
 148:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pSrcCmplx += 8;
 149:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pSrcReal += 4;
 150:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 151:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         outCplx.val[0] = vmulq_f32(ab.val[0], r);
 152:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         outCplx.val[1] = vmulq_f32(ab.val[1], r);
 153:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 154:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         vst2q_f32(pCmplxDst, outCplx);
 155:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         pCmplxDst += 8;
 156:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 157:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****         blkCnt--;
 158:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     }
 159:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 160:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Tail */
 161:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt = numSamples & 3;
 162:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #else
 163:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 164:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 165:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 166:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   blkCnt = numSamples >> 2U;
 167:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 168:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   while (blkCnt > 0U)
 169:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   {
 170:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 171:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 172:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 173:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
 174:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* store result in destination buffer. */
 175:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 176:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 177:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 178:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
 179:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 180:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 181:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 182:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
 183:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 184:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 185:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 186:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
 187:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++* in;
 188:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
 189:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 190:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Decrement loop counter */
 191:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt--;
 192:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   }
 193:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 194:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 195:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   blkCnt = numSamples % 0x4U;
 196:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 197:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #else
 198:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 199:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   /* Initialize blkCnt with number of samples */
 200:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   blkCnt = numSamples;
  47              	 .loc 1 200 0
  48 000e 3B68     	 ldr r3,[r7]
  49 0010 7B61     	 str r3,[r7,#20]
 201:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 202:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 203:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 204:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 205:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   while (blkCnt > 0U)
  50              	 .loc 1 205 0
  51 0012 23E0     	 b .L2
  52              	.L3:
 206:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   {
 207:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* C[2 * i    ] = A[2 * i    ] * B[i]. */
 208:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i]. */
 209:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 210:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     in = *pSrcReal++;
  53              	 .loc 1 210 0
  54 0014 BB68     	 ldr r3,[r7,#8]
  55 0016 1A1D     	 adds r2,r3,#4
  56 0018 BA60     	 str r2,[r7,#8]
  57 001a 1B68     	 ldr r3,[r3]
  58 001c 3B61     	 str r3,[r7,#16]
 211:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* store result in destination buffer. */
 212:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
  59              	 .loc 1 212 0
  60 001e 7B68     	 ldr r3,[r7,#4]
  61 0020 1A1D     	 adds r2,r3,#4
  62 0022 7A60     	 str r2,[r7,#4]
  63 0024 FA68     	 ldr r2,[r7,#12]
  64 0026 111D     	 adds r1,r2,#4
  65 0028 F960     	 str r1,[r7,#12]
  66 002a 92ED007A 	 flds s14,[r2]
  67 002e D7ED047A 	 flds s15,[r7,#16]
  68 0032 67EE277A 	 fmuls s15,s14,s15
  69 0036 C3ED007A 	 fsts s15,[r3]
 213:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     *pCmplxDst++ = *pSrcCmplx++ * in;
  70              	 .loc 1 213 0
  71 003a 7B68     	 ldr r3,[r7,#4]
  72 003c 1A1D     	 adds r2,r3,#4
  73 003e 7A60     	 str r2,[r7,#4]
  74 0040 FA68     	 ldr r2,[r7,#12]
  75 0042 111D     	 adds r1,r2,#4
  76 0044 F960     	 str r1,[r7,#12]
  77 0046 92ED007A 	 flds s14,[r2]
  78 004a D7ED047A 	 flds s15,[r7,#16]
  79 004e 67EE277A 	 fmuls s15,s14,s15
  80 0052 C3ED007A 	 fsts s15,[r3]
 214:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 215:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     /* Decrement loop counter */
 216:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****     blkCnt--;
  81              	 .loc 1 216 0
  82 0056 7B69     	 ldr r3,[r7,#20]
  83 0058 013B     	 subs r3,r3,#1
  84 005a 7B61     	 str r3,[r7,#20]
  85              	.L2:
 205:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   {
  86              	 .loc 1 205 0
  87 005c 7B69     	 ldr r3,[r7,#20]
  88 005e 002B     	 cmp r3,#0
  89 0060 D8D1     	 bne .L3
 217:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c ****   }
 218:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** 
 219:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c **** }
  90              	 .loc 1 219 0
  91 0062 1C37     	 adds r7,r7,#28
  92              	.LCFI3:
  93              	 .cfi_def_cfa_offset 4
  94 0064 BD46     	 mov sp,r7
  95              	.LCFI4:
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 0066 5DF8047B 	 ldr r7,[sp],#4
  99              	.LCFI5:
 100              	 .cfi_restore 7
 101              	 .cfi_def_cfa_offset 0
 102 006a 7047     	 bx lr
 103              	 .cfi_endproc
 104              	.LFE149:
 106              	 .text
 107              	.Letext0:
 108              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 109              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 110              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 111              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_mult_real_f32.c
    {standard input}:20     .text.arm_cmplx_mult_real_f32:00000000 $t
    {standard input}:25     .text.arm_cmplx_mult_real_f32:00000000 arm_cmplx_mult_real_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
