   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_cmplx_dot_prod_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_cmplx_dot_prod_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_cmplx_dot_prod_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_cmplx_dot_prod_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Title:        arm_cmplx_dot_prod_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Description:  Floating-point complex dot product
   5:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @ingroup groupCmplxMath
  33:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @defgroup cmplx_dot_prod Complex Dot Product
  37:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  38:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   Computes the dot product of two complex vectors.
  39:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   The vectors are multiplied element-by-element and then summed.
  40:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  41:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   The <code>pSrcA</code> points to the first complex input vector and
  42:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   <code>pSrcB</code> points to the second complex input vector.
  43:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   <code>numSamples</code> specifies the number of complex samples
  44:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   and the data in each array is stored in an interleaved fashion
  45:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   (real, imag, real, imag, ...).
  46:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   Each array has a total of <code>2*numSamples</code> values.
  47:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  48:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   The underlying algorithm is used:
  49:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  50:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   <pre>
  51:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   realResult = 0;
  52:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   imagResult = 0;
  53:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   for (n = 0; n < numSamples; n++) {
  54:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       realResult += pSrcA[(2*n)+0] * pSrcB[(2*n)+0] - pSrcA[(2*n)+1] * pSrcB[(2*n)+1];
  55:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imagResult += pSrcA[(2*n)+0] * pSrcB[(2*n)+1] + pSrcA[(2*n)+1] * pSrcB[(2*n)+0];
  56:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
  57:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   </pre>
  58:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  59:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  60:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  61:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  62:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  63:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @addtogroup cmplx_dot_prod
  64:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @{
  65:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  66:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  67:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  68:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @brief         Floating-point complex dot product.
  69:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[in]     pSrcA       points to the first input vector
  70:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[in]     pSrcB       points to the second input vector
  71:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[in]     numSamples  number of samples in each vector
  72:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[out]    realResult  real part of the result returned here
  73:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @param[out]    imagResult  imaginary part of the result returned here
  74:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   @return        none
  75:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  76:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  77:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  78:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  79:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** void arm_cmplx_dot_prod_f32(
  80:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     const float32_t * pSrcA,
  81:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     const float32_t * pSrcB,
  82:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     uint32_t numSamples,
  83:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32_t * realResult,
  84:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32_t * imagResult)
  85:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** {
  86:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     uint32_t blockSize = numSamples * CMPLX_DIM;  /* loop counters */
  87:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     uint32_t blkCnt;
  88:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32_t real_sum, imag_sum;
  89:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     f32x4_t vecSrcA, vecSrcB;
  90:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     f32x4_t vec_acc = vdupq_n_f32(0.0f);
  91:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32_t a0,b0,c0,d0;
  92:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  93:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Compute 2 complex samples at a time */
  94:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt = blockSize >> 2U;
  95:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  96:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     while (blkCnt > 0U)
  97:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     {
  98:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vecSrcA = vld1q(pSrcA);
  99:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vecSrcB = vld1q(pSrcB);
 100:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 101:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec_acc = vcmlaq(vec_acc, vecSrcA, vecSrcB);
 102:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec_acc = vcmlaq_rot90(vec_acc, vecSrcA, vecSrcB);
 103:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 104:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         /*
 105:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****          * Decrement the blkCnt loop counter
 106:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****          * Advance vector source and destination pointers
 107:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****          */
 108:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcA += 4;
 109:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcB += 4;
 110:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         blkCnt--;
 111:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     }
 112:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 113:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 114:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum = vgetq_lane(vec_acc, 0) + vgetq_lane(vec_acc, 2);
 115:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum = vgetq_lane(vec_acc, 1) + vgetq_lane(vec_acc, 3);
 116:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****    
 117:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Tail */
 118:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt = (blockSize & 3) >> 1;
 119:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 120:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     while (blkCnt > 0U)
 121:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     {
 122:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
 123:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 124:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
 125:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;
 126:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   
 127:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 128:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 129:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 130:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 131:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   
 132:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       /* Decrement loop counter */
 133:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       blkCnt--;
 134:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     }
 135:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 136:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 137:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /*
 138:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****      * Store the real and imaginary results in the destination buffers
 139:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****      */
 140:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     *realResult = real_sum;
 141:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     *imagResult = imag_sum;
 142:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** }
 143:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 144:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #else
 145:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** void arm_cmplx_dot_prod_f32(
 146:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   const float32_t * pSrcA,
 147:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   const float32_t * pSrcB,
 148:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         uint32_t numSamples,
 149:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         float32_t * realResult,
 150:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         float32_t * imagResult)
 151:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** {
  28              	 .loc 1 151 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 8DB0     	 sub sp,sp,#52
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 56
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
 152:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
 153:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         float32_t real_sum = 0.0f, imag_sum = 0.0f;    /* Temporary result variables */
  47              	 .loc 1 153 0
  48 000e 4FF00003 	 mov r3,#0
  49 0012 BB62     	 str r3,[r7,#40]
  50 0014 4FF00003 	 mov r3,#0
  51 0018 7B62     	 str r3,[r7,#36]
 154:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         float32_t a0,b0,c0,d0;
 155:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 156:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 157:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32x4x2_t vec1,vec2,vec3,vec4;
 158:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32x4_t accR,accI;
 159:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     float32x2_t accum = vdup_n_f32(0);
 160:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 161:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     accR = vdupq_n_f32(0.0f);
 162:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     accI = vdupq_n_f32(0.0f);
 163:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 164:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Loop unrolling: Compute 8 outputs at a time */
 165:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt = numSamples >> 3U;
 166:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 167:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     while (blkCnt > 0U)
 168:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     {
 169:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* C = (A[0]+jA[1])*(B[0]+jB[1]) + ...  */
 170:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         /* Calculate dot product and then store the result in a temporary buffer. */
 171:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 172:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	      vec1 = vld2q_f32(pSrcA);
 173:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec2 = vld2q_f32(pSrcB);
 174:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 175:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Increment pointers */
 176:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcA += 8;
 177:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcB += 8;
 178:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 179:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Re{C} = Re{A}*Re{B} - Im{A}*Im{B} */
 180:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accR = vmlaq_f32(accR,vec1.val[0],vec2.val[0]);
 181:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accR = vmlsq_f32(accR,vec1.val[1],vec2.val[1]);
 182:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 183:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Im{C} = Re{A}*Im{B} + Im{A}*Re{B} */
 184:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accI = vmlaq_f32(accI,vec1.val[1],vec2.val[0]);
 185:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accI = vmlaq_f32(accI,vec1.val[0],vec2.val[1]);
 186:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 187:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec3 = vld2q_f32(pSrcA);
 188:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         vec4 = vld2q_f32(pSrcB);
 189:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	
 190:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Increment pointers */
 191:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcA += 8;
 192:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         pSrcB += 8;
 193:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 194:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Re{C} = Re{A}*Re{B} - Im{A}*Im{B} */
 195:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accR = vmlaq_f32(accR,vec3.val[0],vec4.val[0]);
 196:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accR = vmlsq_f32(accR,vec3.val[1],vec4.val[1]);
 197:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 198:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 	/* Im{C} = Re{A}*Im{B} + Im{A}*Re{B} */
 199:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accI = vmlaq_f32(accI,vec3.val[1],vec4.val[0]);
 200:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         accI = vmlaq_f32(accI,vec3.val[0],vec4.val[1]);
 201:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 202:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         /* Decrement the loop counter */
 203:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****         blkCnt--;
 204:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     }
 205:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 206:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     accum = vpadd_f32(vget_low_f32(accR), vget_high_f32(accR));
 207:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += vget_lane_f32(accum, 0) + vget_lane_f32(accum, 1);
 208:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 209:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     accum = vpadd_f32(vget_low_f32(accI), vget_high_f32(accI));
 210:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += vget_lane_f32(accum, 0) + vget_lane_f32(accum, 1);
 211:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 212:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Tail */
 213:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt = numSamples & 0x7;
 214:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 215:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #else
 216:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 217:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 218:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 219:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples >> 2U;
 220:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 221:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while (blkCnt > 0U)
 222:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 223:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
 224:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
 225:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 226:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
 227:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 228:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
 229:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
 230:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
 231:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 232:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 233:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
 234:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
 235:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 236:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
 237:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 238:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
 239:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
 240:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
 241:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 242:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 243:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
 244:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
 245:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 246:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
 247:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 248:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
 249:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
 250:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
 251:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 252:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 253:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
 254:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
 255:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
 256:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
 257:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 258:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
 259:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
 260:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
 261:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 262:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 263:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Decrement loop counter */
 264:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt--;
 265:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 266:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 267:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 268:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples % 0x4U;
 269:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 270:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #else
 271:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 272:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Initialize blkCnt with number of samples */
 273:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples;
  52              	 .loc 1 273 0
  53 001a 7B68     	 ldr r3,[r7,#4]
  54 001c FB62     	 str r3,[r7,#44]
 274:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 275:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 276:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 277:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 278:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while (blkCnt > 0U)
  55              	 .loc 1 278 0
  56 001e 46E0     	 b .L2
  57              	.L3:
 279:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 280:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     a0 = *pSrcA++;
  58              	 .loc 1 280 0
  59 0020 FB68     	 ldr r3,[r7,#12]
  60 0022 1A1D     	 adds r2,r3,#4
  61 0024 FA60     	 str r2,[r7,#12]
  62 0026 1B68     	 ldr r3,[r3]
  63 0028 3B62     	 str r3,[r7,#32]
 281:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     b0 = *pSrcA++;
  64              	 .loc 1 281 0
  65 002a FB68     	 ldr r3,[r7,#12]
  66 002c 1A1D     	 adds r2,r3,#4
  67 002e FA60     	 str r2,[r7,#12]
  68 0030 1B68     	 ldr r3,[r3]
  69 0032 FB61     	 str r3,[r7,#28]
 282:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     c0 = *pSrcB++;
  70              	 .loc 1 282 0
  71 0034 BB68     	 ldr r3,[r7,#8]
  72 0036 1A1D     	 adds r2,r3,#4
  73 0038 BA60     	 str r2,[r7,#8]
  74 003a 1B68     	 ldr r3,[r3]
  75 003c BB61     	 str r3,[r7,#24]
 283:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     d0 = *pSrcB++;
  76              	 .loc 1 283 0
  77 003e BB68     	 ldr r3,[r7,#8]
  78 0040 1A1D     	 adds r2,r3,#4
  79 0042 BA60     	 str r2,[r7,#8]
  80 0044 1B68     	 ldr r3,[r3]
  81 0046 7B61     	 str r3,[r7,#20]
 284:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 285:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum += a0 * c0;
  82              	 .loc 1 285 0
  83 0048 97ED087A 	 flds s14,[r7,#32]
  84 004c D7ED067A 	 flds s15,[r7,#24]
  85 0050 67EE277A 	 fmuls s15,s14,s15
  86 0054 97ED0A7A 	 flds s14,[r7,#40]
  87 0058 77EE277A 	 fadds s15,s14,s15
  88 005c C7ED0A7A 	 fsts s15,[r7,#40]
 286:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += a0 * d0;
  89              	 .loc 1 286 0
  90 0060 97ED087A 	 flds s14,[r7,#32]
  91 0064 D7ED057A 	 flds s15,[r7,#20]
  92 0068 67EE277A 	 fmuls s15,s14,s15
  93 006c 97ED097A 	 flds s14,[r7,#36]
  94 0070 77EE277A 	 fadds s15,s14,s15
  95 0074 C7ED097A 	 fsts s15,[r7,#36]
 287:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     real_sum -= b0 * d0;
  96              	 .loc 1 287 0
  97 0078 97ED077A 	 flds s14,[r7,#28]
  98 007c D7ED057A 	 flds s15,[r7,#20]
  99 0080 67EE277A 	 fmuls s15,s14,s15
 100 0084 97ED0A7A 	 flds s14,[r7,#40]
 101 0088 77EE677A 	 fsubs s15,s14,s15
 102 008c C7ED0A7A 	 fsts s15,[r7,#40]
 288:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     imag_sum += b0 * c0;
 103              	 .loc 1 288 0
 104 0090 97ED077A 	 flds s14,[r7,#28]
 105 0094 D7ED067A 	 flds s15,[r7,#24]
 106 0098 67EE277A 	 fmuls s15,s14,s15
 107 009c 97ED097A 	 flds s14,[r7,#36]
 108 00a0 77EE277A 	 fadds s15,s14,s15
 109 00a4 C7ED097A 	 fsts s15,[r7,#36]
 289:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 290:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     /* Decrement loop counter */
 291:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     blkCnt--;
 110              	 .loc 1 291 0
 111 00a8 FB6A     	 ldr r3,[r7,#44]
 112 00aa 013B     	 subs r3,r3,#1
 113 00ac FB62     	 str r3,[r7,#44]
 114              	.L2:
 278:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 115              	 .loc 1 278 0
 116 00ae FB6A     	 ldr r3,[r7,#44]
 117 00b0 002B     	 cmp r3,#0
 118 00b2 B5D1     	 bne .L3
 292:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 293:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 294:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Store real and imaginary result in destination buffer. */
 295:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   *realResult = real_sum;
 119              	 .loc 1 295 0
 120 00b4 3B68     	 ldr r3,[r7]
 121 00b6 BA6A     	 ldr r2,[r7,#40]
 122 00b8 1A60     	 str r2,[r3]
 296:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   *imagResult = imag_sum;
 123              	 .loc 1 296 0
 124 00ba BB6B     	 ldr r3,[r7,#56]
 125 00bc 7A6A     	 ldr r2,[r7,#36]
 126 00be 1A60     	 str r2,[r3]
 297:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** }
 127              	 .loc 1 297 0
 128 00c0 3437     	 adds r7,r7,#52
 129              	.LCFI3:
 130              	 .cfi_def_cfa_offset 4
 131 00c2 BD46     	 mov sp,r7
 132              	.LCFI4:
 133              	 .cfi_def_cfa_register 13
 134              	 
 135 00c4 5DF8047B 	 ldr r7,[sp],#4
 136              	.LCFI5:
 137              	 .cfi_restore 7
 138              	 .cfi_def_cfa_offset 0
 139 00c8 7047     	 bx lr
 140              	 .cfi_endproc
 141              	.LFE149:
 143 00ca 00BF     	 .text
 144              	.Letext0:
 145              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 146              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 147              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 148              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_dot_prod_f32.c
    {standard input}:20     .text.arm_cmplx_dot_prod_f32:00000000 $t
    {standard input}:25     .text.arm_cmplx_dot_prod_f32:00000000 arm_cmplx_dot_prod_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
