   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_cmplx_mult_cmplx_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_cmplx_mult_cmplx_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_cmplx_mult_cmplx_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_cmplx_mult_cmplx_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Title:        arm_cmplx_mult_cmplx_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Description:  Floating-point complex-by-complex multiplication
   5:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @ingroup groupCmplxMath
  33:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @defgroup CmplxByCmplxMult Complex-by-Complex Multiplication
  37:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  38:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   Multiplies a complex vector by another complex vector and generates a complex result.
  39:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   The data in the complex arrays is stored in an interleaved fashion
  40:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   (real, imag, real, imag, ...).
  41:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   The parameter <code>numSamples</code> represents the number of complex
  42:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   samples processed.  The complex arrays have a total of <code>2*numSamples</code>
  43:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   real values.
  44:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  45:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   The underlying algorithm is used:
  46:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   <pre>
  48:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   for (n = 0; n < numSamples; n++) {
  49:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       pDst[(2*n)+0] = pSrcA[(2*n)+0] * pSrcB[(2*n)+0] - pSrcA[(2*n)+1] * pSrcB[(2*n)+1];
  50:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       pDst[(2*n)+1] = pSrcA[(2*n)+0] * pSrcB[(2*n)+1] + pSrcA[(2*n)+1] * pSrcB[(2*n)+0];
  51:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   }
  52:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   </pre>
  53:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  54:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   There are separate functions for floating-point, Q15, and Q31 data types.
  55:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  56:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  57:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**
  58:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @addtogroup CmplxByCmplxMult
  59:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @{
  60:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  61:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  62:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**
  63:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @brief         Floating-point complex-by-complex multiplication.
  64:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @param[in]     pSrcA       points to first input vector
  65:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @param[in]     pSrcB       points to second input vector
  66:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @param[out]    pDst        points to output vector
  67:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @param[in]     numSamples  number of samples in each vector
  68:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   @return        none
  69:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  70:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  71:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  72:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** void arm_cmplx_mult_cmplx_f32(
  74:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   const float32_t * pSrcA,
  75:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   const float32_t * pSrcB,
  76:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         float32_t * pDst,
  77:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         uint32_t numSamples)
  78:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** {
  79:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     uint32_t blkCnt;           /* loop counters */
  80:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     uint32_t blockSize = numSamples;  /* loop counters */
  81:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     float32_t a, b, c, d;  /* Temporary variables to store real and imaginary values */
  82:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  83:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     f32x4x2_t vecA;
  84:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     f32x4x2_t vecB;
  85:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     f32x4x2_t vecDst;
  86:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  87:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Compute 4 complex outputs at a time */
  88:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt = blockSize >> 2;
  89:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     while (blkCnt > 0U)
  90:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     {
  91:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecA = vld2q(pSrcA);  // load & separate real/imag pSrcA (de-interleave 2)
  92:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecB = vld2q(pSrcB);  // load & separate real/imag pSrcB
  93:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcA += 8;
  94:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pSrcB += 8;
  95:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  96:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
  97:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecDst.val[0] = vmulq(vecA.val[0], vecB.val[0]);
  98:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecDst.val[0] = vfmsq(vecDst.val[0],vecA.val[1], vecB.val[1]);
  99:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
 100:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecDst.val[1] = vmulq(vecA.val[0], vecB.val[1]);
 101:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vecDst.val[1] = vfmaq(vecDst.val[1], vecA.val[1], vecB.val[0]);
 102:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 103:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             vst2q(pDst, vecDst);
 104:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             pDst += 8;
 105:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 106:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****             blkCnt--;
 107:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     }
 108:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 109:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Tail */
 110:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt = blockSize & 3;
 111:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     while (blkCnt > 0U)
 112:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     {
 113:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
 114:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
 115:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   
 116:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       a = *pSrcA++;
 117:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       b = *pSrcA++;
 118:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       c = *pSrcB++;
 119:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       d = *pSrcB++;
 120:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   
 121:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       /* store result in destination buffer. */
 122:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       *pDst++ = (a * c) - (b * d);
 123:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       *pDst++ = (a * d) + (b * c);
 124:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   
 125:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       /* Decrement loop counter */
 126:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****       blkCnt--;
 127:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     }
 128:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 129:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** }
 130:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 131:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #else
 132:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** void arm_cmplx_mult_cmplx_f32(
 133:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   const float32_t * pSrcA,
 134:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   const float32_t * pSrcB,
 135:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         float32_t * pDst,
 136:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         uint32_t numSamples)
 137:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** {
  28              	 .loc 1 137 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 8BB0     	 sub sp,sp,#44
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 48
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
 138:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
 139:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     float32_t a, b, c, d;  /* Temporary variables to store real and imaginary values */
 140:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 141:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 142:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     float32x4x2_t va, vb;
 143:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     float32x4x2_t outCplx;
 144:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 145:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Compute 4 outputs at a time */
 146:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt = numSamples >> 2U;
 147:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 148:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     while (blkCnt > 0U)
 149:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     {
 150:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         va = vld2q_f32(pSrcA);  // load & separate real/imag pSrcA (de-interleave 2)
 151:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vb = vld2q_f32(pSrcB);  // load & separate real/imag pSrcB
 152:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 153:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Increment pointers */
 154:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pSrcA += 8;
 155:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pSrcB += 8;
 156:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	
 157:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Re{C} = Re{A}*Re{B} - Im{A}*Im{B} */
 158:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         outCplx.val[0] = vmulq_f32(va.val[0], vb.val[0]);
 159:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         outCplx.val[0] = vmlsq_f32(outCplx.val[0], va.val[1], vb.val[1]);
 160:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 161:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Im{C} = Re{A}*Im{B} + Im{A}*Re{B} */
 162:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         outCplx.val[1] = vmulq_f32(va.val[0], vb.val[1]);
 163:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         outCplx.val[1] = vmlaq_f32(outCplx.val[1], va.val[1], vb.val[0]);
 164:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 165:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         vst2q_f32(pDst, outCplx);
 166:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 167:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Increment pointer */
 168:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         pDst += 8;
 169:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 170:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 	/* Decrement the loop counter */
 171:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****         blkCnt--;
 172:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     }
 173:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 174:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Tail */
 175:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt = numSamples & 3;
 176:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 177:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #else
 178:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 179:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 180:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 181:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   blkCnt = numSamples >> 2U;
 182:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 183:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   while (blkCnt > 0U)
 184:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 185:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
 186:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
 187:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 188:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
 189:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
 190:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 191:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
 192:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* store result in destination buffer. */
 193:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
 194:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 195:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 196:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
 197:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
 198:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 199:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
 200:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
 201:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 202:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 203:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
 204:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
 205:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 206:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
 207:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
 208:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 209:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 210:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
 211:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
 212:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
 213:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
 214:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
 215:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
 216:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 217:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Decrement loop counter */
 218:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt--;
 219:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   }
 220:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 221:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 222:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   blkCnt = numSamples % 0x4U;
 223:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 224:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #else
 225:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 226:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* Initialize blkCnt with number of samples */
 227:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   blkCnt = numSamples;
  47              	 .loc 1 227 0
  48 000e 3B68     	 ldr r3,[r7]
  49 0010 7B62     	 str r3,[r7,#36]
 228:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 229:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 230:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 231:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 232:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   while (blkCnt > 0U)
  50              	 .loc 1 232 0
  51 0012 3CE0     	 b .L2
  52              	.L3:
 233:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 234:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
 235:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */
 236:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 237:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a = *pSrcA++;
  53              	 .loc 1 237 0
  54 0014 FB68     	 ldr r3,[r7,#12]
  55 0016 1A1D     	 adds r2,r3,#4
  56 0018 FA60     	 str r2,[r7,#12]
  57 001a 1B68     	 ldr r3,[r3]
  58 001c 3B62     	 str r3,[r7,#32]
 238:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b = *pSrcA++;
  59              	 .loc 1 238 0
  60 001e FB68     	 ldr r3,[r7,#12]
  61 0020 1A1D     	 adds r2,r3,#4
  62 0022 FA60     	 str r2,[r7,#12]
  63 0024 1B68     	 ldr r3,[r3]
  64 0026 FB61     	 str r3,[r7,#28]
 239:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c = *pSrcB++;
  65              	 .loc 1 239 0
  66 0028 BB68     	 ldr r3,[r7,#8]
  67 002a 1A1D     	 adds r2,r3,#4
  68 002c BA60     	 str r2,[r7,#8]
  69 002e 1B68     	 ldr r3,[r3]
  70 0030 BB61     	 str r3,[r7,#24]
 240:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d = *pSrcB++;
  71              	 .loc 1 240 0
  72 0032 BB68     	 ldr r3,[r7,#8]
  73 0034 1A1D     	 adds r2,r3,#4
  74 0036 BA60     	 str r2,[r7,#8]
  75 0038 1B68     	 ldr r3,[r3]
  76 003a 7B61     	 str r3,[r7,#20]
 241:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 242:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* store result in destination buffer. */
 243:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * c) - (b * d);
  77              	 .loc 1 243 0
  78 003c 7B68     	 ldr r3,[r7,#4]
  79 003e 1A1D     	 adds r2,r3,#4
  80 0040 7A60     	 str r2,[r7,#4]
  81 0042 97ED087A 	 flds s14,[r7,#32]
  82 0046 D7ED067A 	 flds s15,[r7,#24]
  83 004a 27EE277A 	 fmuls s14,s14,s15
  84 004e D7ED076A 	 flds s13,[r7,#28]
  85 0052 D7ED057A 	 flds s15,[r7,#20]
  86 0056 66EEA77A 	 fmuls s15,s13,s15
  87 005a 77EE677A 	 fsubs s15,s14,s15
  88 005e C3ED007A 	 fsts s15,[r3]
 244:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a * d) + (b * c);
  89              	 .loc 1 244 0
  90 0062 7B68     	 ldr r3,[r7,#4]
  91 0064 1A1D     	 adds r2,r3,#4
  92 0066 7A60     	 str r2,[r7,#4]
  93 0068 97ED087A 	 flds s14,[r7,#32]
  94 006c D7ED057A 	 flds s15,[r7,#20]
  95 0070 27EE277A 	 fmuls s14,s14,s15
  96 0074 D7ED076A 	 flds s13,[r7,#28]
  97 0078 D7ED067A 	 flds s15,[r7,#24]
  98 007c 66EEA77A 	 fmuls s15,s13,s15
  99 0080 77EE277A 	 fadds s15,s14,s15
 100 0084 C3ED007A 	 fsts s15,[r3]
 245:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 246:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Decrement loop counter */
 247:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt--;
 101              	 .loc 1 247 0
 102 0088 7B6A     	 ldr r3,[r7,#36]
 103 008a 013B     	 subs r3,r3,#1
 104 008c 7B62     	 str r3,[r7,#36]
 105              	.L2:
 232:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 106              	 .loc 1 232 0
 107 008e 7B6A     	 ldr r3,[r7,#36]
 108 0090 002B     	 cmp r3,#0
 109 0092 BFD1     	 bne .L3
 248:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   }
 249:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 250:../Dave/Generated/CMSIS_DSP/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** }
 110              	 .loc 1 250 0
 111 0094 2C37     	 adds r7,r7,#44
 112              	.LCFI3:
 113              	 .cfi_def_cfa_offset 4
 114 0096 BD46     	 mov sp,r7
 115              	.LCFI4:
 116              	 .cfi_def_cfa_register 13
 117              	 
 118 0098 5DF8047B 	 ldr r7,[sp],#4
 119              	.LCFI5:
 120              	 .cfi_restore 7
 121              	 .cfi_def_cfa_offset 0
 122 009c 7047     	 bx lr
 123              	 .cfi_endproc
 124              	.LFE149:
 126 009e 00BF     	 .text
 127              	.Letext0:
 128              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 129              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 130              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 131              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_mult_cmplx_f32.c
    {standard input}:20     .text.arm_cmplx_mult_cmplx_f32:00000000 $t
    {standard input}:25     .text.arm_cmplx_mult_cmplx_f32:00000000 arm_cmplx_mult_cmplx_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
