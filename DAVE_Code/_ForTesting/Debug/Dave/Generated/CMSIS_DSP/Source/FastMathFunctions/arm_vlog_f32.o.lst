   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_vlog_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_vlog_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_vlog_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_vlog_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * Title:        arm_vlog_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * Description:  Fast vectorized log
   5:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * $Date:        15. Octoboer 2019
   7:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #include "CMSIS_DSP/Include/arm_common_tables.h"
  31:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  32:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #if (defined(ARM_MATH_MVEF) || defined(ARM_MATH_HELIUM) || defined(ARM_MATH_NEON) || defined(ARM_MA
  33:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #include "CMSIS_DSP/Include/arm_vec_math.h"
  34:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #endif
  35:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  36:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** void arm_vlog_f32(
  37:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****   const float32_t * pSrc,
  38:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****         float32_t * pDst,
  39:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****         uint32_t blockSize)
  40:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** {
  28              	 .loc 1 40 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 90B5     	 push {r4,r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 12
  35              	 .cfi_offset 4,-12
  36              	 .cfi_offset 7,-8
  37              	 .cfi_offset 14,-4
  38 0002 87B0     	 sub sp,sp,#28
  39              	.LCFI1:
  40              	 .cfi_def_cfa_offset 40
  41 0004 00AF     	 add r7,sp,#0
  42              	.LCFI2:
  43              	 .cfi_def_cfa_register 7
  44 0006 F860     	 str r0,[r7,#12]
  45 0008 B960     	 str r1,[r7,#8]
  46 000a 7A60     	 str r2,[r7,#4]
  41:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    uint32_t blkCnt; 
  42:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #if (defined(ARM_MATH_MVEF) || defined(ARM_MATH_HELIUM)) && !defined(ARM_MATH_AUTOVECTORIZE)
  44:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    f32x4_t src;
  45:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    f32x4_t dst;
  46:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    blkCnt = blockSize >> 2;
  48:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  49:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    while (blkCnt > 0U)
  50:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    {
  51:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       src = vld1q(pSrc);
  52:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       dst = vlogq_f32(src);
  53:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       vst1q(pDst, dst);
  54:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  55:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       pSrc += 4;
  56:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       pDst += 4;
  57:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       /* Decrement loop counter */
  58:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       blkCnt--;
  59:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    }
  60:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  61:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    blkCnt = blockSize & 3;
  62:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #else
  63:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #if (defined(ARM_MATH_NEON) || defined(ARM_MATH_NEON_EXPERIMENTAL)) && !defined(ARM_MATH_AUTOVECTOR
  64:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    f32x4_t src;
  65:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    f32x4_t dst;
  66:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  67:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    blkCnt = blockSize >> 2;
  68:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  69:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    while (blkCnt > 0U)
  70:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    {
  71:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       src = vld1q_f32(pSrc);
  72:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       dst = vlogq_f32(src);
  73:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       vst1q_f32(pDst, dst);
  74:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  75:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       pSrc += 4;
  76:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       pDst += 4;
  77:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       /* Decrement loop counter */
  78:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       blkCnt--;
  79:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    }
  80:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  81:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    blkCnt = blockSize & 3;
  82:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #else
  83:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    blkCnt = blockSize;
  47              	 .loc 1 83 0
  48 000c 7B68     	 ldr r3,[r7,#4]
  49 000e 7B61     	 str r3,[r7,#20]
  84:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #endif
  85:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** #endif
  86:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** 
  87:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    while (blkCnt > 0U)
  50              	 .loc 1 87 0
  51 0010 0EE0     	 b .L2
  52              	.L3:
  88:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    {
  89:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       /* C = log(A) */
  90:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****   
  91:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       /* Calculate log and store result in destination buffer. */
  92:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       *pDst++ = logf(*pSrc++);
  53              	 .loc 1 92 0
  54 0012 BC68     	 ldr r4,[r7,#8]
  55 0014 231D     	 adds r3,r4,#4
  56 0016 BB60     	 str r3,[r7,#8]
  57 0018 FB68     	 ldr r3,[r7,#12]
  58 001a 1A1D     	 adds r2,r3,#4
  59 001c FA60     	 str r2,[r7,#12]
  60 001e 1B68     	 ldr r3,[r3]
  61 0020 1846     	 mov r0,r3
  62 0022 FFF7FEFF 	 bl logf
  63 0026 0346     	 mov r3,r0
  64 0028 2360     	 str r3,[r4]
  93:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****   
  94:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       /* Decrement loop counter */
  95:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****       blkCnt--;
  65              	 .loc 1 95 0
  66 002a 7B69     	 ldr r3,[r7,#20]
  67 002c 013B     	 subs r3,r3,#1
  68 002e 7B61     	 str r3,[r7,#20]
  69              	.L2:
  87:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    {
  70              	 .loc 1 87 0
  71 0030 7B69     	 ldr r3,[r7,#20]
  72 0032 002B     	 cmp r3,#0
  73 0034 EDD1     	 bne .L3
  96:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c ****    }
  97:../Dave/Generated/CMSIS_DSP/Source/FastMathFunctions/arm_vlog_f32.c **** }
  74              	 .loc 1 97 0
  75 0036 1C37     	 adds r7,r7,#28
  76              	.LCFI3:
  77              	 .cfi_def_cfa_offset 12
  78 0038 BD46     	 mov sp,r7
  79              	.LCFI4:
  80              	 .cfi_def_cfa_register 13
  81              	 
  82 003a 90BD     	 pop {r4,r7,pc}
  83              	 .cfi_endproc
  84              	.LFE149:
  86              	 .text
  87              	.Letext0:
  88              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
  89              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
  90              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
  91              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_vlog_f32.c
    {standard input}:20     .text.arm_vlog_f32:00000000 $t
    {standard input}:25     .text.arm_vlog_f32:00000000 arm_vlog_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
logf
