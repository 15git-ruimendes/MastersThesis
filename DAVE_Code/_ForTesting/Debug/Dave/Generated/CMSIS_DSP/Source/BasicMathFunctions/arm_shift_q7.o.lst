   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_shift_q7.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_shift_q7,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_shift_q7
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_shift_q7:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c"
   1:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * Title:        arm_shift_q7.c
   4:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * Description:  Processing function for the Q7 Shifting
   5:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @addtogroup BasicShift
  37:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @{
  38:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  */
  39:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** /**
  41:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @brief         Shifts the elements of a Q7 vector a specified number of bits
  42:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @param[in]     pSrc       points to the input vector
  43:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @param[in]     shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
  44:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @param[out]    pDst       points to the output vector
  45:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @param[in]     blockSize  number of samples in each vector
  46:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @return        none
  47:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
  48:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @par           onditions for optimum performance
  49:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****                    Input and output buffers should be aligned by 32-bit
  50:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   @par           Scaling and Overflow Behavior
  51:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****                    The function uses saturating arithmetic.
  52:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****                    Results outside of the allowable Q7 range [0x80 0x7F] are saturated.
  53:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****  */
  54:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
  55:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #if defined(ARM_MATH_MVEI)
  56:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
  57:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #include "CMSIS_DSP/Include/arm_helium_utils.h"
  58:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
  59:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** void arm_shift_q7(
  60:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     const q7_t * pSrc,
  61:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     int8_t shiftBits,
  62:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     q7_t * pDst,
  63:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     uint32_t blockSize)
  64:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** {
  65:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  66:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     q7x16_t vecSrc;
  67:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     q7x16_t vecDst;
  68:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
  69:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     /* Compute 16 outputs at a time */
  70:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     blkCnt = blockSize >> 4;
  71:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
  72:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     {
  73:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         /*
  74:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****          * C = A (>> or <<) shiftBits
  75:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****          * Shift the input and then store the result in the destination buffer.
  76:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****          */
  77:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         vecSrc = vld1q(pSrc);
  78:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
  79:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         vst1q(pDst, vecDst);
  80:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         /*
  81:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****          * Decrement the blockSize loop counter
  82:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****          */
  83:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         blkCnt--;
  84:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         /*
  85:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****          * advance vector source and destination pointers
  86:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****          */
  87:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         pSrc += 16;
  88:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         pDst += 16;
  89:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     }
  90:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     /*
  91:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****      * tail
  92:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****      */
  93:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     blkCnt = blockSize & 0xF;
  94:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     if (blkCnt > 0U)
  95:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     {
  96:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  97:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         vecSrc = vld1q(pSrc);
  98:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
  99:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         vstrbq_p(pDst, vecDst, p0);
 100:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     }
 101:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** }
 102:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 103:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #else
 104:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** void arm_shift_q7(
 105:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   const q7_t * pSrc,
 106:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         int8_t shiftBits,
 107:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         q7_t * pDst,
 108:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         uint32_t blockSize)
 109:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** {
  28              	 .loc 1 109 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 89B0     	 sub sp,sp,#36
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 40
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 7A60     	 str r2,[r7,#4]
  45 000a 3B60     	 str r3,[r7]
  46 000c 0B46     	 mov r3,r1
  47 000e FB72     	 strb r3,[r7,#11]
 110:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 111:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****         uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
  48              	 .loc 1 111 0
  49 0010 FB7A     	 ldrb r3,[r7,#11]
  50 0012 23F07F03 	 bic r3,r3,#127
  51 0016 FB76     	 strb r3,[r7,#27]
 112:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 113:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 114:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 115:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #if defined (ARM_MATH_DSP)
 116:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   q7_t in1,  in2,  in3,  in4;                    /* Temporary input variables */
 117:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #endif
 118:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 119:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 120:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   blkCnt = blockSize >> 2U;
 121:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 122:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   /* If the shift value is positive then do right shift else left shift */
 123:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   if (sign == 0U)
 124:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   {
 125:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
 126:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     {
 127:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* C = A << shiftBits */
 128:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 129:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #if defined (ARM_MATH_DSP)
 130:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* Read 4 inputs */
 131:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       in1 = *pSrc++;
 132:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       in2 = *pSrc++;
 133:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       in3 = *pSrc++;
 134:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       in4 = *pSrc++;
 135:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 136:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     /* Pack and store result in destination buffer (in single write) */
 137:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       write_q7x4_ia (&pDst, __PACKq7(__SSAT((in1 << shiftBits), 8),
 138:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****                                      __SSAT((in2 << shiftBits), 8),
 139:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****                                      __SSAT((in3 << shiftBits), 8),
 140:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****                                      __SSAT((in4 << shiftBits), 8) ));
 141:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #else
 142:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
 143:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
 144:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
 145:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
 146:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #endif
 147:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 148:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* Decrement loop counter */
 149:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 150:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     }
 151:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   }
 152:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   else
 153:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   {
 154:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
 155:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     {
 156:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* C = A >> shiftBits */
 157:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 158:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #if defined (ARM_MATH_DSP)
 159:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* Read 4 inputs */
 160:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       in1 = *pSrc++;
 161:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       in2 = *pSrc++;
 162:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       in3 = *pSrc++;
 163:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       in4 = *pSrc++;
 164:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 165:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     /* Pack and store result in destination buffer (in single write) */
 166:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       write_q7x4_ia (&pDst, __PACKq7((in1 >> -shiftBits),
 167:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****                                      (in2 >> -shiftBits),
 168:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****                                      (in3 >> -shiftBits),
 169:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****                                      (in4 >> -shiftBits) ));
 170:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #else
 171:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 172:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 173:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 174:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 175:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #endif
 176:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 177:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* Decrement loop counter */
 178:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 179:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     }
 180:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   }
 181:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 182:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 183:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   blkCnt = blockSize % 0x4U;
 184:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 185:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #else
 186:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 187:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   /* Initialize blkCnt with number of samples */
 188:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   blkCnt = blockSize;
  52              	 .loc 1 188 0
  53 0018 3B68     	 ldr r3,[r7]
  54 001a FB61     	 str r3,[r7,#28]
 189:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 190:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 191:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 192:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   /* If the shift value is positive then do right shift else left shift */
 193:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   if (sign == 0U)
  55              	 .loc 1 193 0
  56 001c FB7E     	 ldrb r3,[r7,#27]
  57 001e 002B     	 cmp r3,#0
  58 0020 1BD1     	 bne .L2
 194:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   {
 195:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
  59              	 .loc 1 195 0
  60 0022 16E0     	 b .L3
  61              	.L4:
 196:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     {
 197:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* C = A << shiftBits */
 198:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 199:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* Shift input and store result in destination buffer. */
 200:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) *pSrc++ << shiftBits), 8);
  62              	 .loc 1 200 0
  63 0024 7B68     	 ldr r3,[r7,#4]
  64 0026 5A1C     	 adds r2,r3,#1
  65 0028 7A60     	 str r2,[r7,#4]
  66              	.LBB2:
  67 002a FA68     	 ldr r2,[r7,#12]
  68 002c 511C     	 adds r1,r2,#1
  69 002e F960     	 str r1,[r7,#12]
  70 0030 1278     	 ldrb r2,[r2]
  71 0032 51B2     	 sxtb r1,r2
  72 0034 97F90B20 	 ldrsb r2,[r7,#11]
  73 0038 01FA02F2 	 lsl r2,r1,r2
  74 003c 7A61     	 str r2,[r7,#20]
  75 003e 7A69     	 ldr r2,[r7,#20]
  76              	
  77 0040 02F30702 	 ssat r2,#8,r2
  78              	
  79              	 .thumb
  80 0044 3A61     	 str r2,[r7,#16]
  81 0046 3A69     	 ldr r2,[r7,#16]
  82              	.LBE2:
  83 0048 D2B2     	 uxtb r2,r2
  84 004a 1A70     	 strb r2,[r3]
 201:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 202:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* Decrement loop counter */
 203:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
  85              	 .loc 1 203 0
  86 004c FB69     	 ldr r3,[r7,#28]
  87 004e 013B     	 subs r3,r3,#1
  88 0050 FB61     	 str r3,[r7,#28]
  89              	.L3:
 195:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     {
  90              	 .loc 1 195 0
  91 0052 FB69     	 ldr r3,[r7,#28]
  92 0054 002B     	 cmp r3,#0
  93 0056 E5D1     	 bne .L4
  94 0058 15E0     	 b .L1
  95              	.L2:
 204:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     }
 205:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   }
 206:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   else
 207:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   {
 208:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0U)
  96              	 .loc 1 208 0
  97 005a 11E0     	 b .L6
  98              	.L7:
 209:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     {
 210:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* C = A >> shiftBits */
 211:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 212:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* Shift input and store result in destination buffer. */
 213:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
  99              	 .loc 1 213 0
 100 005c 7B68     	 ldr r3,[r7,#4]
 101 005e 5A1C     	 adds r2,r3,#1
 102 0060 7A60     	 str r2,[r7,#4]
 103 0062 FA68     	 ldr r2,[r7,#12]
 104 0064 511C     	 adds r1,r2,#1
 105 0066 F960     	 str r1,[r7,#12]
 106 0068 1278     	 ldrb r2,[r2]
 107 006a 51B2     	 sxtb r1,r2
 108 006c 97F90B20 	 ldrsb r2,[r7,#11]
 109 0070 5242     	 negs r2,r2
 110 0072 41FA02F2 	 asr r2,r1,r2
 111 0076 D2B2     	 uxtb r2,r2
 112 0078 1A70     	 strb r2,[r3]
 214:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 215:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       /* Decrement loop counter */
 216:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 113              	 .loc 1 216 0
 114 007a FB69     	 ldr r3,[r7,#28]
 115 007c 013B     	 subs r3,r3,#1
 116 007e FB61     	 str r3,[r7,#28]
 117              	.L6:
 208:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     {
 118              	 .loc 1 208 0
 119 0080 FB69     	 ldr r3,[r7,#28]
 120 0082 002B     	 cmp r3,#0
 121 0084 EAD1     	 bne .L7
 122              	.L1:
 217:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****     }
 218:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c ****   }
 219:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** 
 220:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q7.c **** }
 123              	 .loc 1 220 0
 124 0086 2437     	 adds r7,r7,#36
 125              	.LCFI3:
 126              	 .cfi_def_cfa_offset 4
 127 0088 BD46     	 mov sp,r7
 128              	.LCFI4:
 129              	 .cfi_def_cfa_register 13
 130              	 
 131 008a 5DF8047B 	 ldr r7,[sp],#4
 132              	.LCFI5:
 133              	 .cfi_restore 7
 134              	 .cfi_def_cfa_offset 0
 135 008e 7047     	 bx lr
 136              	 .cfi_endproc
 137              	.LFE149:
 139              	 .text
 140              	.Letext0:
 141              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 142              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 143              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 144              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_shift_q7.c
    {standard input}:20     .text.arm_shift_q7:00000000 $t
    {standard input}:25     .text.arm_shift_q7:00000000 arm_shift_q7
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
