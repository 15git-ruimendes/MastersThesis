   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_dot_prod_q31.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_dot_prod_q31,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_dot_prod_q31
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_dot_prod_q31:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c"
   1:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * Title:        arm_dot_prod_q31.c
   4:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * Description:  Q31 dot product
   5:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @addtogroup BasicDotProd
  37:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @{
  38:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  */
  39:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** /**
  41:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @brief         Dot product of Q31 vectors.
  42:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @param[in]     pSrcA      points to the first input vector.
  43:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @param[in]     pSrcB      points to the second input vector.
  44:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @param[in]     blockSize  number of samples in each vector.
  45:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @param[out]    result     output result returned here.
  46:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @return        none
  47:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
  48:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   @par           Scaling and Overflow Behavior
  49:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****                    The intermediate multiplications are in 1.31 x 1.31 = 2.62 format and these
  50:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****                    are truncated to 2.48 format by discarding the lower 14 bits.
  51:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****                    The 2.48 result is then added without saturation to a 64-bit accumulator in 16.4
  52:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****                    There are 15 guard bits in the accumulator and there is no risk of overflow as l
  53:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****                    the length of the vectors is less than 2^16 elements.
  54:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****                    The return result is in 16.48 format.
  55:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****  */
  56:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
  57:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** #if defined(ARM_MATH_MVEI)
  58:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
  59:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** #include "CMSIS_DSP/Include/arm_helium_utils.h"
  60:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
  61:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** void arm_dot_prod_q31(
  62:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     const q31_t * pSrcA,
  63:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     const q31_t * pSrcB,
  64:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     uint32_t blockSize,
  65:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     q63_t * result)
  66:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** {
  67:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  68:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     q31x4_t vecA;
  69:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     q31x4_t vecB;
  70:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     q63_t     sum = 0LL;
  71:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
  72:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     /* Compute 4 outputs at a time */
  73:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt = blockSize >> 2;
  74:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     while (blkCnt > 0U)
  75:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     {
  76:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         /*
  77:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****          * C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1]
  78:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****          * Calculate dot product and then store the result in a temporary buffer.
  79:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****          */
  80:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         vecA = vld1q(pSrcA);
  81:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         vecB = vld1q(pSrcB);
  82:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         sum = vrmlaldavhaq(sum, vecA, vecB);
  83:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         /*
  84:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****          * Decrement the blockSize loop counter
  85:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****          */
  86:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         blkCnt--;
  87:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         /*
  88:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****          * advance vector source and destination pointers
  89:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****          */
  90:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         pSrcA += 4;
  91:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         pSrcB += 4;
  92:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     }
  93:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     /*
  94:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****      * tail
  95:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****      */
  96:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt = blockSize & 3;
  97:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     if (blkCnt > 0U)
  98:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     {
  99:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
 100:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         vecA = vld1q(pSrcA);
 101:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         vecB = vld1q(pSrcB);
 102:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         sum = vrmlaldavhaq_p(sum, vecA, vecB, p0);
 103:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     }
 104:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 105:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     /*
 106:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****      * vrmlaldavhaq provides extra intermediate accumulator headroom.
 107:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****      * limiting the need of intermediate scaling
 108:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****      * Scalar variant uses 2.48 accu format by right shifting accumulators by 14.
 109:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****      * 16.48 output conversion is performed outside the loop by scaling accu. by 6
 110:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****      */
 111:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     *result = asrl(sum, (14 - 8));
 112:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** }
 113:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 114:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** #else
 115:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** void arm_dot_prod_q31(
 116:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   const q31_t * pSrcA,
 117:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   const q31_t * pSrcB,
 118:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         uint32_t blockSize,
 119:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         q63_t * result)
 120:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** {
  28              	 .loc 1 120 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 F0B5     	 push {r4,r5,r6,r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 20
  35              	 .cfi_offset 4,-20
  36              	 .cfi_offset 5,-16
  37              	 .cfi_offset 6,-12
  38              	 .cfi_offset 7,-8
  39              	 .cfi_offset 14,-4
  40 0002 89B0     	 sub sp,sp,#36
  41              	.LCFI1:
  42              	 .cfi_def_cfa_offset 56
  43 0004 00AF     	 add r7,sp,#0
  44              	.LCFI2:
  45              	 .cfi_def_cfa_register 7
  46 0006 F860     	 str r0,[r7,#12]
  47 0008 B960     	 str r1,[r7,#8]
  48 000a 7A60     	 str r2,[r7,#4]
  49 000c 3B60     	 str r3,[r7]
 121:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 122:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****         q63_t sum = 0;                                 /* Temporary return variable */
  50              	 .loc 1 122 0
  51 000e 4FF00002 	 mov r2,#0
  52 0012 4FF00003 	 mov r3,#0
  53 0016 C7E90423 	 strd r2,[r7,#16]
 123:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 124:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 125:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 126:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 127:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   blkCnt = blockSize >> 2U;
 128:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 129:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   while (blkCnt > 0U)
 130:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   {
 131:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 132:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 133:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     /* Calculate dot product and store result in a temporary buffer. */
 134:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
 135:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 136:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
 137:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 138:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
 139:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 140:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
 141:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 142:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     /* Decrement loop counter */
 143:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt--;
 144:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   }
 145:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 146:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 147:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   blkCnt = blockSize % 0x4U;
 148:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 149:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** #else
 150:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 151:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   /* Initialize blkCnt with number of samples */
 152:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   blkCnt = blockSize;
  54              	 .loc 1 152 0
  55 001a 7B68     	 ldr r3,[r7,#4]
  56 001c FB61     	 str r3,[r7,#28]
 153:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 154:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 155:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 156:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   while (blkCnt > 0U)
  57              	 .loc 1 156 0
  58 001e 24E0     	 b .L2
  59              	.L3:
 157:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   {
 158:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 159:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 160:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     /* Calculate dot product and store result in a temporary buffer. */
 161:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) *pSrcA++ * *pSrcB++) >> 14U;
  60              	 .loc 1 161 0
  61 0020 FB68     	 ldr r3,[r7,#12]
  62 0022 1A1D     	 adds r2,r3,#4
  63 0024 FA60     	 str r2,[r7,#12]
  64 0026 1B68     	 ldr r3,[r3]
  65 0028 1846     	 mov r0,r3
  66 002a 4FEAE071 	 asr r1,r0,#31
  67 002e BB68     	 ldr r3,[r7,#8]
  68 0030 1A1D     	 adds r2,r3,#4
  69 0032 BA60     	 str r2,[r7,#8]
  70 0034 1B68     	 ldr r3,[r3]
  71 0036 1A46     	 mov r2,r3
  72 0038 4FEAE273 	 asr r3,r2,#31
  73 003c 02FB01FE 	 mul lr,r2,r1
  74 0040 00FB03F6 	 mul r6,r0,r3
  75 0044 7644     	 add r6,r6,lr
  76 0046 A0FB0223 	 umull r2,r3,r0,r2
  77 004a F118     	 adds r1,r6,r3
  78 004c 0B46     	 mov r3,r1
  79 004e 940B     	 lsrs r4,r2,#14
  80 0050 44EA8344 	 orr r4,r4,r3,lsl#18
  81 0054 9D13     	 asrs r5,r3,#14
  82 0056 D7E90423 	 ldrd r2,[r7,#16]
  83 005a 1219     	 adds r2,r2,r4
  84 005c 43EB0503 	 adc r3,r3,r5
  85 0060 C7E90423 	 strd r2,[r7,#16]
 162:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 163:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     /* Decrement loop counter */
 164:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt--;
  86              	 .loc 1 164 0
  87 0064 FB69     	 ldr r3,[r7,#28]
  88 0066 013B     	 subs r3,r3,#1
  89 0068 FB61     	 str r3,[r7,#28]
  90              	.L2:
 156:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   {
  91              	 .loc 1 156 0
  92 006a FB69     	 ldr r3,[r7,#28]
  93 006c 002B     	 cmp r3,#0
  94 006e D7D1     	 bne .L3
 165:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   }
 166:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** 
 167:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   /* Store result in destination buffer in 16.48 format */
 168:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c ****   *result = sum;
  95              	 .loc 1 168 0
  96 0070 3968     	 ldr r1,[r7]
  97 0072 D7E90423 	 ldrd r2,[r7,#16]
  98 0076 C1E90023 	 strd r2,[r1]
 169:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_dot_prod_q31.c **** }
  99              	 .loc 1 169 0
 100 007a 2437     	 adds r7,r7,#36
 101              	.LCFI3:
 102              	 .cfi_def_cfa_offset 20
 103 007c BD46     	 mov sp,r7
 104              	.LCFI4:
 105              	 .cfi_def_cfa_register 13
 106              	 
 107 007e F0BD     	 pop {r4,r5,r6,r7,pc}
 108              	 .cfi_endproc
 109              	.LFE149:
 111              	 .text
 112              	.Letext0:
 113              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 114              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 115              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 116              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_dot_prod_q31.c
    {standard input}:20     .text.arm_dot_prod_q31:00000000 $t
    {standard input}:25     .text.arm_dot_prod_q31:00000000 arm_dot_prod_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
