   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_scale_q7.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_scale_q7,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_scale_q7
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_scale_q7:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c"
   1:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Title:        arm_scale_q7.c
   4:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Description:  Multiplies a Q7 vector by a scalar
   5:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @addtogroup BasicScale
  37:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @{
  38:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  */
  39:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** /**
  41:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @brief         Multiplies a Q7 vector by a scalar.
  42:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @param[in]     pSrc       points to the input vector
  43:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @param[in]     scaleFract fractional portion of the scale value
  44:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @param[in]     shift      number of bits to shift the result by
  45:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @param[out]    pDst       points to the output vector
  46:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @param[in]     blockSize  number of samples in each vector
  47:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @return        none
  48:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  49:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   @par           Scaling and Overflow Behavior
  50:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****                    The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.7 format.
  51:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****                    These are multiplied to yield a 2.14 intermediate result and this is shifted wit
  52:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****  */
  53:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  54:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #if defined(ARM_MATH_MVEI)
  55:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  56:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #include "CMSIS_DSP/Include/arm_helium_utils.h"
  57:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  58:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  59:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** void arm_scale_q7(
  60:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     const q7_t * pSrc,
  61:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     q7_t   scaleFract,
  62:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     int8_t  shift,
  63:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     q7_t * pDst,
  64:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     uint32_t blockSize)
  65:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** {
  66:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  67:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     q7x16_t vecSrc;
  68:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     q7x16_t vecDst;
  69:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  70:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  71:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Compute 16 outputs at a time */
  72:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     blkCnt = blockSize >> 4;
  73:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
  74:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     while (blkCnt > 0U)
  75:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     {
  76:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         /*
  77:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****          * C = A * scale
  78:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****          * Scale the input and then store the result in the destination buffer.
  79:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****          */
  80:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         vecSrc = vld1q(pSrc);
  81:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s8(scaleFract));
  82:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
  83:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         vst1q(pDst, vecDst);
  84:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         /*
  85:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****          * Decrement the blockSize loop counter
  86:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****          */
  87:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         blkCnt--;
  88:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         /*
  89:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****          * advance vector source and destination pointers
  90:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****          */
  91:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         pSrc += 16;
  92:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         pDst += 16;
  93:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     }
  94:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /*
  95:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****      * tail
  96:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****      */
  97:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     blkCnt = blockSize & 0xF;
  98:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     if (blkCnt > 0U)
  99:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     {
 100:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
 101:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         vecSrc = vld1q(pSrc);
 102:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s8(scaleFract));
 103:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
 104:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         vstrbq_p(pDst, vecDst, p0);
 105:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     }
 106:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 107:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** }
 108:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 109:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #else
 110:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** void arm_scale_q7(
 111:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   const q7_t * pSrc,
 112:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         q7_t scaleFract,
 113:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         int8_t shift,
 114:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         q7_t * pDst,
 115:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         uint32_t blockSize)
 116:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** {
  28              	 .loc 1 116 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 89B0     	 sub sp,sp,#36
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 40
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 7B60     	 str r3,[r7,#4]
  45 000a 0B46     	 mov r3,r1
  46 000c FB72     	 strb r3,[r7,#11]
  47 000e 1346     	 mov r3,r2
  48 0010 BB72     	 strb r3,[r7,#10]
 117:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 118:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****         int8_t kShift = 7 - shift;                     /* Shift to apply after scaling */
  49              	 .loc 1 118 0
  50 0012 BB7A     	 ldrb r3,[r7,#10]
  51 0014 C3F10703 	 rsb r3,r3,#7
  52 0018 DBB2     	 uxtb r3,r3
  53 001a FB76     	 strb r3,[r7,#27]
 119:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 120:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 121:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 122:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #if defined (ARM_MATH_DSP)
 123:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   q7_t in1,  in2,  in3,  in4;                    /* Temporary input variables */
 124:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   q7_t out1, out2, out3, out4;                   /* Temporary output variables */
 125:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #endif
 126:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 127:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 128:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize >> 2U;
 129:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 130:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0U)
 131:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   {
 132:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
 133:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 134:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #if defined (ARM_MATH_DSP)
 135:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Reading 4 inputs from memory */
 136:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     in1 = *pSrc++;
 137:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     in2 = *pSrc++;
 138:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     in3 = *pSrc++;
 139:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     in4 = *pSrc++;
 140:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 141:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Scale inputs and store result in the temporary variable. */
 142:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     out1 = (q7_t) (__SSAT(((in1) * scaleFract) >> kShift, 8));
 143:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
 144:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     out3 = (q7_t) (__SSAT(((in3) * scaleFract) >> kShift, 8));
 145:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     out4 = (q7_t) (__SSAT(((in4) * scaleFract) >> kShift, 8));
 146:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 147:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Pack and store result in destination buffer (in single write) */
 148:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     write_q7x4_ia (&pDst, __PACKq7(out1, out2, out3, out4));
 149:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #else
 150:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
 151:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
 152:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
 153:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
 154:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #endif
 155:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 156:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Decrement loop counter */
 157:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
 158:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   }
 159:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 160:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 161:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize % 0x4U;
 162:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 163:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #else
 164:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 165:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   /* Initialize blkCnt with number of samples */
 166:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize;
  54              	 .loc 1 166 0
  55 001c BB6A     	 ldr r3,[r7,#40]
  56 001e FB61     	 str r3,[r7,#28]
 167:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 168:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 169:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 170:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0U)
  57              	 .loc 1 170 0
  58 0020 1AE0     	 b .L2
  59              	.L3:
 171:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   {
 172:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
 173:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 174:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Scale input and store result in destination buffer. */
 175:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) *pSrc++ * scaleFract) >> kShift), 8));
  60              	 .loc 1 175 0
  61 0022 7B68     	 ldr r3,[r7,#4]
  62 0024 5A1C     	 adds r2,r3,#1
  63 0026 7A60     	 str r2,[r7,#4]
  64              	.LBB2:
  65 0028 FA68     	 ldr r2,[r7,#12]
  66 002a 511C     	 adds r1,r2,#1
  67 002c F960     	 str r1,[r7,#12]
  68 002e 1278     	 ldrb r2,[r2]
  69 0030 52B2     	 sxtb r2,r2
  70 0032 97F90B10 	 ldrsb r1,[r7,#11]
  71 0036 01FB02F1 	 mul r1,r1,r2
  72 003a 97F91B20 	 ldrsb r2,[r7,#27]
  73 003e 41FA02F2 	 asr r2,r1,r2
  74 0042 7A61     	 str r2,[r7,#20]
  75 0044 7A69     	 ldr r2,[r7,#20]
  76              	
  77 0046 02F30702 	 ssat r2,#8,r2
  78              	
  79              	 .thumb
  80 004a 3A61     	 str r2,[r7,#16]
  81 004c 3A69     	 ldr r2,[r7,#16]
  82              	.LBE2:
  83 004e D2B2     	 uxtb r2,r2
  84 0050 1A70     	 strb r2,[r3]
 176:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 177:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     /* Decrement loop counter */
 178:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
  85              	 .loc 1 178 0
  86 0052 FB69     	 ldr r3,[r7,#28]
  87 0054 013B     	 subs r3,r3,#1
  88 0056 FB61     	 str r3,[r7,#28]
  89              	.L2:
 170:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   {
  90              	 .loc 1 170 0
  91 0058 FB69     	 ldr r3,[r7,#28]
  92 005a 002B     	 cmp r3,#0
  93 005c E1D1     	 bne .L3
 179:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c ****   }
 180:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** 
 181:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q7.c **** }
  94              	 .loc 1 181 0
  95 005e 2437     	 adds r7,r7,#36
  96              	.LCFI3:
  97              	 .cfi_def_cfa_offset 4
  98 0060 BD46     	 mov sp,r7
  99              	.LCFI4:
 100              	 .cfi_def_cfa_register 13
 101              	 
 102 0062 5DF8047B 	 ldr r7,[sp],#4
 103              	.LCFI5:
 104              	 .cfi_restore 7
 105              	 .cfi_def_cfa_offset 0
 106 0066 7047     	 bx lr
 107              	 .cfi_endproc
 108              	.LFE149:
 110              	 .text
 111              	.Letext0:
 112              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 113              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 114              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 115              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_q7.c
    {standard input}:20     .text.arm_scale_q7:00000000 $t
    {standard input}:25     .text.arm_scale_q7:00000000 arm_scale_q7
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
