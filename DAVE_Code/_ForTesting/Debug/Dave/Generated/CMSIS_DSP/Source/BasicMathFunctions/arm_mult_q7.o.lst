   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mult_q7.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mult_q7,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mult_q7
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mult_q7:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c"
   1:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * Title:        arm_mult_q7.c
   4:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * Description:  Q7 vector multiplication
   5:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @addtogroup BasicMult
  37:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @{
  38:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  */
  39:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** /**
  41:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @brief         Q7 vector multiplication
  42:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @param[in]     pSrcA      points to the first input vector
  43:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @param[in]     pSrcB      points to the second input vector
  44:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @param[out]    pDst       points to the output vector
  45:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @param[in]     blockSize  number of samples in each vector
  46:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @return        none
  47:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
  48:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   @par           Scaling and Overflow Behavior
  49:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****                    The function uses saturating arithmetic.
  50:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****                    Results outside of the allowable Q7 range [0x80 0x7F] are saturated.
  51:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****  */
  52:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #if defined(ARM_MATH_MVEI)
  53:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
  54:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #include "CMSIS_DSP/Include/arm_helium_utils.h"
  55:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
  56:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** void arm_mult_q7(
  57:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     const q7_t * pSrcA,
  58:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     const q7_t * pSrcB,
  59:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     q7_t * pDst,
  60:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     uint32_t blockSize)
  61:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** {
  62:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     uint32_t  blkCnt;           /* loop counters */
  63:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     q7x16_t vecA, vecB;
  64:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
  65:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     /* Compute 16 outputs at a time */
  66:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     blkCnt = blockSize >> 4;
  67:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     while (blkCnt > 0U)
  68:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     {
  69:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         /*
  70:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****          * C = A * B
  71:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****          * Multiply the inputs and then store the results in the destination buffer.
  72:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****          */
  73:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         vecA = vld1q(pSrcA);
  74:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         vecB = vld1q(pSrcB);
  75:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         vst1q(pDst, vqdmulhq(vecA, vecB));
  76:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         /*
  77:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****          * Decrement the blockSize loop counter
  78:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****          */
  79:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         blkCnt--;
  80:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         /*
  81:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****          * advance vector source and destination pointers
  82:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****          */
  83:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         pSrcA  += 16;
  84:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         pSrcB  += 16;
  85:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         pDst   += 16;
  86:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     }
  87:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     /*
  88:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****      * tail
  89:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****      */
  90:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     blkCnt = blockSize & 0xF;
  91:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     if (blkCnt > 0U)
  92:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     {
  93:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         mve_pred16_t p0 = vctp8q(blkCnt);
  94:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         vecA = vld1q(pSrcA);
  95:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         vecB = vld1q(pSrcB);
  96:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         vstrbq_p(pDst, vqdmulhq(vecA, vecB), p0);
  97:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     }
  98:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** }
  99:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 100:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #else
 101:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** void arm_mult_q7(
 102:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   const q7_t * pSrcA,
 103:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   const q7_t * pSrcB,
 104:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         q7_t * pDst,
 105:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         uint32_t blockSize)
 106:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** {
  28              	 .loc 1 106 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 89B0     	 sub sp,sp,#36
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 40
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
 107:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****         uint32_t blkCnt;                               /* Loop counter */
 108:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 109:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #if defined (ARM_MATH_LOOPUNROLL)
 110:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 111:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #if defined (ARM_MATH_DSP)
 112:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   q7_t out1, out2, out3, out4;                   /* Temporary output variables */
 113:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #endif
 114:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 115:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 116:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize >> 2U;
 117:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 118:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0U)
 119:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   {
 120:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
 121:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 122:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #if defined (ARM_MATH_DSP)
 123:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     /* Multiply inputs and store results in temporary variables */
 124:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     out1 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 125:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 126:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 127:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     out4 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 128:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 129:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     /* Pack and store result in destination buffer (in single write) */
 130:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     write_q7x4_ia (&pDst, __PACKq7(out1, out2, out3, out4));
 131:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #else
 132:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 133:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 134:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 135:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 136:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #endif
 137:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 138:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     /* Decrement loop counter */
 139:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
 140:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   }
 141:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 142:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   /* Loop unrolling: Compute remaining outputs */
 143:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize % 0x4U;
 144:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 145:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #else
 146:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 147:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   /* Initialize blkCnt with number of samples */
 148:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize;
  47              	 .loc 1 148 0
  48 000e 3B68     	 ldr r3,[r7]
  49 0010 FB61     	 str r3,[r7,#28]
 149:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 150:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 151:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 152:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0U)
  50              	 .loc 1 152 0
  51 0012 1AE0     	 b .L2
  52              	.L3:
 153:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   {
 154:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
 155:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 156:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     /* Multiply input and store result in destination buffer. */
 157:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  53              	 .loc 1 157 0
  54 0014 7B68     	 ldr r3,[r7,#4]
  55 0016 5A1C     	 adds r2,r3,#1
  56 0018 7A60     	 str r2,[r7,#4]
  57              	.LBB2:
  58 001a FA68     	 ldr r2,[r7,#12]
  59 001c 511C     	 adds r1,r2,#1
  60 001e F960     	 str r1,[r7,#12]
  61 0020 1278     	 ldrb r2,[r2]
  62 0022 51B2     	 sxtb r1,r2
  63 0024 BA68     	 ldr r2,[r7,#8]
  64 0026 501C     	 adds r0,r2,#1
  65 0028 B860     	 str r0,[r7,#8]
  66 002a 1278     	 ldrb r2,[r2]
  67 002c 52B2     	 sxtb r2,r2
  68 002e 02FB01F2 	 mul r2,r2,r1
  69 0032 D211     	 asrs r2,r2,#7
  70 0034 BA61     	 str r2,[r7,#24]
  71 0036 BA69     	 ldr r2,[r7,#24]
  72              	
  73 0038 02F30702 	 ssat r2,#8,r2
  74              	
  75              	 .thumb
  76 003c 7A61     	 str r2,[r7,#20]
  77 003e 7A69     	 ldr r2,[r7,#20]
  78              	.LBE2:
  79 0040 D2B2     	 uxtb r2,r2
  80 0042 1A70     	 strb r2,[r3]
 158:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 159:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     /* Decrement loop counter */
 160:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
  81              	 .loc 1 160 0
  82 0044 FB69     	 ldr r3,[r7,#28]
  83 0046 013B     	 subs r3,r3,#1
  84 0048 FB61     	 str r3,[r7,#28]
  85              	.L2:
 152:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   {
  86              	 .loc 1 152 0
  87 004a FB69     	 ldr r3,[r7,#28]
  88 004c 002B     	 cmp r3,#0
  89 004e E1D1     	 bne .L3
 161:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c ****   }
 162:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** 
 163:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_q7.c **** }
  90              	 .loc 1 163 0
  91 0050 2437     	 adds r7,r7,#36
  92              	.LCFI3:
  93              	 .cfi_def_cfa_offset 4
  94 0052 BD46     	 mov sp,r7
  95              	.LCFI4:
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 0054 5DF8047B 	 ldr r7,[sp],#4
  99              	.LCFI5:
 100              	 .cfi_restore 7
 101              	 .cfi_def_cfa_offset 0
 102 0058 7047     	 bx lr
 103              	 .cfi_endproc
 104              	.LFE149:
 106 005a 00BF     	 .text
 107              	.Letext0:
 108              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 109              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 110              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 111              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_q7.c
    {standard input}:20     .text.arm_mult_q7:00000000 $t
    {standard input}:25     .text.arm_mult_q7:00000000 arm_mult_q7
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
