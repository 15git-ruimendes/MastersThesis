   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_and_u16.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_and_u16,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_and_u16
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_and_u16:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c"
   1:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * Title:        arm_and_u16.c
   4:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * Description:  uint16_t bitwise AND
   5:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * $Date:        14 November 2019
   7:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @defgroup And Vector bitwise AND
  37:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  38:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   Compute the logical bitwise AND.
  39:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   There are separate functions for uint32_t, uint16_t, and uint7_t data types.
  41:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  */
  42:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  43:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** /**
  44:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @addtogroup And
  45:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @{
  46:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  */
  47:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  48:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** /**
  49:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @brief         Compute the logical bitwise AND of two fixed-point vectors.
  50:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @param[in]     pSrcA      points to input vector A
  51:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @param[in]     pSrcB      points to input vector B
  52:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @param[out]    pDst       points to output vector
  53:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @param[in]     blockSize  number of samples in each vector
  54:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****   @return        none
  55:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****  */
  56:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  57:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** void arm_and_u16(
  58:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     const uint16_t * pSrcA,
  59:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     const uint16_t * pSrcB,
  60:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****           uint16_t * pDst,
  61:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****           uint32_t blockSize)
  62:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** {
  28              	 .loc 1 62 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 87B0     	 sub sp,sp,#28
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 32
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
  63:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     uint32_t blkCnt;      /* Loop counter */
  64:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  65:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** #if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  66:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     q15x8_t vecSrcA, vecSrcB;
  67:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  68:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     /* Compute 8 outputs at a time */
  69:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize >> 3;
  70:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  71:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     while (blkCnt > 0U)
  72:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     {
  73:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         vecSrcA = vld1q(pSrcA);
  74:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         vecSrcB = vld1q(pSrcB);
  75:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  76:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         vst1q(pDst, vandq_u16(vecSrcA, vecSrcB) );
  77:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  78:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         pSrcA += 8;
  79:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         pSrcB += 8;
  80:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         pDst  += 8;
  81:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  82:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         /* Decrement the loop counter */
  83:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         blkCnt--;
  84:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     }
  85:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  86:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     /* Tail */
  87:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize & 7;
  88:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
  89:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     if (blkCnt > 0U)
  90:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     {
  91:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  92:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         vecSrcA = vld1q(pSrcA);
  93:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         vecSrcB = vld1q(pSrcB);
  94:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         vstrhq_p(pDst, vandq_u16(vecSrcA, vecSrcB), p0);
  95:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     }
  96:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** #else
  97:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
  98:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     uint16x8_t vecA, vecB;
  99:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
 100:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     /* Compute 8 outputs at a time */
 101:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize >> 3U;
 102:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
 103:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     while (blkCnt > 0U)
 104:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     {
 105:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         vecA = vld1q_u16(pSrcA);
 106:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         vecB = vld1q_u16(pSrcB);
 107:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
 108:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         vst1q_u16(pDst, vandq_u16(vecA, vecB) );
 109:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
 110:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         pSrcA += 8;
 111:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         pSrcB += 8;
 112:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         pDst  += 8;
 113:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
 114:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         /* Decrement the loop counter */
 115:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         blkCnt--;
 116:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     }
 117:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
 118:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     /* Tail */
 119:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize & 7;
 120:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** #else
 121:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     /* Initialize blkCnt with number of samples */
 122:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     blkCnt = blockSize;
  47              	 .loc 1 122 0
  48 000e 3B68     	 ldr r3,[r7]
  49 0010 7B61     	 str r3,[r7,#20]
 123:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** #endif
 124:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
 125:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     while (blkCnt > 0U)
  50              	 .loc 1 125 0
  51 0012 10E0     	 b .L2
  52              	.L3:
 126:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     {
 127:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         *pDst++ = (*pSrcA++)&(*pSrcB++);
  53              	 .loc 1 127 0
  54 0014 7B68     	 ldr r3,[r7,#4]
  55 0016 9A1C     	 adds r2,r3,#2
  56 0018 7A60     	 str r2,[r7,#4]
  57 001a FA68     	 ldr r2,[r7,#12]
  58 001c 911C     	 adds r1,r2,#2
  59 001e F960     	 str r1,[r7,#12]
  60 0020 1188     	 ldrh r1,[r2]
  61 0022 BA68     	 ldr r2,[r7,#8]
  62 0024 901C     	 adds r0,r2,#2
  63 0026 B860     	 str r0,[r7,#8]
  64 0028 1288     	 ldrh r2,[r2]
  65 002a 0A40     	 ands r2,r2,r1
  66 002c 92B2     	 uxth r2,r2
  67 002e 1A80     	 strh r2,[r3]
 128:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** 
 129:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         /* Decrement the loop counter */
 130:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****         blkCnt--;
  68              	 .loc 1 130 0
  69 0030 7B69     	 ldr r3,[r7,#20]
  70 0032 013B     	 subs r3,r3,#1
  71 0034 7B61     	 str r3,[r7,#20]
  72              	.L2:
 125:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     {
  73              	 .loc 1 125 0
  74 0036 7B69     	 ldr r3,[r7,#20]
  75 0038 002B     	 cmp r3,#0
  76 003a EBD1     	 bne .L3
 131:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c ****     }
 132:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** #endif /* if defined(ARM_MATH_MVEI) */
 133:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_and_u16.c **** }
  77              	 .loc 1 133 0
  78 003c 1C37     	 adds r7,r7,#28
  79              	.LCFI3:
  80              	 .cfi_def_cfa_offset 4
  81 003e BD46     	 mov sp,r7
  82              	.LCFI4:
  83              	 .cfi_def_cfa_register 13
  84              	 
  85 0040 5DF8047B 	 ldr r7,[sp],#4
  86              	.LCFI5:
  87              	 .cfi_restore 7
  88              	 .cfi_def_cfa_offset 0
  89 0044 7047     	 bx lr
  90              	 .cfi_endproc
  91              	.LFE149:
  93 0046 00BF     	 .text
  94              	.Letext0:
  95              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
  96              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
  97              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_and_u16.c
    {standard input}:20     .text.arm_and_u16:00000000 $t
    {standard input}:25     .text.arm_and_u16:00000000 arm_and_u16
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
