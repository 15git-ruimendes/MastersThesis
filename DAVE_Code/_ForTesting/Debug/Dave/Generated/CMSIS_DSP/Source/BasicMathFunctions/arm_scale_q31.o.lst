   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_scale_q31.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_scale_q31,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_scale_q31
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_scale_q31:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c"
   1:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * Title:        arm_scale_q31.c
   4:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * Description:  Multiplies a Q31 vector by a scalar
   5:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @addtogroup BasicScale
  37:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @{
  38:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  */
  39:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** /**
  41:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @brief         Multiplies a Q31 vector by a scalar.
  42:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @param[in]     pSrc       points to the input vector
  43:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @param[in]     scaleFract fractional portion of the scale value
  44:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @param[in]     shift      number of bits to shift the result by
  45:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @param[out]    pDst       points to the output vector
  46:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @param[in]     blockSize  number of samples in each vector
  47:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @return        none
  48:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
  49:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   @par           Scaling and Overflow Behavior
  50:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****                    The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.31 format
  51:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****                    These are multiplied to yield a 2.62 intermediate result and this is shifted wit
  52:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****  */
  53:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
  54:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** #if defined(ARM_MATH_MVEI)
  55:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
  56:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** #include "CMSIS_DSP/Include/arm_helium_utils.h"
  57:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
  58:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** void arm_scale_q31(
  59:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     const q31_t * pSrc,
  60:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     q31_t   scaleFract,
  61:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     int8_t  shift,
  62:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     q31_t * pDst,
  63:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     uint32_t blockSize)
  64:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** {
  65:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     uint32_t  blkCnt;           /* loop counters */
  66:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     q31x4_t vecSrc;
  67:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     q31x4_t vecDst;
  68:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
  69:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     /* Compute 4 outputs at a time */
  70:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     blkCnt = blockSize >> 2;
  71:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
  72:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     {
  73:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         /*
  74:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****          * C = A * scale
  75:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****          * Scale the input and then store the result in the destination buffer.
  76:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****          */
  77:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         vecSrc = vld1q(pSrc);
  78:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s32(scaleFract));
  79:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
  80:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         vst1q(pDst, vecDst);
  81:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         /*
  82:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****          * Decrement the blockSize loop counter
  83:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****          */
  84:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         blkCnt--;
  85:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         /*
  86:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****          * advance vector source and destination pointers
  87:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****          */
  88:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         pSrc += 4;
  89:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         pDst += 4;
  90:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     }
  91:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     /*
  92:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****      * tail
  93:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****      */
  94:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     blkCnt = blockSize & 3;
  95:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     if (blkCnt > 0U)
  96:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     {
  97:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
  98:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         vecSrc = vld1q(pSrc);
  99:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         vecDst = vmulhq(vecSrc, vdupq_n_s32(scaleFract));
 100:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         vecDst = vqshlq_r(vecDst, shift + 1);
 101:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         vstrwq_p(pDst, vecDst, p0);
 102:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     }
 103:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** }
 104:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 105:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** #else
 106:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** void arm_scale_q31(
 107:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   const q31_t *pSrc,
 108:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         q31_t scaleFract,
 109:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         int8_t shift,
 110:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         q31_t *pDst,
 111:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         uint32_t blockSize)
 112:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** {
  28              	 .loc 1 112 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 28
  35              	 .cfi_offset 4,-28
  36              	 .cfi_offset 5,-24
  37              	 .cfi_offset 6,-20
  38              	 .cfi_offset 7,-16
  39              	 .cfi_offset 8,-12
  40              	 .cfi_offset 9,-8
  41              	 .cfi_offset 14,-4
  42 0004 89B0     	 sub sp,sp,#36
  43              	.LCFI1:
  44              	 .cfi_def_cfa_offset 64
  45 0006 00AF     	 add r7,sp,#0
  46              	.LCFI2:
  47              	 .cfi_def_cfa_register 7
  48 0008 F860     	 str r0,[r7,#12]
  49 000a B960     	 str r1,[r7,#8]
  50 000c 3B60     	 str r3,[r7]
  51 000e 1346     	 mov r3,r2
  52 0010 FB71     	 strb r3,[r7,#7]
 113:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
 114:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         q31_t in, out;                                 /* Temporary variables */
 115:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
  53              	 .loc 1 115 0
  54 0012 FB79     	 ldrb r3,[r7,#7]
  55 0014 0133     	 adds r3,r3,#1
  56 0016 DBB2     	 uxtb r3,r3
  57 0018 FB75     	 strb r3,[r7,#23]
 116:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         int8_t sign = (kShift & 0x80);
  58              	 .loc 1 116 0
  59 001a FB7D     	 ldrb r3,[r7,#23]
  60 001c 23F07F03 	 bic r3,r3,#127
  61 0020 BB75     	 strb r3,[r7,#22]
 117:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 118:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 119:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 120:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 121:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize >> 2U;
 122:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 123:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   if (sign == 0U)
 124:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   {
 125:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
 126:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     {
 127:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* C = A * scale */
 128:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 129:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* Scale input and store result in destination buffer. */
 130:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;                                /* read input from source */
 131:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;        /* multiply input with scaler value */
 132:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;                          /* apply shifting */
 133:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))                   /* saturate the result */
 134:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 135:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;                               /* Store result destination */
 136:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 137:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 138:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 139:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;
 140:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))
 141:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 142:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 143:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 144:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 145:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 146:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;
 147:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))
 148:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 149:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 150:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 151:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 152:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 153:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;
 154:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))
 155:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 156:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 157:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 158:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* Decrement loop counter */
 159:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 160:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     }
 161:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   }
 162:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   else
 163:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   {
 164:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
 165:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     {
 166:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* C = A * scale */
 167:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 168:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* Scale input and store result in destination buffer. */
 169:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;                                /* read four inputs from source */
 170:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;        /* multiply input with scaler value */
 171:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;                         /* apply shifting */
 172:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;                               /* Store result destination */
 173:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 174:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 175:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 176:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;
 177:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 178:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 179:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 180:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 181:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;
 182:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 183:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 184:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 185:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 186:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;
 187:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 188:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 189:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* Decrement loop counter */
 190:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 191:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     }
 192:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   }
 193:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 194:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 195:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize % 0x4U;
 196:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 197:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** #else
 198:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 199:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   /* Initialize blkCnt with number of samples */
 200:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize;
  62              	 .loc 1 200 0
  63 0022 3B6C     	 ldr r3,[r7,#64]
  64 0024 FB61     	 str r3,[r7,#28]
 201:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 202:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 203:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 204:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   if (sign == 0U)
  65              	 .loc 1 204 0
  66 0026 97F91630 	 ldrsb r3,[r7,#22]
  67 002a 002B     	 cmp r3,#0
  68 002c 3AD1     	 bne .L2
 205:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   {
 206:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
  69              	 .loc 1 206 0
  70 002e 35E0     	 b .L3
  71              	.L5:
 207:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     {
 208:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* C = A * scale */
 209:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 210:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* Scale input and store result in destination buffer. */
 211:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
  72              	 .loc 1 211 0
  73 0030 FB68     	 ldr r3,[r7,#12]
  74 0032 1A1D     	 adds r2,r3,#4
  75 0034 FA60     	 str r2,[r7,#12]
  76 0036 1B68     	 ldr r3,[r3]
  77 0038 3B61     	 str r3,[r7,#16]
 212:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
  78              	 .loc 1 212 0
  79 003a 3B69     	 ldr r3,[r7,#16]
  80 003c 1846     	 mov r0,r3
  81 003e 4FEAE071 	 asr r1,r0,#31
  82 0042 BB68     	 ldr r3,[r7,#8]
  83 0044 1A46     	 mov r2,r3
  84 0046 4FEAE273 	 asr r3,r2,#31
  85 004a 02FB01F5 	 mul r5,r2,r1
  86 004e 00FB03F4 	 mul r4,r0,r3
  87 0052 2C44     	 add r4,r4,r5
  88 0054 A0FB0223 	 umull r2,r3,r0,r2
  89 0058 E118     	 adds r1,r4,r3
  90 005a 0B46     	 mov r3,r1
  91 005c 9846     	 mov r8,r3
  92 005e 4FEAE379 	 asr r9,r3,#31
  93 0062 4346     	 mov r3,r8
  94 0064 3B61     	 str r3,[r7,#16]
 213:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in << kShift;
  95              	 .loc 1 213 0
  96 0066 97F91730 	 ldrsb r3,[r7,#23]
  97 006a 3A69     	 ldr r2,[r7,#16]
  98 006c 02FA03F3 	 lsl r3,r2,r3
  99 0070 BB61     	 str r3,[r7,#24]
 214:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       if (in != (out >> kShift))
 100              	 .loc 1 214 0
 101 0072 97F91730 	 ldrsb r3,[r7,#23]
 102 0076 BA69     	 ldr r2,[r7,#24]
 103 0078 1A41     	 asrs r2,r2,r3
 104 007a 3B69     	 ldr r3,[r7,#16]
 105 007c 9A42     	 cmp r2,r3
 106 007e 05D0     	 beq .L4
 215:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****           out = 0x7FFFFFFF ^ (in >> 31);
 107              	 .loc 1 215 0
 108 0080 3B69     	 ldr r3,[r7,#16]
 109 0082 DB17     	 asrs r3,r3,#31
 110 0084 83F00043 	 eor r3,r3,#-2147483648
 111 0088 DB43     	 mvns r3,r3
 112 008a BB61     	 str r3,[r7,#24]
 113              	.L4:
 216:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 114              	 .loc 1 216 0
 115 008c 3B68     	 ldr r3,[r7]
 116 008e 1A1D     	 adds r2,r3,#4
 117 0090 3A60     	 str r2,[r7]
 118 0092 BA69     	 ldr r2,[r7,#24]
 119 0094 1A60     	 str r2,[r3]
 217:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 218:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* Decrement loop counter */
 219:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 120              	 .loc 1 219 0
 121 0096 FB69     	 ldr r3,[r7,#28]
 122 0098 013B     	 subs r3,r3,#1
 123 009a FB61     	 str r3,[r7,#28]
 124              	.L3:
 206:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     {
 125              	 .loc 1 206 0
 126 009c FB69     	 ldr r3,[r7,#28]
 127 009e 002B     	 cmp r3,#0
 128 00a0 C6D1     	 bne .L5
 129 00a2 2CE0     	 b .L1
 130              	.L2:
 220:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     }
 221:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   }
 222:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   else
 223:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   {
 224:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0U)
 131              	 .loc 1 224 0
 132 00a4 28E0     	 b .L7
 133              	.L8:
 225:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     {
 226:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* C = A * scale */
 227:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 228:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* Scale input and store result in destination buffer. */
 229:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = *pSrc++;
 134              	 .loc 1 229 0
 135 00a6 FB68     	 ldr r3,[r7,#12]
 136 00a8 1A1D     	 adds r2,r3,#4
 137 00aa FA60     	 str r2,[r7,#12]
 138 00ac 1B68     	 ldr r3,[r3]
 139 00ae 3B61     	 str r3,[r7,#16]
 230:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       in = ((q63_t) in * scaleFract) >> 32;
 140              	 .loc 1 230 0
 141 00b0 3B69     	 ldr r3,[r7,#16]
 142 00b2 1846     	 mov r0,r3
 143 00b4 4FEAE071 	 asr r1,r0,#31
 144 00b8 BB68     	 ldr r3,[r7,#8]
 145 00ba 1A46     	 mov r2,r3
 146 00bc 4FEAE273 	 asr r3,r2,#31
 147 00c0 02FB01FE 	 mul lr,r2,r1
 148 00c4 00FB03F6 	 mul r6,r0,r3
 149 00c8 7644     	 add r6,r6,lr
 150 00ca A0FB0223 	 umull r2,r3,r0,r2
 151 00ce F118     	 adds r1,r6,r3
 152 00d0 0B46     	 mov r3,r1
 153 00d2 1C00     	 movs r4,r3
 154 00d4 DD17     	 asrs r5,r3,#31
 155 00d6 2346     	 mov r3,r4
 156 00d8 3B61     	 str r3,[r7,#16]
 231:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       out = in >> -kShift;
 157              	 .loc 1 231 0
 158 00da 97F91730 	 ldrsb r3,[r7,#23]
 159 00de 5B42     	 negs r3,r3
 160 00e0 3A69     	 ldr r2,[r7,#16]
 161 00e2 42FA03F3 	 asr r3,r2,r3
 162 00e6 BB61     	 str r3,[r7,#24]
 232:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       *pDst++ = out;
 163              	 .loc 1 232 0
 164 00e8 3B68     	 ldr r3,[r7]
 165 00ea 1A1D     	 adds r2,r3,#4
 166 00ec 3A60     	 str r2,[r7]
 167 00ee BA69     	 ldr r2,[r7,#24]
 168 00f0 1A60     	 str r2,[r3]
 233:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 234:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       /* Decrement loop counter */
 235:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 169              	 .loc 1 235 0
 170 00f2 FB69     	 ldr r3,[r7,#28]
 171 00f4 013B     	 subs r3,r3,#1
 172 00f6 FB61     	 str r3,[r7,#28]
 173              	.L7:
 224:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     {
 174              	 .loc 1 224 0
 175 00f8 FB69     	 ldr r3,[r7,#28]
 176 00fa 002B     	 cmp r3,#0
 177 00fc D3D1     	 bne .L8
 178              	.L1:
 236:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****     }
 237:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c ****   }
 238:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** 
 239:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_scale_q31.c **** }
 179              	 .loc 1 239 0
 180 00fe 2437     	 adds r7,r7,#36
 181              	.LCFI3:
 182              	 .cfi_def_cfa_offset 28
 183 0100 BD46     	 mov sp,r7
 184              	.LCFI4:
 185              	 .cfi_def_cfa_register 13
 186              	 
 187 0102 BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 188              	 .cfi_endproc
 189              	.LFE149:
 191 0106 00BF     	 .text
 192              	.Letext0:
 193              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 194              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 195              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 196              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_q31.c
    {standard input}:20     .text.arm_scale_q31:00000000 $t
    {standard input}:25     .text.arm_scale_q31:00000000 arm_scale_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
