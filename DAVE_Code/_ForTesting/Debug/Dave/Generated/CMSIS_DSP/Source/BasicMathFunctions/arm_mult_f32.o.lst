   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mult_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mult_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mult_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mult_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * Title:        arm_mult_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * Description:  Floating-point vector multiplication
   5:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @defgroup BasicMult Vector Multiplication
  37:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  38:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   Element-by-element multiplication of two vectors.
  39:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   <pre>
  41:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****       pDst[n] = pSrcA[n] * pSrcB[n],   0 <= n < blockSize.
  42:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   </pre>
  43:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  44:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  45:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** /**
  48:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @addtogroup BasicMult
  49:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @{
  50:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  */
  51:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  52:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** /**
  53:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @brief         Floating-point vector multiplication.
  54:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @param[in]     pSrcA      points to the first input vector.
  55:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @param[in]     pSrcB      points to the second input vector.
  56:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @param[out]    pDst       points to the output vector.
  57:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @param[in]     blockSize  number of samples in each vector.
  58:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   @return        none
  59:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****  */
  60:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  61:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  62:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  63:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #include "CMSIS_DSP/Include/arm_helium_utils.h"
  64:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  65:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** void arm_mult_f32(
  66:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   const float32_t * pSrcA,
  67:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   const float32_t * pSrcB,
  68:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         float32_t * pDst,
  69:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         uint32_t blockSize)
  70:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** {
  71:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
  72:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     f32x4_t vec1;
  74:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     f32x4_t vec2;
  75:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     f32x4_t res;
  76:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  77:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* Compute 4 outputs at a time */
  78:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     blkCnt = blockSize >> 2U;
  79:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     while (blkCnt > 0U)
  80:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     {
  81:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         /* C = A + B */
  82:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  83:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****       /* Add and then store the results in the destination buffer. */
  84:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         vec1 = vld1q(pSrcA);
  85:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         vec2 = vld1q(pSrcB);
  86:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         res = vmulq(vec1, vec2);
  87:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         vst1q(pDst, res);
  88:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  89:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         /* Increment pointers */
  90:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         pSrcA += 4;
  91:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         pSrcB += 4; 
  92:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         pDst += 4;
  93:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         
  94:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         /* Decrement the loop counter */
  95:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         blkCnt--;
  96:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     }
  97:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
  98:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* Tail */
  99:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     blkCnt = blockSize & 0x3;
 100:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     if (blkCnt > 0U)
 101:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     {
 102:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****       /* C = A + B */
 103:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****       mve_pred16_t p0 = vctp32q(blkCnt);
 104:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****       vec1 = vld1q(pSrcA);
 105:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****       vec2 = vld1q(pSrcB);
 106:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****       vstrwq_p(pDst, vmulq(vec1,vec2), p0);
 107:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     }
 108:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 109:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** }
 110:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 111:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #else
 112:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** void arm_mult_f32(
 113:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   const float32_t * pSrcA,
 114:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   const float32_t * pSrcB,
 115:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         float32_t * pDst,
 116:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         uint32_t blockSize)
 117:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** {
  28              	 .loc 1 117 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 87B0     	 sub sp,sp,#28
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 32
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
 118:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     uint32_t blkCnt;                               /* Loop counter */
 119:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 120:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 121:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     f32x4_t vec1;
 122:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     f32x4_t vec2;
 123:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     f32x4_t res;
 124:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* Compute 4 outputs at a time */
 126:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     blkCnt = blockSize >> 2U;
 127:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     while (blkCnt > 0U)
 129:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     {
 130:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         /* C = A * B */
 131:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 132:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     	/* Multiply the inputs and then store the results in the destination buffer. */
 133:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         vec1 = vld1q_f32(pSrcA);
 134:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         vec2 = vld1q_f32(pSrcB);
 135:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         res = vmulq_f32(vec1, vec2);
 136:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         vst1q_f32(pDst, res);
 137:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 138:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         /* Increment pointers */
 139:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         pSrcA += 4;
 140:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         pSrcB += 4; 
 141:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         pDst += 4;
 142:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         
 143:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         /* Decrement the loop counter */
 144:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****         blkCnt--;
 145:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     }
 146:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* Tail */
 148:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     blkCnt = blockSize & 0x3;
 149:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 150:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #else
 151:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 152:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 153:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 154:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize >> 2U;
 155:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 156:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   while (blkCnt > 0U)
 157:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   {
 158:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* C = A * B */
 159:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 160:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* Multiply inputs and store result in destination buffer. */
 161:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 162:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 163:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 164:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 165:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 166:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 167:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 168:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 169:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* Decrement loop counter */
 170:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     blkCnt--;
 171:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   }
 172:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 173:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 174:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize % 0x4U;
 175:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 176:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #else
 177:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 178:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   /* Initialize blkCnt with number of samples */
 179:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize;
  47              	 .loc 1 179 0
  48 000e 3B68     	 ldr r3,[r7]
  49 0010 7B61     	 str r3,[r7,#20]
 180:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 181:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 182:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 183:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 184:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   while (blkCnt > 0U)
  50              	 .loc 1 184 0
  51 0012 13E0     	 b .L2
  52              	.L3:
 185:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   {
 186:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* C = A * B */
 187:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 188:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* Multiply input and store result in destination buffer. */
 189:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
  53              	 .loc 1 189 0
  54 0014 7B68     	 ldr r3,[r7,#4]
  55 0016 1A1D     	 adds r2,r3,#4
  56 0018 7A60     	 str r2,[r7,#4]
  57 001a FA68     	 ldr r2,[r7,#12]
  58 001c 111D     	 adds r1,r2,#4
  59 001e F960     	 str r1,[r7,#12]
  60 0020 92ED007A 	 flds s14,[r2]
  61 0024 BA68     	 ldr r2,[r7,#8]
  62 0026 111D     	 adds r1,r2,#4
  63 0028 B960     	 str r1,[r7,#8]
  64 002a D2ED007A 	 flds s15,[r2]
  65 002e 67EE277A 	 fmuls s15,s14,s15
  66 0032 C3ED007A 	 fsts s15,[r3]
 190:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 191:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     /* Decrement loop counter */
 192:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****     blkCnt--;
  67              	 .loc 1 192 0
  68 0036 7B69     	 ldr r3,[r7,#20]
  69 0038 013B     	 subs r3,r3,#1
  70 003a 7B61     	 str r3,[r7,#20]
  71              	.L2:
 184:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   {
  72              	 .loc 1 184 0
  73 003c 7B69     	 ldr r3,[r7,#20]
  74 003e 002B     	 cmp r3,#0
  75 0040 E8D1     	 bne .L3
 193:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c ****   }
 194:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** 
 195:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_mult_f32.c **** }
  76              	 .loc 1 195 0
  77 0042 1C37     	 adds r7,r7,#28
  78              	.LCFI3:
  79              	 .cfi_def_cfa_offset 4
  80 0044 BD46     	 mov sp,r7
  81              	.LCFI4:
  82              	 .cfi_def_cfa_register 13
  83              	 
  84 0046 5DF8047B 	 ldr r7,[sp],#4
  85              	.LCFI5:
  86              	 .cfi_restore 7
  87              	 .cfi_def_cfa_offset 0
  88 004a 7047     	 bx lr
  89              	 .cfi_endproc
  90              	.LFE149:
  92              	 .text
  93              	.Letext0:
  94              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
  95              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
  96              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
  97              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_f32.c
    {standard input}:20     .text.arm_mult_f32:00000000 $t
    {standard input}:25     .text.arm_mult_f32:00000000 arm_mult_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
