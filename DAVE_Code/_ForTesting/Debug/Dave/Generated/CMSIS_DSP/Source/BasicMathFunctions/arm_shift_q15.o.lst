   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_shift_q15.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_shift_q15,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_shift_q15
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_shift_q15:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c"
   1:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * Title:        arm_shift_q15.c
   4:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * Description:  Shifts the elements of a Q15 vector by a specified number of bits
   5:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @addtogroup BasicShift
  37:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @{
  38:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  */
  39:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** /**
  41:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @brief         Shifts the elements of a Q15 vector a specified number of bits
  42:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @param[in]     pSrc       points to the input vector
  43:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @param[in]     shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
  44:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @param[out]    pDst       points to the output vector
  45:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @param[in]     blockSize  number of samples in each vector
  46:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @return        none
  47:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
  48:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   @par           Scaling and Overflow Behavior
  49:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                    The function uses saturating arithmetic.
  50:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                    Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated.
  51:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****  */
  52:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
  53:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #if defined(ARM_MATH_MVEI)
  54:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
  55:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #include "CMSIS_DSP/Include/arm_helium_utils.h"
  56:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
  57:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** void arm_shift_q15(
  58:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     const q15_t * pSrc,
  59:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     int8_t shiftBits,
  60:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     q15_t * pDst,
  61:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     uint32_t blockSize)
  62:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** {
  63:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     uint32_t  blkCnt;           /* loop counters */
  64:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     q15x8_t vecSrc;
  65:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     q15x8_t vecDst;
  66:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
  67:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     /* Compute 8 outputs at a time */
  68:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize >> 3;
  69:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
  70:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     {
  71:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         /*
  72:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****          * C = A (>> or <<) shiftBits
  73:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****          * Shift the input and then store the result in the destination buffer.
  74:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****          */
  75:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         vecSrc = vld1q(pSrc);
  76:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
  77:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         vst1q(pDst, vecDst);
  78:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         /*
  79:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****          * Decrement the blockSize loop counter
  80:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****          */
  81:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         blkCnt--;
  82:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         /*
  83:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****          * advance vector source and destination pointers
  84:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****          */
  85:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         pSrc += 8;
  86:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         pDst += 8;
  87:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     }
  88:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     /*
  89:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****      * tail
  90:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****      */
  91:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize & 7;
  92:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     if (blkCnt > 0U)
  93:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     {
  94:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         mve_pred16_t p0 = vctp16q(blkCnt);
  95:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         vecSrc = vld1q(pSrc);
  96:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         vecDst = vqshlq_r(vecSrc, shiftBits);
  97:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         vstrhq_p(pDst, vecDst, p0);
  98:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     }
  99:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** }
 100:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 101:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #else
 102:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** void arm_shift_q15(
 103:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   const q15_t * pSrc,
 104:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         int8_t shiftBits,
 105:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         q15_t * pDst,
 106:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         uint32_t blockSize)
 107:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** {
  28              	 .loc 1 107 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 89B0     	 sub sp,sp,#36
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 40
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 7A60     	 str r2,[r7,#4]
  45 000a 3B60     	 str r3,[r7]
  46 000c 0B46     	 mov r3,r1
  47 000e FB72     	 strb r3,[r7,#11]
 108:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         uint32_t blkCnt;                               /* Loop counter */
 109:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****         uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
  48              	 .loc 1 109 0
  49 0010 FB7A     	 ldrb r3,[r7,#11]
  50 0012 23F07F03 	 bic r3,r3,#127
  51 0016 FB76     	 strb r3,[r7,#27]
 110:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 111:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_LOOPUNROLL)
 112:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 113:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_DSP)
 114:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   q15_t in1, in2;                                /* Temporary input variables */
 115:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #endif
 116:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 117:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 118:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   blkCnt = blockSize >> 2U;
 119:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 120:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   /* If the shift value is positive then do right shift else left shift */
 121:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   if (sign == 0U)
 122:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   {
 123:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
 124:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     {
 125:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
 126:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 127:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_DSP)
 128:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* read 2 samples from source */
 129:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 130:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 131:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 132:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 133:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 134:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT(__SSAT((in1 << shiftBits), 16),
 135:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                                      __SSAT((in2 << shiftBits), 16), 16));
 136:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #else
 137:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT(__SSAT((in2 << shiftBits), 16),
 138:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                                       __SSAT((in1 << shiftBits), 16), 16));
 139:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 140:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 141:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* read 2 samples from source */
 142:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 143:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 144:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 145:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 146:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT(__SSAT((in1 << shiftBits), 16),
 147:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                                      __SSAT((in2 << shiftBits), 16), 16));
 148:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #else
 149:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT(__SSAT((in2 << shiftBits), 16),
 150:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                                      __SSAT((in1 << shiftBits), 16), 16));
 151:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 152:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 153:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #else
 154:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 155:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 156:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 157:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 158:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #endif
 159:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 160:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement loop counter */
 161:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 162:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     }
 163:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   }
 164:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   else
 165:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   {
 166:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
 167:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     {
 168:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 169:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 170:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_DSP)
 171:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* read 2 samples from source */
 172:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 173:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 174:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 175:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 176:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 177:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT((in1 >> -shiftBits),
 178:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                                      (in2 >> -shiftBits), 16));
 179:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #else
 180:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT((in2 >> -shiftBits),
 181:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                                      (in1 >> -shiftBits), 16));
 182:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 183:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 184:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* read 2 samples from source */
 185:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 186:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 187:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 188:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 189:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT((in1 >> -shiftBits),
 190:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                                      (in2 >> -shiftBits), 16));
 191:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #else
 192:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       write_q15x2_ia (&pDst, __PKHBT((in2 >> -shiftBits),
 193:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****                                      (in1 >> -shiftBits), 16));
 194:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 195:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 196:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #else
 197:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 198:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 199:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 200:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 201:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #endif
 202:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 203:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement loop counter */
 204:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 205:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     }
 206:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   }
 207:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 208:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   /* Loop unrolling: Compute remaining outputs */
 209:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   blkCnt = blockSize % 0x4U;
 210:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 211:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #else
 212:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 213:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   /* Initialize blkCnt with number of samples */
 214:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   blkCnt = blockSize;
  52              	 .loc 1 214 0
  53 0018 3B68     	 ldr r3,[r7]
  54 001a FB61     	 str r3,[r7,#28]
 215:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 216:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 217:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 218:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   /* If the shift value is positive then do right shift else left shift */
 219:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   if (sign == 0U)
  55              	 .loc 1 219 0
  56 001c FB7E     	 ldrb r3,[r7,#27]
  57 001e 002B     	 cmp r3,#0
  58 0020 1BD1     	 bne .L2
 220:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   {
 221:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
  59              	 .loc 1 221 0
  60 0022 16E0     	 b .L3
  61              	.L4:
 222:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     {
 223:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
 224:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 225:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* Shift input and store result in destination buffer. */
 226:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
  62              	 .loc 1 226 0
  63 0024 7B68     	 ldr r3,[r7,#4]
  64 0026 9A1C     	 adds r2,r3,#2
  65 0028 7A60     	 str r2,[r7,#4]
  66              	.LBB2:
  67 002a FA68     	 ldr r2,[r7,#12]
  68 002c 911C     	 adds r1,r2,#2
  69 002e F960     	 str r1,[r7,#12]
  70 0030 1288     	 ldrh r2,[r2]
  71 0032 11B2     	 sxth r1,r2
  72 0034 97F90B20 	 ldrsb r2,[r7,#11]
  73 0038 01FA02F2 	 lsl r2,r1,r2
  74 003c 7A61     	 str r2,[r7,#20]
  75 003e 7A69     	 ldr r2,[r7,#20]
  76              	
  77 0040 02F30F02 	 ssat r2,#16,r2
  78              	
  79              	 .thumb
  80 0044 3A61     	 str r2,[r7,#16]
  81 0046 3A69     	 ldr r2,[r7,#16]
  82              	.LBE2:
  83 0048 92B2     	 uxth r2,r2
  84 004a 1A80     	 strh r2,[r3]
 227:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 228:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement loop counter */
 229:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
  85              	 .loc 1 229 0
  86 004c FB69     	 ldr r3,[r7,#28]
  87 004e 013B     	 subs r3,r3,#1
  88 0050 FB61     	 str r3,[r7,#28]
  89              	.L3:
 221:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     {
  90              	 .loc 1 221 0
  91 0052 FB69     	 ldr r3,[r7,#28]
  92 0054 002B     	 cmp r3,#0
  93 0056 E5D1     	 bne .L4
  94 0058 15E0     	 b .L1
  95              	.L2:
 230:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     }
 231:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   }
 232:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   else
 233:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   {
 234:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0U)
  96              	 .loc 1 234 0
  97 005a 11E0     	 b .L6
  98              	.L7:
 235:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     {
 236:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 237:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 238:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* Shift input and store result in destination buffer. */
 239:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
  99              	 .loc 1 239 0
 100 005c 7B68     	 ldr r3,[r7,#4]
 101 005e 9A1C     	 adds r2,r3,#2
 102 0060 7A60     	 str r2,[r7,#4]
 103 0062 FA68     	 ldr r2,[r7,#12]
 104 0064 911C     	 adds r1,r2,#2
 105 0066 F960     	 str r1,[r7,#12]
 106 0068 1288     	 ldrh r2,[r2]
 107 006a 11B2     	 sxth r1,r2
 108 006c 97F90B20 	 ldrsb r2,[r7,#11]
 109 0070 5242     	 negs r2,r2
 110 0072 41FA02F2 	 asr r2,r1,r2
 111 0076 92B2     	 uxth r2,r2
 112 0078 1A80     	 strh r2,[r3]
 240:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 241:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement loop counter */
 242:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 113              	 .loc 1 242 0
 114 007a FB69     	 ldr r3,[r7,#28]
 115 007c 013B     	 subs r3,r3,#1
 116 007e FB61     	 str r3,[r7,#28]
 117              	.L6:
 234:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     {
 118              	 .loc 1 234 0
 119 0080 FB69     	 ldr r3,[r7,#28]
 120 0082 002B     	 cmp r3,#0
 121 0084 EAD1     	 bne .L7
 122              	.L1:
 243:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****     }
 244:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c ****   }
 245:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** 
 246:../Dave/Generated/CMSIS_DSP/Source/BasicMathFunctions/arm_shift_q15.c **** }
 123              	 .loc 1 246 0
 124 0086 2437     	 adds r7,r7,#36
 125              	.LCFI3:
 126              	 .cfi_def_cfa_offset 4
 127 0088 BD46     	 mov sp,r7
 128              	.LCFI4:
 129              	 .cfi_def_cfa_register 13
 130              	 
 131 008a 5DF8047B 	 ldr r7,[sp],#4
 132              	.LCFI5:
 133              	 .cfi_restore 7
 134              	 .cfi_def_cfa_offset 0
 135 008e 7047     	 bx lr
 136              	 .cfi_endproc
 137              	.LFE149:
 139              	 .text
 140              	.Letext0:
 141              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 142              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 143              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 144              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_shift_q15.c
    {standard input}:20     .text.arm_shift_q15:00000000 $t
    {standard input}:25     .text.arm_shift_q15:00000000 arm_shift_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
