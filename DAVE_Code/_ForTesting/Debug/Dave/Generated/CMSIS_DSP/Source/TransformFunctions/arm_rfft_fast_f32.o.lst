   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_rfft_fast_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.stage_rfft_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global stage_rfft_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	stage_rfft_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * Title:        arm_rfft_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * Description:  RFFT & RIFFT Floating point process function
   5:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  32:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** void stage_rfft_f32(
  33:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   const arm_rfft_fast_instance_f32 * S,
  34:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t * p,
  35:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t * pOut)
  36:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** {
  37:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         uint32_t  k;                                /* Loop Counter */
  38:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  39:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
  40:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t *pA = p;                          /* increasing pointer */
  41:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t *pB = p;                          /* decreasing pointer */
  42:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
  43:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t t1a, t1b;                         /* temporary variables */
  44:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t p0, p1, p2, p3;                   /* temporary variables */
  45:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  46:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32x4x2_t tw,xA,xB;
  47:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32x4x2_t tmp1, tmp2, res;
  48:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  49:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         uint32x4_t     vecStridesFwd, vecStridesBkwd;
  50:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  51:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         vecStridesFwd = vidupq_u32((uint32_t)0, 2);
  52:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         vecStridesBkwd = -vecStridesFwd;
  53:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  54:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         int blockCnt;
  55:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  56:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  57:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    k = (S->Sint).fftLen - 1;
  58:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  59:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    /* Pack first and last sample of the frequency domain together */
  60:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  61:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xBR = pB[0];
  62:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xBI = pB[1];
  63:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xAR = pA[0];
  64:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xAI = pA[1];
  65:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  66:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    twR = *pCoeff++ ;
  67:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    twI = *pCoeff++ ;
  68:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  69:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // U1 = XA(1) + XB(1); % It is real
  70:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    t1a = xBR + xAR  ;
  71:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  72:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // U2 = XB(1) - XA(1); % It is imaginary
  73:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    t1b = xBI + xAI  ;
  74:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  75:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
  76:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
  77:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( t1a + t1b );
  78:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( t1a - t1b );
  79:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  80:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
  81:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pB  = p + 2*k;
  82:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pA += 2;
  83:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
  84:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    blockCnt = k >> 2;
  85:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    while (blockCnt > 0)
  86:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    {
  87:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /*
  88:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          function X = my_split_rfft(X, ifftFlag)
  89:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          % X is a series of real numbers
  90:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          L  = length(X);
  91:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XC = X(1:2:end) +i*X(2:2:end);
  92:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XA = fft(XC);
  93:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XB = conj(XA([1 end:-1:2]));
  94:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          TW = i*exp(-2*pi*i*[0:L/2-1]/L).';
  95:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          for l = 2:L/2
  96:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****             XA(l) = 1/2 * (XA(l) + XB(l) + TW(l) * (XB(l) - XA(l)));
  97:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          end
  98:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(
  99:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          X = XA;
 100:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       */
 101:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 102:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 103:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xA = vld2q_f32(pA);
 104:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pA += 8;
 105:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 106:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xB = vld2q_f32(pB);
 107:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 108:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xB.val[0] = vldrwq_gather_shifted_offset_f32(pB, vecStridesBkwd);
 109:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xB.val[1] = vldrwq_gather_shifted_offset_f32(&pB[1], vecStridesBkwd);
 110:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 111:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xB.val[1] = vnegq_f32(xB.val[1]);
 112:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pB -= 8;
 113:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 114:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 115:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tw = vld2q_f32(pCoeff);
 116:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pCoeff += 8;
 117:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 118:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tmp1.val[0] = vaddq_f32(xA.val[0],xB.val[0]);
 120:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tmp1.val[1] = vaddq_f32(xA.val[1],xB.val[1]);
 121:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tmp2.val[0] = vsubq_f32(xB.val[0],xA.val[0]);
 123:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tmp2.val[1] = vsubq_f32(xB.val[1],xA.val[1]);
 124:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[0] = vmulq(tw.val[0], tmp2.val[0]);
 126:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[0] = vfmsq(res.val[0],tw.val[1], tmp2.val[1]);
 127:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[1] = vmulq(tw.val[0], tmp2.val[1]);
 129:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[1] = vfmaq(res.val[1], tw.val[1], tmp2.val[0]);
 130:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 131:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[0] = vaddq_f32(res.val[0],tmp1.val[0] );
 132:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[1] = vaddq_f32(res.val[1],tmp1.val[1] );
 133:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 134:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[0] = vmulq_n_f32(res.val[0], 0.5f);
 135:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[1] = vmulq_n_f32(res.val[1], 0.5f);
 136:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 137:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 138:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       vst2q_f32(pOut, res);
 139:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pOut += 8;
 140:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 141:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****     
 142:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       blockCnt--;
 143:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    } 
 144:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 145:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    blockCnt = k & 3;
 146:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    while (blockCnt > 0)
 147:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    {
 148:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /*
 149:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          function X = my_split_rfft(X, ifftFlag)
 150:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          % X is a series of real numbers
 151:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          L  = length(X);
 152:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XC = X(1:2:end) +i*X(2:2:end);
 153:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XA = fft(XC);
 154:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XB = conj(XA([1 end:-1:2]));
 155:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          TW = i*exp(-2*pi*i*[0:L/2-1]/L).';
 156:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          for l = 2:L/2
 157:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****             XA(l) = 1/2 * (XA(l) + XB(l) + TW(l) * (XB(l) - XA(l)));
 158:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          end
 159:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(
 160:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          X = XA;
 161:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       */
 162:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 163:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xBI = pB[1];
 164:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xBR = pB[0];
 165:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xAR = pA[0];
 166:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xAI = pA[1];
 167:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 168:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       twR = *pCoeff++;
 169:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       twI = *pCoeff++;
 170:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 171:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t1a = xBR - xAR ;
 172:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t1b = xBI + xAI ;
 173:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 174:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
 175:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
 176:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       p0 = twR * t1a;
 177:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       p1 = twI * t1a;
 178:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       p2 = twR * t1b;
 179:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       p3 = twI * t1b;
 180:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 181:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 182:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 183:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 184:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pA += 2;
 185:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pB -= 2;
 186:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       blockCnt--;
 187:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    }
 188:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** }
 189:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 190:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** /* Prepares data for inverse cfft */
 191:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** void merge_rfft_f32(
 192:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   const arm_rfft_fast_instance_f32 * S,
 193:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t * p,
 194:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t * pOut)
 195:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** {
 196:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         uint32_t  k;                                /* Loop Counter */
 197:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t twR, twI;                         /* RFFT Twiddle coefficients */
 198:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 199:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t *pA = p;                          /* increasing pointer */
 200:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t *pB = p;                          /* decreasing pointer */
 201:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
 202:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t t1a, t1b, r, s, t, u;             /* temporary variables */
 203:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 204:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32x4x2_t tw,xA,xB;
 205:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32x4x2_t tmp1, tmp2, res;
 206:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         uint32x4_t     vecStridesFwd, vecStridesBkwd;
 207:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 208:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         vecStridesFwd = vidupq_u32((uint32_t)0, 2);
 209:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         vecStridesBkwd = -vecStridesFwd;
 210:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 211:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         int blockCnt;
 212:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         
 213:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 214:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    k = (S->Sint).fftLen - 1;
 215:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 216:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xAR = pA[0];
 217:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xAI = pA[1];
 218:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 219:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pCoeff += 2 ;
 220:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 221:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( xAR + xAI );
 222:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( xAR - xAI );
 223:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 224:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pB  =  p + 2*k ;
 225:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pA +=  2    ;
 226:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 227:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    blockCnt = k >> 2;
 228:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    while (blockCnt > 0)
 229:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    {
 230:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /* G is half of the frequency complex spectrum */
 231:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       //for k = 2:N
 232:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
 233:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xA = vld2q_f32(pA);
 234:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pA += 8;
 235:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 236:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xB = vld2q_f32(pB);
 237:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 238:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xB.val[0] = vldrwq_gather_shifted_offset_f32(pB, vecStridesBkwd);
 239:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xB.val[1] = vldrwq_gather_shifted_offset_f32(&pB[1], vecStridesBkwd);
 240:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 241:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xB.val[1] = vnegq_f32(xB.val[1]);
 242:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pB -= 8;
 243:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 244:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 245:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tw = vld2q_f32(pCoeff);
 246:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tw.val[1] = vnegq_f32(tw.val[1]);
 247:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pCoeff += 8;
 248:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 249:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 250:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tmp1.val[0] = vaddq_f32(xA.val[0],xB.val[0]);
 251:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tmp1.val[1] = vaddq_f32(xA.val[1],xB.val[1]);
 252:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 253:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tmp2.val[0] = vsubq_f32(xB.val[0],xA.val[0]);
 254:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       tmp2.val[1] = vsubq_f32(xB.val[1],xA.val[1]);
 255:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 256:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[0] = vmulq(tw.val[0], tmp2.val[0]);
 257:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[0] = vfmsq(res.val[0],tw.val[1], tmp2.val[1]);
 258:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 259:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[1] = vmulq(tw.val[0], tmp2.val[1]);
 260:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[1] = vfmaq(res.val[1], tw.val[1], tmp2.val[0]);
 261:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 262:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[0] = vaddq_f32(res.val[0],tmp1.val[0] );
 263:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[1] = vaddq_f32(res.val[1],tmp1.val[1] );
 264:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 265:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[0] = vmulq_n_f32(res.val[0], 0.5f);
 266:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       res.val[1] = vmulq_n_f32(res.val[1], 0.5f);
 267:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 268:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 269:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       vst2q_f32(pOut, res);
 270:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pOut += 8;
 271:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 272:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****     
 273:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       blockCnt--;
 274:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    }
 275:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 276:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    blockCnt = k & 3;
 277:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    while (blockCnt > 0)
 278:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    {
 279:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /* G is half of the frequency complex spectrum */
 280:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       //for k = 2:N
 281:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
 282:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xBI =   pB[1]    ;
 283:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xBR =   pB[0]    ;
 284:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xAR =  pA[0];
 285:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xAI =  pA[1];
 286:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 287:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       twR = *pCoeff++;
 288:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       twI = *pCoeff++;
 289:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 290:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t1a = xAR - xBR ;
 291:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t1b = xAI + xBI ;
 292:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 293:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       r = twR * t1a;
 294:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       s = twI * t1b;
 295:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t = twI * t1a;
 296:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       u = twR * t1b;
 297:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 298:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
 299:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
 300:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 301:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 302:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 303:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pA += 2;
 304:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pB -= 2;
 305:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       blockCnt--;
 306:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    }
 307:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 308:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** }
 309:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** #else
 310:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** void stage_rfft_f32(
 311:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   const arm_rfft_fast_instance_f32 * S,
 312:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t * p,
 313:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t * pOut)
 314:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** {
  28              	 .loc 1 314 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 95B0     	 sub sp,sp,#84
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 88
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
 315:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         uint32_t  k;                                /* Loop Counter */
 316:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t twR, twI;                         /* RFFT Twiddle coefficients */
 317:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
  46              	 .loc 1 317 0
  47 000c FB68     	 ldr r3,[r7,#12]
  48 000e 5B69     	 ldr r3,[r3,#20]
  49 0010 BB64     	 str r3,[r7,#72]
 318:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t *pA = p;                          /* increasing pointer */
  50              	 .loc 1 318 0
  51 0012 BB68     	 ldr r3,[r7,#8]
  52 0014 7B64     	 str r3,[r7,#68]
 319:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t *pB = p;                          /* decreasing pointer */
  53              	 .loc 1 319 0
  54 0016 BB68     	 ldr r3,[r7,#8]
  55 0018 3B64     	 str r3,[r7,#64]
 320:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
 321:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t t1a, t1b;                         /* temporary variables */
 322:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t p0, p1, p2, p3;                   /* temporary variables */
 323:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 324:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 325:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    k = (S->Sint).fftLen - 1;
  56              	 .loc 1 325 0
  57 001a FB68     	 ldr r3,[r7,#12]
  58 001c 1B88     	 ldrh r3,[r3]
  59 001e 013B     	 subs r3,r3,#1
  60 0020 FB64     	 str r3,[r7,#76]
 326:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 327:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    /* Pack first and last sample of the frequency domain together */
 328:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 329:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xBR = pB[0];
  61              	 .loc 1 329 0
  62 0022 3B6C     	 ldr r3,[r7,#64]
  63 0024 1B68     	 ldr r3,[r3]
  64 0026 FB63     	 str r3,[r7,#60]
 330:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xBI = pB[1];
  65              	 .loc 1 330 0
  66 0028 3B6C     	 ldr r3,[r7,#64]
  67 002a 5B68     	 ldr r3,[r3,#4]
  68 002c BB63     	 str r3,[r7,#56]
 331:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xAR = pA[0];
  69              	 .loc 1 331 0
  70 002e 7B6C     	 ldr r3,[r7,#68]
  71 0030 1B68     	 ldr r3,[r3]
  72 0032 7B63     	 str r3,[r7,#52]
 332:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xAI = pA[1];
  73              	 .loc 1 332 0
  74 0034 7B6C     	 ldr r3,[r7,#68]
  75 0036 5B68     	 ldr r3,[r3,#4]
  76 0038 3B63     	 str r3,[r7,#48]
 333:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 334:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    twR = *pCoeff++ ;
  77              	 .loc 1 334 0
  78 003a BB6C     	 ldr r3,[r7,#72]
  79 003c 1A1D     	 adds r2,r3,#4
  80 003e BA64     	 str r2,[r7,#72]
  81 0040 1B68     	 ldr r3,[r3]
  82 0042 FB62     	 str r3,[r7,#44]
 335:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    twI = *pCoeff++ ;
  83              	 .loc 1 335 0
  84 0044 BB6C     	 ldr r3,[r7,#72]
  85 0046 1A1D     	 adds r2,r3,#4
  86 0048 BA64     	 str r2,[r7,#72]
  87 004a 1B68     	 ldr r3,[r3]
  88 004c BB62     	 str r3,[r7,#40]
 336:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 337:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 338:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // U1 = XA(1) + XB(1); % It is real
 339:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    t1a = xBR + xAR  ;
  89              	 .loc 1 339 0
  90 004e 97ED0F7A 	 flds s14,[r7,#60]
  91 0052 D7ED0D7A 	 flds s15,[r7,#52]
  92 0056 77EE277A 	 fadds s15,s14,s15
  93 005a C7ED097A 	 fsts s15,[r7,#36]
 340:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 341:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // U2 = XB(1) - XA(1); % It is imaginary
 342:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    t1b = xBI + xAI  ;
  94              	 .loc 1 342 0
  95 005e 97ED0E7A 	 flds s14,[r7,#56]
  96 0062 D7ED0C7A 	 flds s15,[r7,#48]
  97 0066 77EE277A 	 fadds s15,s14,s15
  98 006a C7ED087A 	 fsts s15,[r7,#32]
 343:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 344:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
 345:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
 346:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( t1a + t1b );
  99              	 .loc 1 346 0
 100 006e 7B68     	 ldr r3,[r7,#4]
 101 0070 1A1D     	 adds r2,r3,#4
 102 0072 7A60     	 str r2,[r7,#4]
 103 0074 97ED097A 	 flds s14,[r7,#36]
 104 0078 D7ED087A 	 flds s15,[r7,#32]
 105 007c 77EE277A 	 fadds s15,s14,s15
 106 0080 B6EE007A 	 fconsts s14,#96
 107 0084 67EE877A 	 fmuls s15,s15,s14
 108 0088 C3ED007A 	 fsts s15,[r3]
 347:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( t1a - t1b );
 109              	 .loc 1 347 0
 110 008c 7B68     	 ldr r3,[r7,#4]
 111 008e 1A1D     	 adds r2,r3,#4
 112 0090 7A60     	 str r2,[r7,#4]
 113 0092 97ED097A 	 flds s14,[r7,#36]
 114 0096 D7ED087A 	 flds s15,[r7,#32]
 115 009a 77EE677A 	 fsubs s15,s14,s15
 116 009e B6EE007A 	 fconsts s14,#96
 117 00a2 67EE877A 	 fmuls s15,s15,s14
 118 00a6 C3ED007A 	 fsts s15,[r3]
 348:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 349:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
 350:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pB  = p + 2*k;
 119              	 .loc 1 350 0
 120 00aa FB6C     	 ldr r3,[r7,#76]
 121 00ac DB00     	 lsls r3,r3,#3
 122 00ae BA68     	 ldr r2,[r7,#8]
 123 00b0 1344     	 add r3,r3,r2
 124 00b2 3B64     	 str r3,[r7,#64]
 351:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pA += 2;
 125              	 .loc 1 351 0
 126 00b4 7B6C     	 ldr r3,[r7,#68]
 127 00b6 0833     	 adds r3,r3,#8
 128 00b8 7B64     	 str r3,[r7,#68]
 129              	.L2:
 352:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 353:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    do
 354:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    {
 355:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /*
 356:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          function X = my_split_rfft(X, ifftFlag)
 357:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          % X is a series of real numbers
 358:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          L  = length(X);
 359:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XC = X(1:2:end) +i*X(2:2:end);
 360:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XA = fft(XC);
 361:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XB = conj(XA([1 end:-1:2]));
 362:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          TW = i*exp(-2*pi*i*[0:L/2-1]/L).';
 363:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          for l = 2:L/2
 364:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****             XA(l) = 1/2 * (XA(l) + XB(l) + TW(l) * (XB(l) - XA(l)));
 365:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          end
 366:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(
 367:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****          X = XA;
 368:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       */
 369:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 370:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xBI = pB[1];
 130              	 .loc 1 370 0 discriminator 1
 131 00ba 3B6C     	 ldr r3,[r7,#64]
 132 00bc 5B68     	 ldr r3,[r3,#4]
 133 00be BB63     	 str r3,[r7,#56]
 371:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xBR = pB[0];
 134              	 .loc 1 371 0 discriminator 1
 135 00c0 3B6C     	 ldr r3,[r7,#64]
 136 00c2 1B68     	 ldr r3,[r3]
 137 00c4 FB63     	 str r3,[r7,#60]
 372:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xAR = pA[0];
 138              	 .loc 1 372 0 discriminator 1
 139 00c6 7B6C     	 ldr r3,[r7,#68]
 140 00c8 1B68     	 ldr r3,[r3]
 141 00ca 7B63     	 str r3,[r7,#52]
 373:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xAI = pA[1];
 142              	 .loc 1 373 0 discriminator 1
 143 00cc 7B6C     	 ldr r3,[r7,#68]
 144 00ce 5B68     	 ldr r3,[r3,#4]
 145 00d0 3B63     	 str r3,[r7,#48]
 374:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 375:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       twR = *pCoeff++;
 146              	 .loc 1 375 0 discriminator 1
 147 00d2 BB6C     	 ldr r3,[r7,#72]
 148 00d4 1A1D     	 adds r2,r3,#4
 149 00d6 BA64     	 str r2,[r7,#72]
 150 00d8 1B68     	 ldr r3,[r3]
 151 00da FB62     	 str r3,[r7,#44]
 376:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       twI = *pCoeff++;
 152              	 .loc 1 376 0 discriminator 1
 153 00dc BB6C     	 ldr r3,[r7,#72]
 154 00de 1A1D     	 adds r2,r3,#4
 155 00e0 BA64     	 str r2,[r7,#72]
 156 00e2 1B68     	 ldr r3,[r3]
 157 00e4 BB62     	 str r3,[r7,#40]
 377:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 378:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t1a = xBR - xAR ;
 158              	 .loc 1 378 0 discriminator 1
 159 00e6 97ED0F7A 	 flds s14,[r7,#60]
 160 00ea D7ED0D7A 	 flds s15,[r7,#52]
 161 00ee 77EE677A 	 fsubs s15,s14,s15
 162 00f2 C7ED097A 	 fsts s15,[r7,#36]
 379:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t1b = xBI + xAI ;
 163              	 .loc 1 379 0 discriminator 1
 164 00f6 97ED0E7A 	 flds s14,[r7,#56]
 165 00fa D7ED0C7A 	 flds s15,[r7,#48]
 166 00fe 77EE277A 	 fadds s15,s14,s15
 167 0102 C7ED087A 	 fsts s15,[r7,#32]
 380:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 381:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
 382:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
 383:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       p0 = twR * t1a;
 168              	 .loc 1 383 0 discriminator 1
 169 0106 97ED0B7A 	 flds s14,[r7,#44]
 170 010a D7ED097A 	 flds s15,[r7,#36]
 171 010e 67EE277A 	 fmuls s15,s14,s15
 172 0112 C7ED077A 	 fsts s15,[r7,#28]
 384:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       p1 = twI * t1a;
 173              	 .loc 1 384 0 discriminator 1
 174 0116 97ED0A7A 	 flds s14,[r7,#40]
 175 011a D7ED097A 	 flds s15,[r7,#36]
 176 011e 67EE277A 	 fmuls s15,s14,s15
 177 0122 C7ED067A 	 fsts s15,[r7,#24]
 385:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       p2 = twR * t1b;
 178              	 .loc 1 385 0 discriminator 1
 179 0126 97ED0B7A 	 flds s14,[r7,#44]
 180 012a D7ED087A 	 flds s15,[r7,#32]
 181 012e 67EE277A 	 fmuls s15,s14,s15
 182 0132 C7ED057A 	 fsts s15,[r7,#20]
 386:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       p3 = twI * t1b;
 183              	 .loc 1 386 0 discriminator 1
 184 0136 97ED0A7A 	 flds s14,[r7,#40]
 185 013a D7ED087A 	 flds s15,[r7,#32]
 186 013e 67EE277A 	 fmuls s15,s14,s15
 187 0142 C7ED047A 	 fsts s15,[r7,#16]
 387:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 388:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 188              	 .loc 1 388 0 discriminator 1
 189 0146 7B68     	 ldr r3,[r7,#4]
 190 0148 1A1D     	 adds r2,r3,#4
 191 014a 7A60     	 str r2,[r7,#4]
 192 014c 97ED0D7A 	 flds s14,[r7,#52]
 193 0150 D7ED0F7A 	 flds s15,[r7,#60]
 194 0154 37EE277A 	 fadds s14,s14,s15
 195 0158 D7ED077A 	 flds s15,[r7,#28]
 196 015c 37EE277A 	 fadds s14,s14,s15
 197 0160 D7ED047A 	 flds s15,[r7,#16]
 198 0164 77EE277A 	 fadds s15,s14,s15
 199 0168 B6EE007A 	 fconsts s14,#96
 200 016c 67EE877A 	 fmuls s15,s15,s14
 201 0170 C3ED007A 	 fsts s15,[r3]
 389:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 202              	 .loc 1 389 0 discriminator 1
 203 0174 7B68     	 ldr r3,[r7,#4]
 204 0176 1A1D     	 adds r2,r3,#4
 205 0178 7A60     	 str r2,[r7,#4]
 206 017a 97ED0C7A 	 flds s14,[r7,#48]
 207 017e D7ED0E7A 	 flds s15,[r7,#56]
 208 0182 37EE677A 	 fsubs s14,s14,s15
 209 0186 D7ED067A 	 flds s15,[r7,#24]
 210 018a 37EE277A 	 fadds s14,s14,s15
 211 018e D7ED057A 	 flds s15,[r7,#20]
 212 0192 77EE677A 	 fsubs s15,s14,s15
 213 0196 B6EE007A 	 fconsts s14,#96
 214 019a 67EE877A 	 fmuls s15,s15,s14
 215 019e C3ED007A 	 fsts s15,[r3]
 390:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 391:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 392:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pA += 2;
 216              	 .loc 1 392 0 discriminator 1
 217 01a2 7B6C     	 ldr r3,[r7,#68]
 218 01a4 0833     	 adds r3,r3,#8
 219 01a6 7B64     	 str r3,[r7,#68]
 393:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pB -= 2;
 220              	 .loc 1 393 0 discriminator 1
 221 01a8 3B6C     	 ldr r3,[r7,#64]
 222 01aa 083B     	 subs r3,r3,#8
 223 01ac 3B64     	 str r3,[r7,#64]
 394:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       k--;
 224              	 .loc 1 394 0 discriminator 1
 225 01ae FB6C     	 ldr r3,[r7,#76]
 226 01b0 013B     	 subs r3,r3,#1
 227 01b2 FB64     	 str r3,[r7,#76]
 395:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    } while (k > 0U);
 228              	 .loc 1 395 0 discriminator 1
 229 01b4 FB6C     	 ldr r3,[r7,#76]
 230 01b6 002B     	 cmp r3,#0
 231 01b8 7FF47FAF 	 bne .L2
 396:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** }
 232              	 .loc 1 396 0
 233 01bc 5437     	 adds r7,r7,#84
 234              	.LCFI3:
 235              	 .cfi_def_cfa_offset 4
 236 01be BD46     	 mov sp,r7
 237              	.LCFI4:
 238              	 .cfi_def_cfa_register 13
 239              	 
 240 01c0 5DF8047B 	 ldr r7,[sp],#4
 241              	.LCFI5:
 242              	 .cfi_restore 7
 243              	 .cfi_def_cfa_offset 0
 244 01c4 7047     	 bx lr
 245              	 .cfi_endproc
 246              	.LFE149:
 248 01c6 00BF     	 .section .text.merge_rfft_f32,"ax",%progbits
 249              	 .align 2
 250              	 .global merge_rfft_f32
 251              	 .thumb
 252              	 .thumb_func
 254              	merge_rfft_f32:
 255              	.LFB150:
 397:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 398:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** /* Prepares data for inverse cfft */
 399:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** void merge_rfft_f32(
 400:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   const arm_rfft_fast_instance_f32 * S,
 401:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t * p,
 402:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t * pOut)
 403:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** {
 256              	 .loc 1 403 0
 257              	 .cfi_startproc
 258              	 
 259              	 
 260              	 
 261 0000 80B4     	 push {r7}
 262              	.LCFI6:
 263              	 .cfi_def_cfa_offset 4
 264              	 .cfi_offset 7,-4
 265 0002 95B0     	 sub sp,sp,#84
 266              	.LCFI7:
 267              	 .cfi_def_cfa_offset 88
 268 0004 00AF     	 add r7,sp,#0
 269              	.LCFI8:
 270              	 .cfi_def_cfa_register 7
 271 0006 F860     	 str r0,[r7,#12]
 272 0008 B960     	 str r1,[r7,#8]
 273 000a 7A60     	 str r2,[r7,#4]
 404:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         uint32_t  k;                                /* Loop Counter */
 405:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t twR, twI;                         /* RFFT Twiddle coefficients */
 406:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 274              	 .loc 1 406 0
 275 000c FB68     	 ldr r3,[r7,#12]
 276 000e 5B69     	 ldr r3,[r3,#20]
 277 0010 BB64     	 str r3,[r7,#72]
 407:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t *pA = p;                          /* increasing pointer */
 278              	 .loc 1 407 0
 279 0012 BB68     	 ldr r3,[r7,#8]
 280 0014 7B64     	 str r3,[r7,#68]
 408:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t *pB = p;                          /* decreasing pointer */
 281              	 .loc 1 408 0
 282 0016 BB68     	 ldr r3,[r7,#8]
 283 0018 3B64     	 str r3,[r7,#64]
 409:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
 410:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****         float32_t t1a, t1b, r, s, t, u;             /* temporary variables */
 411:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 412:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    k = (S->Sint).fftLen - 1;
 284              	 .loc 1 412 0
 285 001a FB68     	 ldr r3,[r7,#12]
 286 001c 1B88     	 ldrh r3,[r3]
 287 001e 013B     	 subs r3,r3,#1
 288 0020 FB64     	 str r3,[r7,#76]
 413:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 414:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xAR = pA[0];
 289              	 .loc 1 414 0
 290 0022 7B6C     	 ldr r3,[r7,#68]
 291 0024 1B68     	 ldr r3,[r3]
 292 0026 FB63     	 str r3,[r7,#60]
 415:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    xAI = pA[1];
 293              	 .loc 1 415 0
 294 0028 7B6C     	 ldr r3,[r7,#68]
 295 002a 5B68     	 ldr r3,[r3,#4]
 296 002c BB63     	 str r3,[r7,#56]
 416:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 417:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pCoeff += 2 ;
 297              	 .loc 1 417 0
 298 002e BB6C     	 ldr r3,[r7,#72]
 299 0030 0833     	 adds r3,r3,#8
 300 0032 BB64     	 str r3,[r7,#72]
 418:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 419:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( xAR + xAI );
 301              	 .loc 1 419 0
 302 0034 7B68     	 ldr r3,[r7,#4]
 303 0036 1A1D     	 adds r2,r3,#4
 304 0038 7A60     	 str r2,[r7,#4]
 305 003a 97ED0F7A 	 flds s14,[r7,#60]
 306 003e D7ED0E7A 	 flds s15,[r7,#56]
 307 0042 77EE277A 	 fadds s15,s14,s15
 308 0046 B6EE007A 	 fconsts s14,#96
 309 004a 67EE877A 	 fmuls s15,s15,s14
 310 004e C3ED007A 	 fsts s15,[r3]
 420:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( xAR - xAI );
 311              	 .loc 1 420 0
 312 0052 7B68     	 ldr r3,[r7,#4]
 313 0054 1A1D     	 adds r2,r3,#4
 314 0056 7A60     	 str r2,[r7,#4]
 315 0058 97ED0F7A 	 flds s14,[r7,#60]
 316 005c D7ED0E7A 	 flds s15,[r7,#56]
 317 0060 77EE677A 	 fsubs s15,s14,s15
 318 0064 B6EE007A 	 fconsts s14,#96
 319 0068 67EE877A 	 fmuls s15,s15,s14
 320 006c C3ED007A 	 fsts s15,[r3]
 421:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 422:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pB  =  p + 2*k ;
 321              	 .loc 1 422 0
 322 0070 FB6C     	 ldr r3,[r7,#76]
 323 0072 DB00     	 lsls r3,r3,#3
 324 0074 BA68     	 ldr r2,[r7,#8]
 325 0076 1344     	 add r3,r3,r2
 326 0078 3B64     	 str r3,[r7,#64]
 423:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    pA +=  2	   ;
 327              	 .loc 1 423 0
 328 007a 7B6C     	 ldr r3,[r7,#68]
 329 007c 0833     	 adds r3,r3,#8
 330 007e 7B64     	 str r3,[r7,#68]
 424:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 425:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    while (k > 0U)
 331              	 .loc 1 425 0
 332 0080 7CE0     	 b .L4
 333              	.L5:
 426:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    {
 427:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /* G is half of the frequency complex spectrum */
 428:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       //for k = 2:N
 429:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
 430:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xBI =   pB[1]    ;
 334              	 .loc 1 430 0
 335 0082 3B6C     	 ldr r3,[r7,#64]
 336 0084 5B68     	 ldr r3,[r3,#4]
 337 0086 7B63     	 str r3,[r7,#52]
 431:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xBR =   pB[0]    ;
 338              	 .loc 1 431 0
 339 0088 3B6C     	 ldr r3,[r7,#64]
 340 008a 1B68     	 ldr r3,[r3]
 341 008c 3B63     	 str r3,[r7,#48]
 432:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xAR =  pA[0];
 342              	 .loc 1 432 0
 343 008e 7B6C     	 ldr r3,[r7,#68]
 344 0090 1B68     	 ldr r3,[r3]
 345 0092 FB63     	 str r3,[r7,#60]
 433:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       xAI =  pA[1];
 346              	 .loc 1 433 0
 347 0094 7B6C     	 ldr r3,[r7,#68]
 348 0096 5B68     	 ldr r3,[r3,#4]
 349 0098 BB63     	 str r3,[r7,#56]
 434:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 435:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       twR = *pCoeff++;
 350              	 .loc 1 435 0
 351 009a BB6C     	 ldr r3,[r7,#72]
 352 009c 1A1D     	 adds r2,r3,#4
 353 009e BA64     	 str r2,[r7,#72]
 354 00a0 1B68     	 ldr r3,[r3]
 355 00a2 FB62     	 str r3,[r7,#44]
 436:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       twI = *pCoeff++;
 356              	 .loc 1 436 0
 357 00a4 BB6C     	 ldr r3,[r7,#72]
 358 00a6 1A1D     	 adds r2,r3,#4
 359 00a8 BA64     	 str r2,[r7,#72]
 360 00aa 1B68     	 ldr r3,[r3]
 361 00ac BB62     	 str r3,[r7,#40]
 437:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 438:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t1a = xAR - xBR ;
 362              	 .loc 1 438 0
 363 00ae 97ED0F7A 	 flds s14,[r7,#60]
 364 00b2 D7ED0C7A 	 flds s15,[r7,#48]
 365 00b6 77EE677A 	 fsubs s15,s14,s15
 366 00ba C7ED097A 	 fsts s15,[r7,#36]
 439:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t1b = xAI + xBI ;
 367              	 .loc 1 439 0
 368 00be 97ED0E7A 	 flds s14,[r7,#56]
 369 00c2 D7ED0D7A 	 flds s15,[r7,#52]
 370 00c6 77EE277A 	 fadds s15,s14,s15
 371 00ca C7ED087A 	 fsts s15,[r7,#32]
 440:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 441:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       r = twR * t1a;
 372              	 .loc 1 441 0
 373 00ce 97ED0B7A 	 flds s14,[r7,#44]
 374 00d2 D7ED097A 	 flds s15,[r7,#36]
 375 00d6 67EE277A 	 fmuls s15,s14,s15
 376 00da C7ED077A 	 fsts s15,[r7,#28]
 442:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       s = twI * t1b;
 377              	 .loc 1 442 0
 378 00de 97ED0A7A 	 flds s14,[r7,#40]
 379 00e2 D7ED087A 	 flds s15,[r7,#32]
 380 00e6 67EE277A 	 fmuls s15,s14,s15
 381 00ea C7ED067A 	 fsts s15,[r7,#24]
 443:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       t = twI * t1a;
 382              	 .loc 1 443 0
 383 00ee 97ED0A7A 	 flds s14,[r7,#40]
 384 00f2 D7ED097A 	 flds s15,[r7,#36]
 385 00f6 67EE277A 	 fmuls s15,s14,s15
 386 00fa C7ED057A 	 fsts s15,[r7,#20]
 444:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       u = twR * t1b;
 387              	 .loc 1 444 0
 388 00fe 97ED0B7A 	 flds s14,[r7,#44]
 389 0102 D7ED087A 	 flds s15,[r7,#32]
 390 0106 67EE277A 	 fmuls s15,s14,s15
 391 010a C7ED047A 	 fsts s15,[r7,#16]
 445:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 446:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
 447:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
 448:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 392              	 .loc 1 448 0
 393 010e 7B68     	 ldr r3,[r7,#4]
 394 0110 1A1D     	 adds r2,r3,#4
 395 0112 7A60     	 str r2,[r7,#4]
 396 0114 97ED0F7A 	 flds s14,[r7,#60]
 397 0118 D7ED0C7A 	 flds s15,[r7,#48]
 398 011c 37EE277A 	 fadds s14,s14,s15
 399 0120 D7ED077A 	 flds s15,[r7,#28]
 400 0124 37EE677A 	 fsubs s14,s14,s15
 401 0128 D7ED067A 	 flds s15,[r7,#24]
 402 012c 77EE677A 	 fsubs s15,s14,s15
 403 0130 B6EE007A 	 fconsts s14,#96
 404 0134 67EE877A 	 fmuls s15,s15,s14
 405 0138 C3ED007A 	 fsts s15,[r3]
 449:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 406              	 .loc 1 449 0
 407 013c 7B68     	 ldr r3,[r7,#4]
 408 013e 1A1D     	 adds r2,r3,#4
 409 0140 7A60     	 str r2,[r7,#4]
 410 0142 97ED0E7A 	 flds s14,[r7,#56]
 411 0146 D7ED0D7A 	 flds s15,[r7,#52]
 412 014a 37EE677A 	 fsubs s14,s14,s15
 413 014e D7ED057A 	 flds s15,[r7,#20]
 414 0152 37EE277A 	 fadds s14,s14,s15
 415 0156 D7ED047A 	 flds s15,[r7,#16]
 416 015a 77EE677A 	 fsubs s15,s14,s15
 417 015e B6EE007A 	 fconsts s14,#96
 418 0162 67EE877A 	 fmuls s15,s15,s14
 419 0166 C3ED007A 	 fsts s15,[r3]
 450:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 451:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pA += 2;
 420              	 .loc 1 451 0
 421 016a 7B6C     	 ldr r3,[r7,#68]
 422 016c 0833     	 adds r3,r3,#8
 423 016e 7B64     	 str r3,[r7,#68]
 452:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       pB -= 2;
 424              	 .loc 1 452 0
 425 0170 3B6C     	 ldr r3,[r7,#64]
 426 0172 083B     	 subs r3,r3,#8
 427 0174 3B64     	 str r3,[r7,#64]
 453:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       k--;
 428              	 .loc 1 453 0
 429 0176 FB6C     	 ldr r3,[r7,#76]
 430 0178 013B     	 subs r3,r3,#1
 431 017a FB64     	 str r3,[r7,#76]
 432              	.L4:
 425:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    {
 433              	 .loc 1 425 0
 434 017c FB6C     	 ldr r3,[r7,#76]
 435 017e 002B     	 cmp r3,#0
 436 0180 7FF47FAF 	 bne .L5
 454:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    }
 455:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 456:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** }
 437              	 .loc 1 456 0
 438 0184 5437     	 adds r7,r7,#84
 439              	.LCFI9:
 440              	 .cfi_def_cfa_offset 4
 441 0186 BD46     	 mov sp,r7
 442              	.LCFI10:
 443              	 .cfi_def_cfa_register 13
 444              	 
 445 0188 5DF8047B 	 ldr r7,[sp],#4
 446              	.LCFI11:
 447              	 .cfi_restore 7
 448              	 .cfi_def_cfa_offset 0
 449 018c 7047     	 bx lr
 450              	 .cfi_endproc
 451              	.LFE150:
 453 018e 00BF     	 .section .text.arm_rfft_fast_f32,"ax",%progbits
 454              	 .align 2
 455              	 .global arm_rfft_fast_f32
 456              	 .thumb
 457              	 .thumb_func
 459              	arm_rfft_fast_f32:
 460              	.LFB151:
 457:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 458:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** #endif /* defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE) */
 459:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 460:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** /**
 461:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @ingroup groupTransforms
 462:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** */
 463:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 464:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** /**
 465:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @defgroup RealFFT Real FFT Functions
 466:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  
 467:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 468:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The CMSIS DSP library includes specialized algorithms for computing the
 469:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    FFT of real data sequences.  The FFT is defined over complex data but
 470:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    in many applications the input is real.  Real FFT algorithms take advantage
 471:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    of the symmetry properties of the FFT and have a speed advantage over complex
 472:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    algorithms of the same length.
 473:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 474:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The Fast RFFT algorith relays on the mixed radix CFFT that save processor usage.
 475:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 476:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The real length N forward FFT of a sequence is computed using the steps shown be
 477:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 478:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    \image html RFFT.gif "Real Fast Fourier Transform"
 479:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 480:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The real sequence is initially treated as if it were complex to perform a CFFT.
 481:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    Later, a processing stage reshapes the data to obtain half of the frequency spec
 482:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    in complex format. Except the first complex number that contains the two real nu
 483:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    X[0] and X[N/2] all the data is complex. In other words, the first complex sampl
 484:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    contains two real values packed.
 485:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 486:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The input for the inverse RFFT should keep the same format as the output of the
 487:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    forward RFFT. A first processing stage pre-process the data to later perform an
 488:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    inverse CFFT.
 489:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 490:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    \image html RIFFT.gif "Real Inverse Fast Fourier Transform"
 491:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 492:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The algorithms for floating-point, Q15, and Q31 data are slightly different
 493:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    and we describe each algorithm in turn.
 494:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par           Floating-point
 495:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The main functions are \ref arm_rfft_fast_f32() and \ref arm_rfft_fast_init_f32(
 496:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The older functions \ref arm_rfft_f32() and \ref arm_rfft_init_f32() have been d
 497:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    but are still documented.
 498:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 499:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The FFT of a real N-point sequence has even symmetry in the frequency domain. 
 500:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The second half of the data equals the conjugate of the first half flipped in fr
 501:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    Looking at the data, we see that we can uniquely represent the FFT using only N/
 502:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    These are packed into the output array in alternating real and imaginary compone
 503:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 504:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    X = { real[0], imag[0], real[1], imag[1], real[2], imag[2] ...
 505:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    real[(N/2)-1], imag[(N/2)-1 }
 506:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 507:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    It happens that the first complex number (real[0], imag[0]) is actually
 508:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    all real. real[0] represents the DC offset, and imag[0] should be 0.
 509:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    (real[1], imag[1]) is the fundamental frequency, (real[2], imag[2]) is
 510:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    the first harmonic and so on.
 511:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 512:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The real FFT functions pack the frequency domain data in this fashion.
 513:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The forward transform outputs the data in this form and the inverse
 514:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    transform expects input data in this form. The function always performs
 515:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    the needed bitreversal so that the input and output data is always in
 516:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    normal order. The functions support lengths of [32, 64, 128, ..., 4096]
 517:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    samples.
 518:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par           Q15 and Q31
 519:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The real algorithms are defined in a similar manner and utilize N/2 complex
 520:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    transforms behind the scenes.
 521:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 522:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The complex transforms used internally include scaling to prevent fixed-point
 523:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    overflows.  The overall scaling equals 1/(fftLen/2).
 524:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    Due to the use of complex transform internally, the source buffer is
 525:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    modified by the rfft.
 526:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 527:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    A separate instance structure must be defined for each transform used but
 528:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    twiddle factor and bit reversal tables can be reused.
 529:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 530:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    There is also an associated initialization function for each data type.
 531:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The initialization function performs the following operations:
 532:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                     - Sets the values of the internal structure fields.
 533:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                     - Initializes twiddle factor table and bit reversal table pointers.
 534:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                     - Initializes the internal complex FFT data structure.
 535:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @par
 536:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    Use of the initialization function is optional **except for MVE versions where i
 537:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    If you don't use the initialization functions, then the structures should be ini
 538:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    similar to the one below:
 539:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   <pre>
 540:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       arm_rfft_instance_q31 S = {fftLenReal, fftLenBy2, ifftFlagR, bitReverseFlagR, twidCoefRModifi
 541:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       arm_rfft_instance_q15 S = {fftLenReal, fftLenBy2, ifftFlagR, bitReverseFlagR, twidCoefRModifi
 542:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   </pre>
 543:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    where <code>fftLenReal</code> is the length of the real transform;
 544:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    <code>fftLenBy2</code> length of  the internal complex transform (fftLenReal/2).
 545:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    <code>ifftFlagR</code> Selects forward (=0) or inverse (=1) transform.
 546:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    <code>bitReverseFlagR</code> Selects bit reversed output (=0) or normal order
 547:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    output (=1).
 548:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    <code>twidCoefRModifier</code> stride modifier for the twiddle factor table.
 549:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    The value is based on the FFT length;
 550:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    <code>pTwiddleAReal</code>points to the A array of twiddle coefficients;
 551:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    <code>pTwiddleBReal</code>points to the B array of twiddle coefficients;
 552:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    <code>pCfft</code> points to the CFFT Instance structure. The CFFT structure
 553:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    must also be initialized.  
 554:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** @par
 555:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    Note that with MVE versions you can't initialize instance structures directly an
 556:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    use the initialization function**.
 557:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****  */
 558:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 559:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** /**
 560:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @addtogroup RealFFT
 561:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @{
 562:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** */
 563:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 564:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** /**
 565:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @brief         Processing function for the floating-point real FFT.
 566:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @param[in]     S         points to an arm_rfft_fast_instance_f32 structure
 567:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @param[in]     p         points to input buffer (Source buffer is modified by this function.)
 568:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @param[in]     pOut      points to output buffer
 569:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @param[in]     ifftFlag
 570:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    - value = 0: RFFT
 571:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****                    - value = 1: RIFFT
 572:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   @return        none
 573:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** */
 574:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 575:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** void arm_rfft_fast_f32(
 576:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   const arm_rfft_fast_instance_f32 * S,
 577:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   float32_t * p,
 578:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   float32_t * pOut,
 579:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****   uint8_t ifftFlag)
 580:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** {
 461              	 .loc 1 580 0
 462              	 .cfi_startproc
 463              	 
 464              	 
 465 0000 80B5     	 push {r7,lr}
 466              	.LCFI12:
 467              	 .cfi_def_cfa_offset 8
 468              	 .cfi_offset 7,-8
 469              	 .cfi_offset 14,-4
 470 0002 86B0     	 sub sp,sp,#24
 471              	.LCFI13:
 472              	 .cfi_def_cfa_offset 32
 473 0004 00AF     	 add r7,sp,#0
 474              	.LCFI14:
 475              	 .cfi_def_cfa_register 7
 476 0006 F860     	 str r0,[r7,#12]
 477 0008 B960     	 str r1,[r7,#8]
 478 000a 7A60     	 str r2,[r7,#4]
 479 000c FB70     	 strb r3,[r7,#3]
 581:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    const arm_cfft_instance_f32 * Sint = &(S->Sint);
 480              	 .loc 1 581 0
 481 000e FB68     	 ldr r3,[r7,#12]
 482 0010 7B61     	 str r3,[r7,#20]
 582:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 583:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    /* Calculation of Real FFT */
 584:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    if (ifftFlag)
 483              	 .loc 1 584 0
 484 0012 FB78     	 ldrb r3,[r7,#3]
 485 0014 002B     	 cmp r3,#0
 486 0016 0CD0     	 beq .L7
 585:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    {
 586:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /*  Real FFT compression */
 587:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       merge_rfft_f32(S, p, pOut);
 487              	 .loc 1 587 0
 488 0018 F868     	 ldr r0,[r7,#12]
 489 001a B968     	 ldr r1,[r7,#8]
 490 001c 7A68     	 ldr r2,[r7,#4]
 491 001e FFF7FEFF 	 bl merge_rfft_f32
 588:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /* Complex radix-4 IFFT process */
 589:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 492              	 .loc 1 589 0
 493 0022 FB78     	 ldrb r3,[r7,#3]
 494 0024 7869     	 ldr r0,[r7,#20]
 495 0026 7968     	 ldr r1,[r7,#4]
 496 0028 1A46     	 mov r2,r3
 497 002a 0123     	 movs r3,#1
 498 002c FFF7FEFF 	 bl arm_cfft_f32
 499 0030 0BE0     	 b .L6
 500              	.L7:
 590:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    }
 591:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    else
 592:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    {
 593:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /* Calculation of RFFT of input */
 594:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       arm_cfft_f32( Sint, p, ifftFlag, 1);
 501              	 .loc 1 594 0
 502 0032 FB78     	 ldrb r3,[r7,#3]
 503 0034 7869     	 ldr r0,[r7,#20]
 504 0036 B968     	 ldr r1,[r7,#8]
 505 0038 1A46     	 mov r2,r3
 506 003a 0123     	 movs r3,#1
 507 003c FFF7FEFF 	 bl arm_cfft_f32
 595:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** 
 596:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       /*  Real FFT extraction */
 597:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****       stage_rfft_f32(S, p, pOut);
 508              	 .loc 1 597 0
 509 0040 F868     	 ldr r0,[r7,#12]
 510 0042 B968     	 ldr r1,[r7,#8]
 511 0044 7A68     	 ldr r2,[r7,#4]
 512 0046 FFF7FEFF 	 bl stage_rfft_f32
 513              	.L6:
 598:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c ****    }
 599:../Dave/Generated/CMSIS_DSP/Source/TransformFunctions/arm_rfft_fast_f32.c **** }
 514              	 .loc 1 599 0
 515 004a 1837     	 adds r7,r7,#24
 516              	.LCFI15:
 517              	 .cfi_def_cfa_offset 8
 518 004c BD46     	 mov sp,r7
 519              	.LCFI16:
 520              	 .cfi_def_cfa_register 13
 521              	 
 522 004e 80BD     	 pop {r7,pc}
 523              	 .cfi_endproc
 524              	.LFE151:
 526              	 .text
 527              	.Letext0:
 528              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 529              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 530              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 531              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_rfft_fast_f32.c
    {standard input}:20     .text.stage_rfft_f32:00000000 $t
    {standard input}:25     .text.stage_rfft_f32:00000000 stage_rfft_f32
    {standard input}:249    .text.merge_rfft_f32:00000000 $t
    {standard input}:254    .text.merge_rfft_f32:00000000 merge_rfft_f32
    {standard input}:454    .text.arm_rfft_fast_f32:00000000 $t
    {standard input}:459    .text.arm_rfft_fast_f32:00000000 arm_rfft_fast_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
arm_cfft_f32
