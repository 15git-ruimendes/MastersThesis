   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mat_cmplx_mult_q31.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mat_cmplx_mult_q31,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mat_cmplx_mult_q31
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mat_cmplx_mult_q31:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c"
   1:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Title:        arm_mat_cmplx_mult_q31.c
   4:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Description:  Floating-point matrix multiplication
   5:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   @ingroup groupMatrix
  33:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   @addtogroup CmplxMatrixMult
  37:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   @{
  38:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  */
  39:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  40:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** /**
  41:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   @brief         Q31 Complex matrix multiplication.
  42:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   @param[in]     pSrcA      points to first input complex matrix structure
  43:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   @param[in]     pSrcB      points to second input complex matrix structure
  44:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   @param[out]    pDst       points to output complex matrix structure
  45:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   @return        execution status
  46:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    - \ref ARM_MATH_SUCCESS       : Operation successful
  47:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    - \ref ARM_MATH_SIZE_MISMATCH : Matrix size check failed
  48:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  49:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   @par           Scaling and Overflow Behavior
  50:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    The function is implemented using an internal 64-bit accumulator.
  51:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    The accumulator has a 2.62 format and maintains full precision of the intermedia
  52:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    multiplication results but provides only a single guard bit. There is no saturat
  53:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    on intermediate additions. Thus, if the accumulator overflows it wraps around an
  54:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    distorts the result. The input signals should be scaled down to avoid intermedia
  55:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    overflows. The input is thus scaled down by log2(numColsA) bits
  56:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    to avoid overflows, as a total of numColsA additions are performed internally.
  57:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                    The 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to
  58:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****  */
  59:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #if defined(ARM_MATH_MVEI)
  60:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  61:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #include "CMSIS_DSP/Include/arm_helium_utils.h"
  62:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  63:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #define MATRIX_DIM2 2
  64:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #define MATRIX_DIM3 3
  65:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #define MATRIX_DIM4 4
  66:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  67:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** __STATIC_INLINE arm_status arm_mat_cmplx_mult_q31_2x2_mve(
  68:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     const arm_matrix_instance_q31 * pSrcA,
  69:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     const arm_matrix_instance_q31 * pSrcB,
  70:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     arm_matrix_instance_q31 * pDst)
  71:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** {
  72:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInB = pSrcB->pData;   /* input data matrix pointer B */
  73:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA = pSrcA->pData;   /* input data matrix pointer A */
  74:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t           *pOut = pDst->pData;   /* output data matrix pointer */
  75:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     uint32x4_t     vecColBOffs0;
  76:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA0 = pInA;
  77:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA1 = pInA0 + CMPLX_DIM * MATRIX_DIM2;
  78:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q63_t            acc0, acc1, acc2, acc3;
  79:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31x4_t          vecB, vecA;
  80:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  81:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     static const uint32_t offsetB0[4] = {
  82:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         0, 1,
  83:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         MATRIX_DIM2 * CMPLX_DIM, MATRIX_DIM2 * CMPLX_DIM + 1
  84:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     };
  85:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  86:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecColBOffs0 = vldrwq_u32(offsetB0);
  87:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  88:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pInB = (q31_t const *) pSrcB->pData;
  89:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  90:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB = vldrwq_gather_shifted_offset(pInB, vecColBOffs0);
  91:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA0);
  92:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
  93:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
  94:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  95:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA1);
  96:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
  97:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
  98:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
  99:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM2 + 0] = (q31_t) asrl(acc0, 31);
 100:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM2 + 1] = (q31_t) asrl(acc1, 31);
 101:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM2 + 0] = (q31_t) asrl(acc2, 31);
 102:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM2 + 1] = (q31_t) asrl(acc3, 31);
 103:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 104:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * move to next B column
 105:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 106:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pInB = pInB + CMPLX_DIM;
 107:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 108:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB = vldrwq_gather_shifted_offset(pInB, vecColBOffs0);
 109:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA0);
 110:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 111:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 112:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 113:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA1);
 114:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 115:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 116:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 117:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut += CMPLX_DIM;
 118:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 119:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM2 + 0] = (q31_t) asrl(acc0, 31);
 120:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM2 + 1] = (q31_t) asrl(acc1, 31);
 121:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM2 + 0] = (q31_t) asrl(acc2, 31);
 122:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM2 + 1] = (q31_t) asrl(acc3, 31);
 123:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 124:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * Return to application
 125:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 126:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     return (ARM_MATH_SUCCESS);
 127:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** }
 128:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 129:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** __STATIC_INLINE arm_status arm_mat_cmplx_mult_q31_3x3_mve(
 130:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     const arm_matrix_instance_q31 * pSrcA,
 131:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     const arm_matrix_instance_q31 * pSrcB,
 132:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     arm_matrix_instance_q31 * pDst)
 133:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** {
 134:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInB = pSrcB->pData;   /* input data matrix pointer B */
 135:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA = pSrcA->pData;   /* input data matrix pointer A */
 136:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t           *pOut = pDst->pData;   /* output data matrix pointer */
 137:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     uint32x4_t     vecColBOffs0, vecColBOffs1;
 138:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA0 = pInA;
 139:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA1 = pInA0 + CMPLX_DIM * MATRIX_DIM3;
 140:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA2 = pInA1 + CMPLX_DIM * MATRIX_DIM3;
 141:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q63_t            acc0, acc1, acc2, acc3;
 142:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31x4_t          vecB, vecB1, vecA;
 143:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 144:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * enable predication to disable upper half complex vector element
 145:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 146:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     mve_pred16_t p0 = vctp32q(CMPLX_DIM);
 147:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 148:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     static const uint32_t offsetB0[4] = {
 149:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         0, 1,
 150:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         MATRIX_DIM3 * CMPLX_DIM, MATRIX_DIM3 * CMPLX_DIM + 1
 151:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     };
 152:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     static const uint32_t offsetB1[4] = {
 153:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         2 * MATRIX_DIM3 * CMPLX_DIM, 2 * MATRIX_DIM3 * CMPLX_DIM + 1,
 154:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         INACTIVELANE, INACTIVELANE
 155:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     };
 156:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 157:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecColBOffs0 = vldrwq_u32(offsetB0);
 158:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecColBOffs1 = vldrwq_u32(offsetB1);
 159:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 160:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pInB = (q31_t const *) pSrcB->pData;
 161:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 162:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB = vldrwq_gather_shifted_offset(pInB, vecColBOffs0);
 163:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB1 = vldrwq_gather_shifted_offset(pInB, vecColBOffs1);
 164:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 165:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA0);
 166:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 167:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 168:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 169:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA1);
 170:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 171:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 172:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 173:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_z_s32(&pInA0[4], p0);
 174:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 175:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 176:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 177:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_z_s32(&pInA1[4], p0);
 178:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 179:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 180:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 181:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM3 + 0] = (q31_t) asrl(acc0, 31);
 182:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM3 + 1] = (q31_t) asrl(acc1, 31);
 183:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM3 + 0] = (q31_t) asrl(acc2, 31);
 184:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM3 + 1] = (q31_t) asrl(acc3, 31);
 185:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 186:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA2);
 187:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 188:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 189:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 190:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_z_s32(&pInA2[4], p0);
 191:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 192:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 193:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 194:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM3 + 0] = (q31_t) asrl(acc0, 31);
 195:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM3 + 1] = (q31_t) asrl(acc1, 31);
 196:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut += CMPLX_DIM;
 197:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 198:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 199:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * move to next B column
 200:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 201:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pInB = pInB + CMPLX_DIM;
 202:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 203:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB = vldrwq_gather_shifted_offset(pInB, vecColBOffs0);
 204:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB1 = vldrwq_gather_shifted_offset(pInB, vecColBOffs1);
 205:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 206:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA0);
 207:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 208:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 209:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 210:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA1);
 211:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 212:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 213:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 214:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_z_s32(&pInA0[4], p0);
 215:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 216:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 217:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 218:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_z_s32(&pInA1[4], p0);
 219:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 220:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 221:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 222:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM3 + 0] = (q31_t) asrl(acc0, 31);
 223:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM3 + 1] = (q31_t) asrl(acc1, 31);
 224:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM3 + 0] = (q31_t) asrl(acc2, 31);
 225:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM3 + 1] = (q31_t) asrl(acc3, 31);
 226:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 227:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA2);
 228:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 229:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 230:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 231:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_z_s32(&pInA2[4], p0);
 232:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 233:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 234:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 235:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM3 + 0] = (q31_t) asrl(acc0, 31);
 236:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM3 + 1] = (q31_t) asrl(acc1, 31);
 237:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut += CMPLX_DIM;
 238:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 239:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 240:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * move to next B column
 241:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 242:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pInB = pInB + CMPLX_DIM;
 243:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 244:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB = vldrwq_gather_shifted_offset(pInB, vecColBOffs0);
 245:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB1 = vldrwq_gather_shifted_offset(pInB, vecColBOffs1);
 246:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 247:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA0);
 248:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 249:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 250:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 251:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA1);
 252:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 253:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 254:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 255:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_z_s32(&pInA0[4], p0);
 256:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 257:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 258:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 259:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_z_s32(&pInA1[4], p0);
 260:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 261:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 262:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 263:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM3 + 0] = (q31_t) asrl(acc0, 31);
 264:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM3 + 1] = (q31_t) asrl(acc1, 31);
 265:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM3 + 0] = (q31_t) asrl(acc2, 31);
 266:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM3 + 1] = (q31_t) asrl(acc3, 31);
 267:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 268:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA2);
 269:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 270:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 271:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 272:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_z_s32(&pInA2[4], p0);
 273:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 274:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 275:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 276:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM3 + 0] = (q31_t) asrl(acc0, 31);
 277:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM3 + 1] = (q31_t) asrl(acc1, 31);
 278:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 279:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * Return to application
 280:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 281:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     return (ARM_MATH_SUCCESS);
 282:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** }
 283:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 284:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** __STATIC_INLINE arm_status arm_mat_cmplx_mult_q31_4x4_mve(
 285:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     const arm_matrix_instance_q31 * pSrcA,
 286:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     const arm_matrix_instance_q31 * pSrcB,
 287:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     arm_matrix_instance_q31 * pDst)
 288:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** {
 289:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInB = pSrcB->pData;   /* input data matrix pointer B */
 290:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA = pSrcA->pData;   /* input data matrix pointer A */
 291:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t           *pOut = pDst->pData;   /* output data matrix pointer */
 292:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     uint32x4_t    vecColBOffs0, vecColBOffs1;
 293:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA0 = pInA;
 294:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA1 = pInA0 + CMPLX_DIM * MATRIX_DIM4;
 295:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA2 = pInA1 + CMPLX_DIM * MATRIX_DIM4;
 296:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const     *pInA3 = pInA2 + CMPLX_DIM * MATRIX_DIM4;
 297:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q63_t            acc0, acc1, acc2, acc3;
 298:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31x4_t        vecB, vecB1, vecA;
 299:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 300:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     static const uint32_t offsetB0[4] = {
 301:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         0, 1,
 302:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         MATRIX_DIM4 * CMPLX_DIM, MATRIX_DIM4 * CMPLX_DIM + 1
 303:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     };
 304:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     static const uint32_t offsetB1[4] = {
 305:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         2 * MATRIX_DIM4 * CMPLX_DIM, 2 * MATRIX_DIM4 * CMPLX_DIM + 1,
 306:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         3 * MATRIX_DIM4 * CMPLX_DIM, 3 * MATRIX_DIM4 * CMPLX_DIM + 1
 307:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     };
 308:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 309:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecColBOffs0 = vldrwq_u32(offsetB0);
 310:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecColBOffs1 = vldrwq_u32(offsetB1);
 311:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 312:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pInB = (q31_t const *) pSrcB->pData;
 313:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 314:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB = vldrwq_gather_shifted_offset(pInB, vecColBOffs0);
 315:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB1 = vldrwq_gather_shifted_offset(pInB, vecColBOffs1);
 316:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 317:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA0);
 318:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 319:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 320:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 321:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA1);
 322:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 323:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 324:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 325:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA0[4]);
 326:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 327:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 328:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 329:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA1[4]);
 330:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 331:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 332:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 333:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc0, 31);
 334:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc1, 31);
 335:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc2, 31);
 336:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc3, 31);
 337:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 338:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA2);
 339:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 340:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 341:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 342:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA3);
 343:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 344:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 345:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 346:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA2[4]);
 347:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 348:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 349:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 350:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA3[4]);
 351:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 352:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 353:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 354:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc0, 31);
 355:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc1, 31);
 356:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[3 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc2, 31);
 357:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[3 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc3, 31);
 358:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut += CMPLX_DIM;
 359:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 360:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 361:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * move to next B column
 362:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 363:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pInB = pInB + CMPLX_DIM;
 364:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 365:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB = vldrwq_gather_shifted_offset(pInB, vecColBOffs0);
 366:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB1 = vldrwq_gather_shifted_offset(pInB, vecColBOffs1);
 367:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 368:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA0);
 369:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 370:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 371:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 372:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA1);
 373:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 374:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 375:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 376:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA0[4]);
 377:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 378:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 379:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 380:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA1[4]);
 381:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 382:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 383:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 384:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc0, 31);
 385:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc1, 31);
 386:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc2, 31);
 387:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc3, 31);
 388:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 389:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA2);
 390:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 391:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 392:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 393:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA3);
 394:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 395:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 396:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 397:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA2[4]);
 398:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 399:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 400:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 401:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA3[4]);
 402:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 403:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 404:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 405:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc0, 31);
 406:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc1, 31);
 407:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[3 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc2, 31);
 408:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[3 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc3, 31);
 409:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut += CMPLX_DIM;
 410:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 411:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * move to next B column
 412:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 413:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pInB = pInB + CMPLX_DIM;
 414:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 415:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB = vldrwq_gather_shifted_offset(pInB, vecColBOffs0);
 416:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB1 = vldrwq_gather_shifted_offset(pInB, vecColBOffs1);
 417:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 418:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA0);
 419:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 420:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 421:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 422:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA1);
 423:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 424:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 425:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 426:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA0[4]);
 427:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 428:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 429:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 430:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA1[4]);
 431:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 432:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 433:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 434:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc0, 31);
 435:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc1, 31);
 436:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc2, 31);
 437:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc3, 31);
 438:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 439:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA2);
 440:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 441:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 442:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 443:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA3);
 444:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 445:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 446:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 447:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA2[4]);
 448:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 449:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 450:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 451:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA3[4]);
 452:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 453:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 454:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 455:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc0, 31);
 456:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc1, 31);
 457:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[3 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc2, 31);
 458:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[3 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc3, 31);
 459:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut += CMPLX_DIM;
 460:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 461:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 462:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * move to next B column
 463:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 464:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pInB = pInB + CMPLX_DIM;
 465:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 466:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB = vldrwq_gather_shifted_offset(pInB, vecColBOffs0);
 467:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecB1 = vldrwq_gather_shifted_offset(pInB, vecColBOffs1);
 468:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 469:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA0);
 470:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 471:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 472:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 473:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA1);
 474:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 475:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 476:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 477:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA0[4]);
 478:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 479:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 480:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 481:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA1[4]);
 482:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 483:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 484:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 485:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc0, 31);
 486:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[0 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc1, 31);
 487:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc2, 31);
 488:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[1 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc3, 31);
 489:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 490:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA2);
 491:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavq_s32(vecA, vecB);
 492:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavxq_s32(vecA, vecB);
 493:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 494:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(pInA3);
 495:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavq_s32(vecA, vecB);
 496:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavxq_s32(vecA, vecB);
 497:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 498:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA2[4]);
 499:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc0 = vmlsldavaq_s32(acc0, vecA, vecB1);
 500:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc1 = vmlaldavaxq_s32(acc1, vecA, vecB1);
 501:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 502:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecA = vldrwq_s32(&pInA3[4]);
 503:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc2 = vmlsldavaq_s32(acc2, vecA, vecB1);
 504:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     acc3 = vmlaldavaxq_s32(acc3, vecA, vecB1);
 505:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 506:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc0, 31);
 507:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[2 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc1, 31);
 508:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[3 * CMPLX_DIM * MATRIX_DIM4 + 0] = (q31_t) asrl(acc2, 31);
 509:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     pOut[3 * CMPLX_DIM * MATRIX_DIM4 + 1] = (q31_t) asrl(acc3, 31);
 510:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 511:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * Return to application
 512:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 513:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     return (ARM_MATH_SUCCESS);
 514:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** }
 515:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 516:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 517:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** arm_status arm_mat_cmplx_mult_q31(
 518:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcA,
 519:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcB,
 520:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         arm_matrix_instance_q31 * pDst)
 521:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** {
 522:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const *pInB = (q31_t const *) pSrcB->pData;   /* input data matrix pointer B */
 523:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t const *pInA = (q31_t const *) pSrcA->pData;   /* input data matrix pointer A */
 524:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t *pOut = pDst->pData;  /* output data matrix pointer */
 525:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     q31_t *px;              /* Temporary output data matrix pointer */
 526:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     uint16_t  numRowsA = pSrcA->numRows;    /* number of rows of input matrix A    */
 527:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     uint16_t  numColsB = pSrcB->numCols;    /* number of columns of input matrix B */
 528:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     uint16_t  numColsA = pSrcA->numCols;    /* number of columns of input matrix A */
 529:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     uint16_t  col, i = 0U, row = numRowsA, colCnt;  /* loop counters */
 530:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     arm_status status;          /* status of matrix multiplication */
 531:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     uint32x4_t vecOffs, vecColBOffs;
 532:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     uint32_t  blkCnt, rowCnt;           /* loop counters */
 533:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 534:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   #ifdef ARM_MATH_MATRIX_CHECK
 535:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 536:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   /* Check for matrix mismatch condition */
 537:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
 538:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
 539:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   {
 540:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 541:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 542:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     status = ARM_MATH_SIZE_MISMATCH;
 543:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   }
 544:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   else
 545:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
 546:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 547:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   {
 548:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 549:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * small squared matrix specialized routines
 550:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 551:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     if (numRowsA == numColsB && numColsB == numColsA)
 552:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     {
 553:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         if (numRowsA == 1)
 554:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 555:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           q63_t sumReal = (q63_t) pInA[0] * pInB[0];
 556:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal -= (q63_t) pInA[1] * pInB[1];
 557:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 558:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           q63_t sumImag = (q63_t) pInA[0] * pInB[1];
 559:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) pInA[1] * pInB[0];
 560:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****        
 561:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Store result in destination buffer */
 562:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pOut[0] = (q31_t) clip_q63_to_q31(sumReal >> 31);
 563:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pOut[1] = (q31_t) clip_q63_to_q31(sumImag >> 31);
 564:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           return (ARM_MATH_SUCCESS);
 565:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         }
 566:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         else if (numRowsA == 2)
 567:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             return arm_mat_cmplx_mult_q31_2x2_mve(pSrcA, pSrcB, pDst);
 568:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         else if (numRowsA == 3)
 569:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             return arm_mat_cmplx_mult_q31_3x3_mve(pSrcA, pSrcB, pDst);
 570:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         else if (numRowsA == 4)
 571:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             return arm_mat_cmplx_mult_q31_4x4_mve(pSrcA, pSrcB, pDst);
 572:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     }
 573:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 574:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecColBOffs[0] = 0;
 575:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecColBOffs[1] = 1;
 576:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecColBOffs[2] = numColsB * CMPLX_DIM;
 577:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     vecColBOffs[3] = (numColsB * CMPLX_DIM) + 1;
 578:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 579:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 580:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * The following loop performs the dot-product of each row in pSrcA with each column in pSrcB
 581:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 582:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 583:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /*
 584:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      * row loop
 585:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****      */
 586:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     rowCnt = row >> 1;
 587:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     while (rowCnt > 0u)
 588:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     {
 589:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 590:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * Output pointer is set to starting address of the row being processed
 591:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 592:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         px = pOut + i * CMPLX_DIM;
 593:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         i = i + 2 * numColsB;
 594:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 595:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * For every row wise process, the column loop counter is to be initiated
 596:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 597:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         col = numColsB;
 598:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 599:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * For every row wise process, the pInB pointer is set
 600:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * to the starting address of the pSrcB data
 601:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 602:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         pInB = (q31_t const *) pSrcB->pData;
 603:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 604:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * column loop
 605:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 606:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         while (col > 0u)
 607:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 608:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 609:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * generate 4 columns elements
 610:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 611:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 612:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * Matrix A columns number of MAC operations are to be performed
 613:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 614:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             colCnt = numColsA;
 615:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 616:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             q31_t const *pSrcA0Vec, *pSrcA1Vec;
 617:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             q31_t const *pInA0 = pInA;
 618:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             q31_t const *pInA1 = pInA0 + numColsA * CMPLX_DIM;
 619:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             q63_t   acc0, acc1, acc2, acc3;
 620:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 621:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             acc0 = 0LL;
 622:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             acc1 = 0LL;
 623:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             acc2 = 0LL;
 624:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             acc3 = 0LL;
 625:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 626:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             pSrcA0Vec = (q31_t const *) pInA0;
 627:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             pSrcA1Vec = (q31_t const *) pInA1;
 628:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             
 629:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 630:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             vecOffs = vecColBOffs;
 631:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 632:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 633:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * process 1 x 2 block output
 634:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 635:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             blkCnt = (numColsA * CMPLX_DIM) >> 2;
 636:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             while (blkCnt > 0U)
 637:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             {
 638:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 q31x4_t vecB, vecA;
 639:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 640:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecB = vldrwq_gather_shifted_offset(pInB, vecOffs);
 641:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 /*
 642:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                  * move Matrix B read offsets, 2 rows down
 643:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                  */
 644:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecOffs = vecOffs + (uint32_t) (numColsB * 2 * CMPLX_DIM);
 645:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 646:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 647:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecA = vld1q(pSrcA0Vec);  
 648:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 pSrcA0Vec += 4;
 649:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc0 =  vmlsldavaq(acc0, vecA, vecB);
 650:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc1 =  vmlaldavaxq(acc1, vecA, vecB);
 651:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 652:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 
 653:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecA = vld1q(pSrcA1Vec); 
 654:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 pSrcA1Vec += 4;
 655:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                
 656:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc2 =  vmlsldavaq(acc2, vecA, vecB);
 657:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc3 =  vmlaldavaxq(acc3, vecA, vecB);
 658:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 659:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 660:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 blkCnt--;
 661:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             }
 662:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             
 663:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 664:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 665:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * tail
 666:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 667:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             blkCnt = (numColsA * CMPLX_DIM) & 3;
 668:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             if (blkCnt > 0U)
 669:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             {
 670:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 mve_pred16_t p0 = vctp32q(blkCnt);
 671:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 q31x4_t vecB, vecA;
 672:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 673:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecB = vldrwq_gather_shifted_offset_z(pInB, vecOffs, p0);
 674:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 675:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 /*
 676:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                  * move Matrix B read offsets, 2 rows down
 677:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                  */
 678:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecOffs = vecOffs + (uint32_t) (numColsB * 2 * CMPLX_DIM);
 679:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                
 680:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 
 681:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecA = vld1q(pSrcA0Vec);
 682:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc0 =  vmlsldavaq(acc0, vecA, vecB);
 683:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc1 =  vmlaldavaxq(acc1, vecA, vecB);
 684:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecA = vld1q(pSrcA1Vec);
 685:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc2 =  vmlsldavaq(acc2, vecA, vecB);
 686:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc3 =  vmlaldavaxq(acc3, vecA, vecB);
 687:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 
 688:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 689:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             }
 690:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 691:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             px[0 * CMPLX_DIM * numColsB + 0] = (q31_t) clip_q63_to_q31(acc0 >> 31);
 692:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             px[0 * CMPLX_DIM * numColsB + 1] = (q31_t) clip_q63_to_q31(acc1 >> 31);
 693:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             px[1 * CMPLX_DIM * numColsB + 0] = (q31_t) clip_q63_to_q31(acc2 >> 31);
 694:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             px[1 * CMPLX_DIM * numColsB + 1] = (q31_t) clip_q63_to_q31(acc3 >> 31);
 695:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             px += CMPLX_DIM;
 696:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 697:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * Decrement the column loop counter
 698:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 699:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             col--;
 700:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 701:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * Update the pointer pInB to point to the  starting address of the next column
 702:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 703:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             pInB = (q31_t const *) pSrcB->pData + (numColsB - col) * CMPLX_DIM;
 704:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         }
 705:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 706:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 707:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * Update the pointer pInA to point to the  starting address of the next row
 708:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 709:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         pInA += (numColsA * 2) * CMPLX_DIM;
 710:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 711:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * Decrement the row loop counter
 712:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 713:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         rowCnt --;
 714:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 715:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     }
 716:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 717:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     rowCnt = row & 1;
 718:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     while (rowCnt > 0u)
 719:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     {
 720:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 721:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * Output pointer is set to starting address of the row being processed
 722:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 723:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         px = pOut + i * CMPLX_DIM;
 724:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         i = i + numColsB;
 725:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 726:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * For every row wise process, the column loop counter is to be initiated
 727:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 728:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         col = numColsB;
 729:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 730:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * For every row wise process, the pInB pointer is set
 731:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * to the starting address of the pSrcB data
 732:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 733:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         pInB = (q31_t const *) pSrcB->pData;
 734:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 735:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * column loop
 736:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 737:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         while (col > 0u)
 738:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 739:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 740:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * generate 4 columns elements
 741:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 742:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 743:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * Matrix A columns number of MAC operations are to be performed
 744:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 745:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             colCnt = numColsA;
 746:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 747:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             q31_t const *pSrcA0Vec;
 748:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             q31_t const *pInA0 = pInA;
 749:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             q63_t acc0,acc1;
 750:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 751:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             acc0 = 0LL;
 752:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             acc1 = 0LL;
 753:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 754:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             pSrcA0Vec = (q31_t const *) pInA0;
 755:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****            
 756:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             vecOffs = vecColBOffs;
 757:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 758:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 759:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * process 1 x 2 block output
 760:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 761:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             blkCnt = (numColsA * CMPLX_DIM) >> 2;
 762:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             while (blkCnt > 0U)
 763:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             {
 764:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 q31x4_t vecB, vecA;
 765:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 766:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecB = vldrwq_gather_shifted_offset(pInB, vecOffs);
 767:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 /*
 768:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                  * move Matrix B read offsets, 2 rows down
 769:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                  */
 770:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecOffs = vecOffs + (uint32_t) (numColsB * 2 * CMPLX_DIM);
 771:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                
 772:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecA = vld1q(pSrcA0Vec);  
 773:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 pSrcA0Vec += 4;
 774:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc0 =  vmlsldavaq(acc0, vecA, vecB);
 775:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc1 =  vmlaldavaxq(acc1, vecA, vecB);
 776:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 
 777:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 778:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 blkCnt--;
 779:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             }
 780:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 781:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 782:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 783:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * tail
 784:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 785:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             blkCnt = (numColsA * CMPLX_DIM) & 3;
 786:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             if (blkCnt > 0U)
 787:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             {
 788:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 mve_pred16_t p0 = vctp32q(blkCnt);
 789:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 q31x4_t vecB, vecA;
 790:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 791:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecB = vldrwq_gather_shifted_offset_z(pInB, vecOffs, p0);
 792:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 793:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 /*
 794:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                  * move Matrix B read offsets, 2 rows down
 795:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                  */
 796:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecOffs = vecOffs + (uint32_t) (numColsB * 2 * CMPLX_DIM);
 797:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                
 798:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 vecA = vld1q(pSrcA0Vec);
 799:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                
 800:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 801:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc0 =  vmlsldavaq(acc0, vecA, vecB);
 802:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****                 acc1 =  vmlaldavaxq(acc1, vecA, vecB);
 803:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 804:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 805:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             }
 806:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 807:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             px[0] = (q31_t) clip_q63_to_q31(acc0 >> 31);
 808:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             px[1] = (q31_t) clip_q63_to_q31(acc1 >> 31);
 809:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 810:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****            
 811:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             px += CMPLX_DIM;
 812:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 813:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * Decrement the column loop counter
 814:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 815:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             col--;
 816:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             /*
 817:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              * Update the pointer pInB to point to the  starting address of the next column
 818:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****              */
 819:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****             pInB = (q31_t const *) pSrcB->pData + (numColsB - col) * CMPLX_DIM;
 820:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         }
 821:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 822:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /*
 823:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          * Update the pointer pInA to point to the  starting address of the next row
 824:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          */
 825:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         pInA += numColsA  * CMPLX_DIM;
 826:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         rowCnt--;
 827:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     }
 828:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 829:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     
 830:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* Set status as ARM_MATH_SUCCESS */
 831:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     status = ARM_MATH_SUCCESS;
 832:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   }
 833:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 834:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   /* Return to application */
 835:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   return (status);
 836:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** }
 837:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 838:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #else
 839:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** arm_status arm_mat_cmplx_mult_q31(
 840:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcA,
 841:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcB,
 842:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         arm_matrix_instance_q31 * pDst)
 843:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** {
  28              	 .loc 1 843 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 2DE9B00F 	 push {r4,r5,r7,r8,r9,r10,fp}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 28
  36              	 .cfi_offset 4,-28
  37              	 .cfi_offset 5,-24
  38              	 .cfi_offset 7,-20
  39              	 .cfi_offset 8,-16
  40              	 .cfi_offset 9,-12
  41              	 .cfi_offset 10,-8
  42              	 .cfi_offset 11,-4
  43 0004 A7B0     	 sub sp,sp,#156
  44              	.LCFI1:
  45              	 .cfi_def_cfa_offset 184
  46 0006 00AF     	 add r7,sp,#0
  47              	.LCFI2:
  48              	 .cfi_def_cfa_register 7
  49 0008 F862     	 str r0,[r7,#44]
  50 000a B962     	 str r1,[r7,#40]
  51 000c 7A62     	 str r2,[r7,#36]
 844:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *pIn1 = pSrcA->pData;                    /* Input data matrix pointer A */
  52              	 .loc 1 844 0
  53 000e FB6A     	 ldr r3,[r7,#44]
  54 0010 5B68     	 ldr r3,[r3,#4]
  55 0012 C7F89430 	 str r3,[r7,#148]
 845:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *pIn2 = pSrcB->pData;                    /* Input data matrix pointer B */
  56              	 .loc 1 845 0
  57 0016 BB6A     	 ldr r3,[r7,#40]
  58 0018 5B68     	 ldr r3,[r3,#4]
  59 001a C7F89030 	 str r3,[r7,#144]
 846:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *pInA = pSrcA->pData;                    /* Input data matrix pointer A */
  60              	 .loc 1 846 0
  61 001e FB6A     	 ldr r3,[r7,#44]
  62 0020 5B68     	 ldr r3,[r3,#4]
  63 0022 C7F88C30 	 str r3,[r7,#140]
 847:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *pOut = pDst->pData;                     /* Output data matrix pointer */
  64              	 .loc 1 847 0
  65 0026 7B6A     	 ldr r3,[r7,#36]
  66 0028 5B68     	 ldr r3,[r3,#4]
  67 002a FB65     	 str r3,[r7,#92]
 848:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t *px;                                     /* Temporary output data matrix pointer */
 849:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
  68              	 .loc 1 849 0
  69 002c FB6A     	 ldr r3,[r7,#44]
  70 002e 1B88     	 ldrh r3,[r3]
  71 0030 A7F85A30 	 strh r3,[r7,#90]
 850:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
  72              	 .loc 1 850 0
  73 0034 BB6A     	 ldr r3,[r7,#40]
  74 0036 5B88     	 ldrh r3,[r3,#2]
  75 0038 A7F85830 	 strh r3,[r7,#88]
 851:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
  76              	 .loc 1 851 0
  77 003c FB6A     	 ldr r3,[r7,#44]
  78 003e 5B88     	 ldrh r3,[r3,#2]
  79 0040 A7F85630 	 strh r3,[r7,#86]
 852:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q63_t sumReal, sumImag;                        /* Accumulator */
 853:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t a1, b1, c1, d1;
 854:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   uint32_t col, i = 0U, j, row = numRowsA, colCnt; /* loop counters */
  80              	 .loc 1 854 0
  81 0044 0023     	 movs r3,#0
  82 0046 3B67     	 str r3,[r7,#112]
  83 0048 B7F85A30 	 ldrh r3,[r7,#90]
  84 004c BB66     	 str r3,[r7,#104]
 855:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   arm_status status;                             /* status of matrix multiplication */
 856:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 857:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 858:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   q31_t a0, b0, c0, d0;
 859:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #endif
 860:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 861:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #ifdef ARM_MATH_MATRIX_CHECK
 862:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 863:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   /* Check for matrix mismatch condition */
 864:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
  85              	 .loc 1 864 0
  86 004e FB6A     	 ldr r3,[r7,#44]
  87 0050 5A88     	 ldrh r2,[r3,#2]
  88 0052 BB6A     	 ldr r3,[r7,#40]
  89 0054 1B88     	 ldrh r3,[r3]
  90 0056 9A42     	 cmp r2,r3
  91 0058 0BD1     	 bne .L2
 865:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       (pSrcA->numRows != pDst->numRows)  ||
  92              	 .loc 1 865 0 discriminator 1
  93 005a FB6A     	 ldr r3,[r7,#44]
  94 005c 1A88     	 ldrh r2,[r3]
  95 005e 7B6A     	 ldr r3,[r7,#36]
  96 0060 1B88     	 ldrh r3,[r3]
 864:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       (pSrcA->numRows != pDst->numRows)  ||
  97              	 .loc 1 864 0 discriminator 1
  98 0062 9A42     	 cmp r2,r3
  99 0064 05D1     	 bne .L2
 866:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       (pSrcB->numCols != pDst->numCols)    )
 100              	 .loc 1 866 0
 101 0066 BB6A     	 ldr r3,[r7,#40]
 102 0068 5A88     	 ldrh r2,[r3,#2]
 103 006a 7B6A     	 ldr r3,[r7,#36]
 104 006c 5B88     	 ldrh r3,[r3,#2]
 865:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       (pSrcA->numRows != pDst->numRows)  ||
 105              	 .loc 1 865 0
 106 006e 9A42     	 cmp r2,r3
 107 0070 03D0     	 beq .L3
 108              	.L2:
 867:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   {
 868:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 869:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     status = ARM_MATH_SIZE_MISMATCH;
 109              	 .loc 1 869 0
 110 0072 FD23     	 movs r3,#253
 111 0074 87F86330 	 strb r3,[r7,#99]
 112 0078 1EE1     	 b .L4
 113              	.L3:
 870:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   }
 871:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   else
 872:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 873:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
 874:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 875:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   {
 876:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 877:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /* row loop */
 878:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     do
 879:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     {
 880:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* Output pointer is set to starting address of the row being processed */
 881:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       px = pOut + 2 * i;
 114              	 .loc 1 881 0
 115 007a 3B6F     	 ldr r3,[r7,#112]
 116 007c DB00     	 lsls r3,r3,#3
 117 007e FA6D     	 ldr r2,[r7,#92]
 118 0080 1344     	 add r3,r3,r2
 119 0082 C7F88830 	 str r3,[r7,#136]
 882:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 883:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* For every row wise process, the column loop counter is to be initiated */
 884:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       col = numColsB;
 120              	 .loc 1 884 0
 121 0086 B7F85830 	 ldrh r3,[r7,#88]
 122 008a 7B67     	 str r3,[r7,#116]
 885:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 886:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* For every row wise process, the pIn2 pointer is set
 887:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****        ** to the starting address of the pSrcB data */
 888:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       pIn2 = pSrcB->pData;
 123              	 .loc 1 888 0
 124 008c BB6A     	 ldr r3,[r7,#40]
 125 008e 5B68     	 ldr r3,[r3,#4]
 126 0090 C7F89030 	 str r3,[r7,#144]
 889:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 890:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       j = 0U;
 127              	 .loc 1 890 0
 128 0094 0023     	 movs r3,#0
 129 0096 FB66     	 str r3,[r7,#108]
 130              	.L13:
 891:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 892:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* column loop */
 893:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       do
 894:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       {
 895:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 896:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         sumReal = 0.0;
 131              	 .loc 1 896 0
 132 0098 4FF00002 	 mov r2,#0
 133 009c 4FF00003 	 mov r3,#0
 134 00a0 C7E92023 	 strd r2,[r7,#128]
 897:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         sumImag = 0.0;
 135              	 .loc 1 897 0
 136 00a4 4FF00002 	 mov r2,#0
 137 00a8 4FF00003 	 mov r3,#0
 138 00ac C7E91E23 	 strd r2,[r7,#120]
 898:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 899:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Initiate pointer pIn1 to point to starting address of column being processed */
 900:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         pIn1 = pInA;
 139              	 .loc 1 900 0
 140 00b0 D7F88C30 	 ldr r3,[r7,#140]
 141 00b4 C7F89430 	 str r3,[r7,#148]
 901:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 902:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 903:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 904:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 905:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         colCnt = numColsA >> 2U;
 906:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 907:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* matrix multiplication */
 908:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         while (colCnt > 0U)
 909:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 910:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 911:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Reading real part of complex matrix A */
 912:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a0 = *pIn1;
 913:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 914:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Reading real part of complex matrix B */
 915:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c0 = *pIn2;
 916:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 917:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Reading imaginary part of complex matrix A */
 918:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b0 = *(pIn1 + 1U);
 919:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 920:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Reading imaginary part of complex matrix B */
 921:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d0 = *(pIn2 + 1U);
 922:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 923:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 924:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal += (q63_t) a0 * c0;
 925:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) b0 * c0;
 926:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 927:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
 928:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 929:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 930:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 931:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 932:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal -= (q63_t) b0 * d0;
 933:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) a0 * d0;
 934:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 935:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
 936:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 937:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* read real and imag values from pSrcA and pSrcB buffer */
 938:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a1 = *(pIn1     );
 939:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c1 = *(pIn2     );
 940:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b1 = *(pIn1 + 1U);
 941:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d1 = *(pIn2 + 1U);
 942:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 943:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 944:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal += (q63_t) a1 * c1;
 945:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) b1 * c1;
 946:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 947:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
 948:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 949:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 950:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 951:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 952:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal -= (q63_t) b1 * d1;
 953:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) a1 * d1;
 954:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 955:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a0 = *(pIn1     );
 956:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c0 = *(pIn2     );
 957:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b0 = *(pIn1 + 1U);
 958:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d0 = *(pIn2 + 1U);
 959:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 960:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 961:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal += (q63_t) a0 * c0;
 962:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) b0 * c0;
 963:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 964:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
 965:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 966:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 967:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 968:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 969:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal -= (q63_t) b0 * d0;
 970:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) a0 * d0;
 971:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 972:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
 973:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 974:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a1 = *(pIn1     );
 975:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c1 = *(pIn2     );
 976:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b1 = *(pIn1 + 1U);
 977:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d1 = *(pIn2 + 1U);
 978:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 979:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 980:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal += (q63_t) a1 * c1;
 981:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) b1 * c1;
 982:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 983:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
 984:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 985:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 986:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 987:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
 988:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal -= (q63_t) b1 * d1;
 989:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) a1 * d1;
 990:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 991:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Decrement loop count */
 992:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           colCnt--;
 993:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         }
 994:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 995:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
 996:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****          ** No loop unrolling is used. */
 997:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         colCnt = numColsA % 0x4U;
 998:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
 999:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #else
1000:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1001:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Initialize blkCnt with number of samples */
1002:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         colCnt = numColsA;
 142              	 .loc 1 1002 0
 143 00b8 B7F85630 	 ldrh r3,[r7,#86]
 144 00bc 7B66     	 str r3,[r7,#100]
1003:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1004:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
1005:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1006:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         while (colCnt > 0U)
 145              	 .loc 1 1006 0
 146 00be 80E0     	 b .L5
 147              	.L6:
1007:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
1008:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
1009:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           a1 = *(pIn1     );
 148              	 .loc 1 1009 0
 149 00c0 D7F89430 	 ldr r3,[r7,#148]
 150 00c4 1B68     	 ldr r3,[r3]
 151 00c6 3B65     	 str r3,[r7,#80]
1010:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           c1 = *(pIn2     );
 152              	 .loc 1 1010 0
 153 00c8 D7F89030 	 ldr r3,[r7,#144]
 154 00cc 1B68     	 ldr r3,[r3]
 155 00ce FB64     	 str r3,[r7,#76]
1011:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           b1 = *(pIn1 + 1U);
 156              	 .loc 1 1011 0
 157 00d0 D7F89430 	 ldr r3,[r7,#148]
 158 00d4 5B68     	 ldr r3,[r3,#4]
 159 00d6 BB64     	 str r3,[r7,#72]
1012:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           d1 = *(pIn2 + 1U);
 160              	 .loc 1 1012 0
 161 00d8 D7F89030 	 ldr r3,[r7,#144]
 162 00dc 5B68     	 ldr r3,[r3,#4]
 163 00de 7B64     	 str r3,[r7,#68]
1013:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1014:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
1015:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal += (q63_t) a1 * c1;
 164              	 .loc 1 1015 0
 165 00e0 3B6D     	 ldr r3,[r7,#80]
 166 00e2 1846     	 mov r0,r3
 167 00e4 4FEAE071 	 asr r1,r0,#31
 168 00e8 FB6C     	 ldr r3,[r7,#76]
 169 00ea 1A46     	 mov r2,r3
 170 00ec 4FEAE273 	 asr r3,r2,#31
 171 00f0 02FB01F5 	 mul r5,r2,r1
 172 00f4 00FB03F4 	 mul r4,r0,r3
 173 00f8 2C44     	 add r4,r4,r5
 174 00fa A0FB0223 	 umull r2,r3,r0,r2
 175 00fe E118     	 adds r1,r4,r3
 176 0100 0B46     	 mov r3,r1
 177 0102 D7E92001 	 ldrd r0,[r7,#128]
 178 0106 1218     	 adds r2,r2,r0
 179 0108 43EB0103 	 adc r3,r3,r1
 180 010c C7E92023 	 strd r2,[r7,#128]
1016:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) b1 * c1;
 181              	 .loc 1 1016 0
 182 0110 BB6C     	 ldr r3,[r7,#72]
 183 0112 1846     	 mov r0,r3
 184 0114 4FEAE071 	 asr r1,r0,#31
 185 0118 FB6C     	 ldr r3,[r7,#76]
 186 011a 1A46     	 mov r2,r3
 187 011c 4FEAE273 	 asr r3,r2,#31
 188 0120 02FB01F5 	 mul r5,r2,r1
 189 0124 00FB03F4 	 mul r4,r0,r3
 190 0128 2C44     	 add r4,r4,r5
 191 012a A0FB0223 	 umull r2,r3,r0,r2
 192 012e E118     	 adds r1,r4,r3
 193 0130 0B46     	 mov r3,r1
 194 0132 D7E91E01 	 ldrd r0,[r7,#120]
 195 0136 1218     	 adds r2,r2,r0
 196 0138 43EB0103 	 adc r3,r3,r1
 197 013c C7E91E23 	 strd r2,[r7,#120]
1017:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1018:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* update pointers */
1019:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn1 += 2U;
 198              	 .loc 1 1019 0
 199 0140 D7F89430 	 ldr r3,[r7,#148]
 200 0144 0833     	 adds r3,r3,#8
 201 0146 C7F89430 	 str r3,[r7,#148]
1020:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           pIn2 += 2 * numColsB;
 202              	 .loc 1 1020 0
 203 014a B7F85830 	 ldrh r3,[r7,#88]
 204 014e DB00     	 lsls r3,r3,#3
 205 0150 1A46     	 mov r2,r3
 206 0152 D7F89030 	 ldr r3,[r7,#144]
 207 0156 1344     	 add r3,r3,r2
 208 0158 C7F89030 	 str r3,[r7,#144]
1021:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1022:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Multiply and Accumlates */
1023:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumReal -= (q63_t) b1 * d1;
 209              	 .loc 1 1023 0
 210 015c BB6C     	 ldr r3,[r7,#72]
 211 015e 1846     	 mov r0,r3
 212 0160 4FEAE071 	 asr r1,r0,#31
 213 0164 7B6C     	 ldr r3,[r7,#68]
 214 0166 1A46     	 mov r2,r3
 215 0168 4FEAE273 	 asr r3,r2,#31
 216 016c 02FB01F5 	 mul r5,r2,r1
 217 0170 00FB03F4 	 mul r4,r0,r3
 218 0174 2C44     	 add r4,r4,r5
 219 0176 A0FB0223 	 umull r2,r3,r0,r2
 220 017a E118     	 adds r1,r4,r3
 221 017c 0B46     	 mov r3,r1
 222 017e D7E92001 	 ldrd r0,[r7,#128]
 223 0182 821A     	 subs r2,r0,r2
 224 0184 61EB0303 	 sbc r3,r1,r3
 225 0188 C7E92023 	 strd r2,[r7,#128]
1024:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           sumImag += (q63_t) a1 * d1;
 226              	 .loc 1 1024 0
 227 018c 3B6D     	 ldr r3,[r7,#80]
 228 018e 1846     	 mov r0,r3
 229 0190 4FEAE071 	 asr r1,r0,#31
 230 0194 7B6C     	 ldr r3,[r7,#68]
 231 0196 1A46     	 mov r2,r3
 232 0198 4FEAE273 	 asr r3,r2,#31
 233 019c 02FB01F5 	 mul r5,r2,r1
 234 01a0 00FB03F4 	 mul r4,r0,r3
 235 01a4 2C44     	 add r4,r4,r5
 236 01a6 A0FB0223 	 umull r2,r3,r0,r2
 237 01aa E118     	 adds r1,r4,r3
 238 01ac 0B46     	 mov r3,r1
 239 01ae D7E91E01 	 ldrd r0,[r7,#120]
 240 01b2 1218     	 adds r2,r2,r0
 241 01b4 43EB0103 	 adc r3,r3,r1
 242 01b8 C7E91E23 	 strd r2,[r7,#120]
1025:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1026:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           /* Decrement loop counter */
1027:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****           colCnt--;
 243              	 .loc 1 1027 0
 244 01bc 7B6E     	 ldr r3,[r7,#100]
 245 01be 013B     	 subs r3,r3,#1
 246 01c0 7B66     	 str r3,[r7,#100]
 247              	.L5:
1006:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         {
 248              	 .loc 1 1006 0
 249 01c2 7B6E     	 ldr r3,[r7,#100]
 250 01c4 002B     	 cmp r3,#0
 251 01c6 7FF47BAF 	 bne .L6
1028:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         }
1029:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1030:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Store result in destination buffer */
1031:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         *px++ = (q31_t) clip_q63_to_q31(sumReal >> 31);
 252              	 .loc 1 1031 0
 253 01ca D7F88810 	 ldr r1,[r7,#136]
 254 01ce 0B1D     	 adds r3,r1,#4
 255 01d0 C7F88830 	 str r3,[r7,#136]
 256 01d4 D7E92023 	 ldrd r2,[r7,#128]
 257 01d8 4FEAD278 	 lsr r8,r2,#31
 258 01dc 48EA4308 	 orr r8,r8,r3,lsl#1
 259 01e0 4FEAE379 	 asr r9,r3,#31
 260 01e4 C7E90E89 	 strd r8,[r7,#56]
 261              	.LBB6:
 262              	.LBB7:
 263              	 .file 2 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
   1:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /******************************************************************************
   2:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @file     arm_math.h
   3:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @brief    Public header file for CMSIS DSP Library
   4:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @version  V1.7.0
   5:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @date     18. March 2019
   6:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  ******************************************************************************/
   7:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /*
   8:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * Copyright (c) 2010-2019 Arm Limited or its affiliates. All rights reserved.
   9:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
  10:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
  12:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * not use this file except in compliance with the License.
  14:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * You may obtain a copy of the License at
  15:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
  16:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
  18:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * See the License for the specific language governing permissions and
  22:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * limitations under the License.
  23:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
  24:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
  25:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
  26:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    \mainpage CMSIS DSP Software Library
  27:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  28:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Introduction
  29:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * ------------
  30:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  31:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  32:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M and Cortex-A processor 
  33:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * based devices.
  34:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  35:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  36:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Basic math functions
  37:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Fast math functions
  38:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Complex math functions
  39:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Filtering functions
  40:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Matrix functions
  41:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Transform functions
  42:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Motor control functions
  43:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Statistical functions
  44:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Support functions
  45:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Interpolation functions
  46:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Support Vector Machine functions (SVM)
  47:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Bayes classifier functions
  48:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - Distance functions
  49:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  50:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * The library has generally separate functions for operating on 8-bit integers, 16-bit integers,
  51:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  53:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Using the Library
  54:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * ------------
  55:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  56:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  58:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Here is the list of pre-built libraries :
  59:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  60:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  61:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  62:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  63:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  64:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  65:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  66:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  67:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  68:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  69:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  70:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  71:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  72:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  73:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_ARMv8MBLl_math.lib (Armv8-M Baseline, Little endian)
  74:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_ARMv8MMLl_math.lib (Armv8-M Mainline, Little endian)
  75:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (Armv8-M Mainline, Little endian, Single Precision Floating Point 
  76:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_ARMv8MMLld_math.lib (Armv8-M Mainline, Little endian, DSP instructions)
  77:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (Armv8-M Mainline, Little endian, DSP instructions, Single Precis
  78:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  79:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  80:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  81:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  82:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  83:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  84:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Examples
  85:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * --------
  86:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  87:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  88:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  89:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Toolchain Support
  90:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * ------------
  91:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  92:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * The library is now tested on Fast Models building with cmake.
  93:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Core M0, M7, A5 are tested.
  94:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * 
  95:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * 
  96:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
  97:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Building the Library
  98:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * ------------
  99:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 100:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * The library installer contains a project file to rebuild libraries on MDK toolchain in the <co
 101:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 103:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 104:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 106:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * There is also a work in progress cmake build. The README file is giving more details.
 107:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 108:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Preprocessor Macros
 109:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * ------------
 110:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 111:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Each library project have different preprocessor macros.
 112:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 113:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 114:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 115:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 116:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 117:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 118:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 119:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 120:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 121:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_ROUNDING:
 122:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 123:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 124:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 125:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_LOOPUNROLL:
 126:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 127:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Define macro ARM_MATH_LOOPUNROLL to enable manual loop unrolling in DSP functions
 128:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 129:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_NEON:
 130:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 131:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Define macro ARM_MATH_NEON to enable Neon versions of the DSP functions.
 132:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * It is not enabled by default when Neon is available because performances are 
 133:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * dependent on the compiler and target architecture.
 134:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 135:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_NEON_EXPERIMENTAL:
 136:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 137:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Define macro ARM_MATH_NEON_EXPERIMENTAL to enable experimental Neon versions of 
 138:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * of some DSP functions. Experimental Neon versions currently do not have better
 139:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * performances than the scalar versions.
 140:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 141:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_HELIUM:
 142:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 143:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * It implies the flags ARM_MATH_MVEF and ARM_MATH_MVEI and ARM_MATH_FLOAT16.
 144:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 145:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_MVEF:
 146:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 147:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Select Helium versions of the f32 algorithms.
 148:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * It implies ARM_MATH_FLOAT16 and ARM_MATH_MVEI.
 149:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 150:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_MVEI:
 151:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 152:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Select Helium versions of the int and fixed point algorithms.
 153:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 154:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * - ARM_MATH_FLOAT16:
 155:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 156:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Float16 implementations of some algorithms (Requires MVE extension).
 157:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 158:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * <hr>
 159:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 160:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * -----------------------------
 161:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 162:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 163:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * |File/Folder                      |Content                                                    
 164:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * |---------------------------------|-----------------------------------------------------------
 165:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * |\b CMSIS\\Documentation\\DSP     | This documentation                                        
 166:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * |\b CMSIS\\DSP\\DSP_Lib_TestSuite | DSP_Lib test suite                                        
 167:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * |\b CMSIS\\DSP\\Examples          | Example projects demonstrating the usage of the library fu
 168:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * |\b CMSIS\\DSP\\Include           | DSP_Lib include files                                     
 169:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * |\b CMSIS\\DSP\\Lib               | DSP_Lib binaries                                          
 170:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * |\b CMSIS\\DSP\\Projects          | Projects to rebuild DSP_Lib binaries                      
 171:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * |\b CMSIS\\DSP\\Source            | DSP_Lib source files                                      
 172:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    *
 173:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * <hr>
 174:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Revision History of CMSIS-DSP
 175:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * ------------
 176:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 177:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 178:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 179:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 180:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 181:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupMath Basic Math Functions
 182:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 183:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 184:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 185:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 186:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 187:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 188:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * operate on individual values and not arrays.
 189:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 190:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 191:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 192:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 193:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 194:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 195:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * This set of functions operates on complex data vectors.
 196:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 197:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * (real, imag, real, imag, ...).
 198:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 199:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * to the number of complex values; the array contains twice this number of
 200:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * real values.
 201:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 202:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 203:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 204:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupFilters Filtering Functions
 205:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 206:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 207:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 208:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 209:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 210:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * This set of functions provides basic matrix math operations.
 211:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * The functions operate on matrix data structures.  For example,
 212:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * the type
 213:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * definition for the floating-point matrix structure is shown
 214:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * below:
 215:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * <pre>
 216:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *     typedef struct
 217:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *     {
 218:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 219:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 220:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 221:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *     } arm_matrix_instance_f32;
 222:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * </pre>
 223:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 224:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 225:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * The structure specifies the size of the matrix and then points to
 226:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 227:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * and the values are arranged in row order.  That is, the
 228:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * matrix element (i, j) is stored at:
 229:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * <pre>
 230:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *     pData[i*numCols + j]
 231:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * </pre>
 232:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 233:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * \par Init Functions
 234:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * There is an associated initialization function for each type of matrix
 235:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * data structure.
 236:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 237:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * Refer to \ref arm_mat_init_f32(), \ref arm_mat_init_q31() and \ref arm_mat_init_q15()
 238:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * for floating-point, Q31 and Q15 types,  respectively.
 239:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 240:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * \par
 241:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 242:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 243:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * To place the instance structure in a const data
 244:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * section, manually initialize the data structure.  For example:
 245:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * <pre>
 246:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 247:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 248:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 249:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * </pre>
 250:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 251:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 252:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * data array.
 253:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 254:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * \par Size Checking
 255:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 256:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * output matrices. For example, the matrix addition function verifies that the
 257:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 258:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * columns. If the size check fails the functions return:
 259:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * <pre>
 260:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 261:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * </pre>
 262:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * Otherwise the functions return
 263:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * <pre>
 264:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *     ARM_MATH_SUCCESS
 265:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * </pre>
 266:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * There is some overhead associated with this matrix size checking.
 267:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * The matrix size checking is enabled via the \#define
 268:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * <pre>
 269:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 270:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * </pre>
 271:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * within the library project settings.  By default this macro is defined
 272:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * and size checking is enabled. By changing the project settings and
 273:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 274:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * run a bit faster. With size checking disabled the functions always
 275:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 276:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 277:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 278:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 279:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupTransforms Transform Functions
 280:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 281:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 282:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 283:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupController Controller Functions
 284:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 285:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 286:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 287:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupStats Statistics Functions
 288:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 289:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 290:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 291:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupSupport Support Functions
 292:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 293:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 294:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 295:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 296:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 297:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 298:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 299:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 300:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 301:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 302:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupExamples Examples
 303:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 304:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 305:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 306:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupSVM SVM Functions
 307:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * This set of functions is implementing SVM classification on 2 classes.
 308:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * The training must be done from scikit-learn. The parameters can be easily
 309:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * generated from the scikit-learn object. Some examples are given in
 310:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * DSP/Testing/PatternGeneration/SVM.py
 311:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 312:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * If more than 2 classes are needed, the functions in this folder 
 313:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * will have to be used, as building blocks, to do multi-class classification.
 314:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 315:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * No multi-class classification is provided in this SVM folder.
 316:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * 
 317:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 318:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 319:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 320:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 321:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupBayes Bayesian estimators
 322:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 323:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * Implement the naive gaussian Bayes estimator.
 324:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * The training must be done from scikit-learn.
 325:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 326:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * The parameters can be easily
 327:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * generated from the scikit-learn object. Some examples are given in
 328:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * DSP/Testing/PatternGeneration/Bayes.py
 329:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 330:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 331:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 332:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * @defgroup groupDistance Distance functions
 333:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 334:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * Distance functions for use with clustering algorithms.
 335:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  * There are distance functions for float vectors and boolean vectors.
 336:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *
 337:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 338:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 339:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 340:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifndef _ARM_MATH_H
 341:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define _ARM_MATH_H
 342:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 343:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifdef   __cplusplus
 344:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** extern "C"
 345:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** {
 346:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 347:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 348:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /* Compiler specific diagnostic adjustment */
 349:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if   defined ( __CC_ARM )
 350:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 351:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 352:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 353:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __GNUC__ )
 354:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #pragma GCC diagnostic push
 355:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #pragma GCC diagnostic ignored "-Wsign-conversion"
 356:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #pragma GCC diagnostic ignored "-Wconversion"
 357:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #pragma GCC diagnostic ignored "-Wunused-parameter"
 358:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 359:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __ICCARM__ )
 360:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 361:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __TI_ARM__ )
 362:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 363:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __CSMC__ )
 364:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 365:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __TASKING__ )
 366:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 367:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( _MSC_VER )
 368:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 369:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
 370:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #error Unknown compiler
 371:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 372:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 373:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 374:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /* Included for instrinsics definitions */
 375:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined (_MSC_VER ) 
 376:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #include <stdint.h>
 377:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define __STATIC_FORCEINLINE static __forceinline
 378:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define __STATIC_INLINE static __inline
 379:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define __ALIGNED(x) __declspec(align(x))
 380:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 381:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined (__GNUC_PYTHON__)
 382:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #include <stdint.h>
 383:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define  __ALIGNED(x) __attribute__((aligned(x)))
 384:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define __STATIC_FORCEINLINE static __attribute__((inline))
 385:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define __STATIC_INLINE static __attribute__((inline))
 386:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-function"
 387:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #pragma GCC diagnostic ignored "-Wattributes"
 388:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 389:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
 390:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #include "cmsis_compiler.h"
 391:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 392:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 393:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 394:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 395:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #include <string.h>
 396:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #include <math.h>
 397:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #include <float.h>
 398:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #include <limits.h>
 399:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 400:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 401:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F64_MAX   ((float64_t)DBL_MAX)
 402:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F32_MAX   ((float32_t)FLT_MAX)
 403:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 404:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 405:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F16_MAX   ((float16_t)FLT_MAX)
 406:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 407:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 408:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F64_MIN   (-DBL_MAX)
 409:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F32_MIN   (-FLT_MAX)
 410:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 411:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 412:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F16_MIN   (-(float16_t)FLT_MAX)
 413:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 414:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 415:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F64_ABSMAX   ((float64_t)DBL_MAX)
 416:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F32_ABSMAX   ((float32_t)FLT_MAX)
 417:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 418:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 419:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F16_ABSMAX   ((float16_t)FLT_MAX)
 420:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 421:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 422:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F64_ABSMIN   ((float64_t)0.0)
 423:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F32_ABSMIN   ((float32_t)0.0)
 424:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 425:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 426:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define F16_ABSMIN   ((float16_t)0.0)
 427:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 428:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 429:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q31_MAX   ((q31_t)(0x7FFFFFFFL))
 430:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q15_MAX   ((q15_t)(0x7FFF))
 431:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q7_MAX    ((q7_t)(0x7F))
 432:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q31_MIN   ((q31_t)(0x80000000L))
 433:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q15_MIN   ((q15_t)(0x8000))
 434:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q7_MIN    ((q7_t)(0x80))
 435:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 436:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q31_ABSMAX   ((q31_t)(0x7FFFFFFFL))
 437:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q15_ABSMAX   ((q15_t)(0x7FFF))
 438:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q7_ABSMAX    ((q7_t)(0x7F))
 439:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q31_ABSMIN   ((q31_t)0)
 440:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q15_ABSMIN   ((q15_t)0)
 441:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define Q7_ABSMIN    ((q7_t)0)
 442:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 443:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /* evaluate ARM DSP feature */
 444:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if (defined (__ARM_FEATURE_DSP) && (__ARM_FEATURE_DSP == 1))
 445:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define ARM_MATH_DSP                   1
 446:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 447:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 448:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_NEON)
 449:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #include <arm_neon.h>
 450:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 451:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 452:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined (ARM_MATH_HELIUM)
 453:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define ARM_MATH_MVEF
 454:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define ARM_MATH_FLOAT16
 455:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 456:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 457:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined (ARM_MATH_MVEF)
 458:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define ARM_MATH_MVEI
 459:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define ARM_MATH_FLOAT16
 460:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 461:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 462:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined (ARM_MATH_HELIUM) || defined(ARM_MATH_MVEF) || defined(ARM_MATH_MVEI)
 463:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #include <arm_mve.h>
 464:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 465:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 466:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 467:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 468:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 469:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 470:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 471:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define DELTA_Q31          ((q31_t)(0x100))
 472:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define DELTA_Q15          ((q15_t)0x5)
 473:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define INDEX_MASK         0x0000003F
 474:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifndef PI
 475:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define PI               3.14159265358979f
 476:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 477:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 478:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 479:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 480:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 481:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 482:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 483:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 484:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 485:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 486:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 487:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define TABLE_SPACING_Q15     0x80
 488:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 489:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 490:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 491:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 492:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 493:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 494:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define INPUT_SPACING         0xB60B61
 495:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 496:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 497:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief Macros for complex numbers
 498:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 499:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 500:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /* Dimension C vector space */
 501:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define CMPLX_DIM 2
 502:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 503:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 504:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief Error status returned by some functions in the library.
 505:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 506:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 507:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef enum
 508:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   {
 509:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     ARM_MATH_SUCCESS        =  0,        /**< No error */
 510:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 511:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     ARM_MATH_LENGTH_ERROR   = -2,        /**< Length of data buffer is incorrect */
 512:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     ARM_MATH_SIZE_MISMATCH  = -3,        /**< Size of matrices is not compatible with the operation
 513:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     ARM_MATH_NANINF         = -4,        /**< Not-a-number (NaN) or infinity is generated */
 514:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     ARM_MATH_SINGULAR       = -5,        /**< Input matrix is singular and cannot be inverted */
 515:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     ARM_MATH_TEST_FAILURE   = -6         /**< Test Failed */
 516:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   } arm_status;
 517:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 518:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 519:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 520:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 521:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int8_t q7_t;
 522:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 523:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 524:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 525:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 526:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int16_t q15_t;
 527:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 528:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 529:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 530:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 531:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32_t q31_t;
 532:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 533:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 534:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 535:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 536:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int64_t q63_t;
 537:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 538:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 539:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit floating-point type definition.
 540:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 541:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float float32_t;
 542:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 543:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 544:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 64-bit floating-point type definition.
 545:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 546:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef double float64_t;
 547:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 548:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 549:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief vector types
 550:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 551:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_NEON) || defined (ARM_MATH_MVEI)
 552:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 553:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 64-bit fractional 128-bit vector data type in 1.63 format
 554:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 555:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int64x2_t q63x2_t;
 556:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 557:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 558:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional 128-bit vector data type in 1.31 format.
 559:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 560:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x4_t q31x4_t;
 561:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 562:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 563:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit fractional 128-bit vector data type with 16-bit alignement in 1.15 format.
 564:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 565:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef __ALIGNED(2) int16x8_t q15x8_t;
 566:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 567:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  /**
 568:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit fractional 128-bit vector data type with 8-bit alignement in 1.7 format.
 569:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 570:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef __ALIGNED(1) int8x16_t q7x16_t;
 571:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 572:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     /**
 573:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional 128-bit vector pair data type in 1.31 format.
 574:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 575:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x4x2_t q31x4x2_t;
 576:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 577:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 578:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional 128-bit vector quadruplet data type in 1.31 format.
 579:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 580:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x4x4_t q31x4x4_t;
 581:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 582:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 583:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit fractional 128-bit vector pair data type in 1.15 format.
 584:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 585:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int16x8x2_t q15x8x2_t;
 586:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 587:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 588:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit fractional 128-bit vector quadruplet data type in 1.15 format.
 589:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 590:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int16x8x4_t q15x8x4_t;
 591:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 592:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 593:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit fractional 128-bit vector pair data type in 1.7 format.
 594:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 595:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int8x16x2_t q7x16x2_t;
 596:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 597:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 598:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit fractional 128-bit vector quadruplet data type in 1.7 format.
 599:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 600:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    typedef int8x16x4_t q7x16x4_t;
 601:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 602:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 603:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional data type in 9.23 format.
 604:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 605:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32_t q23_t;
 606:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 607:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 608:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional 128-bit vector data type in 9.23 format.
 609:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 610:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x4_t q23x4_t;
 611:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 612:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 613:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 64-bit status 128-bit vector data type.
 614:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 615:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int64x2_t status64x2_t;
 616:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 617:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 618:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit status 128-bit vector data type.
 619:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 620:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x4_t status32x4_t;
 621:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 622:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 623:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit status 128-bit vector data type.
 624:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 625:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int16x8_t status16x8_t;
 626:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 627:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 628:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit status 128-bit vector data type.
 629:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 630:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int8x16_t status8x16_t;
 631:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 632:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 633:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 634:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 635:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_NEON) || defined(ARM_MATH_MVEF) /* floating point vector*/
 636:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 637:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit floating-point 128-bit vector type
 638:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 639:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float32x4_t f32x4_t;
 640:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 641:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 642:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 643:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit floating-point 128-bit vector data type
 644:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 645:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef __ALIGNED(2) float16x8_t f16x8_t;
 646:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 647:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 648:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 649:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit floating-point 128-bit vector pair data type
 650:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 651:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float32x4x2_t f32x4x2_t;
 652:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 653:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 654:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit floating-point 128-bit vector quadruplet data type
 655:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 656:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float32x4x4_t f32x4x4_t;
 657:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 658:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 659:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 660:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit floating-point 128-bit vector pair data type
 661:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 662:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float16x8x2_t f16x8x2_t;
 663:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 664:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 665:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit floating-point 128-bit vector quadruplet data type
 666:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 667:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float16x8x4_t f16x8x4_t;
 668:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 669:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 670:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 671:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit ubiquitous 128-bit vector data type
 672:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 673:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef union _any32x4_t
 674:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   {
 675:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       float32x4_t     f;
 676:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       int32x4_t       i;
 677:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   } any32x4_t;
 678:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 679:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 680:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 681:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit ubiquitous 128-bit vector data type
 682:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 683:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef union _any16x8_t
 684:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   {
 685:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       float16x8_t     f;
 686:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       int16x8_t       i;
 687:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   } any16x8_t;
 688:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 689:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 690:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 691:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 692:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_NEON)
 693:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 694:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional 64-bit vector data type in 1.31 format.
 695:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 696:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x2_t  q31x2_t;
 697:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 698:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 699:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit fractional 64-bit vector data type in 1.15 format.
 700:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 701:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef  __ALIGNED(2) int16x4_t q15x4_t;
 702:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 703:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 704:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit fractional 64-bit vector data type in 1.7 format.
 705:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 706:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef  __ALIGNED(1) int8x8_t q7x8_t;
 707:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 708:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 709:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit float 64-bit vector data type.
 710:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 711:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float32x2_t  f32x2_t;
 712:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 713:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 714:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 715:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit float 64-bit vector data type.
 716:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 717:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef  __ALIGNED(2) float16x4_t f16x4_t;
 718:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif 
 719:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 720:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 721:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit floating-point 128-bit vector triplet data type
 722:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 723:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float32x4x3_t f32x4x3_t;
 724:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 725:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 726:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 727:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit floating-point 128-bit vector triplet data type
 728:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 729:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float16x8x3_t f16x8x3_t;
 730:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 731:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 732:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 733:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional 128-bit vector triplet data type in 1.31 format
 734:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 735:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x4x3_t q31x4x3_t;
 736:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 737:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 738:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit fractional 128-bit vector triplet data type in 1.15 format
 739:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 740:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int16x8x3_t q15x8x3_t;
 741:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 742:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 743:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit fractional 128-bit vector triplet data type in 1.7 format
 744:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 745:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int8x16x3_t q7x16x3_t;
 746:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 747:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 748:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit floating-point 64-bit vector pair data type
 749:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 750:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float32x2x2_t f32x2x2_t;
 751:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 752:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 753:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit floating-point 64-bit vector triplet data type
 754:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 755:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float32x2x3_t f32x2x3_t;
 756:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 757:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 758:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit floating-point 64-bit vector quadruplet data type
 759:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 760:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float32x2x4_t f32x2x4_t;
 761:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 762:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 763:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 764:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit floating-point 64-bit vector pair data type
 765:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 766:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float16x4x2_t f16x4x2_t;
 767:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 768:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 769:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit floating-point 64-bit vector triplet data type
 770:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 771:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float16x4x3_t f16x4x3_t;
 772:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 773:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 774:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit floating-point 64-bit vector quadruplet data type
 775:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 776:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef float16x4x4_t f16x4x4_t;
 777:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif 
 778:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 779:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 780:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional 64-bit vector pair data type in 1.31 format
 781:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 782:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x2x2_t q31x2x2_t;
 783:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 784:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 785:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional 64-bit vector triplet data type in 1.31 format
 786:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 787:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x2x3_t q31x2x3_t;
 788:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 789:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 790:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit fractional 64-bit vector quadruplet data type in 1.31 format
 791:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 792:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x4x3_t q31x2x4_t;
 793:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 794:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 795:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit fractional 64-bit vector pair data type in 1.15 format
 796:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 797:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int16x4x2_t q15x4x2_t;
 798:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 799:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 800:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit fractional 64-bit vector triplet data type in 1.15 format
 801:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 802:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int16x4x2_t q15x4x3_t;
 803:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 804:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 805:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit fractional 64-bit vector quadruplet data type in 1.15 format
 806:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 807:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int16x4x3_t q15x4x4_t;
 808:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 809:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 810:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit fractional 64-bit vector pair data type in 1.7 format
 811:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 812:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int8x8x2_t q7x8x2_t;
 813:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 814:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 815:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit fractional 64-bit vector triplet data type in 1.7 format
 816:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 817:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int8x8x3_t q7x8x3_t;
 818:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 819:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 820:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit fractional 64-bit vector quadruplet data type in 1.7 format
 821:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 822:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int8x8x4_t q7x8x4_t;
 823:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 824:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 825:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit ubiquitous 64-bit vector data type
 826:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 827:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef union _any32x2_t
 828:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   {
 829:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       float32x2_t     f;
 830:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       int32x2_t       i;
 831:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   } any32x2_t;
 832:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 833:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined(ARM_MATH_FLOAT16)
 834:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 835:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit ubiquitous 64-bit vector data type
 836:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 837:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef union _any16x4_t
 838:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   {
 839:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       float16x4_t     f;
 840:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       int16x4_t       i;
 841:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   } any16x4_t;
 842:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif 
 843:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 844:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 845:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 32-bit status 64-bit vector data type.
 846:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 847:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int32x4_t status32x2_t;
 848:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 849:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 850:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 16-bit status 64-bit vector data type.
 851:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 852:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int16x8_t status16x4_t;
 853:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 854:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
 855:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief 8-bit status 64-bit vector data type.
 856:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
 857:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   typedef int8x16_t status8x8_t;
 858:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 859:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 860:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 861:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 862:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 863:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 864:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @brief definition to read/write two 16 bit values.
 865:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @deprecated
 866:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 867:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if   defined ( __CC_ARM )
 868:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 869:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 870:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __SIMD32_TYPE int32_t
 871:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __GNUC__ )
 872:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __SIMD32_TYPE int32_t
 873:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __ICCARM__ )
 874:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 875:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __TI_ARM__ )
 876:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __SIMD32_TYPE int32_t
 877:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __CSMC__ )
 878:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __SIMD32_TYPE int32_t
 879:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined ( __TASKING__ )
 880:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __SIMD32_TYPE __un(aligned) int32_t
 881:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #elif defined(_MSC_VER )
 882:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __SIMD32_TYPE int32_t
 883:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
 884:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #error Unknown compiler
 885:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 886:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 887:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 888:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define __SIMD32_CONST(addr)  ( (__SIMD32_TYPE * )   (addr))
 889:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE * )   (addr))
 890:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define __SIMD64(addr)        (*(      int64_t **) & (addr))
 891:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 892:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define STEP(x) (x) <= 0 ? 0 : 1
 893:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #define SQ(x) ((x) * (x))
 894:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 895:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /* SIMD replacement */
 896:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 897:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 898:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 899:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer.
 900:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     pQ15      points to input value
 901:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @return        Q31 value
 902:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 903:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2 (
 904:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q15_t * pQ15)
 905:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** {
 906:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t val;
 907:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 908:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifdef __ARM_FEATURE_UNALIGNED
 909:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   memcpy (&val, pQ15, 4);
 910:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
 911:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
 912:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 913:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 914:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   return (val);
 915:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** }
 916:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 917:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 918:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer and increment pointer afterwards.
 919:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     pQ15      points to input value
 920:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @return        Q31 value
 921:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 922:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2_ia (
 923:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q15_t ** pQ15)
 924:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** {
 925:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t val;
 926:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 927:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifdef __ARM_FEATURE_UNALIGNED
 928:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   memcpy (&val, *pQ15, 4);
 929:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
 930:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   val = ((*pQ15)[1] << 16) | ((*pQ15)[0] & 0x0FFFF);
 931:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 932:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 933:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *pQ15 += 2;
 934:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  return (val);
 935:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** }
 936:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 937:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 938:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer and decrement pointer afterwards.
 939:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     pQ15      points to input value
 940:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @return        Q31 value
 941:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 942:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2_da (
 943:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q15_t ** pQ15)
 944:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** {
 945:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t val;
 946:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 947:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifdef __ARM_FEATURE_UNALIGNED
 948:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   memcpy (&val, *pQ15, 4);
 949:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
 950:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   val = ((*pQ15)[1] << 16) | ((*pQ15)[0] & 0x0FFFF);
 951:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 952:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 953:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   *pQ15 -= 2;
 954:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   return (val);
 955:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** }
 956:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 957:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 958:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @brief         Write 2 Q15 to Q15 pointer and increment pointer afterwards.
 959:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     pQ15      points to input value
 960:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     value     Q31 value
 961:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @return        none
 962:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 963:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** __STATIC_FORCEINLINE void write_q15x2_ia (
 964:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q15_t ** pQ15,
 965:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t    value)
 966:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** {
 967:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t val = value;
 968:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifdef __ARM_FEATURE_UNALIGNED
 969:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   memcpy (*pQ15, &val, 4);
 970:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
 971:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   (*pQ15)[0] = (val & 0x0FFFF);
 972:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   (*pQ15)[1] = (val >> 16) & 0x0FFFF;
 973:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 974:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 975:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  *pQ15 += 2;
 976:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** }
 977:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 978:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
 979:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @brief         Write 2 Q15 to Q15 pointer.
 980:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     pQ15      points to input value
 981:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     value     Q31 value
 982:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @return        none
 983:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
 984:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** __STATIC_FORCEINLINE void write_q15x2 (
 985:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q15_t * pQ15,
 986:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t   value)
 987:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** {
 988:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t val = value;
 989:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 990:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifdef __ARM_FEATURE_UNALIGNED
 991:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   memcpy (pQ15, &val, 4);
 992:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
 993:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   pQ15[0] = val & 0x0FFFF;
 994:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   pQ15[1] = val >> 16;
 995:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
 996:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** }
 997:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 998:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
 999:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
1000:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @brief         Read 4 Q7 from Q7 pointer and increment pointer afterwards.
1001:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     pQ7       points to input value
1002:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @return        Q31 value
1003:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
1004:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** __STATIC_FORCEINLINE q31_t read_q7x4_ia (
1005:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q7_t ** pQ7)
1006:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** {
1007:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t val;
1008:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1009:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1010:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifdef __ARM_FEATURE_UNALIGNED
1011:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   memcpy (&val, *pQ7, 4);
1012:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
1013:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   val =(((*pQ7)[3] & 0x0FF) << 24)  | (((*pQ7)[2] & 0x0FF) << 16)  | (((*pQ7)[1] & 0x0FF) << 8)  | 
1014:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif 
1015:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1016:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   *pQ7 += 4;
1017:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1018:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   return (val);
1019:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** }
1020:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1021:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
1022:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @brief         Read 4 Q7 from Q7 pointer and decrement pointer afterwards.
1023:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     pQ7       points to input value
1024:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @return        Q31 value
1025:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
1026:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** __STATIC_FORCEINLINE q31_t read_q7x4_da (
1027:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q7_t ** pQ7)
1028:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** {
1029:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t val;
1030:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifdef __ARM_FEATURE_UNALIGNED
1031:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   memcpy (&val, *pQ7, 4);
1032:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
1033:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   val = ((((*pQ7)[3]) & 0x0FF) << 24) | ((((*pQ7)[2]) & 0x0FF) << 16)   | ((((*pQ7)[1]) & 0x0FF) <<
1034:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif 
1035:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   *pQ7 -= 4;
1036:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1037:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   return (val);
1038:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** }
1039:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1040:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /**
1041:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @brief         Write 4 Q7 to Q7 pointer and increment pointer afterwards.
1042:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     pQ7       points to input value
1043:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @param[in]     value     Q31 value
1044:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   @return        none
1045:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****  */
1046:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** __STATIC_FORCEINLINE void write_q7x4_ia (
1047:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q7_t ** pQ7,
1048:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t   value)
1049:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** {
1050:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q31_t val = value;
1051:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifdef __ARM_FEATURE_UNALIGNED
1052:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   memcpy (*pQ7, &val, 4);
1053:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
1054:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   (*pQ7)[0] = val & 0x0FF;
1055:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   (*pQ7)[1] = (val >> 8) & 0x0FF;
1056:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   (*pQ7)[2] = (val >> 16) & 0x0FF;
1057:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   (*pQ7)[3] = (val >> 24) & 0x0FF;
1058:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1059:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
1060:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   *pQ7 += 4;
1061:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** }
1062:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1063:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** /*
1064:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1065:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** Normally those kind of definitions are in a compiler file
1066:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** in Core or Core_A.
1067:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1068:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** But for MSVC compiler it is a bit special. The goal is very specific
1069:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** to CMSIS-DSP and only to allow the use of this library from other
1070:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** systems like Python or Matlab.
1071:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1072:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** MSVC is not going to be used to cross-compile to ARM. So, having a MSVC
1073:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** compiler file in Core or Core_A would not make sense.
1074:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1075:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** */
1076:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #if defined ( _MSC_VER ) || defined(__GNUC_PYTHON__)
1077:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t data)
1078:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     {
1079:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       if (data == 0U) { return 32U; }
1080:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1081:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       uint32_t count = 0U;
1082:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       uint32_t mask = 0x80000000U;
1083:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1084:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       while ((data & mask) == 0U)
1085:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       {
1086:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****         count += 1U;
1087:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****         mask = mask >> 1U;
1088:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       }
1089:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       return count;
1090:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     }
1091:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1092:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
1093:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   {
1094:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     if ((sat >= 1U) && (sat <= 32U))
1095:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     {
1096:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
1097:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       const int32_t min = -1 - max ;
1098:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       if (val > max)
1099:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       {
1100:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****         return max;
1101:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       }
1102:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       else if (val < min)
1103:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       {
1104:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****         return min;
1105:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       }
1106:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     }
1107:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     return val;
1108:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   }
1109:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1110:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
1111:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   {
1112:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     if (sat <= 31U)
1113:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     {
1114:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       const uint32_t max = ((1U << sat) - 1U);
1115:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       if (val > (int32_t)max)
1116:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       {
1117:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****         return max;
1118:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       }
1119:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       else if (val < 0)
1120:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       {
1121:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****         return 0U;
1122:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       }
1123:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     }
1124:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     return (uint32_t)val;
1125:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   }
1126:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
1127:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1128:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifndef ARM_MATH_DSP
1129:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
1130:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief definition to pack two 16 bit values.
1131:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
1132:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
1133:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****                                       (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
1134:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
1135:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****                                       (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
1136:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
1137:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1138:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    /**
1139:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief definition to pack four 8 bit values.
1140:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
1141:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
1142:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
1143:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****                                   (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
1144:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****                                   (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
1145:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****                                   (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
1146:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #else
1147:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
1148:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****                                   (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
1149:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****                                   (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
1150:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****                                   (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
1151:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** #endif
1152:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1153:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h **** 
1154:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   /**
1155:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    * @brief Clips Q63 to Q31 values.
1156:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****    */
1157:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
1158:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   q63_t x)
1159:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****   {
1160:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 264              	 .loc 2 1160 0
 265 01e8 D7E90E23 	 ldrd r2,[r7,#56]
 266 01ec 1800     	 movs r0,r3
 267 01ee B861     	 str r0,[r7,#24]
 268 01f0 DB17     	 asrs r3,r3,#31
 269 01f2 FB61     	 str r3,[r7,#28]
 270 01f4 BA69     	 ldr r2,[r7,#24]
 271 01f6 BB6B     	 ldr r3,[r7,#56]
 272 01f8 DB17     	 asrs r3,r3,#31
1161:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 273              	 .loc 2 1161 0
 274 01fa 9A42     	 cmp r2,r3
 275 01fc 0AD0     	 beq .L7
 276 01fe D7E90E23 	 ldrd r2,[r7,#56]
 277 0202 D817     	 asrs r0,r3,#31
 278 0204 3861     	 str r0,[r7,#16]
 279 0206 DB17     	 asrs r3,r3,#31
 280 0208 7B61     	 str r3,[r7,#20]
 281 020a 3B69     	 ldr r3,[r7,#16]
 282 020c 83F00043 	 eor r3,r3,#-2147483648
 283 0210 DB43     	 mvns r3,r3
 284 0212 00E0     	 b .L9
 285              	.L7:
 286 0214 BB6B     	 ldr r3,[r7,#56]
 287              	.L9:
 288              	.LBE7:
 289              	.LBE6:
 290              	 .loc 1 1031 0
 291 0216 0B60     	 str r3,[r1]
1032:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         *px++ = (q31_t) clip_q63_to_q31(sumImag >> 31);
 292              	 .loc 1 1032 0
 293 0218 D7F88810 	 ldr r1,[r7,#136]
 294 021c 0B1D     	 adds r3,r1,#4
 295 021e C7F88830 	 str r3,[r7,#136]
 296 0222 D7E91E23 	 ldrd r2,[r7,#120]
 297 0226 4FEAD27A 	 lsr r10,r2,#31
 298 022a 4AEA430A 	 orr r10,r10,r3,lsl#1
 299 022e 4FEAE37B 	 asr fp,r3,#31
 300 0232 C7E90CAB 	 strd r10,[r7,#48]
 301              	.LBB8:
 302              	.LBB9:
1160:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include\arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 303              	 .loc 2 1160 0
 304 0236 D7E90C23 	 ldrd r2,[r7,#48]
 305 023a 1800     	 movs r0,r3
 306 023c B860     	 str r0,[r7,#8]
 307 023e DB17     	 asrs r3,r3,#31
 308 0240 FB60     	 str r3,[r7,#12]
 309 0242 BA68     	 ldr r2,[r7,#8]
 310 0244 3B6B     	 ldr r3,[r7,#48]
 311 0246 DB17     	 asrs r3,r3,#31
 312              	 .loc 2 1161 0
 313 0248 9A42     	 cmp r2,r3
 314 024a 0AD0     	 beq .L10
 315 024c D7E90C23 	 ldrd r2,[r7,#48]
 316 0250 D817     	 asrs r0,r3,#31
 317 0252 3860     	 str r0,[r7]
 318 0254 DB17     	 asrs r3,r3,#31
 319 0256 7B60     	 str r3,[r7,#4]
 320 0258 3B68     	 ldr r3,[r7]
 321 025a 83F00043 	 eor r3,r3,#-2147483648
 322 025e DB43     	 mvns r3,r3
 323 0260 00E0     	 b .L15
 324              	.L10:
 325 0262 3B6B     	 ldr r3,[r7,#48]
 326              	.L15:
 327              	.LBE9:
 328              	.LBE8:
 329              	 .loc 1 1032 0
 330 0264 0B60     	 str r3,[r1]
1033:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1034:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Update pointer pIn2 to point to starting address of next column */
1035:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         j++;
 331              	 .loc 1 1035 0
 332 0266 FB6E     	 ldr r3,[r7,#108]
 333 0268 0133     	 adds r3,r3,#1
 334 026a FB66     	 str r3,[r7,#108]
1036:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         pIn2 = pSrcB->pData + 2U * j;
 335              	 .loc 1 1036 0
 336 026c BB6A     	 ldr r3,[r7,#40]
 337 026e 5A68     	 ldr r2,[r3,#4]
 338 0270 FB6E     	 ldr r3,[r7,#108]
 339 0272 DB00     	 lsls r3,r3,#3
 340 0274 1344     	 add r3,r3,r2
 341 0276 C7F89030 	 str r3,[r7,#144]
1037:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1038:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         /* Decrement column loop counter */
1039:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****         col--;
 342              	 .loc 1 1039 0
 343 027a 7B6F     	 ldr r3,[r7,#116]
 344 027c 013B     	 subs r3,r3,#1
 345 027e 7B67     	 str r3,[r7,#116]
1040:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1041:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       } while (col > 0U);
 346              	 .loc 1 1041 0
 347 0280 7B6F     	 ldr r3,[r7,#116]
 348 0282 002B     	 cmp r3,#0
 349 0284 7FF408AF 	 bne .L13
1042:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1043:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* Update pointer pInA to point to starting address of next row */
1044:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       i = i + numColsB;
 350              	 .loc 1 1044 0
 351 0288 B7F85830 	 ldrh r3,[r7,#88]
 352 028c 3A6F     	 ldr r2,[r7,#112]
 353 028e 1344     	 add r3,r3,r2
 354 0290 3B67     	 str r3,[r7,#112]
1045:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       pInA = pInA + 2 * numColsA;
 355              	 .loc 1 1045 0
 356 0292 B7F85630 	 ldrh r3,[r7,#86]
 357 0296 DB00     	 lsls r3,r3,#3
 358 0298 1A46     	 mov r2,r3
 359 029a D7F88C30 	 ldr r3,[r7,#140]
 360 029e 1344     	 add r3,r3,r2
 361 02a0 C7F88C30 	 str r3,[r7,#140]
1046:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1047:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       /* Decrement row loop counter */
1048:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****       row--;
 362              	 .loc 1 1048 0
 363 02a4 BB6E     	 ldr r3,[r7,#104]
 364 02a6 013B     	 subs r3,r3,#1
 365 02a8 BB66     	 str r3,[r7,#104]
1049:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1050:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     } while (row > 0U);
 366              	 .loc 1 1050 0
 367 02aa BB6E     	 ldr r3,[r7,#104]
 368 02ac 002B     	 cmp r3,#0
 369 02ae 7FF4E4AE 	 bne .L3
1051:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1052:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     /* Set status as ARM_MATH_SUCCESS */
1053:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****     status = ARM_MATH_SUCCESS;
 370              	 .loc 1 1053 0
 371 02b2 0023     	 movs r3,#0
 372 02b4 87F86330 	 strb r3,[r7,#99]
 373              	.L4:
1054:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   }
1055:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** 
1056:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   /* Return to application */
1057:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c ****   return (status);
 374              	 .loc 1 1057 0
 375 02b8 97F86330 	 ldrb r3,[r7,#99]
 376 02bc 5BB2     	 sxtb r3,r3
1058:../Dave/Generated/CMSIS_DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c **** }
 377              	 .loc 1 1058 0
 378 02be 1846     	 mov r0,r3
 379 02c0 9C37     	 adds r7,r7,#156
 380              	.LCFI3:
 381              	 .cfi_def_cfa_offset 28
 382 02c2 BD46     	 mov sp,r7
 383              	.LCFI4:
 384              	 .cfi_def_cfa_register 13
 385              	 
 386 02c4 BDE8B00F 	 pop {r4,r5,r7,r8,r9,r10,fp}
 387              	.LCFI5:
 388              	 .cfi_restore 11
 389              	 .cfi_restore 10
 390              	 .cfi_restore 9
 391              	 .cfi_restore 8
 392              	 .cfi_restore 7
 393              	 .cfi_restore 5
 394              	 .cfi_restore 4
 395              	 .cfi_def_cfa_offset 0
 396 02c8 7047     	 bx lr
 397              	 .cfi_endproc
 398              	.LFE149:
 400 02ca 00BF     	 .text
 401              	.Letext0:
 402              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 403              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 404              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_cmplx_mult_q31.c
    {standard input}:20     .text.arm_mat_cmplx_mult_q31:00000000 $t
    {standard input}:25     .text.arm_mat_cmplx_mult_q31:00000000 arm_mat_cmplx_mult_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
