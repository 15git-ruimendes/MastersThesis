   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_biquad_cascade_df1_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_biquad_cascade_df1_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_biquad_cascade_df1_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_biquad_cascade_df1_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Title:        arm_biquad_cascade_df1_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Description:  Processing function for the floating-point Biquad cascade DirectFormI(DF1) filter
   5:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @ingroup groupFilters
  33:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @defgroup BiquadCascadeDF1 Biquad Cascade IIR Filters Using Direct Form I Structure
  37:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  38:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   This set of functions implements arbitrary order recursive (IIR) filters.
  39:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   The filters are implemented as a cascade of second order Biquad sections.
  40:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   The functions support Q15, Q31 and floating-point data types.
  41:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   Fast version of Q15 and Q31 also available.
  42:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   The functions operate on blocks of input and output data and each call to the function
  44:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   processes <code>blockSize</code> samples through the filter.
  45:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   <code>pSrc</code> points to the array of input data and
  46:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   <code>pDst</code> points to the array of output data.
  47:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   Both arrays contain <code>blockSize</code> values.
  48:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  49:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par           Algorithm
  50:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    Each Biquad stage implements a second order filter using the difference equation
  51:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   <pre>
  52:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
  53:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   </pre>
  54:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                   A Direct Form I algorithm is used with 5 coefficients and 4 state variables per s
  55:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                   \image html Biquad.gif "Single Biquad filter stage"
  56:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                   Coefficients <code>b0, b1 and b2 </code> multiply the input signal <code>x[n]</co
  57:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                   Coefficients <code>a1</code> and <code>a2</code> multiply the output signal <code
  58:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                   Pay careful attention to the sign of the feedback coefficients.
  59:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                   Some design tools use the difference equation
  60:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   <pre>
  61:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] - a1 * y[n-1] - a2 * y[n-2]
  62:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   </pre>
  63:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                   In this case the feedback coefficients <code>a1</code> and <code>a2</code>
  64:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                   must be negated when used with the CMSIS DSP Library.
  65:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  66:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par
  67:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    Higher order filters are realized as a cascade of second order sections.
  68:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    <code>numStages</code> refers to the number of second order stages used.
  69:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    For example, an 8th order filter would be realized with <code>numStages=4</code>
  70:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    \image html BiquadCascade.gif "8th order filter using a cascade of Biquad stages
  71:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    A 9th order filter would be realized with <code>numStages=5</code> second order 
  72:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par
  74:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The <code>pState</code> points to state variables array.
  75:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    Each Biquad stage has 4 state variables <code>x[n-1], x[n-2], y[n-1],</code> and
  76:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The state variables are arranged in the <code>pState</code> array as:
  77:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   <pre>
  78:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       {x[n-1], x[n-2], y[n-1], y[n-2]}
  79:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   </pre>
  80:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  81:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par
  82:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The 4 state variables for stage 1 are first, then the 4 state variables for stag
  83:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The state array has a total length of <code>4*numStages</code> values.
  84:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The state variables are updated after each block of data is processed, the coeff
  85:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  86:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par           Instance Structure
  87:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The coefficients and state variables for a filter are stored together in an inst
  88:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    A separate instance structure must be defined for each filter.
  89:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    Coefficient arrays may be shared among several instances while state variable ar
  90:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    There are separate instance structure declarations for each of the 3 supported d
  91:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  92:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par           Init Function
  93:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    There is also an associated initialization function for each data type.
  94:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The initialization function performs following operations:
  95:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    - Sets the values of the internal structure fields.
  96:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    - Zeros out the values in the state buffer.
  97:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    To do this manually without calling the init function, assign the follow subfiel
  98:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    numStages, pCoeffs, pState. Also set all of the values in pState to zero.
  99:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 100:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par
 101:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    Use of the initialization function is optional.
 102:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    However, if the initialization function is used, then the instance structure can
 103:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    To place an instance structure into a const data section, the instance structure
 104:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    Set the values in the state buffer to zeros before static initialization.
 105:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The code below statically initializes each of the 3 different data type filter i
 106:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   <pre>
 107:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       arm_biquad_casd_df1_inst_f32 S1 = {numStages, pState, pCoeffs};
 108:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       arm_biquad_casd_df1_inst_q15 S2 = {numStages, pState, pCoeffs, postShift};
 109:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       arm_biquad_casd_df1_inst_q31 S3 = {numStages, pState, pCoeffs, postShift};
 110:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   </pre>
 111:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    where <code>numStages</code> is the number of Biquad stages in the filter;
 112:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    <code>pState</code> is the address of the state buffer;
 113:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    <code>pCoeffs</code> is the address of the coefficient buffer;
 114:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    <code>postShift</code> shift to be applied.
 115:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par           Fixed-Point Behavior
 117:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    Care must be taken when using the Q15 and Q31 versions of the Biquad Cascade fil
 118:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    Following issues must be considered:
 119:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    - Scaling of coefficients
 120:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    - Filter gain
 121:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    - Overflow and saturation
 122:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 123:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par           Scaling of coefficients
 124:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    Filter coefficients are represented as fractional values and
 125:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    coefficients are restricted to lie in the range <code>[-1 +1)</code>.
 126:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The fixed-point functions have an additional scaling parameter <code>postShift</
 127:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    which allow the filter coefficients to exceed the range <code>[+1 -1)</code>.
 128:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    At the output of the filter's accumulator is a shift register which shifts the r
 129:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    \image html BiquadPostshift.gif "Fixed-point Biquad with shift by postShift bits
 130:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    This essentially scales the filter coefficients by <code>2^postShift</code>.
 131:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    For example, to realize the coefficients
 132:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   <pre>
 133:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      {1.5, -0.8, 1.2, 1.6, -0.9}
 134:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   </pre>
 135:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    set the pCoeffs array to:
 136:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   <pre>
 137:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      {0.75, -0.4, 0.6, 0.8, -0.45}
 138:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   </pre>
 139:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    and set <code>postShift=1</code>
 140:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 141:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par           Filter gain
 142:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    The frequency response of a Biquad filter is a function of its coefficients.
 143:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    It is possible for the gain through the filter to exceed 1.0 meaning that the fi
 144:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    This means that an input signal with amplitude < 1.0 may result in an output > 1
 145:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    To avoid this behavior the filter needs to be scaled down such that its peak gai
 146:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @par           Overflow and saturation
 148:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                    For Q15 and Q31 versions, it is described separately as part of the function spe
 149:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
 150:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 151:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
 152:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @addtogroup BiquadCascadeDF1
 153:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @{
 154:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
 155:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 156:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
 157:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @brief         Processing function for the floating-point Biquad cascade filter.
 158:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @param[in]     S         points to an instance of the floating-point Biquad cascade structure
 159:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @param[in]     pSrc      points to the block of input data
 160:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @param[out]    pDst      points to the block of output data
 161:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @param[in]     blockSize  number of samples to process
 162:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   @return        none
 163:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
 164:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 165:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
 166:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #include "CMSIS_DSP/Include/arm_helium_utils.h"
 167:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** void arm_biquad_cascade_df1_f32(
 168:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const arm_biquad_casd_df1_inst_f32 * S,
 169:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const float32_t * pSrc,
 170:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t * pDst,
 171:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   uint32_t blockSize)
 172:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** {
 173:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     const float32_t *pIn = pSrc;              /*  source pointer            */
 174:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     float32_t *pOut = pDst;             /*  destination pointer       */
 175:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     float32_t *pState = S->pState;      /*  pState pointer            */
 176:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     const float32_t *pCoeffs = S->pCoeffs;    /*  coefficient pointer       */
 177:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     float32_t Xn1, Xn2, Yn1, Yn2;       /*  Filter pState variables   */
 178:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     float32_t lastX, lastY;             /*  X,Y history for tail handling */
 179:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     float32_t X0, X1, X2, X3;           /*  temporary input           */
 180:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     f32x4_t coeffs;
 181:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     f32x4_t accVec;                   /* accumultor vector */
 182:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     uint32_t  sample, stage = S->numStages; /*  loop counters             */
 183:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 184:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     do
 185:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 186:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         /*
 187:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * Reading the pState values
 188:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          */
 189:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         Xn1 = pState[0];
 190:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         Xn2 = pState[1];
 191:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         Yn1 = pState[2];
 192:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         Yn2 = pState[3];
 193:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 194:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         sample = blockSize >> 2U;
 195:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 196:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         /*
 197:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 198:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * second loop below computes the remaining 1 to 3 samples.
 199:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          */
 200:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         while (sample > 0U)
 201:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         {
 202:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             X0 = *pIn++;
 203:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             X1 = *pIn++;
 204:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             X2 = *pIn++;
 205:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             X3 = *pIn++;
 206:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 207:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(pCoeffs);
 208:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vmulq(coeffs, X3);
 209:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 210:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[4]);
 211:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, X2);
 212:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 213:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[8]);
 214:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, X1);
 215:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 216:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[12]);
 217:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, X0);
 218:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 219:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[16]);
 220:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, Xn1);
 221:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 222:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[20]);
 223:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, Xn2);
 224:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 225:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[24]);
 226:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, Yn1);
 227:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 228:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[28]);
 229:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, Yn2);
 230:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             /*
 231:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****              * Store the result in the accumulator in the destination buffer.
 232:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****              */
 233:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             vst1q(pOut, accVec);
 234:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             pOut += 4;
 235:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 236:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             /*
 237:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****              * update recurrence
 238:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****              */
 239:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             Xn1 = X3;
 240:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             Xn2 = X2;
 241:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             Yn1 = vgetq_lane(accVec, 3);
 242:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             Yn2 = vgetq_lane(accVec, 2);
 243:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             /*
 244:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****              * decrement the loop counter
 245:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****              */
 246:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             sample--;
 247:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         }
 248:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 249:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         /*
 250:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * If the blockSize is not a multiple of 4,
 251:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * compute any remaining output samples here.
 252:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          */
 253:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         sample = blockSize & 0x3U;
 254:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         if (sample)
 255:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         {
 256:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             /* save previous X, Y for modulo 1 length case */
 257:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             lastX = X3;
 258:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             lastY = Yn1;
 259:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 260:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             X0 = *pIn++;
 261:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             X1 = *pIn++;
 262:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             X2 = *pIn++;
 263:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             X3 = *pIn++;
 264:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 265:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(pCoeffs);
 266:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vmulq(coeffs, X3);
 267:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 268:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[4]);
 269:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, X2);
 270:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 271:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[8]);
 272:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, X1);
 273:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 274:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[12]);
 275:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, X0);
 276:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 277:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[16]);
 278:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, Xn1);
 279:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 280:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[20]);
 281:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, Xn2);
 282:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 283:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[24]);
 284:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, Yn1);
 285:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 286:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             coeffs = vld1q(&pCoeffs[28]);
 287:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             accVec = vfmaq(accVec, coeffs, Yn2);
 288:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 289:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             if (sample == 1)
 290:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             {
 291:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 *pOut++ = vgetq_lane(accVec, 0);
 292:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Xn1 = X0;
 293:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Xn2 = lastX;
 294:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Yn1 = vgetq_lane(accVec, 0);
 295:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Yn2 = lastY;
 296:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             }
 297:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             else if (sample == 2)
 298:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             {
 299:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 *pOut++ = vgetq_lane(accVec, 0);
 300:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 *pOut++ = vgetq_lane(accVec, 1);
 301:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Xn1 = X1;
 302:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Xn2 = X0;
 303:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Yn1 = vgetq_lane(accVec, 1);
 304:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Yn2 = vgetq_lane(accVec, 0);
 305:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             }
 306:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             else
 307:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             {
 308:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 *pOut++ = vgetq_lane(accVec, 0);
 309:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 *pOut++ = vgetq_lane(accVec, 1);
 310:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 *pOut++ = vgetq_lane(accVec, 2);
 311:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Xn1 = X2;
 312:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Xn2 = X1;
 313:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Yn1 = vgetq_lane(accVec, 2);
 314:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****                 Yn2 = vgetq_lane(accVec, 1);
 315:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****             }
 316:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         }
 317:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         /*
 318:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * Store the updated state variables back into the pState array
 319:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          */
 320:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         *pState++ = Xn1;
 321:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         *pState++ = Xn2;
 322:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         *pState++ = Yn1;
 323:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         *pState++ = Yn2;
 324:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 325:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         pCoeffs += sizeof(arm_biquad_mod_coef_f32) / sizeof(float32_t);
 326:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         /*
 327:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * The first stage goes from the input buffer to the output buffer.
 328:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * Subsequent numStages  occur in-place in the output buffer
 329:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          */
 330:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         pIn = pDst;
 331:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         /*
 332:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * Reset the output pointer
 333:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          */
 334:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         pOut = pDst;
 335:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         /*
 336:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          * decrement the loop counter
 337:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****          */
 338:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         stage--;
 339:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 340:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (stage > 0U);
 341:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** }
 342:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #else
 343:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #if defined(ARM_MATH_NEON)  && !defined(ARM_MATH_AUTOVECTORIZE)
 344:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** void arm_biquad_cascade_df1_f32(
 345:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const arm_biquad_casd_df1_inst_f32 * S,
 346:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const float32_t * pSrc,
 347:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t * pDst,
 348:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   uint32_t blockSize)
 349:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** {
 350:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 351:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const float32_t *pIn = pSrc;                         /*  source pointer            */
 352:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pOut = pDst;                        /*  destination pointer       */
 353:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pState = S->pState;                 /*  pState pointer            */
 354:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
 355:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t acc;                                 /*  Simulates the accumulator */
 356:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   
 357:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   uint32_t sample, stage = S->numStages;         /*  loop counters             */
 358:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 359:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32x4_t Xn;
 360:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32x2_t Yn;
 361:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32x2_t a;
 362:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32x4_t b;
 363:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   
 364:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32x4_t x,tmp;
 365:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32x2_t t;
 366:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32x2x2_t y;
 367:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 368:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t Xns;
 369:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 370:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   while (stage > 0U)
 371:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   {
 372:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the coefficients */
 373:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn = vdupq_n_f32(0.0f);
 374:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 375:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn = vsetq_lane_f32(pState[0],Xn,2);
 376:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn = vsetq_lane_f32(pState[1],Xn,3);
 377:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn = vset_lane_f32(pState[2],Yn,0);
 378:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn = vset_lane_f32(pState[3],Yn,1);
 379:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   
 380:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b = vld1q_f32(pCoeffs);
 381:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b = vrev64q_f32(b);  
 382:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b = vcombine_f32(vget_high_f32(b), vget_low_f32(b));
 383:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 384:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a = vld1_f32(pCoeffs + 3);
 385:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a = vrev64_f32(a);
 386:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b = vsetq_lane_f32(0.0f,b,0);
 387:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pCoeffs += 5;
 388:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     
 389:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the pState values */
 390:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****    
 391:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Apply loop unrolling and compute 4 output values simultaneously. */
 392:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*      The variable acc hold output values that are being computed:
 393:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *
 394:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 395:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 396:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 397:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 398:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      */
 399:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 400:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 401:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 402:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize >> 2U;
 403:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 404:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0U)
 405:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 406:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the first 4 inputs */
 407:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       x = vld1q_f32(pIn);
 408:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 409:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       pIn += 4;
 410:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 411:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       tmp = vextq_f32(Xn, x, 1);
 412:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmul_f32(vget_high_f32(b), vget_high_f32(tmp));
 413:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmla_f32(t, vget_low_f32(b), vget_low_f32(tmp));
 414:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmla_f32(t, a, Yn);
 415:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vpadd_f32(t, t);
 416:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn = vext_f32(Yn, t, 1);
 417:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 418:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       tmp = vextq_f32(Xn, x, 2);
 419:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmul_f32(vget_high_f32(b), vget_high_f32(tmp));
 420:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmla_f32(t, vget_low_f32(b), vget_low_f32(tmp));
 421:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmla_f32(t, a, Yn);
 422:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vpadd_f32(t, t);
 423:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn = vext_f32(Yn, t, 1);
 424:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 425:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       y.val[0] = Yn;
 426:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 427:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       tmp = vextq_f32(Xn, x, 3);
 428:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmul_f32(vget_high_f32(b), vget_high_f32(tmp));
 429:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmla_f32(t, vget_low_f32(b), vget_low_f32(tmp));
 430:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmla_f32(t, a, Yn);
 431:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vpadd_f32(t, t);
 432:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn = vext_f32(Yn, t, 1);
 433:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 434:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = x;
 435:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmul_f32(vget_high_f32(b), vget_high_f32(Xn));
 436:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmla_f32(t, vget_low_f32(b), vget_low_f32(Xn));
 437:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vmla_f32(t, a, Yn);
 438:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       t = vpadd_f32(t, t);
 439:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn = vext_f32(Yn, t, 1);
 440:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       
 441:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       y.val[1] = Yn;
 442:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 443:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       tmp = vcombine_f32(y.val[0], y.val[1]);
 444:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 445:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the 4 outputs and increment the pointer */
 446:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       vst1q_f32(pOut, tmp);
 447:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       pOut += 4;
 448:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 449:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Decrement the loop counter */
 450:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 451:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 452:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 453:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     
 454:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* If the block size is not a multiple of 4, compute any remaining output samples here.
 455:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      ** No loop unrolling is used. */
 456:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize & 0x3U;
 457:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 458:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0U)
 459:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 460:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the input */
 461:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xns = *pIn++;
 462:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 463:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 464:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       acc =  (vgetq_lane_f32(b, 1) * vgetq_lane_f32(Xn, 2)) 
 465:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       + (vgetq_lane_f32(b, 2) * vgetq_lane_f32(Xn, 3)) 
 466:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       + (vgetq_lane_f32(b, 3) * Xns) 
 467:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       + (vget_lane_f32(a, 0) * vget_lane_f32(Yn, 0)) 
 468:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       + (vget_lane_f32(a, 1) * vget_lane_f32(Yn, 1));
 469:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 470:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 471:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = acc;
 472:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 473:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 474:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:    */
 475:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1   */
 476:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn    */
 477:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1   */
 478:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 479:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = vsetq_lane_f32(vgetq_lane_f32(Xn, 3),Xn,2);
 480:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = vsetq_lane_f32(Xns,Xn,3);
 481:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn = vset_lane_f32(vget_lane_f32(Yn, 1),Yn,0);
 482:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn = vset_lane_f32(acc,Yn,1);
 483:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 484:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Decrement the loop counter */
 485:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 486:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 487:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 488:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 489:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     vst1q_f32(pState,vcombine_f32((vget_high_f32(Xn)),(Yn)));
 490:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pState += 4;
 491:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Store the updated state variables back into the pState array */
 492:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****    
 493:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  The first stage goes from the input buffer to the output buffer. */
 494:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Subsequent numStages  occur in-place in the output buffer */
 495:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pIn = pDst;
 496:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 497:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reset the output pointer */
 498:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pOut = pDst;
 499:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 500:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Decrement the loop counter */
 501:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     stage--;
 502:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   }
 503:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** }
 504:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 505:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #else
 506:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** void arm_biquad_cascade_df1_f32(
 507:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const arm_biquad_casd_df1_inst_f32 * S,
 508:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const float32_t * pSrc,
 509:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         float32_t * pDst,
 510:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         uint32_t blockSize)
 511:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** {
  28              	 .loc 1 511 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 97B0     	 sub sp,sp,#92
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 96
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
 512:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const float32_t *pIn = pSrc;                         /* Source pointer */
  47              	 .loc 1 512 0
  48 000e BB68     	 ldr r3,[r7,#8]
  49 0010 7B65     	 str r3,[r7,#84]
 513:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         float32_t *pOut = pDst;                        /* Destination pointer */
  50              	 .loc 1 513 0
  51 0012 7B68     	 ldr r3,[r7,#4]
  52 0014 3B65     	 str r3,[r7,#80]
 514:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         float32_t *pState = S->pState;                 /* pState pointer */
  53              	 .loc 1 514 0
  54 0016 FB68     	 ldr r3,[r7,#12]
  55 0018 5B68     	 ldr r3,[r3,#4]
  56 001a FB64     	 str r3,[r7,#76]
 515:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
  57              	 .loc 1 515 0
  58 001c FB68     	 ldr r3,[r7,#12]
  59 001e 9B68     	 ldr r3,[r3,#8]
  60 0020 BB64     	 str r3,[r7,#72]
 516:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         float32_t acc;                                 /* Accumulator */
 517:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
 518:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
 519:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         float32_t Xn;                                  /* Temporary input */
 520:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****         uint32_t sample, stage = S->numStages;         /* Loop counters */
  61              	 .loc 1 520 0
  62 0022 FB68     	 ldr r3,[r7,#12]
  63 0024 1B68     	 ldr r3,[r3]
  64 0026 3B63     	 str r3,[r7,#48]
  65              	.L4:
 521:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 522:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   do
 523:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   {
 524:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the coefficients */
 525:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b0 = *pCoeffs++;
  66              	 .loc 1 525 0
  67 0028 BB6C     	 ldr r3,[r7,#72]
  68 002a 1A1D     	 adds r2,r3,#4
  69 002c BA64     	 str r2,[r7,#72]
  70 002e 1B68     	 ldr r3,[r3]
  71 0030 FB62     	 str r3,[r7,#44]
 526:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b1 = *pCoeffs++;
  72              	 .loc 1 526 0
  73 0032 BB6C     	 ldr r3,[r7,#72]
  74 0034 1A1D     	 adds r2,r3,#4
  75 0036 BA64     	 str r2,[r7,#72]
  76 0038 1B68     	 ldr r3,[r3]
  77 003a BB62     	 str r3,[r7,#40]
 527:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b2 = *pCoeffs++;
  78              	 .loc 1 527 0
  79 003c BB6C     	 ldr r3,[r7,#72]
  80 003e 1A1D     	 adds r2,r3,#4
  81 0040 BA64     	 str r2,[r7,#72]
  82 0042 1B68     	 ldr r3,[r3]
  83 0044 7B62     	 str r3,[r7,#36]
 528:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a1 = *pCoeffs++;
  84              	 .loc 1 528 0
  85 0046 BB6C     	 ldr r3,[r7,#72]
  86 0048 1A1D     	 adds r2,r3,#4
  87 004a BA64     	 str r2,[r7,#72]
  88 004c 1B68     	 ldr r3,[r3]
  89 004e 3B62     	 str r3,[r7,#32]
 529:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a2 = *pCoeffs++;
  90              	 .loc 1 529 0
  91 0050 BB6C     	 ldr r3,[r7,#72]
  92 0052 1A1D     	 adds r2,r3,#4
  93 0054 BA64     	 str r2,[r7,#72]
  94 0056 1B68     	 ldr r3,[r3]
  95 0058 FB61     	 str r3,[r7,#28]
 530:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 531:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the pState values */
 532:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn1 = pState[0];
  96              	 .loc 1 532 0
  97 005a FB6C     	 ldr r3,[r7,#76]
  98 005c 1B68     	 ldr r3,[r3]
  99 005e 7B64     	 str r3,[r7,#68]
 533:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn2 = pState[1];
 100              	 .loc 1 533 0
 101 0060 FB6C     	 ldr r3,[r7,#76]
 102 0062 5B68     	 ldr r3,[r3,#4]
 103 0064 3B64     	 str r3,[r7,#64]
 534:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn1 = pState[2];
 104              	 .loc 1 534 0
 105 0066 FB6C     	 ldr r3,[r7,#76]
 106 0068 9B68     	 ldr r3,[r3,#8]
 107 006a FB63     	 str r3,[r7,#60]
 535:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn2 = pState[3];
 108              	 .loc 1 535 0
 109 006c FB6C     	 ldr r3,[r7,#76]
 110 006e DB68     	 ldr r3,[r3,#12]
 111 0070 BB63     	 str r3,[r7,#56]
 536:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 537:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 538:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 539:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Apply loop unrolling and compute 4 output values simultaneously. */
 540:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Variable acc hold output values that are being computed:
 541:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *
 542:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      * acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 543:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      * acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 544:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      * acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 545:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      * acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 546:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      */
 547:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 548:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Loop unrolling: Compute 4 outputs at a time */
 549:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize >> 2U;
 550:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 551:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0U)
 552:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 553:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the first input */
 554:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 555:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 556:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 557:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 558:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 559:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store output in destination buffer. */
 560:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn2;
 561:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 562:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 563:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as: */
 564:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1 */
 565:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn  */
 566:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1 */
 567:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc */
 568:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 569:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the second input */
 570:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = *pIn++;
 571:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 572:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 573:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = (b0 * Xn2) + (b1 * Xn) + (b2 * Xn1) + (a1 * Yn2) + (a2 * Yn1);
 574:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 575:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store output in destination buffer. */
 576:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn1;
 577:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 578:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 579:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as: */
 580:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1 */
 581:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn  */
 582:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1 */
 583:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc */
 584:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 585:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the third input */
 586:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = *pIn++;
 587:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 588:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 589:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = (b0 * Xn1) + (b1 * Xn2) + (b2 * Xn) + (a1 * Yn1) + (a2 * Yn2);
 590:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 591:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store output in destination buffer. */
 592:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn2;
 593:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 594:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 595:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as: */
 596:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1 */
 597:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn  */
 598:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1 */
 599:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc */
 600:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 601:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the forth input */
 602:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 603:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 604:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 605:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn2) + (a2 * Yn1);
 606:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 607:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store output in destination buffer. */
 608:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn1;
 609:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 610:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 611:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as: */
 612:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1 */
 613:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn  */
 614:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1 */
 615:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc */
 616:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = Xn1;
 617:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = Xn;
 618:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 619:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* decrement loop counter */
 620:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 621:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 622:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 623:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Loop unrolling: Compute remaining outputs */
 624:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize & 0x3U;
 625:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 626:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #else
 627:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 628:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Initialize blkCnt with number of samples */
 629:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize;
 112              	 .loc 1 629 0
 113 0072 3B68     	 ldr r3,[r7]
 114 0074 7B63     	 str r3,[r7,#52]
 630:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 631:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 632:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 633:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0U)
 115              	 .loc 1 633 0
 116 0076 3CE0     	 b .L2
 117              	.L3:
 634:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 635:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the input */
 636:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 118              	 .loc 1 636 0
 119 0078 7B6D     	 ldr r3,[r7,#84]
 120 007a 1A1D     	 adds r2,r3,#4
 121 007c 7A65     	 str r2,[r7,#84]
 122 007e 1B68     	 ldr r3,[r3]
 123 0080 BB61     	 str r3,[r7,#24]
 637:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 638:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 639:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 124              	 .loc 1 639 0
 125 0082 97ED0B7A 	 flds s14,[r7,#44]
 126 0086 D7ED067A 	 flds s15,[r7,#24]
 127 008a 27EE277A 	 fmuls s14,s14,s15
 128 008e D7ED0A6A 	 flds s13,[r7,#40]
 129 0092 D7ED117A 	 flds s15,[r7,#68]
 130 0096 66EEA77A 	 fmuls s15,s13,s15
 131 009a 37EE277A 	 fadds s14,s14,s15
 132 009e D7ED096A 	 flds s13,[r7,#36]
 133 00a2 D7ED107A 	 flds s15,[r7,#64]
 134 00a6 66EEA77A 	 fmuls s15,s13,s15
 135 00aa 37EE277A 	 fadds s14,s14,s15
 136 00ae D7ED086A 	 flds s13,[r7,#32]
 137 00b2 D7ED0F7A 	 flds s15,[r7,#60]
 138 00b6 66EEA77A 	 fmuls s15,s13,s15
 139 00ba 37EE277A 	 fadds s14,s14,s15
 140 00be D7ED076A 	 flds s13,[r7,#28]
 141 00c2 D7ED0E7A 	 flds s15,[r7,#56]
 142 00c6 66EEA77A 	 fmuls s15,s13,s15
 143 00ca 77EE277A 	 fadds s15,s14,s15
 144 00ce C7ED057A 	 fsts s15,[r7,#20]
 640:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 641:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store output in destination buffer. */
 642:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = acc;
 145              	 .loc 1 642 0
 146 00d2 3B6D     	 ldr r3,[r7,#80]
 147 00d4 1A1D     	 adds r2,r3,#4
 148 00d6 3A65     	 str r2,[r7,#80]
 149 00d8 7A69     	 ldr r2,[r7,#20]
 150 00da 1A60     	 str r2,[r3]
 643:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 644:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 645:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as: */
 646:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1 */
 647:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn  */
 648:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1 */
 649:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc */
 650:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = Xn1;
 151              	 .loc 1 650 0
 152 00dc 7B6C     	 ldr r3,[r7,#68]
 153 00de 3B64     	 str r3,[r7,#64]
 651:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = Xn;
 154              	 .loc 1 651 0
 155 00e0 BB69     	 ldr r3,[r7,#24]
 156 00e2 7B64     	 str r3,[r7,#68]
 652:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = Yn1;
 157              	 .loc 1 652 0
 158 00e4 FB6B     	 ldr r3,[r7,#60]
 159 00e6 BB63     	 str r3,[r7,#56]
 653:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = acc;
 160              	 .loc 1 653 0
 161 00e8 7B69     	 ldr r3,[r7,#20]
 162 00ea FB63     	 str r3,[r7,#60]
 654:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 655:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* decrement loop counter */
 656:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 163              	 .loc 1 656 0
 164 00ec 7B6B     	 ldr r3,[r7,#52]
 165 00ee 013B     	 subs r3,r3,#1
 166 00f0 7B63     	 str r3,[r7,#52]
 167              	.L2:
 633:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 168              	 .loc 1 633 0
 169 00f2 7B6B     	 ldr r3,[r7,#52]
 170 00f4 002B     	 cmp r3,#0
 171 00f6 BFD1     	 bne .L3
 657:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 658:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 659:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Store the updated state variables back into the pState array */
 660:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn1;
 172              	 .loc 1 660 0
 173 00f8 FB6C     	 ldr r3,[r7,#76]
 174 00fa 1A1D     	 adds r2,r3,#4
 175 00fc FA64     	 str r2,[r7,#76]
 176 00fe 7A6C     	 ldr r2,[r7,#68]
 177 0100 1A60     	 str r2,[r3]
 661:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn2;
 178              	 .loc 1 661 0
 179 0102 FB6C     	 ldr r3,[r7,#76]
 180 0104 1A1D     	 adds r2,r3,#4
 181 0106 FA64     	 str r2,[r7,#76]
 182 0108 3A6C     	 ldr r2,[r7,#64]
 183 010a 1A60     	 str r2,[r3]
 662:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn1;
 184              	 .loc 1 662 0
 185 010c FB6C     	 ldr r3,[r7,#76]
 186 010e 1A1D     	 adds r2,r3,#4
 187 0110 FA64     	 str r2,[r7,#76]
 188 0112 FA6B     	 ldr r2,[r7,#60]
 189 0114 1A60     	 str r2,[r3]
 663:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn2;
 190              	 .loc 1 663 0
 191 0116 FB6C     	 ldr r3,[r7,#76]
 192 0118 1A1D     	 adds r2,r3,#4
 193 011a FA64     	 str r2,[r7,#76]
 194 011c BA6B     	 ldr r2,[r7,#56]
 195 011e 1A60     	 str r2,[r3]
 664:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 665:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* The first stage goes from the input buffer to the output buffer. */
 666:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Subsequent numStages occur in-place in the output buffer */
 667:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pIn = pDst;
 196              	 .loc 1 667 0
 197 0120 7B68     	 ldr r3,[r7,#4]
 198 0122 7B65     	 str r3,[r7,#84]
 668:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 669:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reset output pointer */
 670:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pOut = pDst;
 199              	 .loc 1 670 0
 200 0124 7B68     	 ldr r3,[r7,#4]
 201 0126 3B65     	 str r3,[r7,#80]
 671:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 672:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* decrement loop counter */
 673:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     stage--;
 202              	 .loc 1 673 0
 203 0128 3B6B     	 ldr r3,[r7,#48]
 204 012a 013B     	 subs r3,r3,#1
 205 012c 3B63     	 str r3,[r7,#48]
 674:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 675:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   } while (stage > 0U);
 206              	 .loc 1 675 0
 207 012e 3B6B     	 ldr r3,[r7,#48]
 208 0130 002B     	 cmp r3,#0
 209 0132 7FF479AF 	 bne .L4
 676:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 677:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** }
 210              	 .loc 1 677 0
 211 0136 5C37     	 adds r7,r7,#92
 212              	.LCFI3:
 213              	 .cfi_def_cfa_offset 4
 214 0138 BD46     	 mov sp,r7
 215              	.LCFI4:
 216              	 .cfi_def_cfa_register 13
 217              	 
 218 013a 5DF8047B 	 ldr r7,[sp],#4
 219              	.LCFI5:
 220              	 .cfi_restore 7
 221              	 .cfi_def_cfa_offset 0
 222 013e 7047     	 bx lr
 223              	 .cfi_endproc
 224              	.LFE149:
 226              	 .text
 227              	.Letext0:
 228              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 229              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 230              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 231              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_biquad_cascade_df1_f32.c
    {standard input}:20     .text.arm_biquad_cascade_df1_f32:00000000 $t
    {standard input}:25     .text.arm_biquad_cascade_df1_f32:00000000 arm_biquad_cascade_df1_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
