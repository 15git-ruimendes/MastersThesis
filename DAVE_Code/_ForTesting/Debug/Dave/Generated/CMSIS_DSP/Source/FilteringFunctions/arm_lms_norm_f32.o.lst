   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_lms_norm_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_lms_norm_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_lms_norm_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_lms_norm_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * Title:        arm_lms_norm_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * Description:  Processing function for the floating-point NLMS filter
   5:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @ingroup groupFilters
  33:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @defgroup LMS_NORM Normalized LMS Filters
  37:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  38:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   This set of functions implements a commonly used adaptive filter.
  39:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   It is related to the Least Mean Square (LMS) adaptive filter and includes an additional normaliza
  40:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   factor which increases the adaptation rate of the filter.
  41:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The CMSIS DSP Library contains normalized LMS filter functions that operate on Q15, Q31, and floa
  42:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   A normalized least mean square (NLMS) filter consists of two components as shown below.
  44:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The first component is a standard transversal or FIR filter.
  45:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The second component is a coefficient update mechanism.
  46:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The NLMS filter has two input signals.
  47:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The "input" feeds the FIR filter while the "reference input" corresponds to the desired output of
  48:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   That is, the FIR filter coefficients are updated so that the output of the FIR filter matches the
  49:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The filter coefficient update mechanism is based on the difference between the FIR filter output 
  50:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   This "error signal" tends towards zero as the filter adapts.
  51:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The NLMS processing functions accept the input and reference input signals and generate the filte
  52:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   \image html LMS.gif "Internal structure of the NLMS adaptive filter"
  53:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  54:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The functions operate on blocks of data and each call to the function processes
  55:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   <code>blockSize</code> samples through the filter.
  56:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   <code>pSrc</code> points to input signal, <code>pRef</code> points to reference signal,
  57:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   <code>pOut</code> points to output signal and <code>pErr</code> points to error signal.
  58:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   All arrays contain <code>blockSize</code> values.
  59:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  60:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The functions operate on a block-by-block basis.
  61:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   Internally, the filter coefficients <code>b[n]</code> are updated on a sample-by-sample basis.
  62:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   The convergence of the LMS filter is slower compared to the normalized LMS algorithm.
  63:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  64:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par            Algorithm
  65:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The output signal <code>y[n]</code> is computed by a standard FIR filter:
  66:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   <pre>
  67:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       y[n] = b[0] * x[n] + b[1] * x[n-1] + b[2] * x[n-2] + ...+ b[numTaps-1] * x[n-numTaps+1]
  68:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   </pre>
  69:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  70:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par
  71:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The error signal equals the difference between the reference signal <code>d[n]</
  72:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   <pre>
  73:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       e[n] = d[n] - y[n].
  74:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   </pre>
  75:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
  76:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par
  77:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    After each sample of the error signal is computed the instanteous energy of the 
  78:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   <pre>
  79:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****      E = x[n]^2 + x[n-1]^2 + ... + x[n-numTaps+1]^2.
  80:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   </pre>
  81:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The filter coefficients <code>b[k]</code> are then updated on a sample-by-sample
  82:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   <pre>
  83:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       b[k] = b[k] + e[n] * (mu/E) * x[n-k],  for k=0, 1, ..., numTaps-1
  84:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   </pre>
  85:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    where <code>mu</code> is the step size and controls the rate of coefficient conv
  86:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par
  87:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    In the APIs, <code>pCoeffs</code> points to a coefficient array of size <code>nu
  88:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    Coefficients are stored in time reversed order.
  89:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par
  90:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   <pre>
  91:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****      {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
  92:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   </pre>
  93:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par
  94:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    <code>pState</code> points to a state array of size <code>numTaps + blockSize - 
  95:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    Samples in the state buffer are stored in the order:
  96:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par
  97:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   <pre>
  98:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****      {x[n-numTaps+1], x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2]....x[0], x[1], ..., x[blockSize-
  99:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   </pre>
 100:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par
 101:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    Note that the length of the state buffer exceeds the length of the coefficient a
 102:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The increased state buffer length allows circular addressing, which is tradition
 103:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    to be avoided and yields a significant speed improvement.
 104:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The state variables are updated after each block of data is processed.
 105:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 106:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par            Instance Structure
 107:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The coefficients and state variables for a filter are stored together in an inst
 108:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    A separate instance structure must be defined for each filter and
 109:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    coefficient and state arrays cannot be shared among instances.
 110:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    There are separate instance structure declarations for each of the 3 supported d
 111:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 112:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par            Initialization Functions
 113:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    There is also an associated initialization function for each data type.
 114:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The initialization function performs the following operations:
 115:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    - Sets the values of the internal structure fields.
 116:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    - Zeros out the values in the state buffer.
 117:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    To do this manually without calling the init function, assign the follow subfiel
 118:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    numTaps, pCoeffs, mu, energy, x0, pState. Also set all of the values in pState t
 119:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    For Q7, Q15, and Q31 the following fields must also be initialized;
 120:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    recipTable, postShift
 121:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par
 122:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    Instance structure cannot be placed into a const data section and it is recommen
 123:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par            Fixed-Point Behavior
 124:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    Care must be taken when using the Q15 and Q31 versions of the normalised LMS fil
 125:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The following issues must be considered:
 126:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    - Scaling of coefficients
 127:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    - Overflow and saturation
 128:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 129:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par            Scaling of Coefficients (fixed point versions)
 130:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    Filter coefficients are represented as fractional values and
 131:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    coefficients are restricted to lie in the range <code>[-1 +1)</code>.
 132:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The fixed-point functions have an additional scaling parameter <code>postShift</
 133:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    At the output of the filter's accumulator is a shift register which shifts the r
 134:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    This essentially scales the filter coefficients by <code>2^postShift</code> and
 135:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    allows the filter coefficients to exceed the range <code>[+1 -1)</code>.
 136:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    The value of <code>postShift</code> is set by the user based on the expected gai
 137:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 138:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  @par            Overflow and Saturation (fixed point versions)
 139:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    Overflow and saturation behavior of the fixed-point Q15 and Q31 versions are
 140:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****                    described separately as part of the function specific documentation below.
 141:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  */
 142:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 143:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** /**
 144:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @addtogroup LMS_NORM
 145:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @{
 146:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  */
 147:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 148:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** /**
 149:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @brief         Processing function for floating-point normalized LMS filter.
 150:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @param[in]     S         points to an instance of the floating-point normalized LMS filter struct
 151:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @param[in]     pSrc      points to the block of input data
 152:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @param[in]     pRef      points to the block of reference data
 153:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @param[out]    pOut      points to the block of output data
 154:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @param[out]    pErr      points to the block of error data
 155:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @param[in]     blockSize number of samples to process
 156:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   @return        none
 157:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****  */
 158:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 159:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #if defined(ARM_MATH_NEON)
 160:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** void arm_lms_norm_f32(
 161:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   arm_lms_norm_instance_f32 * S,
 162:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   const float32_t * pSrc,
 163:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t * pRef,
 164:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t * pOut,
 165:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t * pErr,
 166:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   uint32_t blockSize)
 167:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** {
 168:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t *pState = S->pState;                 /* State pointer */
 169:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 170:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
 171:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient bu
 172:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t mu = S->mu;                          /* Adaptive factor */
 173:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 174:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   uint32_t tapCnt, blkCnt;                       /* Loop counters */
 175:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t energy;                              /* Energy of the input */
 176:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t sum, e, d;                           /* accumulator, error, reference data sample */
 177:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32_t w, x0, in;                           /* weight factor, temporary variable to hold input
 178:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 179:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32x4_t tempV, sumV, xV, bV;
 180:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   float32x2_t tempV2;
 181:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 182:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Initializations of error,  difference, Coefficient update */
 183:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   e = 0.0f;
 184:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   d = 0.0f;
 185:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   w = 0.0f;
 186:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 187:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   energy = S->energy;
 188:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   x0 = S->x0;
 189:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 190:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* S->pState points to buffer which contains previous frame (numTaps - 1) samples */
 191:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* pStateCurnt points to the location where the new input data should be written */
 192:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   pStateCurnt = &(S->pState[(numTaps - 1U)]);
 193:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 194:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Loop over blockSize number of values */
 195:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   blkCnt = blockSize;
 196:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 197:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   while (blkCnt > 0U)
 198:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   {
 199:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Copy the new input sample into the state buffer */
 200:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pStateCurnt++ = *pSrc;
 201:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 202:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize pState pointer */
 203:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     px = pState;
 204:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 205:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize coeff pointer */
 206:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     pb = (pCoeffs);
 207:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 208:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Read the sample from input buffer */
 209:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     in = *pSrc++;
 210:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 211:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Update the energy calculation */
 212:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     energy -= x0 * x0;
 213:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     energy += in * in;
 214:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 215:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Set the accumulator to zero */
 216:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     sum = 0.0f;
 217:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     sumV = vdupq_n_f32(0.0);
 218:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 219:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Process 4 taps at a time. */
 220:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps >> 2;
 221:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 222:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     while (tapCnt > 0U)
 223:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 224:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Perform the multiply-accumulate */
 225:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       xV = vld1q_f32(px);
 226:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       bV = vld1q_f32(pb);
 227:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       sumV = vmlaq_f32(sumV, xV, bV);
 228:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 229:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       px += 4; 
 230:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       pb += 4;
 231:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 232:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Decrement the loop counter */
 233:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       tapCnt--;
 234:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     }
 235:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tempV2 = vpadd_f32(vget_low_f32(sumV),vget_high_f32(sumV));
 236:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     sum = vget_lane_f32(tempV2, 0) + vget_lane_f32(tempV2, 1);
 237:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 238:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 239:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps % 0x4U;
 240:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 241:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     while (tapCnt > 0U)
 242:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 243:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Perform the multiply-accumulate */
 244:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       sum += (*px++) * (*pb++);
 245:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 246:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Decrement the loop counter */
 247:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       tapCnt--;
 248:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     }
 249:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 250:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* The result in the accumulator, store in the destination buffer. */
 251:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pOut++ = sum;
 252:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 253:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Compute and store error */
 254:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     d = (float32_t) (*pRef++);
 255:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     e = d - sum;
 256:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pErr++ = e;
 257:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 258:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Calculation of Weighting factor for updating filter coefficients */
 259:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* epsilon value 0.000000119209289f */
 260:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     w = (e * mu) / (energy + 0.000000119209289f);
 261:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 262:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize pState pointer */
 263:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     px = pState;
 264:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 265:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize coeff pointer */
 266:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     pb = (pCoeffs);
 267:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 268:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Process 4 taps at a time. */
 269:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps >> 2;
 270:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 271:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Update filter coefficients */
 272:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     while (tapCnt > 0U)
 273:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 274:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Perform the multiply-accumulate */
 275:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       xV = vld1q_f32(px);
 276:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       bV = vld1q_f32(pb);
 277:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       px += 4;
 278:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       bV = vmlaq_n_f32(bV,xV,w);
 279:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 280:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       vst1q_f32(pb,bV); 
 281:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       pb += 4;
 282:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 283:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 284:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Decrement the loop counter */
 285:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       tapCnt--;
 286:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     }
 287:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 288:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 289:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps % 0x4U;
 290:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 291:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     while (tapCnt > 0U)
 292:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 293:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Perform the multiply-accumulate */
 294:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       *pb += w * (*px++);
 295:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       pb++;
 296:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 297:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Decrement the loop counter */
 298:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       tapCnt--;
 299:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     }
 300:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 301:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     x0 = *pState;
 302:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 303:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Advance state pointer by 1 for the next sample */
 304:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     pState = pState + 1;
 305:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 306:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Decrement the loop counter */
 307:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     blkCnt--;
 308:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   }
 309:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 310:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   S->energy = energy;
 311:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   S->x0 = x0;
 312:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 313:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 314:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****      satrt of the state buffer. This prepares the state buffer for the
 315:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****      next function call. */
 316:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 317:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Points to the start of the pState buffer */
 318:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   pStateCurnt = S->pState;
 319:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 320:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Process 4 taps at a time for (numTaps - 1U)/4 samples copy */
 321:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   tapCnt = (numTaps - 1U) >> 2U;
 322:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 323:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* copy data */
 324:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   while (tapCnt > 0U)
 325:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   {
 326:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tempV = vld1q_f32(pState);
 327:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     vst1q_f32(pStateCurnt,tempV); 
 328:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     pState += 4;
 329:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     pStateCurnt += 4;
 330:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 331:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Decrement the loop counter */
 332:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt--;
 333:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   }
 334:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 335:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Calculate remaining number of copies */
 336:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   tapCnt = (numTaps - 1U) % 0x4U;
 337:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 338:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Copy the remaining q31_t data */
 339:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   while (tapCnt > 0U)
 340:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   {
 341:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pStateCurnt++ = *pState++;
 342:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 343:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Decrement the loop counter */
 344:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt--;
 345:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   }
 346:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 347:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** }
 348:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #else
 349:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** void arm_lms_norm_f32(
 350:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         arm_lms_norm_instance_f32 * S,
 351:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   const float32_t * pSrc,
 352:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t * pRef,
 353:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t * pOut,
 354:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t * pErr,
 355:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         uint32_t blockSize)
 356:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** {
  28              	 .loc 1 356 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 95B0     	 sub sp,sp,#84
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 88
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
 357:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t *pState = S->pState;                 /* State pointer */
  47              	 .loc 1 357 0
  48 000e FB68     	 ldr r3,[r7,#12]
  49 0010 5B68     	 ldr r3,[r3,#4]
  50 0012 FB64     	 str r3,[r7,#76]
 358:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
  51              	 .loc 1 358 0
  52 0014 FB68     	 ldr r3,[r7,#12]
  53 0016 9B68     	 ldr r3,[r3,#8]
  54 0018 BB62     	 str r3,[r7,#40]
 359:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t *pStateCurnt;                        /* Points to the current sample of the state
 360:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t *px, *pb;                            /* Temporary pointers for state and coeffici
 361:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t mu = S->mu;                          /* Adaptive factor */
  55              	 .loc 1 361 0
  56 001a FB68     	 ldr r3,[r7,#12]
  57 001c DB68     	 ldr r3,[r3,#12]
  58 001e 7B62     	 str r3,[r7,#36]
 362:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t acc, e;                              /* Accumulator, error */
 363:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t w;                                   /* Weight factor */
 364:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filt
  59              	 .loc 1 364 0
  60 0020 FB68     	 ldr r3,[r7,#12]
  61 0022 1B88     	 ldrh r3,[r3]
  62 0024 3B62     	 str r3,[r7,#32]
 365:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         uint32_t tapCnt, blkCnt;                       /* Loop counters */
 366:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t energy;                              /* Energy of the input */
 367:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****         float32_t x0, in;                              /* Temporary variable to hold input sample a
 368:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 369:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Initializations of error,  difference, Coefficient update */
 370:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   e = 0.0f;
  63              	 .loc 1 370 0
  64 0026 4FF00003 	 mov r3,#0
  65 002a FB61     	 str r3,[r7,#28]
 371:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   w = 0.0f;
  66              	 .loc 1 371 0
  67 002c 4FF00003 	 mov r3,#0
  68 0030 BB61     	 str r3,[r7,#24]
 372:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 373:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   energy = S->energy;
  69              	 .loc 1 373 0
  70 0032 FB68     	 ldr r3,[r7,#12]
  71 0034 1B69     	 ldr r3,[r3,#16]
  72 0036 3B63     	 str r3,[r7,#48]
 374:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   x0 = S->x0;
  73              	 .loc 1 374 0
  74 0038 FB68     	 ldr r3,[r7,#12]
  75 003a 5B69     	 ldr r3,[r3,#20]
  76 003c FB62     	 str r3,[r7,#44]
 375:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 376:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* S->pState points to buffer which contains previous frame (numTaps - 1) samples */
 377:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* pStateCurnt points to the location where the new input data should be written */
 378:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   pStateCurnt = &(S->pState[(numTaps - 1U)]);
  77              	 .loc 1 378 0
  78 003e FB68     	 ldr r3,[r7,#12]
  79 0040 5A68     	 ldr r2,[r3,#4]
  80 0042 3B6A     	 ldr r3,[r7,#32]
  81 0044 03F18043 	 add r3,r3,#1073741824
  82 0048 013B     	 subs r3,r3,#1
  83 004a 9B00     	 lsls r3,r3,#2
  84 004c 1344     	 add r3,r3,r2
  85 004e BB64     	 str r3,[r7,#72]
 379:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 380:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* initialise loop count */
 381:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   blkCnt = blockSize;
  86              	 .loc 1 381 0
  87 0050 FB6D     	 ldr r3,[r7,#92]
  88 0052 7B63     	 str r3,[r7,#52]
 382:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 383:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   while (blkCnt > 0U)
  89              	 .loc 1 383 0
  90 0054 93E0     	 b .L2
  91              	.L7:
 384:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   {
 385:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Copy the new input sample into the state buffer */
 386:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pStateCurnt++ = *pSrc;
  92              	 .loc 1 386 0
  93 0056 BB6C     	 ldr r3,[r7,#72]
  94 0058 1A1D     	 adds r2,r3,#4
  95 005a BA64     	 str r2,[r7,#72]
  96 005c BA68     	 ldr r2,[r7,#8]
  97 005e 1268     	 ldr r2,[r2]
  98 0060 1A60     	 str r2,[r3]
 387:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 388:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize pState pointer */
 389:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     px = pState;
  99              	 .loc 1 389 0
 100 0062 FB6C     	 ldr r3,[r7,#76]
 101 0064 7B64     	 str r3,[r7,#68]
 390:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 391:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize coefficient pointer */
 392:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     pb = pCoeffs;
 102              	 .loc 1 392 0
 103 0066 BB6A     	 ldr r3,[r7,#40]
 104 0068 3B64     	 str r3,[r7,#64]
 393:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 394:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Read the sample from input buffer */
 395:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     in = *pSrc++;
 105              	 .loc 1 395 0
 106 006a BB68     	 ldr r3,[r7,#8]
 107 006c 1A1D     	 adds r2,r3,#4
 108 006e BA60     	 str r2,[r7,#8]
 109 0070 1B68     	 ldr r3,[r3]
 110 0072 7B61     	 str r3,[r7,#20]
 396:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 397:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Update the energy calculation */
 398:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     energy -= x0 * x0;
 111              	 .loc 1 398 0
 112 0074 97ED0B7A 	 flds s14,[r7,#44]
 113 0078 D7ED0B7A 	 flds s15,[r7,#44]
 114 007c 67EE277A 	 fmuls s15,s14,s15
 115 0080 97ED0C7A 	 flds s14,[r7,#48]
 116 0084 77EE677A 	 fsubs s15,s14,s15
 117 0088 C7ED0C7A 	 fsts s15,[r7,#48]
 399:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     energy += in * in;
 118              	 .loc 1 399 0
 119 008c 97ED057A 	 flds s14,[r7,#20]
 120 0090 D7ED057A 	 flds s15,[r7,#20]
 121 0094 67EE277A 	 fmuls s15,s14,s15
 122 0098 97ED0C7A 	 flds s14,[r7,#48]
 123 009c 77EE277A 	 fadds s15,s14,s15
 124 00a0 C7ED0C7A 	 fsts s15,[r7,#48]
 400:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 401:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Set the accumulator to zero */
 402:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     acc = 0.0f;
 125              	 .loc 1 402 0
 126 00a4 4FF00003 	 mov r3,#0
 127 00a8 FB63     	 str r3,[r7,#60]
 403:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 404:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 405:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 406:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Loop unrolling: Compute 4 taps at a time. */
 407:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps >> 2U;
 408:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 409:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     while (tapCnt > 0U)
 410:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 411:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Perform the multiply-accumulate */
 412:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       acc += (*px++) * (*pb++);
 413:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 414:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       acc += (*px++) * (*pb++);
 415:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 416:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       acc += (*px++) * (*pb++);
 417:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 418:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       acc += (*px++) * (*pb++);
 419:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 420:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Decrement loop counter */
 421:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       tapCnt--;
 422:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     }
 423:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 424:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Loop unrolling: Compute remaining taps */
 425:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps % 0x4U;
 426:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 427:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #else
 428:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 429:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize tapCnt with number of samples */
 430:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps;
 128              	 .loc 1 430 0
 129 00aa 3B6A     	 ldr r3,[r7,#32]
 130 00ac BB63     	 str r3,[r7,#56]
 431:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 432:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 433:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 434:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     while (tapCnt > 0U)
 131              	 .loc 1 434 0
 132 00ae 14E0     	 b .L3
 133              	.L4:
 435:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 436:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Perform the multiply-accumulate */
 437:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       acc += (*px++) * (*pb++);
 134              	 .loc 1 437 0
 135 00b0 7B6C     	 ldr r3,[r7,#68]
 136 00b2 1A1D     	 adds r2,r3,#4
 137 00b4 7A64     	 str r2,[r7,#68]
 138 00b6 93ED007A 	 flds s14,[r3]
 139 00ba 3B6C     	 ldr r3,[r7,#64]
 140 00bc 1A1D     	 adds r2,r3,#4
 141 00be 3A64     	 str r2,[r7,#64]
 142 00c0 D3ED007A 	 flds s15,[r3]
 143 00c4 67EE277A 	 fmuls s15,s14,s15
 144 00c8 97ED0F7A 	 flds s14,[r7,#60]
 145 00cc 77EE277A 	 fadds s15,s14,s15
 146 00d0 C7ED0F7A 	 fsts s15,[r7,#60]
 438:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 439:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Decrement the loop counter */
 440:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       tapCnt--;
 147              	 .loc 1 440 0
 148 00d4 BB6B     	 ldr r3,[r7,#56]
 149 00d6 013B     	 subs r3,r3,#1
 150 00d8 BB63     	 str r3,[r7,#56]
 151              	.L3:
 434:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 152              	 .loc 1 434 0
 153 00da BB6B     	 ldr r3,[r7,#56]
 154 00dc 002B     	 cmp r3,#0
 155 00de E7D1     	 bne .L4
 441:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     }
 442:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 443:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Store the result from accumulator into the destination buffer. */
 444:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pOut++ = acc;
 156              	 .loc 1 444 0
 157 00e0 3B68     	 ldr r3,[r7]
 158 00e2 1A1D     	 adds r2,r3,#4
 159 00e4 3A60     	 str r2,[r7]
 160 00e6 FA6B     	 ldr r2,[r7,#60]
 161 00e8 1A60     	 str r2,[r3]
 445:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 446:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Compute and store error */
 447:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     e = (float32_t) *pRef++ - acc;
 162              	 .loc 1 447 0
 163 00ea 7B68     	 ldr r3,[r7,#4]
 164 00ec 1A1D     	 adds r2,r3,#4
 165 00ee 7A60     	 str r2,[r7,#4]
 166 00f0 93ED007A 	 flds s14,[r3]
 167 00f4 D7ED0F7A 	 flds s15,[r7,#60]
 168 00f8 77EE677A 	 fsubs s15,s14,s15
 169 00fc C7ED077A 	 fsts s15,[r7,#28]
 448:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pErr++ = e;
 170              	 .loc 1 448 0
 171 0100 BB6D     	 ldr r3,[r7,#88]
 172 0102 1A1D     	 adds r2,r3,#4
 173 0104 BA65     	 str r2,[r7,#88]
 174 0106 FA69     	 ldr r2,[r7,#28]
 175 0108 1A60     	 str r2,[r3]
 449:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 450:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Calculation of Weighting factor for updating filter coefficients */
 451:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* epsilon value 0.000000119209289f */
 452:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     w = (e * mu) / (energy + 0.000000119209289f);
 176              	 .loc 1 452 0
 177 010a 97ED077A 	 flds s14,[r7,#28]
 178 010e D7ED097A 	 flds s15,[r7,#36]
 179 0112 27EE277A 	 fmuls s14,s14,s15
 180 0116 D7ED0C7A 	 flds s15,[r7,#48]
 181 011a DFED2B6A 	 flds s13,.L10
 182 011e 77EEA67A 	 fadds s15,s15,s13
 183 0122 C7EE277A 	 fdivs s15,s14,s15
 184 0126 C7ED067A 	 fsts s15,[r7,#24]
 453:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 454:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize pState pointer */
 455:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     px = pState;
 185              	 .loc 1 455 0
 186 012a FB6C     	 ldr r3,[r7,#76]
 187 012c 7B64     	 str r3,[r7,#68]
 456:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 457:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize coefficient pointer */
 458:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     pb = pCoeffs;
 188              	 .loc 1 458 0
 189 012e BB6A     	 ldr r3,[r7,#40]
 190 0130 3B64     	 str r3,[r7,#64]
 459:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 460:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 461:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 462:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Loop unrolling: Compute 4 taps at a time. */
 463:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps >> 2U;
 464:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 465:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Update filter coefficients */
 466:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     while (tapCnt > 0U)
 467:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 468:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Perform the multiply-accumulate */
 469:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       *pb += w * (*px++);
 470:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       pb++;
 471:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 472:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       *pb += w * (*px++);
 473:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       pb++;
 474:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 475:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       *pb += w * (*px++);
 476:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       pb++;
 477:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 478:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       *pb += w * (*px++);
 479:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       pb++;
 480:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 481:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Decrement loop counter */
 482:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       tapCnt--;
 483:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     }
 484:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 485:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Loop unrolling: Compute remaining taps */
 486:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps % 0x4U;
 487:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 488:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #else
 489:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 490:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Initialize tapCnt with number of samples */
 491:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt = numTaps;
 191              	 .loc 1 491 0
 192 0132 3B6A     	 ldr r3,[r7,#32]
 193 0134 BB63     	 str r3,[r7,#56]
 492:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 493:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 494:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 495:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     while (tapCnt > 0U)
 194              	 .loc 1 495 0
 195 0136 16E0     	 b .L5
 196              	.L6:
 496:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 497:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Perform the multiply-accumulate */
 498:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       *pb += w * (*px++);
 197              	 .loc 1 498 0
 198 0138 7B6C     	 ldr r3,[r7,#68]
 199 013a 1A1D     	 adds r2,r3,#4
 200 013c 7A64     	 str r2,[r7,#68]
 201 013e 93ED007A 	 flds s14,[r3]
 202 0142 D7ED067A 	 flds s15,[r7,#24]
 203 0146 67EE277A 	 fmuls s15,s14,s15
 204 014a 3B6C     	 ldr r3,[r7,#64]
 205 014c 93ED007A 	 flds s14,[r3]
 206 0150 77EE277A 	 fadds s15,s14,s15
 207 0154 3B6C     	 ldr r3,[r7,#64]
 208 0156 C3ED007A 	 fsts s15,[r3]
 499:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       pb++;
 209              	 .loc 1 499 0
 210 015a 3B6C     	 ldr r3,[r7,#64]
 211 015c 0433     	 adds r3,r3,#4
 212 015e 3B64     	 str r3,[r7,#64]
 500:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 501:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       /* Decrement loop counter */
 502:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****       tapCnt--;
 213              	 .loc 1 502 0
 214 0160 BB6B     	 ldr r3,[r7,#56]
 215 0162 013B     	 subs r3,r3,#1
 216 0164 BB63     	 str r3,[r7,#56]
 217              	.L5:
 495:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     {
 218              	 .loc 1 495 0
 219 0166 BB6B     	 ldr r3,[r7,#56]
 220 0168 002B     	 cmp r3,#0
 221 016a E5D1     	 bne .L6
 503:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     }
 504:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 505:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     x0 = *pState;
 222              	 .loc 1 505 0
 223 016c FB6C     	 ldr r3,[r7,#76]
 224 016e 1B68     	 ldr r3,[r3]
 225 0170 FB62     	 str r3,[r7,#44]
 506:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 507:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Advance state pointer by 1 for the next sample */
 508:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     pState = pState + 1;
 226              	 .loc 1 508 0
 227 0172 FB6C     	 ldr r3,[r7,#76]
 228 0174 0433     	 adds r3,r3,#4
 229 0176 FB64     	 str r3,[r7,#76]
 509:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 510:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Decrement loop counter */
 511:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     blkCnt--;
 230              	 .loc 1 511 0
 231 0178 7B6B     	 ldr r3,[r7,#52]
 232 017a 013B     	 subs r3,r3,#1
 233 017c 7B63     	 str r3,[r7,#52]
 234              	.L2:
 383:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   {
 235              	 .loc 1 383 0
 236 017e 7B6B     	 ldr r3,[r7,#52]
 237 0180 002B     	 cmp r3,#0
 238 0182 7FF468AF 	 bne .L7
 512:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   }
 513:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 514:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Save energy and x0 values for the next frame */
 515:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   S->energy = energy;
 239              	 .loc 1 515 0
 240 0186 FB68     	 ldr r3,[r7,#12]
 241 0188 3A6B     	 ldr r2,[r7,#48]
 242 018a 1A61     	 str r2,[r3,#16]
 516:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   S->x0 = x0;
 243              	 .loc 1 516 0
 244 018c FB68     	 ldr r3,[r7,#12]
 245 018e FA6A     	 ldr r2,[r7,#44]
 246 0190 5A61     	 str r2,[r3,#20]
 517:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 518:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Processing is complete.
 519:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****      Now copy the last numTaps - 1 samples to the start of the state buffer.
 520:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****      This prepares the state buffer for the next function call. */
 521:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 522:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Points to the start of the pState buffer */
 523:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   pStateCurnt = S->pState;
 247              	 .loc 1 523 0
 248 0192 FB68     	 ldr r3,[r7,#12]
 249 0194 5B68     	 ldr r3,[r3,#4]
 250 0196 BB64     	 str r3,[r7,#72]
 524:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 525:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* copy data */
 526:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 527:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 528:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Loop unrolling: Compute 4 taps at a time. */
 529:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   tapCnt = (numTaps - 1U) >> 2U;
 530:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 531:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   while (tapCnt > 0U)
 532:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   {
 533:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pStateCurnt++ = *pState++;
 534:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pStateCurnt++ = *pState++;
 535:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pStateCurnt++ = *pState++;
 536:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pStateCurnt++ = *pState++;
 537:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 538:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Decrement loop counter */
 539:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt--;
 540:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   }
 541:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 542:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Loop unrolling: Compute remaining taps */
 543:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   tapCnt = (numTaps - 1U) % 0x4U;
 544:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 545:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #else
 546:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 547:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   /* Initialize tapCnt with number of samples */
 548:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   tapCnt = (numTaps - 1U);
 251              	 .loc 1 548 0
 252 0198 3B6A     	 ldr r3,[r7,#32]
 253 019a 013B     	 subs r3,r3,#1
 254 019c BB63     	 str r3,[r7,#56]
 549:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 550:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 551:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 552:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   while (tapCnt > 0U)
 255              	 .loc 1 552 0
 256 019e 0AE0     	 b .L8
 257              	.L9:
 553:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   {
 554:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     *pStateCurnt++ = *pState++;
 258              	 .loc 1 554 0
 259 01a0 BB6C     	 ldr r3,[r7,#72]
 260 01a2 1A1D     	 adds r2,r3,#4
 261 01a4 BA64     	 str r2,[r7,#72]
 262 01a6 FA6C     	 ldr r2,[r7,#76]
 263 01a8 111D     	 adds r1,r2,#4
 264 01aa F964     	 str r1,[r7,#76]
 265 01ac 1268     	 ldr r2,[r2]
 266 01ae 1A60     	 str r2,[r3]
 555:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 556:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     /* Decrement loop counter */
 557:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****     tapCnt--;
 267              	 .loc 1 557 0
 268 01b0 BB6B     	 ldr r3,[r7,#56]
 269 01b2 013B     	 subs r3,r3,#1
 270 01b4 BB63     	 str r3,[r7,#56]
 271              	.L8:
 552:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   {
 272              	 .loc 1 552 0
 273 01b6 BB6B     	 ldr r3,[r7,#56]
 274 01b8 002B     	 cmp r3,#0
 275 01ba F1D1     	 bne .L9
 558:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c ****   }
 559:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** 
 560:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_lms_norm_f32.c **** }
 276              	 .loc 1 560 0
 277 01bc 5437     	 adds r7,r7,#84
 278              	.LCFI3:
 279              	 .cfi_def_cfa_offset 4
 280 01be BD46     	 mov sp,r7
 281              	.LCFI4:
 282              	 .cfi_def_cfa_register 13
 283              	 
 284 01c0 5DF8047B 	 ldr r7,[sp],#4
 285              	.LCFI5:
 286              	 .cfi_restore 7
 287              	 .cfi_def_cfa_offset 0
 288 01c4 7047     	 bx lr
 289              	.L11:
 290 01c6 00BF     	 .align 2
 291              	.L10:
 292 01c8 00000034 	 .word 872415232
 293              	 .cfi_endproc
 294              	.LFE149:
 296              	 .text
 297              	.Letext0:
 298              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 299              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 300              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 301              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_lms_norm_f32.c
    {standard input}:20     .text.arm_lms_norm_f32:00000000 $t
    {standard input}:25     .text.arm_lms_norm_f32:00000000 arm_lms_norm_f32
    {standard input}:292    .text.arm_lms_norm_f32:000001c8 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
