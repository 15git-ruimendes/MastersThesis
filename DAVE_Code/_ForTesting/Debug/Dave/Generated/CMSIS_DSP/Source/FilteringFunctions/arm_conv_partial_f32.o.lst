   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_conv_partial_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_conv_partial_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_conv_partial_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_conv_partial_f32:
  26              	.LFB149:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c"
   1:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * Title:        arm_conv_partial_f32.c
   4:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * Description:  Partial convolution of floating-point sequences
   5:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * $Date:        18. March 2019
   7:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * $Revision:    V1.6.0
   8:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @ingroup groupFilters
  33:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @defgroup PartialConv Partial Convolution
  37:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  38:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   Partial Convolution is equivalent to Convolution except that a subset of the output samples is ge
  39:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   Each function has two additional arguments.
  40:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   <code>firstIndex</code> specifies the starting index of the subset of output samples.
  41:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   <code>numPoints</code> is the number of output samples to compute.
  42:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   The function computes the output in the range
  43:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   <code>[firstIndex, ..., firstIndex+numPoints-1]</code>.
  44:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   The output array <code>pDst</code> contains <code>numPoints</code> values.
  45:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  46:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   The allowable range of output indices is [0 srcALen+srcBLen-2].
  47:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   If the requested subset does not fall in this range then the functions return ARM_MATH_ARGUMENT_E
  48:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   Otherwise the functions return ARM_MATH_SUCCESS.
  49:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   \note Refer to \ref arm_conv_f32() for details on fixed point behavior.
  50:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  51:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @par           Fast Versions
  52:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****                    Fast versions are supported for Q31 and Q15 of partial convolution.
  53:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****                    Cycles for Fast versions are less compared to Q31 and Q15 of partial conv and th
  54:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****                    the input signals should be scaled down to avoid intermediate overflows.
  55:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  56:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @par           Opt Versions
  57:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****                    Opt versions are supported for Q15 and Q7. Design uses internal scratch buffer f
  58:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****                    These versions are optimised in cycles and consumes more memory (Scratch memory)
  59:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  */
  60:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  61:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** /**
  62:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @addtogroup PartialConv
  63:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @{
  64:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  */
  65:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  66:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** /**
  67:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @brief         Partial convolution of floating-point sequences.
  68:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @param[in]     pSrcA       points to the first input sequence
  69:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @param[in]     srcALen     length of the first input sequence
  70:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @param[in]     pSrcB       points to the second input sequence
  71:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @param[in]     srcBLen     length of the second input sequence
  72:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @param[out]    pDst        points to the location where the output result is written
  73:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @param[in]     firstIndex  is the first output sample to start with
  74:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @param[in]     numPoints   is the number of output points to be computed
  75:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   @return        execution status
  76:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****                    - \ref ARM_MATH_SUCCESS        : Operation successful
  77:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****                    - \ref ARM_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen
  78:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****  */
  79:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
  80:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** arm_status arm_conv_partial_f32(
  81:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   const float32_t * pSrcA,
  82:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         uint32_t srcALen,
  83:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   const float32_t * pSrcB,
  84:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         uint32_t srcBLen,
  85:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         float32_t * pDst,
  86:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         uint32_t firstIndex,
  87:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         uint32_t numPoints)
  88:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** {
  28              	 .loc 1 88 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 97B0     	 sub sp,sp,#92
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 96
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
  89:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #if defined (ARM_MATH_DSP)
  90:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   const float32_t *pIn1 = pSrcA;                       /* InputA pointer */
  47              	 .loc 1 90 0
  48 000e FB68     	 ldr r3,[r7,#12]
  49 0010 7B65     	 str r3,[r7,#84]
  91:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   const float32_t *pIn2 = pSrcB;                       /* InputB pointer */
  50              	 .loc 1 91 0
  51 0012 7B68     	 ldr r3,[r7,#4]
  52 0014 3B65     	 str r3,[r7,#80]
  92:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         float32_t *pOut = pDst;                        /* Output pointer */
  53              	 .loc 1 92 0
  54 0016 3B6E     	 ldr r3,[r7,#96]
  55 0018 FB64     	 str r3,[r7,#76]
  93:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   const float32_t *px;                                 /* Intermediate inputA pointer */
  94:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   const float32_t *py;                                 /* Intermediate inputB pointer */
  95:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   const float32_t *pSrc1, *pSrc2;                      /* Intermediate pointers */
  96:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         float32_t sum;                                 /* Accumulator */
  97:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         uint32_t j, k, count, blkCnt, check;
  98:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         uint32_t blockSize1, blockSize2, blockSize3;    /* Loop counters */
  99:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         arm_status status;                             /* Status of Partial convolution */
 100:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 101:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 102:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         float32_t acc0, acc1, acc2, acc3;              /* Accumulator */
 103:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         float32_t x0, x1, x2, x3, c0;                  /* Temporary variables */
 104:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #endif
 105:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 106:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   /* Check for range of output samples to be calculated */
 107:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1U))))
  56              	 .loc 1 107 0
  57 001a 7A6E     	 ldr r2,[r7,#100]
  58 001c BB6E     	 ldr r3,[r7,#104]
  59 001e 1A44     	 add r2,r2,r3
  60 0020 3968     	 ldr r1,[r7]
  61 0022 BB68     	 ldr r3,[r7,#8]
  62 0024 0B44     	 add r3,r3,r1
  63 0026 013B     	 subs r3,r3,#1
  64 0028 9A42     	 cmp r2,r3
  65 002a 03D9     	 bls .L2
 108:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   {
 109:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Set status as ARM_MATH_ARGUMENT_ERROR */
 110:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_ARGUMENT_ERROR;
  66              	 .loc 1 110 0
  67 002c FF23     	 movs r3,#255
  68 002e 87F82730 	 strb r3,[r7,#39]
  69 0032 6AE1     	 b .L3
  70              	.L2:
 111:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   }
 112:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   else
 113:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   {
 114:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* The algorithm implementation is based on the lengths of the inputs. */
 115:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* srcB is always made to slide across srcA. */
 116:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* So srcBLen is always considered as shorter or equal to srcALen */
 117:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     if (srcALen >= srcBLen)
  71              	 .loc 1 117 0
  72 0034 BA68     	 ldr r2,[r7,#8]
  73 0036 3B68     	 ldr r3,[r7]
  74 0038 9A42     	 cmp r2,r3
  75 003a 04D3     	 bcc .L4
 118:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 119:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputA pointer */
 120:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       pIn1 = pSrcA;
  76              	 .loc 1 120 0
  77 003c FB68     	 ldr r3,[r7,#12]
  78 003e 7B65     	 str r3,[r7,#84]
 121:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputB pointer */
 123:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       pIn2 = pSrcB;
  79              	 .loc 1 123 0
  80 0040 7B68     	 ldr r3,[r7,#4]
  81 0042 3B65     	 str r3,[r7,#80]
  82 0044 09E0     	 b .L5
  83              	.L4:
 124:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     }
 125:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     else
 126:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 127:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputA pointer */
 128:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       pIn1 = pSrcB;
  84              	 .loc 1 128 0
  85 0046 7B68     	 ldr r3,[r7,#4]
  86 0048 7B65     	 str r3,[r7,#84]
 129:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 130:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputB pointer */
 131:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       pIn2 = pSrcA;
  87              	 .loc 1 131 0
  88 004a FB68     	 ldr r3,[r7,#12]
  89 004c 3B65     	 str r3,[r7,#80]
 132:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 133:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* srcBLen is always considered as shorter or equal to srcALen */
 134:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       j = srcBLen;
  90              	 .loc 1 134 0
  91 004e 3B68     	 ldr r3,[r7]
  92 0050 3B62     	 str r3,[r7,#32]
 135:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       srcBLen = srcALen;
  93              	 .loc 1 135 0
  94 0052 BB68     	 ldr r3,[r7,#8]
  95 0054 3B60     	 str r3,[r7]
 136:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       srcALen = j;
  96              	 .loc 1 136 0
  97 0056 3B6A     	 ldr r3,[r7,#32]
  98 0058 BB60     	 str r3,[r7,#8]
  99              	.L5:
 137:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     }
 138:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 139:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Conditions to check which loopCounter holds
 140:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * the first and last indices of the output samples to be calculated. */
 141:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     check = firstIndex + numPoints;
 100              	 .loc 1 141 0
 101 005a 7A6E     	 ldr r2,[r7,#100]
 102 005c BB6E     	 ldr r3,[r7,#104]
 103 005e 1344     	 add r3,r3,r2
 104 0060 FB61     	 str r3,[r7,#28]
 142:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
 105              	 .loc 1 142 0
 106 0062 FA69     	 ldr r2,[r7,#28]
 107 0064 BB68     	 ldr r3,[r7,#8]
 108 0066 9A42     	 cmp r2,r3
 109 0068 03DD     	 ble .L6
 110              	 .loc 1 142 0 is_stmt 0 discriminator 1
 111 006a FA69     	 ldr r2,[r7,#28]
 112 006c BB68     	 ldr r3,[r7,#8]
 113 006e D31A     	 subs r3,r2,r3
 114 0070 00E0     	 b .L7
 115              	.L6:
 116              	 .loc 1 142 0 discriminator 2
 117 0072 0023     	 movs r3,#0
 118              	.L7:
 119              	 .loc 1 142 0 discriminator 4
 120 0074 BB62     	 str r3,[r7,#40]
 143:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + 
 121              	 .loc 1 143 0 is_stmt 1 discriminator 4
 122 0076 7A6E     	 ldr r2,[r7,#100]
 123 0078 BB68     	 ldr r3,[r7,#8]
 124 007a 013B     	 subs r3,r3,#1
 125 007c 9A42     	 cmp r2,r3
 126 007e 05DD     	 ble .L8
 127              	 .loc 1 143 0 is_stmt 0 discriminator 1
 128 0080 BA6A     	 ldr r2,[r7,#40]
 129 0082 7B6E     	 ldr r3,[r7,#100]
 130 0084 D21A     	 subs r2,r2,r3
 131 0086 BB68     	 ldr r3,[r7,#8]
 132 0088 1344     	 add r3,r3,r2
 133 008a 00E0     	 b .L9
 134              	.L8:
 135              	 .loc 1 143 0 discriminator 2
 136 008c BB6A     	 ldr r3,[r7,#40]
 137              	.L9:
 138              	 .loc 1 143 0 discriminator 4
 139 008e BB62     	 str r3,[r7,#40]
 144:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize1 = ((int32_t) srcBLen - 1) - (int32_t) firstIndex;
 140              	 .loc 1 144 0 is_stmt 1 discriminator 4
 141 0090 3A68     	 ldr r2,[r7]
 142 0092 7B6E     	 ldr r3,[r7,#100]
 143 0094 D31A     	 subs r3,r2,r3
 144 0096 013B     	 subs r3,r3,#1
 145 0098 FB62     	 str r3,[r7,#44]
 145:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1U)) ? blockSize1 : numPoints) : 0;
 146              	 .loc 1 145 0 discriminator 4
 147 009a FB6A     	 ldr r3,[r7,#44]
 148 009c 002B     	 cmp r3,#0
 149 009e 08D0     	 beq .L10
 150              	 .loc 1 145 0 is_stmt 0 discriminator 1
 151 00a0 3B68     	 ldr r3,[r7]
 152 00a2 5A1E     	 subs r2,r3,#1
 153 00a4 FB69     	 ldr r3,[r7,#28]
 154 00a6 9A42     	 cmp r2,r3
 155 00a8 01D2     	 bcs .L11
 156              	 .loc 1 145 0 discriminator 3
 157 00aa FB6A     	 ldr r3,[r7,#44]
 158 00ac 02E0     	 b .L13
 159              	.L11:
 160              	 .loc 1 145 0 discriminator 4
 161 00ae BB6E     	 ldr r3,[r7,#104]
 162 00b0 00E0     	 b .L13
 163              	.L10:
 164              	 .loc 1 145 0 discriminator 2
 165 00b2 0023     	 movs r3,#0
 166              	.L13:
 167              	 .loc 1 145 0 discriminator 8
 168 00b4 FB62     	 str r3,[r7,#44]
 146:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize2 = ((int32_t) check - blockSize3) - (blockSize1 + (int32_t) firstIndex);
 169              	 .loc 1 146 0 is_stmt 1 discriminator 8
 170 00b6 FA69     	 ldr r2,[r7,#28]
 171 00b8 BB6A     	 ldr r3,[r7,#40]
 172 00ba D21A     	 subs r2,r2,r3
 173 00bc F96A     	 ldr r1,[r7,#44]
 174 00be 7B6E     	 ldr r3,[r7,#100]
 175 00c0 0B44     	 add r3,r3,r1
 176 00c2 D31A     	 subs r3,r2,r3
 177 00c4 BB61     	 str r3,[r7,#24]
 147:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
 148:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 149:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
 150:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* The function is internally
 151:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * divided into three stages according to the number of multiplications that has to be
 152:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * taken place between inputA samples and inputB samples. In the first stage of the
 153:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * algorithm, the multiplications increase by one for every iteration.
 154:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * In the second stage of the algorithm, srcBLen number of multiplications are done.
 155:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * In the third stage of the algorithm, the multiplications decrease by one
 156:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * for every iteration. */
 157:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 158:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Set the output pointer to point to the firstIndex
 159:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * of the output sample to be calculated. */
 160:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     pOut = pDst + firstIndex;
 178              	 .loc 1 160 0 discriminator 8
 179 00c6 7B6E     	 ldr r3,[r7,#100]
 180 00c8 9B00     	 lsls r3,r3,#2
 181 00ca 3A6E     	 ldr r2,[r7,#96]
 182 00cc 1344     	 add r3,r3,r2
 183 00ce FB64     	 str r3,[r7,#76]
 161:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 162:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* --------------------------
 163:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * Initializations of stage1
 164:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * -------------------------*/
 165:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 166:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* sum = x[0] * y[0]
 167:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[0] * y[1] + x[1] * y[0]
 168:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * ....
 169:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
 170:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      */
 171:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 172:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* In this stage the MAC operations are increased by 1 for every iteration.
 173:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****        The count variable holds the number of MAC operations performed.
 174:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****        Since the partial convolution starts from firstIndex
 175:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****        Number of Macs to be performed is firstIndex + 1 */
 176:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     count = 1U + firstIndex;
 184              	 .loc 1 176 0 discriminator 8
 185 00d0 7B6E     	 ldr r3,[r7,#100]
 186 00d2 0133     	 adds r3,r3,#1
 187 00d4 7B63     	 str r3,[r7,#52]
 177:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 178:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputA */
 179:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     px = pIn1;
 188              	 .loc 1 179 0 discriminator 8
 189 00d6 7B6D     	 ldr r3,[r7,#84]
 190 00d8 BB64     	 str r3,[r7,#72]
 180:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 181:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputB */
 182:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     pSrc1 = pIn2 + firstIndex;
 191              	 .loc 1 182 0 discriminator 8
 192 00da 7B6E     	 ldr r3,[r7,#100]
 193 00dc 9B00     	 lsls r3,r3,#2
 194 00de 3A6D     	 ldr r2,[r7,#80]
 195 00e0 1344     	 add r3,r3,r2
 196 00e2 3B64     	 str r3,[r7,#64]
 183:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc1;
 197              	 .loc 1 183 0 discriminator 8
 198 00e4 3B6C     	 ldr r3,[r7,#64]
 199 00e6 7B64     	 str r3,[r7,#68]
 184:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 185:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* ------------------------
 186:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * Stage1 process
 187:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * ----------------------*/
 188:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 189:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* The first stage starts here */
 190:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     while (blockSize1 > 0U)
 200              	 .loc 1 190 0 discriminator 8
 201 00e8 2FE0     	 b .L14
 202              	.L17:
 191:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 192:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Accumulator is made zero for every iteration */
 193:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       sum = 0.0f;
 203              	 .loc 1 193 0
 204 00ea 4FF00003 	 mov r3,#0
 205 00ee FB63     	 str r3,[r7,#60]
 194:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 195:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 196:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 197:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop unrolling: Compute 4 outputs at a time */
 198:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       k = count >> 2U;
 199:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 200:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0U)
 201:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 202:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* x[0] * y[srcBLen - 1] */
 203:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 204:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 205:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* x[1] * y[srcBLen - 2] */
 206:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 207:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 208:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* x[2] * y[srcBLen - 3] */
 209:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 210:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 211:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* x[3] * y[srcBLen - 4] */
 212:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 213:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 214:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement loop counter */
 215:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 216:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       }
 217:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 218:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop unrolling: Compute remaining outputs */
 219:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       k = count % 0x4U;
 220:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 221:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #else
 222:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 223:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialize k with number of samples */
 224:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       k = count;
 206              	 .loc 1 224 0
 207 00f0 7B6B     	 ldr r3,[r7,#52]
 208 00f2 BB63     	 str r3,[r7,#56]
 225:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 226:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 227:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 228:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0U)
 209              	 .loc 1 228 0
 210 00f4 14E0     	 b .L15
 211              	.L16:
 229:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 230:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Perform the multiply-accumulate */
 231:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 212              	 .loc 1 231 0
 213 00f6 BB6C     	 ldr r3,[r7,#72]
 214 00f8 1A1D     	 adds r2,r3,#4
 215 00fa BA64     	 str r2,[r7,#72]
 216 00fc 93ED007A 	 flds s14,[r3]
 217 0100 7B6C     	 ldr r3,[r7,#68]
 218 0102 1A1F     	 subs r2,r3,#4
 219 0104 7A64     	 str r2,[r7,#68]
 220 0106 D3ED007A 	 flds s15,[r3]
 221 010a 67EE277A 	 fmuls s15,s14,s15
 222 010e 97ED0F7A 	 flds s14,[r7,#60]
 223 0112 77EE277A 	 fadds s15,s14,s15
 224 0116 C7ED0F7A 	 fsts s15,[r7,#60]
 232:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 233:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement loop counter */
 234:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 225              	 .loc 1 234 0
 226 011a BB6B     	 ldr r3,[r7,#56]
 227 011c 013B     	 subs r3,r3,#1
 228 011e BB63     	 str r3,[r7,#56]
 229              	.L15:
 228:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 230              	 .loc 1 228 0
 231 0120 BB6B     	 ldr r3,[r7,#56]
 232 0122 002B     	 cmp r3,#0
 233 0124 E7D1     	 bne .L16
 235:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       }
 236:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 237:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 238:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       *pOut++ = sum;
 234              	 .loc 1 238 0
 235 0126 FB6C     	 ldr r3,[r7,#76]
 236 0128 1A1D     	 adds r2,r3,#4
 237 012a FA64     	 str r2,[r7,#76]
 238 012c FA6B     	 ldr r2,[r7,#60]
 239 012e 1A60     	 str r2,[r3]
 239:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 240:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 241:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       py = ++pSrc1;
 240              	 .loc 1 241 0
 241 0130 3B6C     	 ldr r3,[r7,#64]
 242 0132 0433     	 adds r3,r3,#4
 243 0134 3B64     	 str r3,[r7,#64]
 244 0136 3B6C     	 ldr r3,[r7,#64]
 245 0138 7B64     	 str r3,[r7,#68]
 242:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       px = pIn1;
 246              	 .loc 1 242 0
 247 013a 7B6D     	 ldr r3,[r7,#84]
 248 013c BB64     	 str r3,[r7,#72]
 243:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 244:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Increment MAC count */
 245:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       count++;
 249              	 .loc 1 245 0
 250 013e 7B6B     	 ldr r3,[r7,#52]
 251 0140 0133     	 adds r3,r3,#1
 252 0142 7B63     	 str r3,[r7,#52]
 246:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 247:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Decrement loop counter */
 248:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       blockSize1--;
 253              	 .loc 1 248 0
 254 0144 FB6A     	 ldr r3,[r7,#44]
 255 0146 013B     	 subs r3,r3,#1
 256 0148 FB62     	 str r3,[r7,#44]
 257              	.L14:
 190:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 258              	 .loc 1 190 0
 259 014a FB6A     	 ldr r3,[r7,#44]
 260 014c 002B     	 cmp r3,#0
 261 014e CCD1     	 bne .L17
 249:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     }
 250:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 251:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* --------------------------
 252:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * Initializations of stage2
 253:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * ------------------------*/
 254:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 255:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]
 256:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]
 257:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * ....
 258:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y
 259:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      */
 260:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 261:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputA */
 262:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     if ((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
 262              	 .loc 1 262 0
 263 0150 7A6E     	 ldr r2,[r7,#100]
 264 0152 3B68     	 ldr r3,[r7]
 265 0154 D31A     	 subs r3,r2,r3
 266 0156 0133     	 adds r3,r3,#1
 267 0158 002B     	 cmp r3,#0
 268 015a 08DD     	 ble .L18
 263:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 264:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       pSrc1 = pIn1 + firstIndex - srcBLen + 1;
 269              	 .loc 1 264 0
 270 015c 7A6E     	 ldr r2,[r7,#100]
 271 015e 3B68     	 ldr r3,[r7]
 272 0160 D31A     	 subs r3,r2,r3
 273 0162 0133     	 adds r3,r3,#1
 274 0164 9B00     	 lsls r3,r3,#2
 275 0166 7A6D     	 ldr r2,[r7,#84]
 276 0168 1344     	 add r3,r3,r2
 277 016a 3B64     	 str r3,[r7,#64]
 278 016c 01E0     	 b .L19
 279              	.L18:
 265:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     }
 266:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     else
 267:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 268:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       pSrc1 = pIn1;
 280              	 .loc 1 268 0
 281 016e 7B6D     	 ldr r3,[r7,#84]
 282 0170 3B64     	 str r3,[r7,#64]
 283              	.L19:
 269:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     }
 270:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     px = pSrc1;
 284              	 .loc 1 270 0
 285 0172 3B6C     	 ldr r3,[r7,#64]
 286 0174 BB64     	 str r3,[r7,#72]
 271:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 272:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputB */
 273:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     pSrc2 = pIn2 + (srcBLen - 1U);
 287              	 .loc 1 273 0
 288 0176 3B68     	 ldr r3,[r7]
 289 0178 03F18043 	 add r3,r3,#1073741824
 290 017c 013B     	 subs r3,r3,#1
 291 017e 9B00     	 lsls r3,r3,#2
 292 0180 3A6D     	 ldr r2,[r7,#80]
 293 0182 1344     	 add r3,r3,r2
 294 0184 7B61     	 str r3,[r7,#20]
 274:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc2;
 295              	 .loc 1 274 0
 296 0186 7B69     	 ldr r3,[r7,#20]
 297 0188 7B64     	 str r3,[r7,#68]
 275:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 276:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* count is index by which the pointer pIn1 to be incremented */
 277:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     count = 0U;
 298              	 .loc 1 277 0
 299 018a 0023     	 movs r3,#0
 300 018c 7B63     	 str r3,[r7,#52]
 278:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 279:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* -------------------
 280:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * Stage2 process
 281:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * ------------------*/
 282:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 283:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
 284:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * So, to loop unroll over blockSize2,
 285:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * srcBLen should be greater than or equal to 4 */
 286:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     if (srcBLen >= 4U)
 301              	 .loc 1 286 0
 302 018e 3B68     	 ldr r3,[r7]
 303 0190 032B     	 cmp r3,#3
 304 0192 36D9     	 bls .L20
 287:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 288:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 289:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 290:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop unrolling: Compute 4 outputs at a time */
 291:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = ((uint32_t) blockSize2 >> 2U);
 292:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 293:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       while (blkCnt > 0U)
 294:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 295:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Set all accumulators to zero */
 296:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         acc0 = 0.0f;
 297:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         acc1 = 0.0f;
 298:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         acc2 = 0.0f;
 299:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         acc3 = 0.0f;
 300:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 301:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* read x[0], x[1], x[2] samples */
 302:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         x0 = *px++;
 303:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         x1 = *px++;
 304:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         x2 = *px++;
 305:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 306:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 307:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen >> 2U;
 308:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 309:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 310:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 311:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         do
 312:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         {
 313:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 1] sample */
 314:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *py--;
 315:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[3] sample */
 316:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           x3 = *px++;
 317:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 318:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 319:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[0] * y[srcBLen - 1] */
 320:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x0 * c0;
 321:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[1] * y[srcBLen - 1] */
 322:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x1 * c0;
 323:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[2] * y[srcBLen - 1] */
 324:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x2 * c0;
 325:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[3] * y[srcBLen - 1] */
 326:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x3 * c0;
 327:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 328:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 2] sample */
 329:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *py--;
 330:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[4] sample */
 331:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           x0 = *px++;
 332:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 333:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 334:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[1] * y[srcBLen - 2] */
 335:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x1 * c0;
 336:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[2] * y[srcBLen - 2] */
 337:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x2 * c0;
 338:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[3] * y[srcBLen - 2] */
 339:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x3 * c0;
 340:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[4] * y[srcBLen - 2] */
 341:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x0 * c0;
 342:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 343:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 3] sample */
 344:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *py--;
 345:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[5] sample */
 346:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           x1 = *px++;
 347:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 348:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 349:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[2] * y[srcBLen - 3] */
 350:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x2 * c0;
 351:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[3] * y[srcBLen - 2] */
 352:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x3 * c0;
 353:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[4] * y[srcBLen - 2] */
 354:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x0 * c0;
 355:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[5] * y[srcBLen - 2] */
 356:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x1 * c0;
 357:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 358:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 4] sample */
 359:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *py--;
 360:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[6] sample */
 361:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           x2 = *px++;
 362:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 363:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 364:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[3] * y[srcBLen - 4] */
 365:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x3 * c0;
 366:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[4] * y[srcBLen - 4] */
 367:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x0 * c0;
 368:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[5] * y[srcBLen - 4] */
 369:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x1 * c0;
 370:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[6] * y[srcBLen - 4] */
 371:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x2 * c0;
 372:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 373:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         } while (--k);
 374:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 375:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 376:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****          ** No loop unrolling is used. */
 377:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen % 0x4U;
 378:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 379:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0U)
 380:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         {
 381:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 5] sample */
 382:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *py--;
 383:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[7] sample */
 384:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           x3 = *px++;
 385:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 386:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 387:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[4] * y[srcBLen - 5] */
 388:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x0 * c0;
 389:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[5] * y[srcBLen - 5] */
 390:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x1 * c0;
 391:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[6] * y[srcBLen - 5] */
 392:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x2 * c0;
 393:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[7] * y[srcBLen - 5] */
 394:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x3 * c0;
 395:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 396:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Reuse the present samples for the next MAC */
 397:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           x0 = x1;
 398:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           x1 = x2;
 399:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           x2 = x3;
 400:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 401:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement the loop counter */
 402:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 403:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         }
 404:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 405:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Store the result in the accumulator in the destination buffer. */
 406:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc0;
 407:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc1;
 408:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc2;
 409:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc3;
 410:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 411:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Increment the pointer pIn1 index, count by 4 */
 412:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         count += 4U;
 413:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 414:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 415:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         px = pSrc1 + count;
 416:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 417:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 418:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement loop counter */
 419:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         blkCnt--;
 420:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       }
 421:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 422:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop unrolling: Compute remaining outputs */
 423:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = (uint32_t) blockSize2 % 0x4U;
 424:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 425:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #else
 426:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 427:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialize blkCnt with number of samples */
 428:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = blockSize2;
 305              	 .loc 1 428 0
 306 0194 BB69     	 ldr r3,[r7,#24]
 307 0196 3B63     	 str r3,[r7,#48]
 429:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 430:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 431:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 432:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       while (blkCnt > 0U)
 308              	 .loc 1 432 0
 309 0198 2FE0     	 b .L21
 310              	.L24:
 433:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 434:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Accumulator is made zero for every iteration */
 435:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum = 0.0f;
 311              	 .loc 1 435 0
 312 019a 4FF00003 	 mov r3,#0
 313 019e FB63     	 str r3,[r7,#60]
 436:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 437:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 438:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 439:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Loop unrolling: Compute 4 outputs at a time */
 440:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen >> 2U;
 441:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 442:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0U)
 443:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         {
 444:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 445:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 446:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 447:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 448:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 449:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 450:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement loop counter */
 451:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 452:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         }
 453:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 454:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Loop unrolling: Compute remaining outputs */
 455:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen % 0x4U;
 456:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 457:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #else
 458:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 459:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Initialize blkCnt with number of samples */
 460:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen;
 314              	 .loc 1 460 0
 315 01a0 3B68     	 ldr r3,[r7]
 316 01a2 BB63     	 str r3,[r7,#56]
 461:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 462:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 463:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 464:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0U)
 317              	 .loc 1 464 0
 318 01a4 14E0     	 b .L22
 319              	.L23:
 465:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         {
 466:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 467:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 320              	 .loc 1 467 0
 321 01a6 BB6C     	 ldr r3,[r7,#72]
 322 01a8 1A1D     	 adds r2,r3,#4
 323 01aa BA64     	 str r2,[r7,#72]
 324 01ac 93ED007A 	 flds s14,[r3]
 325 01b0 7B6C     	 ldr r3,[r7,#68]
 326 01b2 1A1F     	 subs r2,r3,#4
 327 01b4 7A64     	 str r2,[r7,#68]
 328 01b6 D3ED007A 	 flds s15,[r3]
 329 01ba 67EE277A 	 fmuls s15,s14,s15
 330 01be 97ED0F7A 	 flds s14,[r7,#60]
 331 01c2 77EE277A 	 fadds s15,s14,s15
 332 01c6 C7ED0F7A 	 fsts s15,[r7,#60]
 468:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 469:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement loop counter */
 470:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 333              	 .loc 1 470 0
 334 01ca BB6B     	 ldr r3,[r7,#56]
 335 01cc 013B     	 subs r3,r3,#1
 336 01ce BB63     	 str r3,[r7,#56]
 337              	.L22:
 464:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         {
 338              	 .loc 1 464 0
 339 01d0 BB6B     	 ldr r3,[r7,#56]
 340 01d2 002B     	 cmp r3,#0
 341 01d4 E7D1     	 bne .L23
 471:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         }
 472:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 473:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Store the result in the accumulator in the destination buffer. */
 474:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = sum;
 342              	 .loc 1 474 0
 343 01d6 FB6C     	 ldr r3,[r7,#76]
 344 01d8 1A1D     	 adds r2,r3,#4
 345 01da FA64     	 str r2,[r7,#76]
 346 01dc FA6B     	 ldr r2,[r7,#60]
 347 01de 1A60     	 str r2,[r3]
 475:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 476:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Increment MAC count */
 477:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         count++;
 348              	 .loc 1 477 0
 349 01e0 7B6B     	 ldr r3,[r7,#52]
 350 01e2 0133     	 adds r3,r3,#1
 351 01e4 7B63     	 str r3,[r7,#52]
 478:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 479:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 480:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         px = pSrc1 + count;
 352              	 .loc 1 480 0
 353 01e6 7B6B     	 ldr r3,[r7,#52]
 354 01e8 9B00     	 lsls r3,r3,#2
 355 01ea 3A6C     	 ldr r2,[r7,#64]
 356 01ec 1344     	 add r3,r3,r2
 357 01ee BB64     	 str r3,[r7,#72]
 481:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 358              	 .loc 1 481 0
 359 01f0 7B69     	 ldr r3,[r7,#20]
 360 01f2 7B64     	 str r3,[r7,#68]
 482:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 483:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement loop counter */
 484:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         blkCnt--;
 361              	 .loc 1 484 0
 362 01f4 3B6B     	 ldr r3,[r7,#48]
 363 01f6 013B     	 subs r3,r3,#1
 364 01f8 3B63     	 str r3,[r7,#48]
 365              	.L21:
 432:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 366              	 .loc 1 432 0
 367 01fa 3B6B     	 ldr r3,[r7,#48]
 368 01fc 002B     	 cmp r3,#0
 369 01fe CCD1     	 bne .L24
 370 0200 35E0     	 b .L25
 371              	.L20:
 485:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       }
 486:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     }
 487:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     else
 488:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 489:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* If the srcBLen is not a multiple of 4,
 490:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****        * the blockSize2 loop cannot be unrolled by 4 */
 491:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = (uint32_t) blockSize2;
 372              	 .loc 1 491 0
 373 0202 BB69     	 ldr r3,[r7,#24]
 374 0204 3B63     	 str r3,[r7,#48]
 492:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 493:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       while (blkCnt > 0U)
 375              	 .loc 1 493 0
 376 0206 2FE0     	 b .L26
 377              	.L29:
 494:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 495:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Accumulator is made zero for every iteration */
 496:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum = 0.0f;
 378              	 .loc 1 496 0
 379 0208 4FF00003 	 mov r3,#0
 380 020c FB63     	 str r3,[r7,#60]
 497:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 498:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* srcBLen number of MACS should be performed */
 499:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen;
 381              	 .loc 1 499 0
 382 020e 3B68     	 ldr r3,[r7]
 383 0210 BB63     	 str r3,[r7,#56]
 500:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 501:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0U)
 384              	 .loc 1 501 0
 385 0212 14E0     	 b .L27
 386              	.L28:
 502:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         {
 503:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 504:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 387              	 .loc 1 504 0
 388 0214 BB6C     	 ldr r3,[r7,#72]
 389 0216 1A1D     	 adds r2,r3,#4
 390 0218 BA64     	 str r2,[r7,#72]
 391 021a 93ED007A 	 flds s14,[r3]
 392 021e 7B6C     	 ldr r3,[r7,#68]
 393 0220 1A1F     	 subs r2,r3,#4
 394 0222 7A64     	 str r2,[r7,#68]
 395 0224 D3ED007A 	 flds s15,[r3]
 396 0228 67EE277A 	 fmuls s15,s14,s15
 397 022c 97ED0F7A 	 flds s14,[r7,#60]
 398 0230 77EE277A 	 fadds s15,s14,s15
 399 0234 C7ED0F7A 	 fsts s15,[r7,#60]
 505:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 506:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement loop counter */
 507:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 400              	 .loc 1 507 0
 401 0238 BB6B     	 ldr r3,[r7,#56]
 402 023a 013B     	 subs r3,r3,#1
 403 023c BB63     	 str r3,[r7,#56]
 404              	.L27:
 501:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         {
 405              	 .loc 1 501 0
 406 023e BB6B     	 ldr r3,[r7,#56]
 407 0240 002B     	 cmp r3,#0
 408 0242 E7D1     	 bne .L28
 508:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         }
 509:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 510:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Store the result in the accumulator in the destination buffer. */
 511:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = sum;
 409              	 .loc 1 511 0
 410 0244 FB6C     	 ldr r3,[r7,#76]
 411 0246 1A1D     	 adds r2,r3,#4
 412 0248 FA64     	 str r2,[r7,#76]
 413 024a FA6B     	 ldr r2,[r7,#60]
 414 024c 1A60     	 str r2,[r3]
 512:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 513:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Increment the MAC count */
 514:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         count++;
 415              	 .loc 1 514 0
 416 024e 7B6B     	 ldr r3,[r7,#52]
 417 0250 0133     	 adds r3,r3,#1
 418 0252 7B63     	 str r3,[r7,#52]
 515:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 516:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 517:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         px = pSrc1 + count;
 419              	 .loc 1 517 0
 420 0254 7B6B     	 ldr r3,[r7,#52]
 421 0256 9B00     	 lsls r3,r3,#2
 422 0258 3A6C     	 ldr r2,[r7,#64]
 423 025a 1344     	 add r3,r3,r2
 424 025c BB64     	 str r3,[r7,#72]
 518:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 425              	 .loc 1 518 0
 426 025e 7B69     	 ldr r3,[r7,#20]
 427 0260 7B64     	 str r3,[r7,#68]
 519:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 520:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 521:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         blkCnt--;
 428              	 .loc 1 521 0
 429 0262 3B6B     	 ldr r3,[r7,#48]
 430 0264 013B     	 subs r3,r3,#1
 431 0266 3B63     	 str r3,[r7,#48]
 432              	.L26:
 493:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 433              	 .loc 1 493 0
 434 0268 3B6B     	 ldr r3,[r7,#48]
 435 026a 002B     	 cmp r3,#0
 436 026c CCD1     	 bne .L29
 437              	.L25:
 522:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       }
 523:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     }
 524:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 525:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 526:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* --------------------------
 527:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * Initializations of stage3
 528:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * -------------------------*/
 529:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 530:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[src
 531:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[src
 532:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * ....
 533:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]
 534:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * sum +=  x[srcALen-1] * y[srcBLen-1]
 535:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      */
 536:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 537:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* In this stage the MAC operations are decreased by 1 for every iteration.
 538:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****        The blockSize3 variable holds the number of MAC operations performed */
 539:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     count = srcBLen - 1U;
 438              	 .loc 1 539 0
 439 026e 3B68     	 ldr r3,[r7]
 440 0270 013B     	 subs r3,r3,#1
 441 0272 7B63     	 str r3,[r7,#52]
 540:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 541:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputA */
 542:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     pSrc1 = (pIn1 + srcALen) - (srcBLen - 1U);
 442              	 .loc 1 542 0
 443 0274 BA68     	 ldr r2,[r7,#8]
 444 0276 3B68     	 ldr r3,[r7]
 445 0278 D31A     	 subs r3,r2,r3
 446 027a 0133     	 adds r3,r3,#1
 447 027c 9B00     	 lsls r3,r3,#2
 448 027e 7A6D     	 ldr r2,[r7,#84]
 449 0280 1344     	 add r3,r3,r2
 450 0282 3B64     	 str r3,[r7,#64]
 543:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     px = pSrc1;
 451              	 .loc 1 543 0
 452 0284 3B6C     	 ldr r3,[r7,#64]
 453 0286 BB64     	 str r3,[r7,#72]
 544:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 545:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputB */
 546:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     pSrc2 = pIn2 + (srcBLen - 1U);
 454              	 .loc 1 546 0
 455 0288 3B68     	 ldr r3,[r7]
 456 028a 03F18043 	 add r3,r3,#1073741824
 457 028e 013B     	 subs r3,r3,#1
 458 0290 9B00     	 lsls r3,r3,#2
 459 0292 3A6D     	 ldr r2,[r7,#80]
 460 0294 1344     	 add r3,r3,r2
 461 0296 7B61     	 str r3,[r7,#20]
 547:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc2;
 462              	 .loc 1 547 0
 463 0298 7B69     	 ldr r3,[r7,#20]
 464 029a 7B64     	 str r3,[r7,#68]
 548:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 549:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* -------------------
 550:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * Stage3 process
 551:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****      * ------------------*/
 552:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 553:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     while (blockSize3 > 0U)
 465              	 .loc 1 553 0
 466 029c 2FE0     	 b .L30
 467              	.L33:
 554:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 555:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Accumulator is made zero for every iteration */
 556:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       sum = 0.0f;
 468              	 .loc 1 556 0
 469 029e 4FF00003 	 mov r3,#0
 470 02a2 FB63     	 str r3,[r7,#60]
 557:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 558:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 559:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 560:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop unrolling: Compute 4 outputs at a time */
 561:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       k = count >> 2U;
 562:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 563:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0U)
 564:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 565:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 1] * y[srcBLen - 1] */
 566:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 567:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 568:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 2] * y[srcBLen - 2] */
 569:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 570:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 571:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 3] * y[srcBLen - 3] */
 572:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 573:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 574:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 4] * y[srcBLen - 4] */
 575:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 576:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 577:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement loop counter */
 578:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 579:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       }
 580:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 581:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop unrolling: Compute remaining outputs */
 582:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       k = count % 0x4U;
 583:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 584:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #else
 585:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 586:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialize blkCnt with number of samples */
 587:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       k = count;
 471              	 .loc 1 587 0
 472 02a4 7B6B     	 ldr r3,[r7,#52]
 473 02a6 BB63     	 str r3,[r7,#56]
 588:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 589:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 590:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 591:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0U)
 474              	 .loc 1 591 0
 475 02a8 14E0     	 b .L31
 476              	.L32:
 592:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 593:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Perform the multiply-accumulate */
 594:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum +=  x[srcALen-1] * y[srcBLen-1] */
 595:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 477              	 .loc 1 595 0
 478 02aa BB6C     	 ldr r3,[r7,#72]
 479 02ac 1A1D     	 adds r2,r3,#4
 480 02ae BA64     	 str r2,[r7,#72]
 481 02b0 93ED007A 	 flds s14,[r3]
 482 02b4 7B6C     	 ldr r3,[r7,#68]
 483 02b6 1A1F     	 subs r2,r3,#4
 484 02b8 7A64     	 str r2,[r7,#68]
 485 02ba D3ED007A 	 flds s15,[r3]
 486 02be 67EE277A 	 fmuls s15,s14,s15
 487 02c2 97ED0F7A 	 flds s14,[r7,#60]
 488 02c6 77EE277A 	 fadds s15,s14,s15
 489 02ca C7ED0F7A 	 fsts s15,[r7,#60]
 596:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 597:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement loop counter */
 598:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 490              	 .loc 1 598 0
 491 02ce BB6B     	 ldr r3,[r7,#56]
 492 02d0 013B     	 subs r3,r3,#1
 493 02d2 BB63     	 str r3,[r7,#56]
 494              	.L31:
 591:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 495              	 .loc 1 591 0
 496 02d4 BB6B     	 ldr r3,[r7,#56]
 497 02d6 002B     	 cmp r3,#0
 498 02d8 E7D1     	 bne .L32
 599:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       }
 600:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 601:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 602:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       *pOut++ = sum;
 499              	 .loc 1 602 0
 500 02da FB6C     	 ldr r3,[r7,#76]
 501 02dc 1A1D     	 adds r2,r3,#4
 502 02de FA64     	 str r2,[r7,#76]
 503 02e0 FA6B     	 ldr r2,[r7,#60]
 504 02e2 1A60     	 str r2,[r3]
 603:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 604:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 605:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       px = ++pSrc1;
 505              	 .loc 1 605 0
 506 02e4 3B6C     	 ldr r3,[r7,#64]
 507 02e6 0433     	 adds r3,r3,#4
 508 02e8 3B64     	 str r3,[r7,#64]
 509 02ea 3B6C     	 ldr r3,[r7,#64]
 510 02ec BB64     	 str r3,[r7,#72]
 606:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       py = pSrc2;
 511              	 .loc 1 606 0
 512 02ee 7B69     	 ldr r3,[r7,#20]
 513 02f0 7B64     	 str r3,[r7,#68]
 607:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 608:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Decrement MAC count */
 609:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       count--;
 514              	 .loc 1 609 0
 515 02f2 7B6B     	 ldr r3,[r7,#52]
 516 02f4 013B     	 subs r3,r3,#1
 517 02f6 7B63     	 str r3,[r7,#52]
 610:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 611:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Decrement the loop counter */
 612:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       blockSize3--;
 518              	 .loc 1 612 0
 519 02f8 BB6A     	 ldr r3,[r7,#40]
 520 02fa 013B     	 subs r3,r3,#1
 521 02fc BB62     	 str r3,[r7,#40]
 522              	.L30:
 553:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 523              	 .loc 1 553 0
 524 02fe BB6A     	 ldr r3,[r7,#40]
 525 0300 002B     	 cmp r3,#0
 526 0302 CCD1     	 bne .L33
 613:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     }
 614:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 615:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 616:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_SUCCESS;
 527              	 .loc 1 616 0
 528 0304 0023     	 movs r3,#0
 529 0306 87F82730 	 strb r3,[r7,#39]
 530              	.L3:
 617:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   }
 618:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 619:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   /* Return to application */
 620:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   return (status);
 531              	 .loc 1 620 0
 532 030a 97F82730 	 ldrb r3,[r7,#39]
 533 030e 5BB2     	 sxtb r3,r3
 621:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 622:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #else
 623:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** /* alternate version for CM0_FAMILY */
 624:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 625:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   const float32_t *pIn1 = pSrcA;                       /* InputA pointer */
 626:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   const float32_t *pIn2 = pSrcB;                       /* InputB pointer */
 627:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         float32_t sum;                                 /* Accumulator */
 628:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         uint32_t i, j;                                 /* Loop counters */
 629:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         arm_status status;                             /* Status of Partial convolution */
 630:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 631:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   /* Check for range of output samples to be calculated */
 632:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1U))))
 633:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   {
 634:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Set status as ARM_MATH_ARGUMENT_ERROR */
 635:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_ARGUMENT_ERROR;
 636:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   }
 637:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   else
 638:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   {
 639:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Loop to calculate convolution for output length number of values */
 640:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     for (i = firstIndex; i <= (firstIndex + numPoints - 1); i++)
 641:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     {
 642:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialize sum with zero to carry on MAC operations */
 643:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       sum = 0.0f;
 644:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 645:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop to perform MAC operations according to convolution equation */
 646:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       for (j = 0U; j <= i; j++)
 647:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       {
 648:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         /* Check the array limitations */
 649:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         if (((i - j) < srcBLen) && (j < srcALen))
 650:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         {
 651:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           /* z[i] += x[i-j] * y[j] */
 652:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****           sum += ( pIn1[j] * pIn2[i - j]);
 653:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****         }
 654:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       }
 655:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 656:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       /* Store the output in the destination buffer */
 657:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****       pDst[i] = sum;
 658:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     }
 659:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 660:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     /* Set status as ARM_SUCCESS */
 661:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_SUCCESS;
 662:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   }
 663:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 664:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   /* Return to application */
 665:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c ****   return (status);
 666:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** 
 667:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** #endif /* defined(ARM_MATH_DSP) */
 668:../Dave/Generated/CMSIS_DSP/Source/FilteringFunctions/arm_conv_partial_f32.c **** }
 534              	 .loc 1 668 0
 535 0310 1846     	 mov r0,r3
 536 0312 5C37     	 adds r7,r7,#92
 537              	.LCFI3:
 538              	 .cfi_def_cfa_offset 4
 539 0314 BD46     	 mov sp,r7
 540              	.LCFI4:
 541              	 .cfi_def_cfa_register 13
 542              	 
 543 0316 5DF8047B 	 ldr r7,[sp],#4
 544              	.LCFI5:
 545              	 .cfi_restore 7
 546              	 .cfi_def_cfa_offset 0
 547 031a 7047     	 bx lr
 548              	 .cfi_endproc
 549              	.LFE149:
 551              	 .text
 552              	.Letext0:
 553              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 554              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 555              	 .file 4 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Dave/Generated/CMSIS_DSP/Include/arm_math.h"
 556              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_conv_partial_f32.c
    {standard input}:20     .text.arm_conv_partial_f32:00000000 $t
    {standard input}:25     .text.arm_conv_partial_f32:00000000 arm_conv_partial_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
