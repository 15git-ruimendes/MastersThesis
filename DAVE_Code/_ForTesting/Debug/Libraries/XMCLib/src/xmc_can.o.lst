   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_can.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_IsPanelControlReady,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CAN_IsPanelControlReady:
  25              	.LFB171:
  26              	 .file 1 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc/xmc_can.h"
   1:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2019-07-02
   4:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *****************************************************************************
   7:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.
  11:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  12:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  14:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * do so, all subject to the following:
  20:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  21:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * a source language processor.
  27:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  28:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * at XMCSupport@infineon.com.
  39:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *****************************************************************************
  40:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  41:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  42:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  43:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  44:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  45:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  46:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  47:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  49:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  50:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  51:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  52:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  53:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  54:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  55:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  56:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  57:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  58:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  59:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  60:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  61:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  62:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  63:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  64:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  65:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  66:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  67:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  68:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  69:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  70:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  71:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  72:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  73:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2019-07-02:
  74:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_GetClockFrequency()
  75:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsListEmpty(), XMC_CAN_GetListBegin(), XMC_CAN_GetListSize(), XMC_CAN_MO_Get
  76:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  77:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  78:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  79:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  80:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  81:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  82:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  83:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  84:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
  85:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  86:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  87:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  88:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  89:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  90:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  91:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  92:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  93:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  94:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  95:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  96:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  97:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  98:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  99:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 100:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
 101:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>
 102:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
 103:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 104:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 105:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 106:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
 107:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
 108:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 109:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 110:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 111:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 112:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 113:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 114:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 115:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 116:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 117:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 118:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 119:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 120:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 121:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 122:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 123:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 124:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 125:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 126:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 127:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 128:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 129:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 130:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 131:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 132:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes.
 133:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 134:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between
 135:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 136:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 137:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 138:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 139:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 140:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 141:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 142:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 143:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 144:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 145:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 146:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 147:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 148:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 149:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 150:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 151:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 152:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure().
 153:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 154:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 155:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 156:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 157:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions
 158:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 159:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent().
 160:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 161:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 162:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 163:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 164:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 165:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 166:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 167:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 168:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 169:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 170:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 171:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 172:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 173:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 174:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 175:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 176:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 177:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 178:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 179:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 180:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 181:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 182:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 183:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 184:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 185:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 186:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 187:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** */
 188:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 189:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 190:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 191:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 192:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 193:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 194:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 195:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 196:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 197:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 198:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 199:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** */
 200:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 201:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 202:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 203:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 204:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 205:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 206:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 207:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 208:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 209:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 210:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 211:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 212:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 213:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 214:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 215:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** */
 216:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 217:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 218:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 219:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 220:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 221:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 222:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 224:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 226:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 227:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 228:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 229:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 230:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 231:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 232:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 233:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 234:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 235:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 236:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 237:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 238:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 239:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 240:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 241:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 242:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 243:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 244:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 245:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 246:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 247:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 248:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 249:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 250:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 251:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 252:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 253:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 254:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 255:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 256:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 257:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 258:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 259:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 260:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 261:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 262:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 263:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 264:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 265:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 266:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 267:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 268:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 269:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 270:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 271:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 272:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 273:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 274:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 275:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 276:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 277:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 278:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 279:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 280:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 281:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 282:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 283:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 284:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 285:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 286:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 287:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 288:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 289:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 290:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 291:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 292:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 293:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 294:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 295:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 296:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 297:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 298:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 299:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 300:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 301:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 302:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 303:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 304:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 305:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 306:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 307:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 308:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 309:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 310:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 311:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 312:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 313:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 314:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 315:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 316:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 317:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 318:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 319:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 320:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 321:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 322:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 323:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 324:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 325:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 326:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 327:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 328:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 329:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 330:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 331:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 332:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 333:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 334:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 335:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 336:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 337:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 338:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 339:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 340:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 341:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF = CAN_NODE_NSR_BOFF_Msk,              /**< Bus-off status */
 342:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 343:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 344:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 345:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 346:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #endif
 347:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 348:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 349:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 350:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 351:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 352:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 353:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 354:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 355:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 356:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 357:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 358:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 359:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 360:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE = CAN_NODE_NCR_CCE_Msk,    /**< Configuration change enab
 361:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 362:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 363:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 364:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #endif
 365:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 366:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 367:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 368:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 369:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 370:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 371:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 372:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 373:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 374:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 375:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 376:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 377:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 378:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 379:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 380:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 381:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 382:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 383:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 384:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 385:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 386:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 387:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 388:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 389:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 391:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 393:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 394:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 395:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 396:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 397:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 398:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 399:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 400:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 401:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 402:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 403:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 404:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 405:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 406:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 407:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 408:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 409:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 410:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 411:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 412:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 413:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 414:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 415:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 416:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 417:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 418:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 419:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 420:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 421:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 422:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 423:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 424:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 425:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 426:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 427:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 428:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 429:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 430:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 431:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 432:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 433:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 435:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 437:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 438:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 439:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 440:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 441:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 442:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 443:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 444:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 445:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 446:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 447:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 448:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 449:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 450:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 451:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 452:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 453:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 454:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 455:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 456:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 457:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 458:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator
 459:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 460:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 461:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 462:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 463:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 464:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 465:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #else
 466:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 467:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #endif
 468:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 469:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #else
 470:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 471:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #endif
 472:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 473:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 474:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 475:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 476:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 477:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 478:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 479:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** */
 480:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 481:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 482:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;     /**< Frequency of the CAN module(fCAN). \a can_frequency shall be ran
 483:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 484:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 485:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                                    the synchronization segment. Sample point. Range = [0, 10000] wi
 486:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 487:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 488:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 489:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 490:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 491:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 492:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 493:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 494:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 495:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 496:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 497:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 498:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 499:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 500:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 501:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 502:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 503:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 504:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 505:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 506:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 507:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 508:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 509:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 510:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 511:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 512:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 513:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 514:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 515:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 516:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 517:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 518:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 519:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 520:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 521:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 522:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 523:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** */
 524:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 525:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 526:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 527:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 528:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #pragma push
 529:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #pragma anon_unions
 530:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 531:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #pragma warning 586
 532:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #endif
 533:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 534:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 535:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 536:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 537:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 538:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** */
 539:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 540:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 541:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 542:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   union
 543:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   {
 544:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     struct
 545:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     {
 546:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 547:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection: 3;  /**<   Defines function of the frame counter  */
 548:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode: 2;     /**<   Determines the operation mode of the frame count
 549:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 550:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     };
 551:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 552:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 553:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   };
 554:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 555:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 556:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 557:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 558:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** */
 559:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 560:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 561:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 562:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 563:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 564:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 565:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 566:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 567:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   union
 568:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   {
 569:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     struct
 570:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     {
 571:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier: 29;           /**< standard (11 bit)/Extended (29 bit) message ident
 572:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode: 1;               /**< Standard/Extended identifier support */
 573:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority: 2;              /**< Arbitration Mode/Priority */
 574:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     };
 575:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 576:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   };
 577:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   union
 578:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   {
 579:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     struct
 580:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     {
 581:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask: 29;             /**< CAN Identifier of Message Object */
 582:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask: 1;             /**< Identifier Extension Bit of Message Object */
 583:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     };
 584:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 585:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   };
 586:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 587:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 588:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   union
 589:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   {
 590:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 591:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     uint8_t can_data_byte[8];                 /**< Each position of the array represents a data byt
 592:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bits 
 593:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_data[
 594:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 595:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     uint64_t can_data_long;                   /** Data of the Message Object*/
 596:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   };
 597:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 598:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 599:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 600:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 601:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 602:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 603:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #pragma pop
 604:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 605:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #pragma warning restore
 606:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #endif
 607:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 608:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 609:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 610:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 611:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 612:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #endif
 613:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 614:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 615:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 616:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 617:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 618:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 619:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 620:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 621:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 622:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 623:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 624:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 625:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 626:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 627:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 628:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 629:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 630:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 631:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 632:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 633:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 634:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 635:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 636:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 637:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 639:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 640:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 641:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 642:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 643:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 644:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 645:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 646:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 647:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 648:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 649:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 650:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 652:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 653:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 654:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 655:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 656:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 658:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 659:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 660:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 661:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 662:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 663:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 664:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 665:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 666:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 667:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 668:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 669:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 670:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 671:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 672:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 673:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 674:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 675:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 677:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 678:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 679:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 680:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 681:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 682:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 683:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 684:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 685:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 686:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
  27              	 .loc 1 686 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 687:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
  43              	 .loc 1 687 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F8C431 	 ldr r3,[r3,#452]
  46 000e 03F44073 	 and r3,r3,#768
  47 0012 002B     	 cmp r3,#0
  48 0014 0CBF     	 ite eq
  49 0016 0123     	 moveq r3,#1
  50 0018 0023     	 movne r3,#0
  51 001a DBB2     	 uxtb r3,r3
 688:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
  52              	 .loc 1 688 0
  53 001c 1846     	 mov r0,r3
  54 001e 0C37     	 adds r7,r7,#12
  55              	.LCFI3:
  56              	 .cfi_def_cfa_offset 4
  57 0020 BD46     	 mov sp,r7
  58              	.LCFI4:
  59              	 .cfi_def_cfa_register 13
  60              	 
  61 0022 5DF8047B 	 ldr r7,[sp],#4
  62              	.LCFI5:
  63              	 .cfi_restore 7
  64              	 .cfi_def_cfa_offset 0
  65 0026 7047     	 bx lr
  66              	 .cfi_endproc
  67              	.LFE171:
  69              	 .section .text.XMC_CAN_PanelControl,"ax",%progbits
  70              	 .align 2
  71              	 .thumb
  72              	 .thumb_func
  74              	XMC_CAN_PanelControl:
  75              	.LFB172:
 689:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 690:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 691:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 693:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 694:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 696:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 697:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 698:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 699:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 700:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 701:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 702:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 703:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 704:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 705:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 706:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 707:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 708:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 709:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 710:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 711:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 712:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 713:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 714:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_PANCMD_t pancmd,
 715:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     const uint8_t arg1,
 716:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     const uint8_t arg2)
 717:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
  76              	 .loc 1 717 0
  77              	 .cfi_startproc
  78              	 
  79              	 
  80              	 
  81 0000 80B4     	 push {r7}
  82              	.LCFI6:
  83              	 .cfi_def_cfa_offset 4
  84              	 .cfi_offset 7,-4
  85 0002 83B0     	 sub sp,sp,#12
  86              	.LCFI7:
  87              	 .cfi_def_cfa_offset 16
  88 0004 00AF     	 add r7,sp,#0
  89              	.LCFI8:
  90              	 .cfi_def_cfa_register 7
  91 0006 7860     	 str r0,[r7,#4]
  92 0008 0846     	 mov r0,r1
  93 000a 1146     	 mov r1,r2
  94 000c 1A46     	 mov r2,r3
  95 000e 0346     	 mov r3,r0
  96 0010 FB70     	 strb r3,[r7,#3]
  97 0012 0B46     	 mov r3,r1
  98 0014 BB70     	 strb r3,[r7,#2]
  99 0016 1346     	 mov r3,r2
 100 0018 7B70     	 strb r3,[r7,#1]
 718:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 101              	 .loc 1 718 0
 102 001a FA78     	 ldrb r2,[r7,#3]
 719:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                 (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 103              	 .loc 1 719 0
 104 001c BB78     	 ldrb r3,[r7,#2]
 105 001e 1B04     	 lsls r3,r3,#16
 106 0020 03F47F03 	 and r3,r3,#16711680
 718:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 107              	 .loc 1 718 0
 108 0024 1A43     	 orrs r2,r2,r3
 720:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                 (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 109              	 .loc 1 720 0
 110 0026 7B78     	 ldrb r3,[r7,#1]
 111 0028 1B06     	 lsls r3,r3,#24
 719:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                 (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 112              	 .loc 1 719 0
 113 002a 1A43     	 orrs r2,r2,r3
 718:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 114              	 .loc 1 718 0
 115 002c 7B68     	 ldr r3,[r7,#4]
 116 002e C3F8C421 	 str r2,[r3,#452]
 721:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
 117              	 .loc 1 721 0
 118 0032 0C37     	 adds r7,r7,#12
 119              	.LCFI9:
 120              	 .cfi_def_cfa_offset 4
 121 0034 BD46     	 mov sp,r7
 122              	.LCFI10:
 123              	 .cfi_def_cfa_register 13
 124              	 
 125 0036 5DF8047B 	 ldr r7,[sp],#4
 126              	.LCFI11:
 127              	 .cfi_restore 7
 128              	 .cfi_def_cfa_offset 0
 129 003a 7047     	 bx lr
 130              	 .cfi_endproc
 131              	.LFE172:
 133              	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 134              	 .align 2
 135              	 .thumb
 136              	 .thumb_func
 138              	XMC_CAN_NODE_EnableConfigurationChange:
 139              	.LFB188:
 722:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 723:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 724:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 725:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 726:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 727:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 728:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 729:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 730:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 731:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 732:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 733:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 734:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 735:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 736:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 737:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 739:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 740:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 741:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 742:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 743:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj, const XMC_CAN_NODE_INTERRUPT_TRIGGE
 744:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 745:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 746:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
 747:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 748:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 749:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 750:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 751:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 752:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 753:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 754:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 755:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN).
 756:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 757:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 758:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 759:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 760:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 761:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 762:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 763:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 764:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN.
 765:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 766:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 767:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 768:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 769:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 770:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 771:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 772:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 773:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 774:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 775:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 776:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 777:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 778:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 779:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 780:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 781:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 782:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 783:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 784:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 785:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 786:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 787:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 788:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 789:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 790:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 791:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 792:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 793:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 794:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 795:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 796:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 797:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 798:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source);
 799:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 800:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 801:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 802:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 803:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 804:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency
 805:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 806:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 807:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 808:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 809:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 810:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 811:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 812:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 813:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 814:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 815:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return fCAN clock frequency
 816:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 817:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 818:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN base clock frequency
 819:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 820:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 821:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj);
 822:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 823:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 824:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 825:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 827:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 828:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 829:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 830:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 831:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 832:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 833:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 834:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 835:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 836:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 837:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 838:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 839:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 840:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 841:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 844:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 847:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #else
 848:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 849:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** #endif
 850:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 851:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 852:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 853:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 854:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 855:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 856:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 857:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 858:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 859:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 860:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 866:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 867:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 868:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 869:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 870:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 871:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 872:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 873:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 874:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 875:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 876:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 877:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 878:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 879:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 880:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 881:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * None
 882:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 883:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 884:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 885:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 886:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 887:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     const uint32_t service_request)
 888:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 889:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 890:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
 891:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 892:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 893:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 894:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 895:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 896:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 897:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 898:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 899:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 900:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 901:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 902:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 903:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 905:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * None
 906:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 908:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 909:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time);
 910:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 911:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 912:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 913:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 914:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 915:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 916:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 917:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 919:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate.
 920:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 921:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 922:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 923:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 924:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 925:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 927:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 928:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 930:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 931:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time);
 932:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 933:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 934:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 935:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 936:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 937:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 938:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 939:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 940:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 941:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 942:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 943:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 944:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 946:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * None
 947:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 948:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 949:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 950:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 951:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 952:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 953:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 954:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****     const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 955:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 956:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 957:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 958:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
 959:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 960:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 961:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 962:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 963:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 964:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 965:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 966:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 967:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 968:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 969:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 970:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 971:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 972:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 974:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 975:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 976:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 977:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 978:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 979:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
 980:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 981:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 982:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 983:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 984:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
 985:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 986:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
 987:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
 988:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 989:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 990:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 991:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 992:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 993:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 994:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 995:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 996:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
 997:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 998:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 999:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1000:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1002:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
1003:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1005:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1006:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
1007:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1008:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
1009:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1010:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1011:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1012:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1022:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1025:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1028:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1030:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1031:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1034:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1035:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1036:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1038:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1039:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1040:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1041:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1042:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1043:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1044:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1045:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1046:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1047:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1048:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1049:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1050:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1051:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1052:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1053:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1054:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1055:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1056:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1057:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1058:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1059:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1060:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1061:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1062:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1063:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1064:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1065:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1066:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1067:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1068:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1069:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1070:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1071:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1072:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1073:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1074:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1075:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1077:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1078:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1079:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1080:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1081:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1083:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1084:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1085:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1086:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk) >> CAN_NODE_NEC
1087:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1088:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1089:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1090:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1091:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1092:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1093:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1094:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1095:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1096:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1097:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1098:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1099:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1100:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1101:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1102:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1103:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1105:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1106:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1107:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1108:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1109:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1110:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1111:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1112:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1113:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1114:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1115:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1116:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1117:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1118:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1119:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1120:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1121:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1122:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1123:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1124:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1125:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1126:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1127:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1128:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1129:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1130:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1131:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1132:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1133:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1134:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1135:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1136:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1137:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1138:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1139:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1140:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1141:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1142:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1143:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1144:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1145:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1146:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1147:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1148:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1149:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1150:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1151:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1152:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1153:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1155:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1156:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1157:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1158:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1159:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1161:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1162:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1163:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1164:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1165:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_M
1166:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1167:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1168:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1169:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1170:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1171:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1172:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1173:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1174:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1175:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1176:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1177:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1178:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1179:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1180:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1181:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1182:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1183:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1184:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1185:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1186:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1187:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EW
1188:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1189:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1190:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1191:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1192:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1193:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1194:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1195:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1196:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1197:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1198:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1199:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1200:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1201:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1202:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1203:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1204:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1205:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1206:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1207:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1208:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1209:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1210:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1211:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1212:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1213:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1214:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1215:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1216:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1217:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1218:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1219:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1220:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1221:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1222:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1223:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1224:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1225:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1226:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1227:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1228:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1229:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1230:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1231:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1232:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1233:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1234:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1235:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1236:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1240:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1241:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1242:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1243:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1244:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1245:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1246:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1247:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1248:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1249:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1250:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1251:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1252:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1253:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1254:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1255:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1256:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1257:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1258:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1259:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1260:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1261:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1262:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1263:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1264:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1265:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1266:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1267:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1268:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1269:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1270:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node, XMC_CAN_NODE_STATUS_t
1271:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
1272:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NSR &= ~(uint32_t)can_node_status;
1273:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
1274:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1275:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1276:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1277:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1278:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1279:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1281:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1283:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1284:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1285:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1286:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1287:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1288:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1289:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1290:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1291:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1292:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 140              	 .loc 1 1292 0
 141              	 .cfi_startproc
 142              	 
 143              	 
 144              	 
 145 0000 80B4     	 push {r7}
 146              	.LCFI12:
 147              	 .cfi_def_cfa_offset 4
 148              	 .cfi_offset 7,-4
 149 0002 83B0     	 sub sp,sp,#12
 150              	.LCFI13:
 151              	 .cfi_def_cfa_offset 16
 152 0004 00AF     	 add r7,sp,#0
 153              	.LCFI14:
 154              	 .cfi_def_cfa_register 7
 155 0006 7860     	 str r0,[r7,#4]
1293:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 156              	 .loc 1 1293 0
 157 0008 7B68     	 ldr r3,[r7,#4]
 158 000a 1B68     	 ldr r3,[r3]
 159 000c 43F04002 	 orr r2,r3,#64
 160 0010 7B68     	 ldr r3,[r7,#4]
 161 0012 1A60     	 str r2,[r3]
1294:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
 162              	 .loc 1 1294 0
 163 0014 0C37     	 adds r7,r7,#12
 164              	.LCFI15:
 165              	 .cfi_def_cfa_offset 4
 166 0016 BD46     	 mov sp,r7
 167              	.LCFI16:
 168              	 .cfi_def_cfa_register 13
 169              	 
 170 0018 5DF8047B 	 ldr r7,[sp],#4
 171              	.LCFI17:
 172              	 .cfi_restore 7
 173              	 .cfi_def_cfa_offset 0
 174 001c 7047     	 bx lr
 175              	 .cfi_endproc
 176              	.LFE188:
 178 001e 00BF     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 179              	 .align 2
 180              	 .thumb
 181              	 .thumb_func
 183              	XMC_CAN_NODE_DisableConfigurationChange:
 184              	.LFB189:
1295:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1296:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1297:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** /**
1298:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1299:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1300:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1301:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1302:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1303:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1304:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1305:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1306:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1307:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1308:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  *
1309:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****  */
1310:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** 
1311:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1312:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** {
 185              	 .loc 1 1312 0
 186              	 .cfi_startproc
 187              	 
 188              	 
 189              	 
 190 0000 80B4     	 push {r7}
 191              	.LCFI18:
 192              	 .cfi_def_cfa_offset 4
 193              	 .cfi_offset 7,-4
 194 0002 83B0     	 sub sp,sp,#12
 195              	.LCFI19:
 196              	 .cfi_def_cfa_offset 16
 197 0004 00AF     	 add r7,sp,#0
 198              	.LCFI20:
 199              	 .cfi_def_cfa_register 7
 200 0006 7860     	 str r0,[r7,#4]
1313:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 201              	 .loc 1 1313 0
 202 0008 7B68     	 ldr r3,[r7,#4]
 203 000a 1B68     	 ldr r3,[r3]
 204 000c 23F04002 	 bic r2,r3,#64
 205 0010 7B68     	 ldr r3,[r7,#4]
 206 0012 1A60     	 str r2,[r3]
1314:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_can.h **** }
 207              	 .loc 1 1314 0
 208 0014 0C37     	 adds r7,r7,#12
 209              	.LCFI21:
 210              	 .cfi_def_cfa_offset 4
 211 0016 BD46     	 mov sp,r7
 212              	.LCFI22:
 213              	 .cfi_def_cfa_register 13
 214              	 
 215 0018 5DF8047B 	 ldr r7,[sp],#4
 216              	.LCFI23:
 217              	 .cfi_restore 7
 218              	 .cfi_def_cfa_offset 0
 219 001c 7047     	 bx lr
 220              	 .cfi_endproc
 221              	.LFE189:
 223 001e 00BF     	 .section .text.max,"ax",%progbits
 224              	 .align 2
 225              	 .thumb
 226              	 .thumb_func
 228              	max:
 229              	.LFB229:
 230              	 .file 2 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2020-03-17
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  *****************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc_can.c ****  *
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:../Libraries/XMCLib/src/xmc_can.c ****  *
  14:../Libraries/XMCLib/src/xmc_can.c ****  * Permission is hereby granted, free of charge, to any person or organization
  15:../Libraries/XMCLib/src/xmc_can.c ****  * obtaining a copy of the software and accompanying documentation covered by
  16:../Libraries/XMCLib/src/xmc_can.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:../Libraries/XMCLib/src/xmc_can.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:../Libraries/XMCLib/src/xmc_can.c ****  * do so, all subject to the following:
  20:../Libraries/XMCLib/src/xmc_can.c ****  *
  21:../Libraries/XMCLib/src/xmc_can.c ****  * The copyright notices in the Software and this entire statement, including
  22:../Libraries/XMCLib/src/xmc_can.c ****  * the above license grant, this restriction and the following disclaimer,
  23:../Libraries/XMCLib/src/xmc_can.c ****  * must be included in all copies of the Software, in whole or in part, and
  24:../Libraries/XMCLib/src/xmc_can.c ****  * all derivative works of the Software, unless such copies or derivative
  25:../Libraries/XMCLib/src/xmc_can.c ****  * works are solely in the form of machine-executable object code generated by
  26:../Libraries/XMCLib/src/xmc_can.c ****  * a source language processor.
  27:../Libraries/XMCLib/src/xmc_can.c ****  *
  28:../Libraries/XMCLib/src/xmc_can.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:../Libraries/XMCLib/src/xmc_can.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:../Libraries/XMCLib/src/xmc_can.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:../Libraries/XMCLib/src/xmc_can.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:../Libraries/XMCLib/src/xmc_can.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:../Libraries/XMCLib/src/xmc_can.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:../Libraries/XMCLib/src/xmc_can.c ****  * DEALINGS IN THE SOFTWARE.
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share
  37:../Libraries/XMCLib/src/xmc_can.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:../Libraries/XMCLib/src/xmc_can.c ****  * at XMCSupport@infineon.com.
  39:../Libraries/XMCLib/src/xmc_can.c ****  *****************************************************************************
  40:../Libraries/XMCLib/src/xmc_can.c ****  *
  41:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  42:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  43:../Libraries/XMCLib/src/xmc_can.c ****  *
  44:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  49:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  50:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  51:../Libraries/XMCLib/src/xmc_can.c ****  *
  52:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  53:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  54:../Libraries/XMCLib/src/xmc_can.c ****  *
  55:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  56:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  57:../Libraries/XMCLib/src/xmc_can.c ****  *
  58:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  59:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  60:../Libraries/XMCLib/src/xmc_can.c ****  *
  61:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  62:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  63:../Libraries/XMCLib/src/xmc_can.c ****  *
  64:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  65:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>
  66:../Libraries/XMCLib/src/xmc_can.c ****  *
  67:../Libraries/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  68:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  69:../Libraries/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  70:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  71:../Libraries/XMCLib/src/xmc_can.c ****  *
  72:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-06-21:
  73:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx()
  74:../Libraries/XMCLib/src/xmc_can.c ****  *
  75:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-11-12:
  76:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed assertion at XMC_CAN_InitEx()
  77:../Libraries/XMCLib/src/xmc_can.c ****  *
  78:../Libraries/XMCLib/src/xmc_can.c ****  * 2019-05-07:
  79:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed compilation warnings
  80:../Libraries/XMCLib/src/xmc_can.c ****  *
  81:../Libraries/XMCLib/src/xmc_can.c ****  * 2019-06-26:
  82:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx() non returning, decrementing ntq before cont
  83:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_GetClockFrequency()
  84:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_InitEx() so that XMC_CAN_SetBaudrateClockSource() is invoked before XMC_CAN_
  85:../Libraries/XMCLib/src/xmc_can.c ****  *
  86:../Libraries/XMCLib/src/xmc_can.c ****  * 2020-03-17:
  87:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_MO_ReceiveData() according to description in the reference manual
  88:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_MO_SetAcceptanceMask(), checking for matching message IDE
  89:../Libraries/XMCLib/src/xmc_can.c ****  *
  90:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  91:../Libraries/XMCLib/src/xmc_can.c ****  *
  92:../Libraries/XMCLib/src/xmc_can.c ****  */
  93:../Libraries/XMCLib/src/xmc_can.c **** 
  94:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  95:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  96:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  97:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  98:../Libraries/XMCLib/src/xmc_can.c **** 
  99:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
 100:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
 101:../Libraries/XMCLib/src/xmc_can.c **** 
 102:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
 103:../Libraries/XMCLib/src/xmc_can.c **** {
 231              	 .loc 2 103 0
 232              	 .cfi_startproc
 233              	 
 234              	 
 235              	 
 236 0000 80B4     	 push {r7}
 237              	.LCFI24:
 238              	 .cfi_def_cfa_offset 4
 239              	 .cfi_offset 7,-4
 240 0002 83B0     	 sub sp,sp,#12
 241              	.LCFI25:
 242              	 .cfi_def_cfa_offset 16
 243 0004 00AF     	 add r7,sp,#0
 244              	.LCFI26:
 245              	 .cfi_def_cfa_register 7
 246 0006 7860     	 str r0,[r7,#4]
 247 0008 3960     	 str r1,[r7]
 104:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
 248              	 .loc 2 104 0
 249 000a 3A68     	 ldr r2,[r7]
 250 000c 7B68     	 ldr r3,[r7,#4]
 251 000e 9342     	 cmp r3,r2
 252 0010 38BF     	 it cc
 253 0012 1346     	 movcc r3,r2
 105:../Libraries/XMCLib/src/xmc_can.c **** }
 254              	 .loc 2 105 0
 255 0014 1846     	 mov r0,r3
 256 0016 0C37     	 adds r7,r7,#12
 257              	.LCFI27:
 258              	 .cfi_def_cfa_offset 4
 259 0018 BD46     	 mov sp,r7
 260              	.LCFI28:
 261              	 .cfi_def_cfa_register 13
 262              	 
 263 001a 5DF8047B 	 ldr r7,[sp],#4
 264              	.LCFI29:
 265              	 .cfi_restore 7
 266              	 .cfi_def_cfa_offset 0
 267 001e 7047     	 bx lr
 268              	 .cfi_endproc
 269              	.LFE229:
 271              	 .section .text.min,"ax",%progbits
 272              	 .align 2
 273              	 .thumb
 274              	 .thumb_func
 276              	min:
 277              	.LFB230:
 106:../Libraries/XMCLib/src/xmc_can.c **** 
 107:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
 108:../Libraries/XMCLib/src/xmc_can.c **** {
 278              	 .loc 2 108 0
 279              	 .cfi_startproc
 280              	 
 281              	 
 282              	 
 283 0000 80B4     	 push {r7}
 284              	.LCFI30:
 285              	 .cfi_def_cfa_offset 4
 286              	 .cfi_offset 7,-4
 287 0002 83B0     	 sub sp,sp,#12
 288              	.LCFI31:
 289              	 .cfi_def_cfa_offset 16
 290 0004 00AF     	 add r7,sp,#0
 291              	.LCFI32:
 292              	 .cfi_def_cfa_register 7
 293 0006 7860     	 str r0,[r7,#4]
 294 0008 3960     	 str r1,[r7]
 109:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
 295              	 .loc 2 109 0
 296 000a 3A68     	 ldr r2,[r7]
 297 000c 7B68     	 ldr r3,[r7,#4]
 298 000e 9342     	 cmp r3,r2
 299 0010 28BF     	 it cs
 300 0012 1346     	 movcs r3,r2
 110:../Libraries/XMCLib/src/xmc_can.c **** }
 301              	 .loc 2 110 0
 302 0014 1846     	 mov r0,r3
 303 0016 0C37     	 adds r7,r7,#12
 304              	.LCFI33:
 305              	 .cfi_def_cfa_offset 4
 306 0018 BD46     	 mov sp,r7
 307              	.LCFI34:
 308              	 .cfi_def_cfa_register 13
 309              	 
 310 001a 5DF8047B 	 ldr r7,[sp],#4
 311              	.LCFI35:
 312              	 .cfi_restore 7
 313              	 .cfi_def_cfa_offset 0
 314 001e 7047     	 bx lr
 315              	 .cfi_endproc
 316              	.LFE230:
 318              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
 319              	 .align 2
 320              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
 321              	 .thumb
 322              	 .thumb_func
 324              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
 325              	.LFB231:
 111:../Libraries/XMCLib/src/xmc_can.c **** 
 112:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
 113:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
 114:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
 115:../Libraries/XMCLib/src/xmc_can.c **** 
 116:../Libraries/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
 117:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
 118:../Libraries/XMCLib/src/xmc_can.c **** 
 119:../Libraries/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
 120:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
 121:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
 122:../Libraries/XMCLib/src/xmc_can.c **** 
 123:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 124:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 125:../Libraries/XMCLib/src/xmc_can.c **** 
 126:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG1 15
 127:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG2 7
 128:../Libraries/XMCLib/src/xmc_can.c **** 
 129:../Libraries/XMCLib/src/xmc_can.c **** 
 130:../Libraries/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 131:../Libraries/XMCLib/src/xmc_can.c ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
 132:../Libraries/XMCLib/src/xmc_can.c **** {
 326              	 .loc 2 132 0
 327              	 .cfi_startproc
 328              	 
 329              	 
 330 0000 80B5     	 push {r7,lr}
 331              	.LCFI36:
 332              	 .cfi_def_cfa_offset 8
 333              	 .cfi_offset 7,-8
 334              	 .cfi_offset 14,-4
 335 0002 88B0     	 sub sp,sp,#32
 336              	.LCFI37:
 337              	 .cfi_def_cfa_offset 40
 338 0004 00AF     	 add r7,sp,#0
 339              	.LCFI38:
 340              	 .cfi_def_cfa_register 7
 341 0006 7860     	 str r0,[r7,#4]
 342 0008 3960     	 str r1,[r7]
 133:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 134:../Libraries/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 343              	 .loc 2 134 0
 344 000a 3B68     	 ldr r3,[r7]
 345 000c 1B68     	 ldr r3,[r3]
 346 000e 3A68     	 ldr r2,[r7]
 347 0010 5268     	 ldr r2,[r2,#4]
 348 0012 B3FBF2F1 	 udiv r1,r3,r2
 349 0016 02FB01F2 	 mul r2,r2,r1
 350 001a 9B1A     	 subs r3,r3,r2
 351 001c 002B     	 cmp r3,#0
 352 001e 40F09080 	 bne .L11
 353              	.LBB2:
 135:../Libraries/XMCLib/src/xmc_can.c ****   {
 136:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t prescaler = 0;
 354              	 .loc 2 136 0
 355 0022 0023     	 movs r3,#0
 356 0024 FB61     	 str r3,[r7,#28]
 137:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t div8 = 0;
 357              	 .loc 2 137 0
 358 0026 0023     	 movs r3,#0
 359 0028 BB61     	 str r3,[r7,#24]
 138:../Libraries/XMCLib/src/xmc_can.c **** 
 139:../Libraries/XMCLib/src/xmc_can.c ****     /* Calculate the factor between can frequency and required baudrate, this is equal to (prescale
 140:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 360              	 .loc 2 140 0
 361 002a 3B68     	 ldr r3,[r7]
 362 002c 1A68     	 ldr r2,[r3]
 363 002e 3B68     	 ldr r3,[r7]
 364 0030 5B68     	 ldr r3,[r3,#4]
 365 0032 B2FBF3F3 	 udiv r3,r2,r3
 366 0036 BB60     	 str r3,[r7,#8]
 141:../Libraries/XMCLib/src/xmc_can.c **** 
 142:../Libraries/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 143:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 367              	 .loc 2 143 0
 368 0038 1923     	 movs r3,#25
 369 003a 7B61     	 str r3,[r7,#20]
 144:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg1 = 0;
 370              	 .loc 2 144 0
 371 003c 0023     	 movs r3,#0
 372 003e 3B61     	 str r3,[r7,#16]
 145:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg2 = 0;
 373              	 .loc 2 145 0
 374 0040 0023     	 movs r3,#0
 375 0042 FB60     	 str r3,[r7,#12]
 146:../Libraries/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 376              	 .loc 2 146 0
 377 0044 4BE0     	 b .L12
 378              	.L17:
 147:../Libraries/XMCLib/src/xmc_can.c ****     {
 148:../Libraries/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 149:../Libraries/XMCLib/src/xmc_can.c ****       if ((fcan_div % ntq) == 0)
 379              	 .loc 2 149 0
 380 0046 BB68     	 ldr r3,[r7,#8]
 381 0048 7A69     	 ldr r2,[r7,#20]
 382 004a B3FBF2F2 	 udiv r2,r3,r2
 383 004e 7969     	 ldr r1,[r7,#20]
 384 0050 01FB02F2 	 mul r2,r1,r2
 385 0054 9B1A     	 subs r3,r3,r2
 386 0056 002B     	 cmp r3,#0
 387 0058 3ED1     	 bne .L13
 150:../Libraries/XMCLib/src/xmc_can.c ****       {
 151:../Libraries/XMCLib/src/xmc_can.c ****         div8 = 0;
 388              	 .loc 2 151 0
 389 005a 0023     	 movs r3,#0
 390 005c BB61     	 str r3,[r7,#24]
 152:../Libraries/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
 391              	 .loc 2 152 0
 392 005e BA68     	 ldr r2,[r7,#8]
 393 0060 7B69     	 ldr r3,[r7,#20]
 394 0062 B2FBF3F3 	 udiv r3,r2,r3
 395 0066 FB61     	 str r3,[r7,#28]
 153:../Libraries/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 396              	 .loc 2 153 0
 397 0068 FB69     	 ldr r3,[r7,#28]
 398 006a 002B     	 cmp r3,#0
 399 006c 34D0     	 beq .L13
 400              	 .loc 2 153 0 is_stmt 0 discriminator 1
 401 006e FB69     	 ldr r3,[r7,#28]
 402 0070 B3F5007F 	 cmp r3,#512
 403 0074 30D8     	 bhi .L13
 154:../Libraries/XMCLib/src/xmc_can.c ****         {
 155:../Libraries/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
 404              	 .loc 2 155 0 is_stmt 1
 405 0076 FB69     	 ldr r3,[r7,#28]
 406 0078 3F2B     	 cmp r3,#63
 407 007a 0AD9     	 bls .L14
 156:../Libraries/XMCLib/src/xmc_can.c ****           {
 157:../Libraries/XMCLib/src/xmc_can.c ****             /* consider prescaler >=64, if it is integer divisible by 8*/
 158:../Libraries/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) != 0)
 408              	 .loc 2 158 0
 409 007c FB69     	 ldr r3,[r7,#28]
 410 007e 03F00703 	 and r3,r3,#7
 411 0082 002B     	 cmp r3,#0
 412 0084 03D0     	 beq .L15
 159:../Libraries/XMCLib/src/xmc_can.c ****             {
 160:../Libraries/XMCLib/src/xmc_can.c ****               --ntq;
 413              	 .loc 2 160 0
 414 0086 7B69     	 ldr r3,[r7,#20]
 415 0088 013B     	 subs r3,r3,#1
 416 008a 7B61     	 str r3,[r7,#20]
 161:../Libraries/XMCLib/src/xmc_can.c ****               continue;
 417              	 .loc 2 161 0
 418 008c 27E0     	 b .L12
 419              	.L15:
 162:../Libraries/XMCLib/src/xmc_can.c ****             }
 163:../Libraries/XMCLib/src/xmc_can.c ****             else
 164:../Libraries/XMCLib/src/xmc_can.c ****             {
 165:../Libraries/XMCLib/src/xmc_can.c ****               div8 = 1;
 420              	 .loc 2 165 0
 421 008e 0123     	 movs r3,#1
 422 0090 BB61     	 str r3,[r7,#24]
 423              	.L14:
 166:../Libraries/XMCLib/src/xmc_can.c ****             }
 167:../Libraries/XMCLib/src/xmc_can.c ****           }
 168:../Libraries/XMCLib/src/xmc_can.c **** 
 169:../Libraries/XMCLib/src/xmc_can.c ****           tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 424              	 .loc 2 169 0
 425 0092 7B69     	 ldr r3,[r7,#20]
 426 0094 013B     	 subs r3,r3,#1
 427 0096 3A68     	 ldr r2,[r7]
 428 0098 1289     	 ldrh r2,[r2,#8]
 429 009a 02FB03F3 	 mul r3,r2,r3
 430 009e 2B4A     	 ldr r2,.L19
 431 00a0 A2FB0323 	 umull r2,r3,r2,r3
 432 00a4 5B0B     	 lsrs r3,r3,#13
 433 00a6 3B61     	 str r3,[r7,#16]
 170:../Libraries/XMCLib/src/xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 434              	 .loc 2 170 0
 435 00a8 7A69     	 ldr r2,[r7,#20]
 436 00aa 3B69     	 ldr r3,[r7,#16]
 437 00ac D31A     	 subs r3,r2,r3
 438 00ae 013B     	 subs r3,r3,#1
 439 00b0 FB60     	 str r3,[r7,#12]
 171:../Libraries/XMCLib/src/xmc_can.c **** 
 172:../Libraries/XMCLib/src/xmc_can.c ****           if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 440              	 .loc 2 172 0
 441 00b2 3B69     	 ldr r3,[r7,#16]
 442 00b4 022B     	 cmp r3,#2
 443 00b6 0FD9     	 bls .L13
 444              	 .loc 2 172 0 is_stmt 0 discriminator 1
 445 00b8 3B69     	 ldr r3,[r7,#16]
 446 00ba 0F2B     	 cmp r3,#15
 447 00bc 0CD8     	 bhi .L13
 448              	 .loc 2 172 0 discriminator 2
 449 00be FB68     	 ldr r3,[r7,#12]
 450 00c0 012B     	 cmp r3,#1
 451 00c2 09D9     	 bls .L13
 173:../Libraries/XMCLib/src/xmc_can.c ****               (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bi
 452              	 .loc 2 173 0 is_stmt 1
 453 00c4 FB68     	 ldr r3,[r7,#12]
 454 00c6 062B     	 cmp r3,#6
 455 00c8 06D8     	 bhi .L13
 456              	 .loc 2 173 0 is_stmt 0 discriminator 1
 457 00ca 3B68     	 ldr r3,[r7]
 458 00cc 5B89     	 ldrh r3,[r3,#10]
 459 00ce 1A46     	 mov r2,r3
 460 00d0 FB68     	 ldr r3,[r7,#12]
 461 00d2 9A42     	 cmp r2,r3
 462 00d4 00D8     	 bhi .L13
 174:../Libraries/XMCLib/src/xmc_can.c ****           {
 175:../Libraries/XMCLib/src/xmc_can.c ****             break;
 463              	 .loc 2 175 0 is_stmt 1
 464 00d6 05E0     	 b .L16
 465              	.L13:
 176:../Libraries/XMCLib/src/xmc_can.c ****           }
 177:../Libraries/XMCLib/src/xmc_can.c **** 
 178:../Libraries/XMCLib/src/xmc_can.c **** 
 179:../Libraries/XMCLib/src/xmc_can.c ****         }
 180:../Libraries/XMCLib/src/xmc_can.c ****       }
 181:../Libraries/XMCLib/src/xmc_can.c ****       --ntq;
 466              	 .loc 2 181 0
 467 00d8 7B69     	 ldr r3,[r7,#20]
 468 00da 013B     	 subs r3,r3,#1
 469 00dc 7B61     	 str r3,[r7,#20]
 470              	.L12:
 146:../Libraries/XMCLib/src/xmc_can.c ****     {
 471              	 .loc 2 146 0
 472 00de 7B69     	 ldr r3,[r7,#20]
 473 00e0 072B     	 cmp r3,#7
 474 00e2 B0D8     	 bhi .L17
 475              	.L16:
 182:../Libraries/XMCLib/src/xmc_can.c ****     }
 183:../Libraries/XMCLib/src/xmc_can.c **** 
 184:../Libraries/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 476              	 .loc 2 184 0
 477 00e4 7B69     	 ldr r3,[r7,#20]
 478 00e6 072B     	 cmp r3,#7
 479 00e8 2BD9     	 bls .L11
 185:../Libraries/XMCLib/src/xmc_can.c ****     {
 186:../Libraries/XMCLib/src/xmc_can.c **** 
 187:../Libraries/XMCLib/src/xmc_can.c ****       XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
 188:../Libraries/XMCLib/src/xmc_can.c ****       XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
 189:../Libraries/XMCLib/src/xmc_can.c ****       XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));
 190:../Libraries/XMCLib/src/xmc_can.c **** 
 191:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 480              	 .loc 2 191 0
 481 00ea 7868     	 ldr r0,[r7,#4]
 482 00ec FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 192:../Libraries/XMCLib/src/xmc_can.c **** 
 193:../Libraries/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 194:../Libraries/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 483              	 .loc 2 194 0
 484 00f0 FB68     	 ldr r3,[r7,#12]
 485 00f2 013B     	 subs r3,r3,#1
 486 00f4 1B03     	 lsls r3,r3,#12
 487 00f6 03F4E042 	 and r2,r3,#28672
 195:../Libraries/XMCLib/src/xmc_can.c ****                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE
 488              	 .loc 2 195 0
 489 00fa 3B68     	 ldr r3,[r7]
 490 00fc 5B89     	 ldrh r3,[r3,#10]
 491 00fe 013B     	 subs r3,r3,#1
 492 0100 9B01     	 lsls r3,r3,#6
 493 0102 DBB2     	 uxtb r3,r3
 194:../Libraries/XMCLib/src/xmc_can.c ****                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE
 494              	 .loc 2 194 0
 495 0104 1A43     	 orrs r2,r2,r3
 196:../Libraries/XMCLib/src/xmc_can.c ****                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_M
 496              	 .loc 2 196 0
 497 0106 3B69     	 ldr r3,[r7,#16]
 498 0108 013B     	 subs r3,r3,#1
 499 010a 1B02     	 lsls r3,r3,#8
 500 010c 03F47063 	 and r3,r3,#3840
 195:../Libraries/XMCLib/src/xmc_can.c ****                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE
 501              	 .loc 2 195 0
 502 0110 42EA0301 	 orr r1,r2,r3
 197:../Libraries/XMCLib/src/xmc_can.c ****                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN
 503              	 .loc 2 197 0
 504 0114 BA69     	 ldr r2,[r7,#24]
 505 0116 1346     	 mov r3,r2
 506 0118 5B00     	 lsls r3,r3,#1
 507 011a 1344     	 add r3,r3,r2
 508 011c 1A46     	 mov r2,r3
 509 011e FB69     	 ldr r3,[r7,#28]
 510 0120 D340     	 lsrs r3,r3,r2
 511 0122 013B     	 subs r3,r3,#1
 512 0124 03F03F03 	 and r3,r3,#63
 196:../Libraries/XMCLib/src/xmc_can.c ****                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_M
 513              	 .loc 2 196 0
 514 0128 41EA0302 	 orr r2,r1,r3
 198:../Libraries/XMCLib/src/xmc_can.c ****                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 515              	 .loc 2 198 0
 516 012c BB69     	 ldr r3,[r7,#24]
 517 012e DB03     	 lsls r3,r3,#15
 518 0130 9BB2     	 uxth r3,r3
 197:../Libraries/XMCLib/src/xmc_can.c ****                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN
 519              	 .loc 2 197 0
 520 0132 1A43     	 orrs r2,r2,r3
 194:../Libraries/XMCLib/src/xmc_can.c ****                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE
 521              	 .loc 2 194 0
 522 0134 7B68     	 ldr r3,[r7,#4]
 523 0136 1A61     	 str r2,[r3,#16]
 199:../Libraries/XMCLib/src/xmc_can.c **** 
 200:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 524              	 .loc 2 200 0
 525 0138 7868     	 ldr r0,[r7,#4]
 526 013a FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 201:../Libraries/XMCLib/src/xmc_can.c **** 
 202:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 527              	 .loc 2 202 0
 528 013e 0023     	 movs r3,#0
 529 0140 00E0     	 b .L18
 530              	.L11:
 531              	.LBE2:
 203:../Libraries/XMCLib/src/xmc_can.c ****     }
 204:../Libraries/XMCLib/src/xmc_can.c ****   }
 205:../Libraries/XMCLib/src/xmc_can.c **** 
 206:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 532              	 .loc 2 206 0
 533 0142 0123     	 movs r3,#1
 534              	.L18:
 207:../Libraries/XMCLib/src/xmc_can.c **** }
 535              	 .loc 2 207 0
 536 0144 1846     	 mov r0,r3
 537 0146 2037     	 adds r7,r7,#32
 538              	.LCFI39:
 539              	 .cfi_def_cfa_offset 8
 540 0148 BD46     	 mov sp,r7
 541              	.LCFI40:
 542              	 .cfi_def_cfa_register 13
 543              	 
 544 014a 80BD     	 pop {r7,pc}
 545              	.L20:
 546              	 .align 2
 547              	.L19:
 548 014c 5917B7D1 	 .word -776530087
 549              	 .cfi_endproc
 550              	.LFE231:
 552              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 553              	 .align 2
 554              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 555              	 .thumb
 556              	 .thumb_func
 558              	XMC_CAN_NODE_NominalBitTimeConfigure:
 559              	.LFB232:
 208:../Libraries/XMCLib/src/xmc_can.c **** 
 209:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 210:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 211:../Libraries/XMCLib/src/xmc_can.c ****     const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
 212:../Libraries/XMCLib/src/xmc_can.c **** {
 560              	 .loc 2 212 0
 561              	 .cfi_startproc
 562              	 
 563              	 
 564 0000 80B5     	 push {r7,lr}
 565              	.LCFI41:
 566              	 .cfi_def_cfa_offset 8
 567              	 .cfi_offset 7,-8
 568              	 .cfi_offset 14,-4
 569 0002 90B0     	 sub sp,sp,#64
 570              	.LCFI42:
 571              	 .cfi_def_cfa_offset 72
 572 0004 00AF     	 add r7,sp,#0
 573              	.LCFI43:
 574              	 .cfi_def_cfa_register 7
 575 0006 7860     	 str r0,[r7,#4]
 576 0008 3960     	 str r1,[r7]
 213:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 577              	 .loc 2 213 0
 578 000a 0C23     	 movs r3,#12
 579 000c FB63     	 str r3,[r7,#60]
 214:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 580              	 .loc 2 214 0
 581 000e 0C23     	 movs r3,#12
 582 0010 BB63     	 str r3,[r7,#56]
 215:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 583              	 .loc 2 215 0
 584 0012 0023     	 movs r3,#0
 585 0014 7B63     	 str r3,[r7,#52]
 216:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 586              	 .loc 2 216 0
 587 0016 0123     	 movs r3,#1
 588 0018 3B63     	 str r3,[r7,#48]
 217:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 589              	 .loc 2 217 0
 590 001a 0023     	 movs r3,#0
 591 001c 7B61     	 str r3,[r7,#20]
 218:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 592              	 .loc 2 218 0
 593 001e 0023     	 movs r3,#0
 594 0020 FB62     	 str r3,[r7,#44]
 219:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 595              	 .loc 2 219 0
 596 0022 42F21073 	 movw r3,#10000
 597 0026 BB62     	 str r3,[r7,#40]
 220:../Libraries/XMCLib/src/xmc_can.c **** 
 221:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 222:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 223:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 224:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 225:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 226:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 227:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 228:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 229:../Libraries/XMCLib/src/xmc_can.c **** 
 230:../Libraries/XMCLib/src/xmc_can.c ****   /*
 231:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 232:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 233:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 234:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 235:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 236:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 237:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 238:../Libraries/XMCLib/src/xmc_can.c ****    *
 239:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 240:../Libraries/XMCLib/src/xmc_can.c ****    *
 241:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 242:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 243:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 244:../Libraries/XMCLib/src/xmc_can.c ****    */
 245:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 246:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 598              	 .loc 2 246 0
 599 0028 0123     	 movs r3,#1
 600 002a FB63     	 str r3,[r7,#60]
 601 002c 67E0     	 b .L22
 602              	.L31:
 603              	.LBB3:
 247:../Libraries/XMCLib/src/xmc_can.c ****   {
 248:../Libraries/XMCLib/src/xmc_can.c **** 
 249:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 604              	 .loc 2 249 0
 605 002e 3B68     	 ldr r3,[r7]
 606 0030 1A68     	 ldr r2,[r3]
 607 0032 1346     	 mov r3,r2
 608 0034 9B00     	 lsls r3,r3,#2
 609 0036 1344     	 add r3,r3,r2
 610 0038 5B00     	 lsls r3,r3,#1
 611 003a 1A46     	 mov r2,r3
 612 003c FB6B     	 ldr r3,[r7,#60]
 613 003e B2FBF3F3 	 udiv r3,r2,r3
 614 0042 3B61     	 str r3,[r7,#16]
 250:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 615              	 .loc 2 250 0
 616 0044 3B68     	 ldr r3,[r7]
 617 0046 5B68     	 ldr r3,[r3,#4]
 618 0048 3A69     	 ldr r2,[r7,#16]
 619 004a B2FBF3F3 	 udiv r3,r2,r3
 620 004e 7B62     	 str r3,[r7,#36]
 251:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 252:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 253:../Libraries/XMCLib/src/xmc_can.c **** 
 254:../Libraries/XMCLib/src/xmc_can.c ****     if ((temp_tbaud % 10U) > 5U)
 621              	 .loc 2 254 0
 622 0050 796A     	 ldr r1,[r7,#36]
 623 0052 5B4B     	 ldr r3,.L39
 624 0054 A3FB0123 	 umull r2,r3,r3,r1
 625 0058 DA08     	 lsrs r2,r3,#3
 626 005a 1346     	 mov r3,r2
 627 005c 9B00     	 lsls r3,r3,#2
 628 005e 1344     	 add r3,r3,r2
 629 0060 5B00     	 lsls r3,r3,#1
 630 0062 CA1A     	 subs r2,r1,r3
 631 0064 052A     	 cmp r2,#5
 632 0066 09D9     	 bls .L23
 255:../Libraries/XMCLib/src/xmc_can.c ****     {
 256:../Libraries/XMCLib/src/xmc_can.c ****       temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 633              	 .loc 2 256 0
 634 0068 7B6A     	 ldr r3,[r7,#36]
 635 006a 554A     	 ldr r2,.L39
 636 006c A2FB0323 	 umull r2,r3,r2,r3
 637 0070 DB08     	 lsrs r3,r3,#3
 638 0072 7B62     	 str r3,[r7,#36]
 257:../Libraries/XMCLib/src/xmc_can.c ****       temp_tbaud++;
 639              	 .loc 2 257 0
 640 0074 7B6A     	 ldr r3,[r7,#36]
 641 0076 0133     	 adds r3,r3,#1
 642 0078 7B62     	 str r3,[r7,#36]
 643 007a 05E0     	 b .L24
 644              	.L23:
 258:../Libraries/XMCLib/src/xmc_can.c ****     }
 259:../Libraries/XMCLib/src/xmc_can.c ****     else
 260:../Libraries/XMCLib/src/xmc_can.c ****     {
 261:../Libraries/XMCLib/src/xmc_can.c ****       temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 645              	 .loc 2 261 0
 646 007c 7B6A     	 ldr r3,[r7,#36]
 647 007e 504A     	 ldr r2,.L39
 648 0080 A2FB0323 	 umull r2,r3,r2,r3
 649 0084 DB08     	 lsrs r3,r3,#3
 650 0086 7B62     	 str r3,[r7,#36]
 651              	.L24:
 262:../Libraries/XMCLib/src/xmc_can.c ****     }
 263:../Libraries/XMCLib/src/xmc_can.c **** 
 264:../Libraries/XMCLib/src/xmc_can.c ****     if (temp_tbaud > 0U)
 652              	 .loc 2 264 0
 653 0088 7B6A     	 ldr r3,[r7,#36]
 654 008a 002B     	 cmp r3,#0
 655 008c 0AD0     	 beq .L25
 265:../Libraries/XMCLib/src/xmc_can.c ****     {
 266:../Libraries/XMCLib/src/xmc_can.c ****       temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 656              	 .loc 2 266 0
 657 008e 7A6A     	 ldr r2,[r7,#36]
 658 0090 1346     	 mov r3,r2
 659 0092 9B00     	 lsls r3,r3,#2
 660 0094 1344     	 add r3,r3,r2
 661 0096 5B00     	 lsls r3,r3,#1
 662 0098 1A46     	 mov r2,r3
 663 009a 3B69     	 ldr r3,[r7,#16]
 664 009c B3FBF2F3 	 udiv r3,r3,r2
 665 00a0 3B62     	 str r3,[r7,#32]
 666 00a2 07E0     	 b .L26
 667              	.L25:
 267:../Libraries/XMCLib/src/xmc_can.c ****     }
 268:../Libraries/XMCLib/src/xmc_can.c ****     else
 269:../Libraries/XMCLib/src/xmc_can.c ****     {
 270:../Libraries/XMCLib/src/xmc_can.c ****       temp_baudrate = f_quanta / 10U;
 668              	 .loc 2 270 0
 669 00a4 3B69     	 ldr r3,[r7,#16]
 670 00a6 464A     	 ldr r2,.L39
 671 00a8 A2FB0323 	 umull r2,r3,r2,r3
 672 00ac DB08     	 lsrs r3,r3,#3
 673 00ae 3B62     	 str r3,[r7,#32]
 271:../Libraries/XMCLib/src/xmc_can.c ****       temp_tbaud = 1;
 674              	 .loc 2 271 0
 675 00b0 0123     	 movs r3,#1
 676 00b2 7B62     	 str r3,[r7,#36]
 677              	.L26:
 272:../Libraries/XMCLib/src/xmc_can.c ****     }
 273:../Libraries/XMCLib/src/xmc_can.c **** 
 274:../Libraries/XMCLib/src/xmc_can.c ****     if (temp_baudrate >= can_bit_time->baudrate)
 678              	 .loc 2 274 0
 679 00b4 3B68     	 ldr r3,[r7]
 680 00b6 5A68     	 ldr r2,[r3,#4]
 681 00b8 3B6A     	 ldr r3,[r7,#32]
 682 00ba 9A42     	 cmp r2,r3
 683 00bc 05D8     	 bhi .L27
 275:../Libraries/XMCLib/src/xmc_can.c ****     {
 276:../Libraries/XMCLib/src/xmc_can.c ****       error = temp_baudrate - can_bit_time->baudrate;
 684              	 .loc 2 276 0
 685 00be 3B68     	 ldr r3,[r7]
 686 00c0 5B68     	 ldr r3,[r3,#4]
 687 00c2 3A6A     	 ldr r2,[r7,#32]
 688 00c4 D31A     	 subs r3,r2,r3
 689 00c6 FB61     	 str r3,[r7,#28]
 690 00c8 04E0     	 b .L28
 691              	.L27:
 277:../Libraries/XMCLib/src/xmc_can.c ****     }
 278:../Libraries/XMCLib/src/xmc_can.c ****     else
 279:../Libraries/XMCLib/src/xmc_can.c ****     {
 280:../Libraries/XMCLib/src/xmc_can.c ****       error = can_bit_time->baudrate - temp_baudrate;
 692              	 .loc 2 280 0
 693 00ca 3B68     	 ldr r3,[r7]
 694 00cc 5A68     	 ldr r2,[r3,#4]
 695 00ce 3B6A     	 ldr r3,[r7,#32]
 696 00d0 D31A     	 subs r3,r2,r3
 697 00d2 FB61     	 str r3,[r7,#28]
 698              	.L28:
 281:../Libraries/XMCLib/src/xmc_can.c ****     }
 282:../Libraries/XMCLib/src/xmc_can.c **** 
 283:../Libraries/XMCLib/src/xmc_can.c ****     if ((temp_tbaud <= 20U) && (best_error > error))
 699              	 .loc 2 283 0
 700 00d4 7B6A     	 ldr r3,[r7,#36]
 701 00d6 142B     	 cmp r3,#20
 702 00d8 0ED8     	 bhi .L29
 703              	 .loc 2 283 0 is_stmt 0 discriminator 1
 704 00da BA6A     	 ldr r2,[r7,#40]
 705 00dc FB69     	 ldr r3,[r7,#28]
 706 00de 9A42     	 cmp r2,r3
 707 00e0 0AD9     	 bls .L29
 284:../Libraries/XMCLib/src/xmc_can.c ****     {
 285:../Libraries/XMCLib/src/xmc_can.c ****       best_brp = temp_brp;
 708              	 .loc 2 285 0 is_stmt 1
 709 00e2 FB6B     	 ldr r3,[r7,#60]
 710 00e4 7B63     	 str r3,[r7,#52]
 286:../Libraries/XMCLib/src/xmc_can.c ****       best_tbaud = temp_tbaud;
 711              	 .loc 2 286 0
 712 00e6 7B6A     	 ldr r3,[r7,#36]
 713 00e8 FB62     	 str r3,[r7,#44]
 287:../Libraries/XMCLib/src/xmc_can.c ****       best_error = (error);
 714              	 .loc 2 287 0
 715 00ea FB69     	 ldr r3,[r7,#28]
 716 00ec BB62     	 str r3,[r7,#40]
 288:../Libraries/XMCLib/src/xmc_can.c **** 
 289:../Libraries/XMCLib/src/xmc_can.c ****       if (error < 1000U)
 717              	 .loc 2 289 0
 718 00ee FB69     	 ldr r3,[r7,#28]
 719 00f0 B3F57A7F 	 cmp r3,#1000
 720 00f4 00D2     	 bcs .L29
 290:../Libraries/XMCLib/src/xmc_can.c ****       {
 291:../Libraries/XMCLib/src/xmc_can.c ****         break;
 721              	 .loc 2 291 0
 722 00f6 05E0     	 b .L30
 723              	.L29:
 724              	.LBE3:
 246:../Libraries/XMCLib/src/xmc_can.c ****   {
 725              	 .loc 2 246 0 discriminator 2
 726 00f8 FB6B     	 ldr r3,[r7,#60]
 727 00fa 0133     	 adds r3,r3,#1
 728 00fc FB63     	 str r3,[r7,#60]
 729              	.L22:
 246:../Libraries/XMCLib/src/xmc_can.c ****   {
 730              	 .loc 2 246 0 is_stmt 0 discriminator 1
 731 00fe FB6B     	 ldr r3,[r7,#60]
 732 0100 402B     	 cmp r3,#64
 733 0102 94D9     	 bls .L31
 734              	.L30:
 292:../Libraries/XMCLib/src/xmc_can.c ****       }
 293:../Libraries/XMCLib/src/xmc_can.c ****     }
 294:../Libraries/XMCLib/src/xmc_can.c ****   }
 295:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 296:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 735              	 .loc 2 296 0 is_stmt 1
 736 0104 42F21073 	 movw r3,#10000
 737 0108 BB62     	 str r3,[r7,#40]
 297:../Libraries/XMCLib/src/xmc_can.c **** 
 298:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 738              	 .loc 2 298 0
 739 010a 4023     	 movs r3,#64
 740 010c BB63     	 str r3,[r7,#56]
 741 010e 2EE0     	 b .L32
 742              	.L38:
 743              	.LBB4:
 299:../Libraries/XMCLib/src/xmc_can.c ****   {
 300:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 744              	 .loc 2 300 0
 745 0110 BB6B     	 ldr r3,[r7,#56]
 746 0112 0133     	 adds r3,r3,#1
 747 0114 42F21072 	 movw r2,#10000
 748 0118 02FB03F2 	 mul r2,r2,r3
 749 011c FB6A     	 ldr r3,[r7,#44]
 750 011e B2FBF3F3 	 udiv r3,r2,r3
 751 0122 FB60     	 str r3,[r7,#12]
 301:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 302:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint >= can_bit_time->sample_point)
 752              	 .loc 2 302 0
 753 0124 3B68     	 ldr r3,[r7]
 754 0126 1B89     	 ldrh r3,[r3,#8]
 755 0128 1A46     	 mov r2,r3
 756 012a FB68     	 ldr r3,[r7,#12]
 757 012c 9A42     	 cmp r2,r3
 758 012e 06D8     	 bhi .L33
 303:../Libraries/XMCLib/src/xmc_can.c ****     {
 304:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 759              	 .loc 2 304 0
 760 0130 3B68     	 ldr r3,[r7]
 761 0132 1B89     	 ldrh r3,[r3,#8]
 762 0134 1A46     	 mov r2,r3
 763 0136 FB68     	 ldr r3,[r7,#12]
 764 0138 9B1A     	 subs r3,r3,r2
 765 013a BB61     	 str r3,[r7,#24]
 766 013c 05E0     	 b .L34
 767              	.L33:
 305:../Libraries/XMCLib/src/xmc_can.c ****     }
 306:../Libraries/XMCLib/src/xmc_can.c ****     else
 307:../Libraries/XMCLib/src/xmc_can.c ****     {
 308:../Libraries/XMCLib/src/xmc_can.c ****       error = can_bit_time->sample_point  - tempSamplePoint;
 768              	 .loc 2 308 0
 769 013e 3B68     	 ldr r3,[r7]
 770 0140 1B89     	 ldrh r3,[r3,#8]
 771 0142 1A46     	 mov r2,r3
 772 0144 FB68     	 ldr r3,[r7,#12]
 773 0146 D31A     	 subs r3,r2,r3
 774 0148 BB61     	 str r3,[r7,#24]
 775              	.L34:
 309:../Libraries/XMCLib/src/xmc_can.c ****     }
 310:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 776              	 .loc 2 310 0
 777 014a BA6A     	 ldr r2,[r7,#40]
 778 014c BB69     	 ldr r3,[r7,#24]
 779 014e 9A42     	 cmp r2,r3
 780 0150 03D9     	 bls .L35
 311:../Libraries/XMCLib/src/xmc_can.c ****     {
 312:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 781              	 .loc 2 312 0
 782 0152 BB6B     	 ldr r3,[r7,#56]
 783 0154 3B63     	 str r3,[r7,#48]
 313:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 784              	 .loc 2 313 0
 785 0156 BB69     	 ldr r3,[r7,#24]
 786 0158 BB62     	 str r3,[r7,#40]
 787              	.L35:
 314:../Libraries/XMCLib/src/xmc_can.c ****     }
 315:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 788              	 .loc 2 315 0
 789 015a 3B68     	 ldr r3,[r7]
 790 015c 1B89     	 ldrh r3,[r3,#8]
 791 015e 1A46     	 mov r2,r3
 792 0160 FB68     	 ldr r3,[r7,#12]
 793 0162 9A42     	 cmp r2,r3
 794 0164 00D9     	 bls .L36
 316:../Libraries/XMCLib/src/xmc_can.c ****     {
 317:../Libraries/XMCLib/src/xmc_can.c ****       break;
 795              	 .loc 2 317 0
 796 0166 05E0     	 b .L37
 797              	.L36:
 798              	.LBE4:
 298:../Libraries/XMCLib/src/xmc_can.c ****   {
 799              	 .loc 2 298 0 discriminator 2
 800 0168 BB6B     	 ldr r3,[r7,#56]
 801 016a 013B     	 subs r3,r3,#1
 802 016c BB63     	 str r3,[r7,#56]
 803              	.L32:
 298:../Libraries/XMCLib/src/xmc_can.c ****   {
 804              	 .loc 2 298 0 is_stmt 0 discriminator 1
 805 016e BB6B     	 ldr r3,[r7,#56]
 806 0170 022B     	 cmp r3,#2
 807 0172 CDD8     	 bhi .L38
 808              	.L37:
 318:../Libraries/XMCLib/src/xmc_can.c ****     }
 319:../Libraries/XMCLib/src/xmc_can.c ****   }
 320:../Libraries/XMCLib/src/xmc_can.c **** 
 321:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 809              	 .loc 2 321 0 is_stmt 1
 810 0174 FA6A     	 ldr r2,[r7,#44]
 811 0176 3B6B     	 ldr r3,[r7,#48]
 812 0178 D31A     	 subs r3,r2,r3
 813 017a 013B     	 subs r3,r3,#1
 814 017c 7B61     	 str r3,[r7,#20]
 322:../Libraries/XMCLib/src/xmc_can.c **** 
 323:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 815              	 .loc 2 323 0
 816 017e 7868     	 ldr r0,[r7,#4]
 817 0180 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 324:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 325:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 818              	 .loc 2 325 0
 819 0184 7B69     	 ldr r3,[r7,#20]
 820 0186 013B     	 subs r3,r3,#1
 821 0188 1B03     	 lsls r3,r3,#12
 822 018a 03F4E042 	 and r2,r3,#28672
 326:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (
 823              	 .loc 2 326 0
 824 018e 3B68     	 ldr r3,[r7]
 825 0190 5B89     	 ldrh r3,[r3,#10]
 826 0192 013B     	 subs r3,r3,#1
 827 0194 9B01     	 lsls r3,r3,#6
 828 0196 DBB2     	 uxtb r3,r3
 325:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (
 829              	 .loc 2 325 0
 830 0198 1A43     	 orrs r2,r2,r3
 327:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_N
 831              	 .loc 2 327 0
 832 019a 3B6B     	 ldr r3,[r7,#48]
 833 019c 013B     	 subs r3,r3,#1
 834 019e 1B02     	 lsls r3,r3,#8
 835 01a0 03F47063 	 and r3,r3,#3840
 326:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (
 836              	 .loc 2 326 0
 837 01a4 1A43     	 orrs r2,r2,r3
 328:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 838              	 .loc 2 328 0
 839 01a6 7B6B     	 ldr r3,[r7,#52]
 840 01a8 013B     	 subs r3,r3,#1
 841 01aa 03F03F03 	 and r3,r3,#63
 842 01ae 1A43     	 orrs r2,r2,r3
 325:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw) - 1U) << CAN_NODE_NBTR_SJW_Pos)) & (
 843              	 .loc 2 325 0
 844 01b0 7B68     	 ldr r3,[r7,#4]
 845 01b2 1A61     	 str r2,[r3,#16]
 329:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 330:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 846              	 .loc 2 330 0
 847 01b4 7868     	 ldr r0,[r7,#4]
 848 01b6 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 331:../Libraries/XMCLib/src/xmc_can.c **** }
 849              	 .loc 2 331 0
 850 01ba 4037     	 adds r7,r7,#64
 851              	.LCFI44:
 852              	 .cfi_def_cfa_offset 8
 853 01bc BD46     	 mov sp,r7
 854              	.LCFI45:
 855              	 .cfi_def_cfa_register 13
 856              	 
 857 01be 80BD     	 pop {r7,pc}
 858              	.L40:
 859              	 .align 2
 860              	.L39:
 861 01c0 CDCCCCCC 	 .word -858993459
 862              	 .cfi_endproc
 863              	.LFE232:
 865              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 866              	 .align 2
 867              	 .global XMC_CAN_AllocateMOtoNodeList
 868              	 .thumb
 869              	 .thumb_func
 871              	XMC_CAN_AllocateMOtoNodeList:
 872              	.LFB233:
 332:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 333:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 334:../Libraries/XMCLib/src/xmc_can.c **** {
 873              	 .loc 2 334 0
 874              	 .cfi_startproc
 875              	 
 876              	 
 877 0000 80B5     	 push {r7,lr}
 878              	.LCFI46:
 879              	 .cfi_def_cfa_offset 8
 880              	 .cfi_offset 7,-8
 881              	 .cfi_offset 14,-4
 882 0002 82B0     	 sub sp,sp,#8
 883              	.LCFI47:
 884              	 .cfi_def_cfa_offset 16
 885 0004 00AF     	 add r7,sp,#0
 886              	.LCFI48:
 887              	 .cfi_def_cfa_register 7
 888 0006 7860     	 str r0,[r7,#4]
 889 0008 0B46     	 mov r3,r1
 890 000a FB70     	 strb r3,[r7,#3]
 891 000c 1346     	 mov r3,r2
 892 000e BB70     	 strb r3,[r7,#2]
 335:../Libraries/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 336:../Libraries/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 893              	 .loc 2 336 0
 894 0010 00BF     	 nop
 895              	.L42:
 896              	 .loc 2 336 0 is_stmt 0 discriminator 1
 897 0012 7868     	 ldr r0,[r7,#4]
 898 0014 FFF7FEFF 	 bl XMC_CAN_IsPanelControlReady
 899 0018 0346     	 mov r3,r0
 900 001a 83F00103 	 eor r3,r3,#1
 901 001e DBB2     	 uxtb r3,r3
 902 0020 002B     	 cmp r3,#0
 903 0022 F6D1     	 bne .L42
 337:../Libraries/XMCLib/src/xmc_can.c ****   {
 338:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 339:../Libraries/XMCLib/src/xmc_can.c ****   };
 340:../Libraries/XMCLib/src/xmc_can.c **** 
 341:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 342:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 904              	 .loc 2 342 0 is_stmt 1
 905 0024 FB78     	 ldrb r3,[r7,#3]
 906 0026 0133     	 adds r3,r3,#1
 907 0028 DBB2     	 uxtb r3,r3
 908 002a BA78     	 ldrb r2,[r7,#2]
 909 002c 7868     	 ldr r0,[r7,#4]
 910 002e 0221     	 movs r1,#2
 911 0030 FFF7FEFF 	 bl XMC_CAN_PanelControl
 343:../Libraries/XMCLib/src/xmc_can.c **** }
 912              	 .loc 2 343 0
 913 0034 0837     	 adds r7,r7,#8
 914              	.LCFI49:
 915              	 .cfi_def_cfa_offset 8
 916 0036 BD46     	 mov sp,r7
 917              	.LCFI50:
 918              	 .cfi_def_cfa_register 13
 919              	 
 920 0038 80BD     	 pop {r7,pc}
 921              	 .cfi_endproc
 922              	.LFE233:
 924 003a 00BF     	 .section .text.XMC_CAN_Disable,"ax",%progbits
 925              	 .align 2
 926              	 .global XMC_CAN_Disable
 927              	 .thumb
 928              	 .thumb_func
 930              	XMC_CAN_Disable:
 931              	.LFB234:
 344:../Libraries/XMCLib/src/xmc_can.c **** 
 345:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 346:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 347:../Libraries/XMCLib/src/xmc_can.c **** {
 932              	 .loc 2 347 0
 933              	 .cfi_startproc
 934              	 
 935              	 
 936 0000 80B5     	 push {r7,lr}
 937              	.LCFI51:
 938              	 .cfi_def_cfa_offset 8
 939              	 .cfi_offset 7,-8
 940              	 .cfi_offset 14,-4
 941 0002 82B0     	 sub sp,sp,#8
 942              	.LCFI52:
 943              	 .cfi_def_cfa_offset 16
 944 0004 00AF     	 add r7,sp,#0
 945              	.LCFI53:
 946              	 .cfi_def_cfa_register 7
 947 0006 7860     	 str r0,[r7,#4]
 348:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 349:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 948              	 .loc 2 349 0
 949 0008 7B68     	 ldr r3,[r7,#4]
 950 000a 0122     	 movs r2,#1
 951 000c 1A60     	 str r2,[r3]
 350:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 351:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 952              	 .loc 2 351 0
 953 000e 0348     	 ldr r0,.L44
 954 0010 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 352:../Libraries/XMCLib/src/xmc_can.c **** #endif
 353:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 354:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 355:../Libraries/XMCLib/src/xmc_can.c **** #endif
 356:../Libraries/XMCLib/src/xmc_can.c **** }
 955              	 .loc 2 356 0
 956 0014 0837     	 adds r7,r7,#8
 957              	.LCFI54:
 958              	 .cfi_def_cfa_offset 8
 959 0016 BD46     	 mov sp,r7
 960              	.LCFI55:
 961              	 .cfi_def_cfa_register 13
 962              	 
 963 0018 80BD     	 pop {r7,pc}
 964              	.L45:
 965 001a 00BF     	 .align 2
 966              	.L44:
 967 001c 10000010 	 .word 268435472
 968              	 .cfi_endproc
 969              	.LFE234:
 971              	 .section .text.XMC_CAN_Enable,"ax",%progbits
 972              	 .align 2
 973              	 .global XMC_CAN_Enable
 974              	 .thumb
 975              	 .thumb_func
 977              	XMC_CAN_Enable:
 978              	.LFB235:
 357:../Libraries/XMCLib/src/xmc_can.c **** 
 358:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 359:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 360:../Libraries/XMCLib/src/xmc_can.c **** {
 979              	 .loc 2 360 0
 980              	 .cfi_startproc
 981              	 
 982              	 
 983 0000 80B5     	 push {r7,lr}
 984              	.LCFI56:
 985              	 .cfi_def_cfa_offset 8
 986              	 .cfi_offset 7,-8
 987              	 .cfi_offset 14,-4
 988 0002 82B0     	 sub sp,sp,#8
 989              	.LCFI57:
 990              	 .cfi_def_cfa_offset 16
 991 0004 00AF     	 add r7,sp,#0
 992              	.LCFI58:
 993              	 .cfi_def_cfa_register 7
 994 0006 7860     	 str r0,[r7,#4]
 361:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 362:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 363:../Libraries/XMCLib/src/xmc_can.c **** #endif
 364:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 365:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 995              	 .loc 2 365 0
 996 0008 0948     	 ldr r0,.L48
 997 000a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 366:../Libraries/XMCLib/src/xmc_can.c **** #endif
 367:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 368:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 998              	 .loc 2 368 0
 999 000e 7B68     	 ldr r3,[r7,#4]
 1000 0010 1B68     	 ldr r3,[r3]
 1001 0012 23F00102 	 bic r2,r3,#1
 1002 0016 7B68     	 ldr r3,[r7,#4]
 1003 0018 1A60     	 str r2,[r3]
 369:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 1004              	 .loc 2 369 0
 1005 001a 00BF     	 nop
 1006              	.L47:
 1007              	 .loc 2 369 0 is_stmt 0 discriminator 1
 1008 001c 7B68     	 ldr r3,[r7,#4]
 1009 001e 1B68     	 ldr r3,[r3]
 1010 0020 03F00203 	 and r3,r3,#2
 1011 0024 002B     	 cmp r3,#0
 1012 0026 F9D1     	 bne .L47
 370:../Libraries/XMCLib/src/xmc_can.c ****   {
 371:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 372:../Libraries/XMCLib/src/xmc_can.c ****   };
 373:../Libraries/XMCLib/src/xmc_can.c **** }
 1013              	 .loc 2 373 0 is_stmt 1
 1014 0028 0837     	 adds r7,r7,#8
 1015              	.LCFI59:
 1016              	 .cfi_def_cfa_offset 8
 1017 002a BD46     	 mov sp,r7
 1018              	.LCFI60:
 1019              	 .cfi_def_cfa_register 13
 1020              	 
 1021 002c 80BD     	 pop {r7,pc}
 1022              	.L49:
 1023 002e 00BF     	 .align 2
 1024              	.L48:
 1025 0030 10000010 	 .word 268435472
 1026              	 .cfi_endproc
 1027              	.LFE235:
 1029              	 .section .text.XMC_CAN_Init,"ax",%progbits
 1030              	 .align 2
 1031              	 .global XMC_CAN_Init
 1032              	 .thumb
 1033              	 .thumb_func
 1035              	XMC_CAN_Init:
 1036              	.LFB236:
 374:../Libraries/XMCLib/src/xmc_can.c **** 
 375:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 376:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 377:../Libraries/XMCLib/src/xmc_can.c **** {
 378:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 379:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 380:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 381:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 382:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 383:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 384:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 385:../Libraries/XMCLib/src/xmc_can.c **** 
 386:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 387:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 388:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 389:../Libraries/XMCLib/src/xmc_can.c **** 
 390:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 391:../Libraries/XMCLib/src/xmc_can.c **** 
 392:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 393:../Libraries/XMCLib/src/xmc_can.c **** 
 394:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 395:../Libraries/XMCLib/src/xmc_can.c **** 
 396:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 397:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 398:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 399:../Libraries/XMCLib/src/xmc_can.c **** 
 400:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 401:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 402:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 403:../Libraries/XMCLib/src/xmc_can.c **** 
 404:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 405:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 406:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 407:../Libraries/XMCLib/src/xmc_can.c **** 
 408:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 409:../Libraries/XMCLib/src/xmc_can.c **** 
 410:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 411:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 412:../Libraries/XMCLib/src/xmc_can.c **** 
 413:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 414:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 415:../Libraries/XMCLib/src/xmc_can.c **** 
 416:../Libraries/XMCLib/src/xmc_can.c **** }
 417:../Libraries/XMCLib/src/xmc_can.c **** 
 418:../Libraries/XMCLib/src/xmc_can.c **** #else
 419:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 420:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 421:../Libraries/XMCLib/src/xmc_can.c **** {
 1037              	 .loc 2 421 0
 1038              	 .cfi_startproc
 1039              	 
 1040              	 
 1041 0000 80B5     	 push {r7,lr}
 1042              	.LCFI61:
 1043              	 .cfi_def_cfa_offset 8
 1044              	 .cfi_offset 7,-8
 1045              	 .cfi_offset 14,-4
 1046 0002 8CB0     	 sub sp,sp,#48
 1047              	.LCFI62:
 1048              	 .cfi_def_cfa_offset 56
 1049 0004 00AF     	 add r7,sp,#0
 1050              	.LCFI63:
 1051              	 .cfi_def_cfa_register 7
 1052 0006 7860     	 str r0,[r7,#4]
 1053 0008 3960     	 str r1,[r7]
 422:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 423:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 424:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 425:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 426:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 427:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 428:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 429:../Libraries/XMCLib/src/xmc_can.c **** 
 430:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 1054              	 .loc 2 430 0
 1055 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1056 000e F862     	 str r0,[r7,#44]
 431:../Libraries/XMCLib/src/xmc_can.c **** 
 432:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 433:../Libraries/XMCLib/src/xmc_can.c **** 
 434:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 435:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1057              	 .loc 2 435 0
 1058 0010 7868     	 ldr r0,[r7,#4]
 1059 0012 FFF7FEFF 	 bl XMC_CAN_Enable
 436:../Libraries/XMCLib/src/xmc_can.c **** 
 437:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 438:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1060              	 .loc 2 438 0
 1061 0016 FA6A     	 ldr r2,[r7,#44]
 1062 0018 3B68     	 ldr r3,[r7]
 1063 001a B2FBF3F3 	 udiv r3,r2,r3
 1064 001e C3F58063 	 rsb r3,r3,#1024
 1065 0022 0020     	 movs r0,#0
 1066 0024 1946     	 mov r1,r3
 1067 0026 FFF7FEFF 	 bl max
 1068 002a 0346     	 mov r3,r0
 1069 002c 1846     	 mov r0,r3
 1070 002e 40F2FF31 	 movw r1,#1023
 1071 0032 FFF7FEFF 	 bl min
 1072 0036 B862     	 str r0,[r7,#40]
 439:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 1073              	 .loc 2 439 0
 1074 0038 BB6A     	 ldr r3,[r7,#40]
 1075 003a C3F58063 	 rsb r3,r3,#1024
 1076 003e FA6A     	 ldr r2,[r7,#44]
 1077 0040 B2FBF3F3 	 udiv r3,r2,r3
 1078 0044 7B62     	 str r3,[r7,#36]
 440:../Libraries/XMCLib/src/xmc_can.c **** 
 441:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 442:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 1079              	 .loc 2 442 0
 1080 0046 3B68     	 ldr r3,[r7]
 1081 0048 9B09     	 lsrs r3,r3,#6
 1082 004a 3B62     	 str r3,[r7,#32]
 443:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 1083              	 .loc 2 443 0
 1084 004c FB6A     	 ldr r3,[r7,#44]
 1085 004e 9B09     	 lsrs r3,r3,#6
 1086 0050 FB61     	 str r3,[r7,#28]
 444:../Libraries/XMCLib/src/xmc_can.c **** 
 445:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 1087              	 .loc 2 445 0
 1088 0052 3B6A     	 ldr r3,[r7,#32]
 1089 0054 9A02     	 lsls r2,r3,#10
 1090 0056 FB69     	 ldr r3,[r7,#28]
 1091 0058 B2FBF3F3 	 udiv r3,r2,r3
 1092 005c 1846     	 mov r0,r3
 1093 005e 40F2FF31 	 movw r1,#1023
 1094 0062 FFF7FEFF 	 bl min
 1095 0066 B861     	 str r0,[r7,#24]
 446:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 1096              	 .loc 2 446 0
 1097 0068 FB69     	 ldr r3,[r7,#28]
 1098 006a BA69     	 ldr r2,[r7,#24]
 1099 006c 02FB03F3 	 mul r3,r2,r3
 1100 0070 9B0A     	 lsrs r3,r3,#10
 1101 0072 7B61     	 str r3,[r7,#20]
 447:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 1102              	 .loc 2 447 0
 1103 0074 7B69     	 ldr r3,[r7,#20]
 1104 0076 9B01     	 lsls r3,r3,#6
 1105 0078 7B61     	 str r3,[r7,#20]
 448:../Libraries/XMCLib/src/xmc_can.c **** 
 449:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 1106              	 .loc 2 449 0
 1107 007a 3A68     	 ldr r2,[r7]
 1108 007c 7B6A     	 ldr r3,[r7,#36]
 1109 007e D21A     	 subs r2,r2,r3
 1110 0080 3968     	 ldr r1,[r7]
 1111 0082 7B69     	 ldr r3,[r7,#20]
 1112 0084 CB1A     	 subs r3,r1,r3
 1113 0086 9A42     	 cmp r2,r3
 1114 0088 94BF     	 ite ls
 1115 008a 0123     	 movls r3,#1
 1116 008c 0023     	 movhi r3,#0
 1117 008e FB74     	 strb r3,[r7,#19]
 450:../Libraries/XMCLib/src/xmc_can.c **** 
 451:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 1118              	 .loc 2 451 0
 1119 0090 FB7C     	 ldrb r3,[r7,#19]
 1120 0092 002B     	 cmp r3,#0
 1121 0094 01D0     	 beq .L51
 1122              	 .loc 2 451 0 is_stmt 0 discriminator 1
 1123 0096 BB6A     	 ldr r3,[r7,#40]
 1124 0098 00E0     	 b .L52
 1125              	.L51:
 1126              	 .loc 2 451 0 discriminator 2
 1127 009a BB69     	 ldr r3,[r7,#24]
 1128              	.L52:
 1129              	 .loc 2 451 0 discriminator 4
 1130 009c FB60     	 str r3,[r7,#12]
 452:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 1131              	 .loc 2 452 0 is_stmt 1 discriminator 4
 1132 009e FB7C     	 ldrb r3,[r7,#19]
 1133 00a0 002B     	 cmp r3,#0
 1134 00a2 01D0     	 beq .L53
 1135              	 .loc 2 452 0 is_stmt 0 discriminator 1
 1136 00a4 0123     	 movs r3,#1
 1137 00a6 00E0     	 b .L54
 1138              	.L53:
 1139              	 .loc 2 452 0 discriminator 2
 1140 00a8 0223     	 movs r3,#2
 1141              	.L54:
 1142              	 .loc 2 452 0 discriminator 4
 1143 00aa FB72     	 strb r3,[r7,#11]
 453:../Libraries/XMCLib/src/xmc_can.c **** 
 454:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1144              	 .loc 2 454 0 is_stmt 1 discriminator 4
 1145 00ac 7B68     	 ldr r3,[r7,#4]
 1146 00ae DB68     	 ldr r3,[r3,#12]
 1147 00b0 23F44343 	 bic r3,r3,#49920
 1148 00b4 23F0FF03 	 bic r3,r3,#255
 1149 00b8 7A68     	 ldr r2,[r7,#4]
 1150 00ba D360     	 str r3,[r2,#12]
 455:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 1151              	 .loc 2 455 0 discriminator 4
 1152 00bc 7B68     	 ldr r3,[r7,#4]
 1153 00be DA68     	 ldr r2,[r3,#12]
 1154 00c0 FB7A     	 ldrb r3,[r7,#11]
 1155 00c2 9903     	 lsls r1,r3,#14
 1156 00c4 FB68     	 ldr r3,[r7,#12]
 1157 00c6 0B43     	 orrs r3,r3,r1
 1158 00c8 1A43     	 orrs r2,r2,r3
 1159 00ca 7B68     	 ldr r3,[r7,#4]
 1160 00cc DA60     	 str r2,[r3,#12]
 456:../Libraries/XMCLib/src/xmc_can.c **** }
 1161              	 .loc 2 456 0 discriminator 4
 1162 00ce 3037     	 adds r7,r7,#48
 1163              	.LCFI64:
 1164              	 .cfi_def_cfa_offset 8
 1165 00d0 BD46     	 mov sp,r7
 1166              	.LCFI65:
 1167              	 .cfi_def_cfa_register 13
 1168              	 
 1169 00d2 80BD     	 pop {r7,pc}
 1170              	 .cfi_endproc
 1171              	.LFE236:
 1173              	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 1174              	 .align 2
 1175              	 .global XMC_CAN_SetBaudrateClockSource
 1176              	 .thumb
 1177              	 .thumb_func
 1179              	XMC_CAN_SetBaudrateClockSource:
 1180              	.LFB237:
 457:../Libraries/XMCLib/src/xmc_can.c **** #endif
 458:../Libraries/XMCLib/src/xmc_can.c **** 
 459:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
 460:../Libraries/XMCLib/src/xmc_can.c **** {
 1181              	 .loc 2 460 0
 1182              	 .cfi_startproc
 1183              	 
 1184              	 
 1185              	 
 1186 0000 80B4     	 push {r7}
 1187              	.LCFI66:
 1188              	 .cfi_def_cfa_offset 4
 1189              	 .cfi_offset 7,-4
 1190 0002 83B0     	 sub sp,sp,#12
 1191              	.LCFI67:
 1192              	 .cfi_def_cfa_offset 16
 1193 0004 00AF     	 add r7,sp,#0
 1194              	.LCFI68:
 1195              	 .cfi_def_cfa_register 7
 1196 0006 7860     	 str r0,[r7,#4]
 1197 0008 0B46     	 mov r3,r1
 1198 000a FB70     	 strb r3,[r7,#3]
 461:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 462:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 463:../Libraries/XMCLib/src/xmc_can.c **** #else
 464:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 465:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(source);
 466:../Libraries/XMCLib/src/xmc_can.c **** #endif
 467:../Libraries/XMCLib/src/xmc_can.c **** }
 1199              	 .loc 2 467 0
 1200 000c 0C37     	 adds r7,r7,#12
 1201              	.LCFI69:
 1202              	 .cfi_def_cfa_offset 4
 1203 000e BD46     	 mov sp,r7
 1204              	.LCFI70:
 1205              	 .cfi_def_cfa_register 13
 1206              	 
 1207 0010 5DF8047B 	 ldr r7,[sp],#4
 1208              	.LCFI71:
 1209              	 .cfi_restore 7
 1210              	 .cfi_def_cfa_offset 0
 1211 0014 7047     	 bx lr
 1212              	 .cfi_endproc
 1213              	.LFE237:
 1215 0016 00BF     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 1216              	 .align 2
 1217              	 .global XMC_CAN_GetBaudrateClockSource
 1218              	 .thumb
 1219              	 .thumb_func
 1221              	XMC_CAN_GetBaudrateClockSource:
 1222              	.LFB238:
 468:../Libraries/XMCLib/src/xmc_can.c **** 
 469:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 470:../Libraries/XMCLib/src/xmc_can.c **** {
 1223              	 .loc 2 470 0
 1224              	 .cfi_startproc
 1225              	 
 1226              	 
 1227              	 
 1228 0000 80B4     	 push {r7}
 1229              	.LCFI72:
 1230              	 .cfi_def_cfa_offset 4
 1231              	 .cfi_offset 7,-4
 1232 0002 83B0     	 sub sp,sp,#12
 1233              	.LCFI73:
 1234              	 .cfi_def_cfa_offset 16
 1235 0004 00AF     	 add r7,sp,#0
 1236              	.LCFI74:
 1237              	 .cfi_def_cfa_register 7
 1238 0006 7860     	 str r0,[r7,#4]
 471:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 472:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 473:../Libraries/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4)
 474:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 475:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 1239              	 .loc 2 475 0
 1240 0008 0123     	 movs r3,#1
 476:../Libraries/XMCLib/src/xmc_can.c **** #endif
 477:../Libraries/XMCLib/src/xmc_can.c **** }
 1241              	 .loc 2 477 0
 1242 000a 1846     	 mov r0,r3
 1243 000c 0C37     	 adds r7,r7,#12
 1244              	.LCFI75:
 1245              	 .cfi_def_cfa_offset 4
 1246 000e BD46     	 mov sp,r7
 1247              	.LCFI76:
 1248              	 .cfi_def_cfa_register 13
 1249              	 
 1250 0010 5DF8047B 	 ldr r7,[sp],#4
 1251              	.LCFI77:
 1252              	 .cfi_restore 7
 1253              	 .cfi_def_cfa_offset 0
 1254 0014 7047     	 bx lr
 1255              	 .cfi_endproc
 1256              	.LFE238:
 1258 0016 00BF     	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 1259              	 .align 2
 1260              	 .global XMC_CAN_GetBaudrateClockFrequency
 1261              	 .thumb
 1262              	 .thumb_func
 1264              	XMC_CAN_GetBaudrateClockFrequency:
 1265              	.LFB239:
 478:../Libraries/XMCLib/src/xmc_can.c **** 
 479:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 480:../Libraries/XMCLib/src/xmc_can.c **** {
 1266              	 .loc 2 480 0
 1267              	 .cfi_startproc
 1268              	 
 1269              	 
 1270 0000 80B5     	 push {r7,lr}
 1271              	.LCFI78:
 1272              	 .cfi_def_cfa_offset 8
 1273              	 .cfi_offset 7,-8
 1274              	 .cfi_offset 14,-4
 1275 0002 84B0     	 sub sp,sp,#16
 1276              	.LCFI79:
 1277              	 .cfi_def_cfa_offset 24
 1278 0004 00AF     	 add r7,sp,#0
 1279              	.LCFI80:
 1280              	 .cfi_def_cfa_register 7
 1281 0006 7860     	 str r0,[r7,#4]
 481:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency = 0;
 1282              	 .loc 2 481 0
 1283 0008 0023     	 movs r3,#0
 1284 000a FB60     	 str r3,[r7,#12]
 482:../Libraries/XMCLib/src/xmc_can.c **** 
 483:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 484:../Libraries/XMCLib/src/xmc_can.c ****   switch (XMC_CAN_GetBaudrateClockSource(obj))
 485:../Libraries/XMCLib/src/xmc_can.c ****   {
 486:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 487:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 488:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 489:../Libraries/XMCLib/src/xmc_can.c ****       break;
 490:../Libraries/XMCLib/src/xmc_can.c **** #else
 491:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 492:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 493:../Libraries/XMCLib/src/xmc_can.c ****       break;
 494:../Libraries/XMCLib/src/xmc_can.c **** #endif
 495:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 496:../Libraries/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 497:../Libraries/XMCLib/src/xmc_can.c ****       break;
 498:../Libraries/XMCLib/src/xmc_can.c ****   }
 499:../Libraries/XMCLib/src/xmc_can.c **** #else
 500:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 501:../Libraries/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 1285              	 .loc 2 501 0
 1286 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1287 0010 F860     	 str r0,[r7,#12]
 502:../Libraries/XMCLib/src/xmc_can.c **** #endif
 503:../Libraries/XMCLib/src/xmc_can.c **** 
 504:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 1288              	 .loc 2 504 0
 1289 0012 FB68     	 ldr r3,[r7,#12]
 505:../Libraries/XMCLib/src/xmc_can.c **** }
 1290              	 .loc 2 505 0
 1291 0014 1846     	 mov r0,r3
 1292 0016 1037     	 adds r7,r7,#16
 1293              	.LCFI81:
 1294              	 .cfi_def_cfa_offset 8
 1295 0018 BD46     	 mov sp,r7
 1296              	.LCFI82:
 1297              	 .cfi_def_cfa_register 13
 1298              	 
 1299 001a 80BD     	 pop {r7,pc}
 1300              	 .cfi_endproc
 1301              	.LFE239:
 1303              	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 1304              	 .align 2
 1305              	 .global XMC_CAN_InitEx
 1306              	 .thumb
 1307              	 .thumb_func
 1309              	XMC_CAN_InitEx:
 1310              	.LFB240:
 506:../Libraries/XMCLib/src/xmc_can.c **** 
 507:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 508:../Libraries/XMCLib/src/xmc_can.c **** {
 1311              	 .loc 2 508 0
 1312              	 .cfi_startproc
 1313              	 
 1314              	 
 1315 0000 80B5     	 push {r7,lr}
 1316              	.LCFI83:
 1317              	 .cfi_def_cfa_offset 8
 1318              	 .cfi_offset 7,-8
 1319              	 .cfi_offset 14,-4
 1320 0002 88B0     	 sub sp,sp,#32
 1321              	.LCFI84:
 1322              	 .cfi_def_cfa_offset 40
 1323 0004 00AF     	 add r7,sp,#0
 1324              	.LCFI85:
 1325              	 .cfi_def_cfa_register 7
 1326 0006 F860     	 str r0,[r7,#12]
 1327 0008 0B46     	 mov r3,r1
 1328 000a 7A60     	 str r2,[r7,#4]
 1329 000c FB72     	 strb r3,[r7,#11]
 509:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 510:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 511:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 512:../Libraries/XMCLib/src/xmc_can.c **** 
 513:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 514:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1330              	 .loc 2 514 0
 1331 000e F868     	 ldr r0,[r7,#12]
 1332 0010 FFF7FEFF 	 bl XMC_CAN_Enable
 515:../Libraries/XMCLib/src/xmc_can.c **** 
 516:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1333              	 .loc 2 516 0
 1334 0014 FB7A     	 ldrb r3,[r7,#11]
 1335 0016 F868     	 ldr r0,[r7,#12]
 1336 0018 1946     	 mov r1,r3
 1337 001a FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 517:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1338              	 .loc 2 517 0
 1339 001e F868     	 ldr r0,[r7,#12]
 1340 0020 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1341 0024 F861     	 str r0,[r7,#28]
 518:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 519:../Libraries/XMCLib/src/xmc_can.c **** 
 520:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 521:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1342              	 .loc 2 521 0
 1343 0026 FA69     	 ldr r2,[r7,#28]
 1344 0028 7B68     	 ldr r3,[r7,#4]
 1345 002a B2FBF3F3 	 udiv r3,r2,r3
 1346 002e C3F58063 	 rsb r3,r3,#1024
 1347 0032 0020     	 movs r0,#0
 1348 0034 1946     	 mov r1,r3
 1349 0036 FFF7FEFF 	 bl max
 1350 003a 0346     	 mov r3,r0
 1351 003c 1846     	 mov r0,r3
 1352 003e 40F2FF31 	 movw r1,#1023
 1353 0042 FFF7FEFF 	 bl min
 1354 0046 B861     	 str r0,[r7,#24]
 522:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 1355              	 .loc 2 522 0
 1356 0048 BB69     	 ldr r3,[r7,#24]
 1357 004a C3F58063 	 rsb r3,r3,#1024
 1358 004e FA69     	 ldr r2,[r7,#28]
 1359 0050 B2FBF3F3 	 udiv r3,r2,r3
 1360 0054 7B61     	 str r3,[r7,#20]
 523:../Libraries/XMCLib/src/xmc_can.c **** 
 524:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1361              	 .loc 2 524 0
 1362 0056 FB68     	 ldr r3,[r7,#12]
 1363 0058 DB68     	 ldr r3,[r3,#12]
 1364 005a 23F44343 	 bic r3,r3,#49920
 1365 005e 23F0FF03 	 bic r3,r3,#255
 1366 0062 FA68     	 ldr r2,[r7,#12]
 1367 0064 D360     	 str r3,[r2,#12]
 525:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 1368              	 .loc 2 525 0
 1369 0066 FB68     	 ldr r3,[r7,#12]
 1370 0068 DA68     	 ldr r2,[r3,#12]
 1371 006a BB69     	 ldr r3,[r7,#24]
 1372 006c 1343     	 orrs r3,r3,r2
 1373 006e 43F48042 	 orr r2,r3,#16384
 1374 0072 FB68     	 ldr r3,[r7,#12]
 1375 0074 DA60     	 str r2,[r3,#12]
 526:../Libraries/XMCLib/src/xmc_can.c **** 
 527:../Libraries/XMCLib/src/xmc_can.c ****   return freq_n;
 1376              	 .loc 2 527 0
 1377 0076 7B69     	 ldr r3,[r7,#20]
 528:../Libraries/XMCLib/src/xmc_can.c **** }
 1378              	 .loc 2 528 0
 1379 0078 1846     	 mov r0,r3
 1380 007a 2037     	 adds r7,r7,#32
 1381              	.LCFI86:
 1382              	 .cfi_def_cfa_offset 8
 1383 007c BD46     	 mov sp,r7
 1384              	.LCFI87:
 1385              	 .cfi_def_cfa_register 13
 1386              	 
 1387 007e 80BD     	 pop {r7,pc}
 1388              	 .cfi_endproc
 1389              	.LFE240:
 1391              	 .section .text.XMC_CAN_GetClockFrequency,"ax",%progbits
 1392              	 .align 2
 1393              	 .global XMC_CAN_GetClockFrequency
 1394              	 .thumb
 1395              	 .thumb_func
 1397              	XMC_CAN_GetClockFrequency:
 1398              	.LFB241:
 529:../Libraries/XMCLib/src/xmc_can.c **** 
 530:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj)
 531:../Libraries/XMCLib/src/xmc_can.c **** {
 1399              	 .loc 2 531 0
 1400              	 .cfi_startproc
 1401              	 
 1402              	 
 1403 0000 80B5     	 push {r7,lr}
 1404              	.LCFI88:
 1405              	 .cfi_def_cfa_offset 8
 1406              	 .cfi_offset 7,-8
 1407              	 .cfi_offset 14,-4
 1408 0002 84B0     	 sub sp,sp,#16
 1409              	.LCFI89:
 1410              	 .cfi_def_cfa_offset 24
 1411 0004 00AF     	 add r7,sp,#0
 1412              	.LCFI90:
 1413              	 .cfi_def_cfa_register 7
 1414 0006 7860     	 str r0,[r7,#4]
 532:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n = (obj->FDR & CAN_FDR_STEP_Msk) >> CAN_FDR_STEP_Pos;
 1415              	 .loc 2 532 0
 1416 0008 7B68     	 ldr r3,[r7,#4]
 1417 000a DB68     	 ldr r3,[r3,#12]
 1418 000c C3F30903 	 ubfx r3,r3,#0,#10
 1419 0010 FB60     	 str r3,[r7,#12]
 533:../Libraries/XMCLib/src/xmc_can.c ****   return (XMC_CAN_GetBaudrateClockFrequency(obj) * (1024U - step_n));
 1420              	 .loc 2 533 0
 1421 0012 7868     	 ldr r0,[r7,#4]
 1422 0014 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1423 0018 0246     	 mov r2,r0
 1424 001a FB68     	 ldr r3,[r7,#12]
 1425 001c C3F58063 	 rsb r3,r3,#1024
 1426 0020 03FB02F3 	 mul r3,r3,r2
 534:../Libraries/XMCLib/src/xmc_can.c **** }
 1427              	 .loc 2 534 0
 1428 0024 1846     	 mov r0,r3
 1429 0026 1037     	 adds r7,r7,#16
 1430              	.LCFI91:
 1431              	 .cfi_def_cfa_offset 8
 1432 0028 BD46     	 mov sp,r7
 1433              	.LCFI92:
 1434              	 .cfi_def_cfa_register 13
 1435              	 
 1436 002a 80BD     	 pop {r7,pc}
 1437              	 .cfi_endproc
 1438              	.LFE241:
 1440              	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 1441              	 .align 2
 1442              	 .global XMC_CAN_MO_SetIdentifier
 1443              	 .thumb
 1444              	 .thumb_func
 1446              	XMC_CAN_MO_SetIdentifier:
 1447              	.LFB242:
 535:../Libraries/XMCLib/src/xmc_can.c **** 
 536:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 537:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 538:../Libraries/XMCLib/src/xmc_can.c **** {
 1448              	 .loc 2 538 0
 1449              	 .cfi_startproc
 1450              	 
 1451              	 
 1452              	 
 1453 0000 80B4     	 push {r7}
 1454              	.LCFI93:
 1455              	 .cfi_def_cfa_offset 4
 1456              	 .cfi_offset 7,-4
 1457 0002 83B0     	 sub sp,sp,#12
 1458              	.LCFI94:
 1459              	 .cfi_def_cfa_offset 16
 1460 0004 00AF     	 add r7,sp,#0
 1461              	.LCFI95:
 1462              	 .cfi_def_cfa_register 7
 1463 0006 7860     	 str r0,[r7,#4]
 1464 0008 3960     	 str r1,[r7]
 539:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1465              	 .loc 2 539 0
 1466 000a 7B68     	 ldr r3,[r7,#4]
 1467 000c 1B68     	 ldr r3,[r3]
 1468 000e 9B69     	 ldr r3,[r3,#24]
 1469 0010 03F00053 	 and r3,r3,#536870912
 1470 0014 002B     	 cmp r3,#0
 1471 0016 0DD1     	 bne .L65
 540:../Libraries/XMCLib/src/xmc_can.c ****   {
 541:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1472              	 .loc 2 541 0
 1473 0018 7B68     	 ldr r3,[r7,#4]
 1474 001a 1B68     	 ldr r3,[r3]
 1475 001c 7A68     	 ldr r2,[r7,#4]
 1476 001e 1268     	 ldr r2,[r2]
 1477 0020 9269     	 ldr r2,[r2,#24]
 1478 0022 02F06041 	 and r1,r2,#-536870912
 542:../Libraries/XMCLib/src/xmc_can.c ****                                ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MO
 1479              	 .loc 2 542 0
 1480 0026 3A68     	 ldr r2,[r7]
 1481 0028 9204     	 lsls r2,r2,#18
 1482 002a 22F06042 	 bic r2,r2,#-536870912
 541:../Libraries/XMCLib/src/xmc_can.c ****                                ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MO
 1483              	 .loc 2 541 0
 1484 002e 0A43     	 orrs r2,r2,r1
 1485 0030 9A61     	 str r2,[r3,#24]
 1486 0032 0BE0     	 b .L66
 1487              	.L65:
 543:../Libraries/XMCLib/src/xmc_can.c ****   }
 544:../Libraries/XMCLib/src/xmc_can.c ****   else
 545:../Libraries/XMCLib/src/xmc_can.c ****   {
 546:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1488              	 .loc 2 546 0
 1489 0034 7B68     	 ldr r3,[r7,#4]
 1490 0036 1B68     	 ldr r3,[r3]
 1491 0038 7A68     	 ldr r2,[r7,#4]
 1492 003a 1268     	 ldr r2,[r2]
 1493 003c 9269     	 ldr r2,[r2,#24]
 1494 003e 02F06041 	 and r1,r2,#-536870912
 547:../Libraries/XMCLib/src/xmc_can.c ****                                (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1495              	 .loc 2 547 0
 1496 0042 3A68     	 ldr r2,[r7]
 1497 0044 22F06042 	 bic r2,r2,#-536870912
 546:../Libraries/XMCLib/src/xmc_can.c ****                                (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1498              	 .loc 2 546 0
 1499 0048 0A43     	 orrs r2,r2,r1
 1500 004a 9A61     	 str r2,[r3,#24]
 1501              	.L66:
 548:../Libraries/XMCLib/src/xmc_can.c ****   }
 549:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 1502              	 .loc 2 549 0
 1503 004c 3B68     	 ldr r3,[r7]
 1504 004e 23F06041 	 bic r1,r3,#-536870912
 1505 0052 7A68     	 ldr r2,[r7,#4]
 1506 0054 5368     	 ldr r3,[r2,#4]
 1507 0056 61F31C03 	 bfi r3,r1,#0,#29
 1508 005a 5360     	 str r3,[r2,#4]
 550:../Libraries/XMCLib/src/xmc_can.c **** }
 1509              	 .loc 2 550 0
 1510 005c 0C37     	 adds r7,r7,#12
 1511              	.LCFI96:
 1512              	 .cfi_def_cfa_offset 4
 1513 005e BD46     	 mov sp,r7
 1514              	.LCFI97:
 1515              	 .cfi_def_cfa_register 13
 1516              	 
 1517 0060 5DF8047B 	 ldr r7,[sp],#4
 1518              	.LCFI98:
 1519              	 .cfi_restore 7
 1520              	 .cfi_def_cfa_offset 0
 1521 0064 7047     	 bx lr
 1522              	 .cfi_endproc
 1523              	.LFE242:
 1525 0066 00BF     	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 1526              	 .align 2
 1527              	 .global XMC_CAN_MO_GetIdentifier
 1528              	 .thumb
 1529              	 .thumb_func
 1531              	XMC_CAN_MO_GetIdentifier:
 1532              	.LFB243:
 551:../Libraries/XMCLib/src/xmc_can.c **** 
 552:../Libraries/XMCLib/src/xmc_can.c **** 
 553:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 554:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 555:../Libraries/XMCLib/src/xmc_can.c **** {
 1533              	 .loc 2 555 0
 1534              	 .cfi_startproc
 1535              	 
 1536              	 
 1537              	 
 1538 0000 80B4     	 push {r7}
 1539              	.LCFI99:
 1540              	 .cfi_def_cfa_offset 4
 1541              	 .cfi_offset 7,-4
 1542 0002 85B0     	 sub sp,sp,#20
 1543              	.LCFI100:
 1544              	 .cfi_def_cfa_offset 24
 1545 0004 00AF     	 add r7,sp,#0
 1546              	.LCFI101:
 1547              	 .cfi_def_cfa_register 7
 1548 0006 7860     	 str r0,[r7,#4]
 556:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 557:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1549              	 .loc 2 557 0
 1550 0008 7B68     	 ldr r3,[r7,#4]
 1551 000a 1B68     	 ldr r3,[r3]
 1552 000c 9B69     	 ldr r3,[r3,#24]
 1553 000e 03F00053 	 and r3,r3,#536870912
 1554 0012 002B     	 cmp r3,#0
 1555 0014 07D1     	 bne .L68
 558:../Libraries/XMCLib/src/xmc_can.c ****   {
 559:../Libraries/XMCLib/src/xmc_can.c ****     identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_S
 1556              	 .loc 2 559 0
 1557 0016 7B68     	 ldr r3,[r7,#4]
 1558 0018 1B68     	 ldr r3,[r3]
 1559 001a 9B69     	 ldr r3,[r3,#24]
 1560 001c 23F06043 	 bic r3,r3,#-536870912
 1561 0020 9B0C     	 lsrs r3,r3,#18
 1562 0022 FB60     	 str r3,[r7,#12]
 1563 0024 05E0     	 b .L69
 1564              	.L68:
 560:../Libraries/XMCLib/src/xmc_can.c ****   }
 561:../Libraries/XMCLib/src/xmc_can.c ****   else
 562:../Libraries/XMCLib/src/xmc_can.c ****   {
 563:../Libraries/XMCLib/src/xmc_can.c ****     identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 1565              	 .loc 2 563 0
 1566 0026 7B68     	 ldr r3,[r7,#4]
 1567 0028 1B68     	 ldr r3,[r3]
 1568 002a 9B69     	 ldr r3,[r3,#24]
 1569 002c 23F06043 	 bic r3,r3,#-536870912
 1570 0030 FB60     	 str r3,[r7,#12]
 1571              	.L69:
 564:../Libraries/XMCLib/src/xmc_can.c ****   }
 565:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 1572              	 .loc 2 565 0
 1573 0032 FB68     	 ldr r3,[r7,#12]
 566:../Libraries/XMCLib/src/xmc_can.c **** }
 1574              	 .loc 2 566 0
 1575 0034 1846     	 mov r0,r3
 1576 0036 1437     	 adds r7,r7,#20
 1577              	.LCFI102:
 1578              	 .cfi_def_cfa_offset 4
 1579 0038 BD46     	 mov sp,r7
 1580              	.LCFI103:
 1581              	 .cfi_def_cfa_register 13
 1582              	 
 1583 003a 5DF8047B 	 ldr r7,[sp],#4
 1584              	.LCFI104:
 1585              	 .cfi_restore 7
 1586              	 .cfi_def_cfa_offset 0
 1587 003e 7047     	 bx lr
 1588              	 .cfi_endproc
 1589              	.LFE243:
 1591              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 1592              	 .align 2
 1593              	 .global XMC_CAN_MO_GetAcceptanceMask
 1594              	 .thumb
 1595              	 .thumb_func
 1597              	XMC_CAN_MO_GetAcceptanceMask:
 1598              	.LFB244:
 567:../Libraries/XMCLib/src/xmc_can.c **** 
 568:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 569:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 570:../Libraries/XMCLib/src/xmc_can.c **** {
 1599              	 .loc 2 570 0
 1600              	 .cfi_startproc
 1601              	 
 1602              	 
 1603              	 
 1604 0000 80B4     	 push {r7}
 1605              	.LCFI105:
 1606              	 .cfi_def_cfa_offset 4
 1607              	 .cfi_offset 7,-4
 1608 0002 85B0     	 sub sp,sp,#20
 1609              	.LCFI106:
 1610              	 .cfi_def_cfa_offset 24
 1611 0004 00AF     	 add r7,sp,#0
 1612              	.LCFI107:
 1613              	 .cfi_def_cfa_register 7
 1614 0006 7860     	 str r0,[r7,#4]
 571:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 572:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1615              	 .loc 2 572 0
 1616 0008 7B68     	 ldr r3,[r7,#4]
 1617 000a 1B68     	 ldr r3,[r3]
 1618 000c DB68     	 ldr r3,[r3,#12]
 1619 000e 03F00053 	 and r3,r3,#536870912
 1620 0012 002B     	 cmp r3,#0
 1621 0014 0ED1     	 bne .L72
 573:../Libraries/XMCLib/src/xmc_can.c ****       && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1622              	 .loc 2 573 0
 1623 0016 7B68     	 ldr r3,[r7,#4]
 1624 0018 1B68     	 ldr r3,[r3]
 1625 001a 9B69     	 ldr r3,[r3,#24]
 1626 001c 03F00053 	 and r3,r3,#536870912
 1627 0020 002B     	 cmp r3,#0
 1628 0022 07D1     	 bne .L72
 574:../Libraries/XMCLib/src/xmc_can.c ****   {
 575:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 1629              	 .loc 2 575 0
 1630 0024 7B68     	 ldr r3,[r7,#4]
 1631 0026 1B68     	 ldr r3,[r3]
 1632 0028 DB68     	 ldr r3,[r3,#12]
 1633 002a 23F06043 	 bic r3,r3,#-536870912
 1634 002e 9B0C     	 lsrs r3,r3,#18
 1635 0030 FB60     	 str r3,[r7,#12]
 1636 0032 05E0     	 b .L73
 1637              	.L72:
 576:../Libraries/XMCLib/src/xmc_can.c ****   }
 577:../Libraries/XMCLib/src/xmc_can.c ****   else
 578:../Libraries/XMCLib/src/xmc_can.c ****   {
 579:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 1638              	 .loc 2 579 0
 1639 0034 7B68     	 ldr r3,[r7,#4]
 1640 0036 1B68     	 ldr r3,[r3]
 1641 0038 DB68     	 ldr r3,[r3,#12]
 1642 003a 23F06043 	 bic r3,r3,#-536870912
 1643 003e FB60     	 str r3,[r7,#12]
 1644              	.L73:
 580:../Libraries/XMCLib/src/xmc_can.c ****   }
 581:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 1645              	 .loc 2 581 0
 1646 0040 FB68     	 ldr r3,[r7,#12]
 582:../Libraries/XMCLib/src/xmc_can.c **** }
 1647              	 .loc 2 582 0
 1648 0042 1846     	 mov r0,r3
 1649 0044 1437     	 adds r7,r7,#20
 1650              	.LCFI108:
 1651              	 .cfi_def_cfa_offset 4
 1652 0046 BD46     	 mov sp,r7
 1653              	.LCFI109:
 1654              	 .cfi_def_cfa_register 13
 1655              	 
 1656 0048 5DF8047B 	 ldr r7,[sp],#4
 1657              	.LCFI110:
 1658              	 .cfi_restore 7
 1659              	 .cfi_def_cfa_offset 0
 1660 004c 7047     	 bx lr
 1661              	 .cfi_endproc
 1662              	.LFE244:
 1664 004e 00BF     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 1665              	 .align 2
 1666              	 .global XMC_CAN_MO_SetAcceptanceMask
 1667              	 .thumb
 1668              	 .thumb_func
 1670              	XMC_CAN_MO_SetAcceptanceMask:
 1671              	.LFB245:
 583:../Libraries/XMCLib/src/xmc_can.c **** 
 584:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the acceptance mask of the MO */
 585:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo, const uint32_t can_id_mask)
 586:../Libraries/XMCLib/src/xmc_can.c **** {
 1672              	 .loc 2 586 0
 1673              	 .cfi_startproc
 1674              	 
 1675              	 
 1676              	 
 1677 0000 80B4     	 push {r7}
 1678              	.LCFI111:
 1679              	 .cfi_def_cfa_offset 4
 1680              	 .cfi_offset 7,-4
 1681 0002 83B0     	 sub sp,sp,#12
 1682              	.LCFI112:
 1683              	 .cfi_def_cfa_offset 16
 1684 0004 00AF     	 add r7,sp,#0
 1685              	.LCFI113:
 1686              	 .cfi_def_cfa_register 7
 1687 0006 7860     	 str r0,[r7,#4]
 1688 0008 3960     	 str r1,[r7]
 587:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != 0)
 1689              	 .loc 2 587 0
 1690 000a 7B68     	 ldr r3,[r7,#4]
 1691 000c 1B68     	 ldr r3,[r3]
 1692 000e DB68     	 ldr r3,[r3,#12]
 1693 0010 03F00053 	 and r3,r3,#536870912
 1694 0014 002B     	 cmp r3,#0
 1695 0016 14D0     	 beq .L76
 588:../Libraries/XMCLib/src/xmc_can.c ****       && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) == 0))
 1696              	 .loc 2 588 0
 1697 0018 7B68     	 ldr r3,[r7,#4]
 1698 001a 1B68     	 ldr r3,[r3]
 1699 001c 9B69     	 ldr r3,[r3,#24]
 1700 001e 03F00053 	 and r3,r3,#536870912
 1701 0022 002B     	 cmp r3,#0
 1702 0024 0DD1     	 bne .L76
 589:../Libraries/XMCLib/src/xmc_can.c ****   {
 590:../Libraries/XMCLib/src/xmc_can.c ****     /* Message object n receives frames only with matching IDE bit. */
 591:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1703              	 .loc 2 591 0
 1704 0026 7B68     	 ldr r3,[r7,#4]
 1705 0028 1A68     	 ldr r2,[r3]
 1706 002a 7B68     	 ldr r3,[r7,#4]
 1707 002c 1B68     	 ldr r3,[r3]
 1708 002e DB68     	 ldr r3,[r3,#12]
 1709 0030 03F06041 	 and r1,r3,#-536870912
 592:../Libraries/XMCLib/src/xmc_can.c ****                                 ((can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)XMC_CAN_MO_
 1710              	 .loc 2 592 0
 1711 0034 3B68     	 ldr r3,[r7]
 1712 0036 9804     	 lsls r0,r3,#18
 1713 0038 0E4B     	 ldr r3,.L78
 1714 003a 0340     	 ands r3,r3,r0
 591:../Libraries/XMCLib/src/xmc_can.c ****                                 ((can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)XMC_CAN_MO_
 1715              	 .loc 2 591 0
 1716 003c 0B43     	 orrs r3,r3,r1
 1717 003e D360     	 str r3,[r2,#12]
 1718 0040 0BE0     	 b .L77
 1719              	.L76:
 593:../Libraries/XMCLib/src/xmc_can.c ****   }
 594:../Libraries/XMCLib/src/xmc_can.c ****   else
 595:../Libraries/XMCLib/src/xmc_can.c ****   {
 596:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1720              	 .loc 2 596 0
 1721 0042 7B68     	 ldr r3,[r7,#4]
 1722 0044 1B68     	 ldr r3,[r3]
 1723 0046 7A68     	 ldr r2,[r7,#4]
 1724 0048 1268     	 ldr r2,[r2]
 1725 004a D268     	 ldr r2,[r2,#12]
 1726 004c 02F06041 	 and r1,r2,#-536870912
 597:../Libraries/XMCLib/src/xmc_can.c ****                                 (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1727              	 .loc 2 597 0
 1728 0050 3A68     	 ldr r2,[r7]
 1729 0052 22F06042 	 bic r2,r2,#-536870912
 596:../Libraries/XMCLib/src/xmc_can.c ****                                 (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1730              	 .loc 2 596 0
 1731 0056 0A43     	 orrs r2,r2,r1
 1732 0058 DA60     	 str r2,[r3,#12]
 1733              	.L77:
 598:../Libraries/XMCLib/src/xmc_can.c ****   }
 599:../Libraries/XMCLib/src/xmc_can.c **** 
 600:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1734              	 .loc 2 600 0
 1735 005a 3B68     	 ldr r3,[r7]
 1736 005c 23F06041 	 bic r1,r3,#-536870912
 1737 0060 7A68     	 ldr r2,[r7,#4]
 1738 0062 9368     	 ldr r3,[r2,#8]
 1739 0064 61F31C03 	 bfi r3,r1,#0,#29
 1740 0068 9360     	 str r3,[r2,#8]
 601:../Libraries/XMCLib/src/xmc_can.c **** }
 1741              	 .loc 2 601 0
 1742 006a 0C37     	 adds r7,r7,#12
 1743              	.LCFI114:
 1744              	 .cfi_def_cfa_offset 4
 1745 006c BD46     	 mov sp,r7
 1746              	.LCFI115:
 1747              	 .cfi_def_cfa_register 13
 1748              	 
 1749 006e 5DF8047B 	 ldr r7,[sp],#4
 1750              	.LCFI116:
 1751              	 .cfi_restore 7
 1752              	 .cfi_def_cfa_offset 0
 1753 0072 7047     	 bx lr
 1754              	.L79:
 1755              	 .align 2
 1756              	.L78:
 1757 0074 0000FC1F 	 .word 536608768
 1758              	 .cfi_endproc
 1759              	.LFE245:
 1761              	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1762              	 .align 2
 1763              	 .global XMC_CAN_MO_Config
 1764              	 .thumb
 1765              	 .thumb_func
 1767              	XMC_CAN_MO_Config:
 1768              	.LFB246:
 602:../Libraries/XMCLib/src/xmc_can.c **** 
 603:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 604:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 605:../Libraries/XMCLib/src/xmc_can.c **** {
 1769              	 .loc 2 605 0
 1770              	 .cfi_startproc
 1771              	 
 1772              	 
 1773 0000 80B5     	 push {r7,lr}
 1774              	.LCFI117:
 1775              	 .cfi_def_cfa_offset 8
 1776              	 .cfi_offset 7,-8
 1777              	 .cfi_offset 14,-4
 1778 0002 86B0     	 sub sp,sp,#24
 1779              	.LCFI118:
 1780              	 .cfi_def_cfa_offset 32
 1781 0004 00AF     	 add r7,sp,#0
 1782              	.LCFI119:
 1783              	 .cfi_def_cfa_register 7
 1784 0006 7860     	 str r0,[r7,#4]
 606:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 607:../Libraries/XMCLib/src/xmc_can.c **** 
 608:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 609:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 1785              	 .loc 2 609 0
 1786 0008 7B68     	 ldr r3,[r7,#4]
 1787 000a 1B68     	 ldr r3,[r3]
 1788 000c 03F13843 	 add r3,r3,#-1207959552
 1789 0010 A3F5A833 	 sub r3,r3,#86016
 1790 0014 5B09     	 lsrs r3,r3,#5
 1791 0016 7B61     	 str r3,[r7,#20]
 610:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << 
 1792              	 .loc 2 610 0
 1793 0018 7B69     	 ldr r3,[r7,#20]
 1794 001a 5B09     	 lsrs r3,r3,#5
 1795 001c 5A03     	 lsls r2,r3,#13
 1796 001e 7B69     	 ldr r3,[r7,#20]
 1797 0020 03F01F03 	 and r3,r3,#31
 1798 0024 1B02     	 lsls r3,r3,#8
 1799 0026 1343     	 orrs r3,r3,r2
 1800 0028 3B61     	 str r3,[r7,#16]
 611:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1801              	 .loc 2 611 0
 1802 002a 7B68     	 ldr r3,[r7,#4]
 1803 002c 1B68     	 ldr r3,[r3]
 1804 002e 7A68     	 ldr r2,[r7,#4]
 1805 0030 1268     	 ldr r2,[r2]
 1806 0032 9268     	 ldr r2,[r2,#8]
 1807 0034 22F47F42 	 bic r2,r2,#65280
 1808 0038 9A60     	 str r2,[r3,#8]
 612:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1809              	 .loc 2 612 0
 1810 003a 7B68     	 ldr r3,[r7,#4]
 1811 003c 1B68     	 ldr r3,[r3]
 1812 003e 7A68     	 ldr r2,[r7,#4]
 1813 0040 1268     	 ldr r2,[r2]
 1814 0042 9168     	 ldr r1,[r2,#8]
 1815 0044 3A69     	 ldr r2,[r7,#16]
 1816 0046 0A43     	 orrs r2,r2,r1
 1817 0048 9A60     	 str r2,[r3,#8]
 613:../Libraries/XMCLib/src/xmc_can.c **** 
 614:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 1818              	 .loc 2 614 0
 1819 004a 7B68     	 ldr r3,[r7,#4]
 1820 004c DB79     	 ldrb r3,[r3,#7]
 1821 004e 03F02003 	 and r3,r3,#32
 1822 0052 DBB2     	 uxtb r3,r3
 1823 0054 002B     	 cmp r3,#0
 1824 0056 07D0     	 beq .L81
 615:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1825              	 .loc 2 615 0 discriminator 1
 1826 0058 7B68     	 ldr r3,[r7,#4]
 1827 005a DB79     	 ldrb r3,[r3,#7]
 1828 005c 03F02003 	 and r3,r3,#32
 1829 0060 DBB2     	 uxtb r3,r3
 614:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1830              	 .loc 2 614 0 discriminator 1
 1831 0062 002B     	 cmp r3,#0
 1832 0064 00D1     	 bne .L81
 614:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1833              	 .loc 2 614 0 is_stmt 0
 1834 0066 60E0     	 b .L80
 1835              	.L81:
 616:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1836              	 .loc 2 616 0 is_stmt 1
 1837 0068 7B68     	 ldr r3,[r7,#4]
 1838 006a 1B7E     	 ldrb r3,[r3,#24]
 615:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1839              	 .loc 2 615 0
 1840 006c 002B     	 cmp r3,#0
 1841 006e 04D0     	 beq .L83
 617:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 1842              	 .loc 2 617 0
 1843 0070 7B68     	 ldr r3,[r7,#4]
 1844 0072 1B7E     	 ldrb r3,[r3,#24]
 616:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1845              	 .loc 2 616 0
 1846 0074 012B     	 cmp r3,#1
 1847 0076 00D0     	 beq .L83
 1848 0078 57E0     	 b .L80
 1849              	.L83:
 618:../Libraries/XMCLib/src/xmc_can.c ****   {
 619:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 620:../Libraries/XMCLib/src/xmc_can.c ****   }
 621:../Libraries/XMCLib/src/xmc_can.c ****   else
 622:../Libraries/XMCLib/src/xmc_can.c ****   {
 623:../Libraries/XMCLib/src/xmc_can.c **** 
 624:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 625:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1850              	 .loc 2 625 0
 1851 007a 7B68     	 ldr r3,[r7,#4]
 1852 007c 1B68     	 ldr r3,[r3]
 1853 007e 2022     	 movs r2,#32
 1854 0080 DA61     	 str r2,[r3,#28]
 626:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1855              	 .loc 2 626 0
 1856 0082 7B68     	 ldr r3,[r7,#4]
 1857 0084 DB79     	 ldrb r3,[r3,#7]
 1858 0086 03F02003 	 and r3,r3,#32
 1859 008a DBB2     	 uxtb r3,r3
 1860 008c 002B     	 cmp r3,#0
 1861 008e 28D1     	 bne .L84
 627:../Libraries/XMCLib/src/xmc_can.c ****     {
 628:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 1862              	 .loc 2 628 0
 1863 0090 7B68     	 ldr r3,[r7,#4]
 1864 0092 5B68     	 ldr r3,[r3,#4]
 1865 0094 FB60     	 str r3,[r7,#12]
 629:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1866              	 .loc 2 629 0
 1867 0096 FB68     	 ldr r3,[r7,#12]
 1868 0098 03F06043 	 and r3,r3,#-536870912
 1869 009c FB60     	 str r3,[r7,#12]
 630:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1870              	 .loc 2 630 0
 1871 009e 7B68     	 ldr r3,[r7,#4]
 1872 00a0 5B68     	 ldr r3,[r3,#4]
 1873 00a2 C3F31C03 	 ubfx r3,r3,#0,#29
 1874 00a6 9B04     	 lsls r3,r3,#18
 1875 00a8 1A46     	 mov r2,r3
 1876 00aa FB68     	 ldr r3,[r7,#12]
 1877 00ac 1343     	 orrs r3,r3,r2
 1878 00ae FB60     	 str r3,[r7,#12]
 631:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1879              	 .loc 2 631 0
 1880 00b0 7B68     	 ldr r3,[r7,#4]
 1881 00b2 1B68     	 ldr r3,[r3]
 1882 00b4 FA68     	 ldr r2,[r7,#12]
 1883 00b6 9A61     	 str r2,[r3,#24]
 632:../Libraries/XMCLib/src/xmc_can.c **** 
 633:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 1884              	 .loc 2 633 0
 1885 00b8 7B68     	 ldr r3,[r7,#4]
 1886 00ba 9B68     	 ldr r3,[r3,#8]
 1887 00bc FB60     	 str r3,[r7,#12]
 634:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1888              	 .loc 2 634 0
 1889 00be FB68     	 ldr r3,[r7,#12]
 1890 00c0 03F06043 	 and r3,r3,#-536870912
 1891 00c4 FB60     	 str r3,[r7,#12]
 635:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1892              	 .loc 2 635 0
 1893 00c6 7B68     	 ldr r3,[r7,#4]
 1894 00c8 9B68     	 ldr r3,[r3,#8]
 1895 00ca C3F31C03 	 ubfx r3,r3,#0,#29
 1896 00ce 9B04     	 lsls r3,r3,#18
 1897 00d0 1A46     	 mov r2,r3
 1898 00d2 FB68     	 ldr r3,[r7,#12]
 1899 00d4 1343     	 orrs r3,r3,r2
 1900 00d6 FB60     	 str r3,[r7,#12]
 636:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1901              	 .loc 2 636 0
 1902 00d8 7B68     	 ldr r3,[r7,#4]
 1903 00da 1B68     	 ldr r3,[r3]
 1904 00dc FA68     	 ldr r2,[r7,#12]
 1905 00de DA60     	 str r2,[r3,#12]
 1906 00e0 09E0     	 b .L85
 1907              	.L84:
 637:../Libraries/XMCLib/src/xmc_can.c ****     }
 638:../Libraries/XMCLib/src/xmc_can.c ****     else
 639:../Libraries/XMCLib/src/xmc_can.c ****     {
 640:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 1908              	 .loc 2 640 0
 1909 00e2 7B68     	 ldr r3,[r7,#4]
 1910 00e4 1B68     	 ldr r3,[r3]
 1911 00e6 7A68     	 ldr r2,[r7,#4]
 1912 00e8 5268     	 ldr r2,[r2,#4]
 1913 00ea 9A61     	 str r2,[r3,#24]
 641:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1914              	 .loc 2 641 0
 1915 00ec 7B68     	 ldr r3,[r7,#4]
 1916 00ee 1B68     	 ldr r3,[r3]
 1917 00f0 7A68     	 ldr r2,[r7,#4]
 1918 00f2 9268     	 ldr r2,[r2,#8]
 1919 00f4 DA60     	 str r2,[r3,#12]
 1920              	.L85:
 642:../Libraries/XMCLib/src/xmc_can.c ****     }
 643:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 644:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1921              	 .loc 2 644 0
 1922 00f6 7B68     	 ldr r3,[r7,#4]
 1923 00f8 1B7E     	 ldrb r3,[r3,#24]
 1924 00fa 012B     	 cmp r3,#1
 1925 00fc 0CD1     	 bne .L86
 645:../Libraries/XMCLib/src/xmc_can.c ****     {
 646:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 647:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 1926              	 .loc 2 647 0
 1927 00fe 7868     	 ldr r0,[r7,#4]
 1928 0100 FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 648:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1929              	 .loc 2 648 0
 1930 0104 7B68     	 ldr r3,[r7,#4]
 1931 0106 1B68     	 ldr r3,[r3]
 1932 0108 4FF00062 	 mov r2,#134217728
 1933 010c DA61     	 str r2,[r3,#28]
 649:../Libraries/XMCLib/src/xmc_can.c **** 
 650:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 651:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 1934              	 .loc 2 651 0
 1935 010e 7B68     	 ldr r3,[r7,#4]
 1936 0110 1B68     	 ldr r3,[r3]
 1937 0112 074A     	 ldr r2,.L87
 1938 0114 DA61     	 str r2,[r3,#28]
 1939 0116 08E0     	 b .L80
 1940              	.L86:
 652:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 653:../Libraries/XMCLib/src/xmc_can.c ****     }
 654:../Libraries/XMCLib/src/xmc_can.c ****     else
 655:../Libraries/XMCLib/src/xmc_can.c ****     {
 656:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 657:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 1941              	 .loc 2 657 0
 1942 0118 7B68     	 ldr r3,[r7,#4]
 1943 011a 1B68     	 ldr r3,[r3]
 1944 011c 4FF40062 	 mov r2,#2048
 1945 0120 DA61     	 str r2,[r3,#28]
 658:../Libraries/XMCLib/src/xmc_can.c **** 
 659:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 660:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 1946              	 .loc 2 660 0
 1947 0122 7B68     	 ldr r3,[r7,#4]
 1948 0124 1B68     	 ldr r3,[r3]
 1949 0126 034A     	 ldr r2,.L87+4
 1950 0128 DA61     	 str r2,[r3,#28]
 1951              	.L80:
 661:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 662:../Libraries/XMCLib/src/xmc_can.c ****     }
 663:../Libraries/XMCLib/src/xmc_can.c **** 
 664:../Libraries/XMCLib/src/xmc_can.c ****   }
 665:../Libraries/XMCLib/src/xmc_can.c **** }
 1952              	 .loc 2 665 0
 1953 012a 1837     	 adds r7,r7,#24
 1954              	.LCFI120:
 1955              	 .cfi_def_cfa_offset 8
 1956 012c BD46     	 mov sp,r7
 1957              	.LCFI121:
 1958              	 .cfi_def_cfa_register 13
 1959              	 
 1960 012e 80BD     	 pop {r7,pc}
 1961              	.L88:
 1962              	 .align 2
 1963              	.L87:
 1964 0130 C0002006 	 .word 102760640
 1965 0134 4006A000 	 .word 10487360
 1966              	 .cfi_endproc
 1967              	.LFE246:
 1969              	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 1970              	 .align 2
 1971              	 .global XMC_CAN_MO_UpdateData
 1972              	 .thumb
 1973              	 .thumb_func
 1975              	XMC_CAN_MO_UpdateData:
 1976              	.LFB247:
 666:../Libraries/XMCLib/src/xmc_can.c **** 
 667:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 668:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 669:../Libraries/XMCLib/src/xmc_can.c **** {
 1977              	 .loc 2 669 0
 1978              	 .cfi_startproc
 1979              	 
 1980              	 
 1981              	 
 1982 0000 80B4     	 push {r7}
 1983              	.LCFI122:
 1984              	 .cfi_def_cfa_offset 4
 1985              	 .cfi_offset 7,-4
 1986 0002 85B0     	 sub sp,sp,#20
 1987              	.LCFI123:
 1988              	 .cfi_def_cfa_offset 24
 1989 0004 00AF     	 add r7,sp,#0
 1990              	.LCFI124:
 1991              	 .cfi_def_cfa_register 7
 1992 0006 7860     	 str r0,[r7,#4]
 670:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1993              	 .loc 2 670 0
 1994 0008 0323     	 movs r3,#3
 1995 000a FB73     	 strb r3,[r7,#15]
 671:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 672:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1996              	 .loc 2 672 0
 1997 000c 7B68     	 ldr r3,[r7,#4]
 1998 000e 1B7E     	 ldrb r3,[r3,#24]
 1999 0010 012B     	 cmp r3,#1
 2000 0012 22D1     	 bne .L90
 673:../Libraries/XMCLib/src/xmc_can.c ****   {
 674:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 2001              	 .loc 2 674 0
 2002 0014 7B68     	 ldr r3,[r7,#4]
 2003 0016 1B68     	 ldr r3,[r3]
 2004 0018 2022     	 movs r2,#32
 2005 001a DA61     	 str r2,[r3,#28]
 675:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 676:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 2006              	 .loc 2 676 0
 2007 001c 7B68     	 ldr r3,[r7,#4]
 2008 001e 1B68     	 ldr r3,[r3]
 2009 0020 7A68     	 ldr r2,[r7,#4]
 2010 0022 1268     	 ldr r2,[r2]
 2011 0024 1268     	 ldr r2,[r2]
 2012 0026 22F07061 	 bic r1,r2,#251658240
 677:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2013              	 .loc 2 677 0
 2014 002a 7A68     	 ldr r2,[r7,#4]
 2015 002c 127B     	 ldrb r2,[r2,#12]
 2016 002e 1206     	 lsls r2,r2,#24
 2017 0030 02F07062 	 and r2,r2,#251658240
 676:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2018              	 .loc 2 676 0
 2019 0034 0A43     	 orrs r2,r2,r1
 2020 0036 1A60     	 str r2,[r3]
 678:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 679:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 2021              	 .loc 2 679 0
 2022 0038 7B68     	 ldr r3,[r7,#4]
 2023 003a 1B68     	 ldr r3,[r3]
 2024 003c 7A68     	 ldr r2,[r7,#4]
 2025 003e 1269     	 ldr r2,[r2,#16]
 2026 0040 1A61     	 str r2,[r3,#16]
 680:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 2027              	 .loc 2 680 0
 2028 0042 7B68     	 ldr r3,[r7,#4]
 2029 0044 1B68     	 ldr r3,[r3]
 2030 0046 7A68     	 ldr r2,[r7,#4]
 2031 0048 5269     	 ldr r2,[r2,#20]
 2032 004a 5A61     	 str r2,[r3,#20]
 681:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 682:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_M
 2033              	 .loc 2 682 0
 2034 004c 7B68     	 ldr r3,[r7,#4]
 2035 004e 1B68     	 ldr r3,[r3]
 2036 0050 064A     	 ldr r2,.L93
 2037 0052 DA61     	 str r2,[r3,#28]
 683:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2038              	 .loc 2 683 0
 2039 0054 0023     	 movs r3,#0
 2040 0056 FB73     	 strb r3,[r7,#15]
 2041 0058 01E0     	 b .L91
 2042              	.L90:
 684:../Libraries/XMCLib/src/xmc_can.c ****   }
 685:../Libraries/XMCLib/src/xmc_can.c ****   else
 686:../Libraries/XMCLib/src/xmc_can.c ****   {
 687:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2043              	 .loc 2 687 0
 2044 005a 0323     	 movs r3,#3
 2045 005c FB73     	 strb r3,[r7,#15]
 2046              	.L91:
 688:../Libraries/XMCLib/src/xmc_can.c ****   }
 689:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2047              	 .loc 2 689 0
 2048 005e FB7B     	 ldrb r3,[r7,#15]
 690:../Libraries/XMCLib/src/xmc_can.c **** }
 2049              	 .loc 2 690 0
 2050 0060 1846     	 mov r0,r3
 2051 0062 1437     	 adds r7,r7,#20
 2052              	.LCFI125:
 2053              	 .cfi_def_cfa_offset 4
 2054 0064 BD46     	 mov sp,r7
 2055              	.LCFI126:
 2056              	 .cfi_def_cfa_register 13
 2057              	 
 2058 0066 5DF8047B 	 ldr r7,[sp],#4
 2059              	.LCFI127:
 2060              	 .cfi_restore 7
 2061              	 .cfi_def_cfa_offset 0
 2062 006a 7047     	 bx lr
 2063              	.L94:
 2064              	 .align 2
 2065              	.L93:
 2066 006c 40002800 	 .word 2621504
 2067              	 .cfi_endproc
 2068              	.LFE247:
 2070              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 2071              	 .align 2
 2072              	 .global XMC_CAN_MO_Transmit
 2073              	 .thumb
 2074              	 .thumb_func
 2076              	XMC_CAN_MO_Transmit:
 2077              	.LFB248:
 691:../Libraries/XMCLib/src/xmc_can.c **** 
 692:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 693:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 694:../Libraries/XMCLib/src/xmc_can.c **** {
 2078              	 .loc 2 694 0
 2079              	 .cfi_startproc
 2080              	 
 2081              	 
 2082              	 
 2083 0000 80B4     	 push {r7}
 2084              	.LCFI128:
 2085              	 .cfi_def_cfa_offset 4
 2086              	 .cfi_offset 7,-4
 2087 0002 87B0     	 sub sp,sp,#28
 2088              	.LCFI129:
 2089              	 .cfi_def_cfa_offset 32
 2090 0004 00AF     	 add r7,sp,#0
 2091              	.LCFI130:
 2092              	 .cfi_def_cfa_register 7
 2093 0006 7860     	 str r0,[r7,#4]
 695:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2094              	 .loc 2 695 0
 2095 0008 0123     	 movs r3,#1
 2096 000a FB75     	 strb r3,[r7,#23]
 696:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2097              	 .loc 2 696 0
 2098 000c 7B68     	 ldr r3,[r7,#4]
 2099 000e 1B68     	 ldr r3,[r3]
 2100 0010 DB69     	 ldr r3,[r3,#28]
 2101 0012 03F02003 	 and r3,r3,#32
 2102 0016 5B09     	 lsrs r3,r3,#5
 2103 0018 3B61     	 str r3,[r7,#16]
 697:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 2104              	 .loc 2 697 0
 2105 001a 7B68     	 ldr r3,[r7,#4]
 2106 001c 1B68     	 ldr r3,[r3]
 2107 001e DB69     	 ldr r3,[r3,#28]
 2108 0020 03F48073 	 and r3,r3,#256
 2109 0024 1B0A     	 lsrs r3,r3,#8
 2110 0026 FB60     	 str r3,[r7,#12]
 698:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 699:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2111              	 .loc 2 699 0
 2112 0028 3B69     	 ldr r3,[r7,#16]
 2113 002a 002B     	 cmp r3,#0
 2114 002c 02D1     	 bne .L96
 700:../Libraries/XMCLib/src/xmc_can.c ****   {
 701:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2115              	 .loc 2 701 0
 2116 002e 0423     	 movs r3,#4
 2117 0030 FB75     	 strb r3,[r7,#23]
 2118 0032 0CE0     	 b .L97
 2119              	.L96:
 702:../Libraries/XMCLib/src/xmc_can.c ****   }
 703:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 704:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2120              	 .loc 2 704 0
 2121 0034 FB68     	 ldr r3,[r7,#12]
 2122 0036 012B     	 cmp r3,#1
 2123 0038 02D1     	 bne .L98
 705:../Libraries/XMCLib/src/xmc_can.c ****   {
 706:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2124              	 .loc 2 706 0
 2125 003a 0223     	 movs r3,#2
 2126 003c FB75     	 strb r3,[r7,#23]
 2127 003e 06E0     	 b .L97
 2128              	.L98:
 707:../Libraries/XMCLib/src/xmc_can.c ****   }
 708:../Libraries/XMCLib/src/xmc_can.c ****   else
 709:../Libraries/XMCLib/src/xmc_can.c ****   {
 710:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 711:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 2129              	 .loc 2 711 0
 2130 0040 7B68     	 ldr r3,[r7,#4]
 2131 0042 1B68     	 ldr r3,[r3]
 2132 0044 4FF0E062 	 mov r2,#117440512
 2133 0048 DA61     	 str r2,[r3,#28]
 712:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2134              	 .loc 2 712 0
 2135 004a 0023     	 movs r3,#0
 2136 004c FB75     	 strb r3,[r7,#23]
 2137              	.L97:
 713:../Libraries/XMCLib/src/xmc_can.c ****   }
 714:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2138              	 .loc 2 714 0
 2139 004e FB7D     	 ldrb r3,[r7,#23]
 715:../Libraries/XMCLib/src/xmc_can.c **** }
 2140              	 .loc 2 715 0
 2141 0050 1846     	 mov r0,r3
 2142 0052 1C37     	 adds r7,r7,#28
 2143              	.LCFI131:
 2144              	 .cfi_def_cfa_offset 4
 2145 0054 BD46     	 mov sp,r7
 2146              	.LCFI132:
 2147              	 .cfi_def_cfa_register 13
 2148              	 
 2149 0056 5DF8047B 	 ldr r7,[sp],#4
 2150              	.LCFI133:
 2151              	 .cfi_restore 7
 2152              	 .cfi_def_cfa_offset 0
 2153 005a 7047     	 bx lr
 2154              	 .cfi_endproc
 2155              	.LFE248:
 2157              	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 2158              	 .align 2
 2159              	 .global XMC_CAN_MO_ReceiveData
 2160              	 .thumb
 2161              	 .thumb_func
 2163              	XMC_CAN_MO_ReceiveData:
 2164              	.LFB249:
 716:../Libraries/XMCLib/src/xmc_can.c **** 
 717:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 718:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 719:../Libraries/XMCLib/src/xmc_can.c **** {
 2165              	 .loc 2 719 0
 2166              	 .cfi_startproc
 2167              	 
 2168              	 
 2169              	 
 2170 0000 80B4     	 push {r7}
 2171              	.LCFI134:
 2172              	 .cfi_def_cfa_offset 4
 2173              	 .cfi_offset 7,-4
 2174 0002 87B0     	 sub sp,sp,#28
 2175              	.LCFI135:
 2176              	 .cfi_def_cfa_offset 32
 2177 0004 00AF     	 add r7,sp,#0
 2178              	.LCFI136:
 2179              	 .cfi_def_cfa_register 7
 2180 0006 7860     	 str r0,[r7,#4]
 720:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2181              	 .loc 2 720 0
 2182 0008 0123     	 movs r3,#1
 2183 000a FB75     	 strb r3,[r7,#23]
 721:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2184              	 .loc 2 721 0
 2185 000c 0023     	 movs r3,#0
 2186 000e BB75     	 strb r3,[r7,#22]
 722:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2187              	 .loc 2 722 0
 2188 0010 0023     	 movs r3,#0
 2189 0012 7B75     	 strb r3,[r7,#21]
 723:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2190              	 .loc 2 723 0
 2191 0014 7B68     	 ldr r3,[r7,#4]
 2192 0016 1B68     	 ldr r3,[r3]
 2193 0018 DB69     	 ldr r3,[r3,#28]
 2194 001a 03F40063 	 and r3,r3,#2048
 2195 001e DB0A     	 lsrs r3,r3,#11
 2196 0020 3B61     	 str r3,[r7,#16]
 724:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2197              	 .loc 2 724 0
 2198 0022 7B68     	 ldr r3,[r7,#4]
 2199 0024 1B68     	 ldr r3,[r3]
 2200 0026 DB69     	 ldr r3,[r3,#28]
 2201 0028 03F00403 	 and r3,r3,#4
 2202 002c 9B08     	 lsrs r3,r3,#2
 2203 002e FB60     	 str r3,[r7,#12]
 725:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 726:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2204              	 .loc 2 726 0
 2205 0030 3B69     	 ldr r3,[r7,#16]
 2206 0032 002B     	 cmp r3,#0
 2207 0034 02D0     	 beq .L101
 727:../Libraries/XMCLib/src/xmc_can.c ****   {
 728:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2208              	 .loc 2 728 0
 2209 0036 0323     	 movs r3,#3
 2210 0038 FB75     	 strb r3,[r7,#23]
 2211 003a 25E0     	 b .L102
 2212              	.L101:
 729:../Libraries/XMCLib/src/xmc_can.c ****   }
 730:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 731:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2213              	 .loc 2 731 0
 2214 003c FB68     	 ldr r3,[r7,#12]
 2215 003e 012B     	 cmp r3,#1
 2216 0040 02D1     	 bne .L103
 732:../Libraries/XMCLib/src/xmc_can.c ****   {
 733:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2217              	 .loc 2 733 0
 2218 0042 0223     	 movs r3,#2
 2219 0044 FB75     	 strb r3,[r7,#23]
 2220 0046 1FE0     	 b .L102
 2221              	.L103:
 734:../Libraries/XMCLib/src/xmc_can.c ****   }
 735:../Libraries/XMCLib/src/xmc_can.c ****   else
 736:../Libraries/XMCLib/src/xmc_can.c ****   {
 737:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 738:../Libraries/XMCLib/src/xmc_can.c ****     do
 739:../Libraries/XMCLib/src/xmc_can.c ****     {
 740:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2222              	 .loc 2 740 0 discriminator 3
 2223 0048 7B68     	 ldr r3,[r7,#4]
 2224 004a 1B68     	 ldr r3,[r3]
 2225 004c 1A69     	 ldr r2,[r3,#16]
 2226 004e 7B68     	 ldr r3,[r7,#4]
 2227 0050 1A61     	 str r2,[r3,#16]
 741:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2228              	 .loc 2 741 0 discriminator 3
 2229 0052 7B68     	 ldr r3,[r7,#4]
 2230 0054 1B68     	 ldr r3,[r3]
 2231 0056 5A69     	 ldr r2,[r3,#20]
 2232 0058 7B68     	 ldr r3,[r7,#4]
 2233 005a 5A61     	 str r2,[r3,#20]
 742:../Libraries/XMCLib/src/xmc_can.c **** 
 743:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2234              	 .loc 2 743 0 discriminator 3
 2235 005c 7B68     	 ldr r3,[r7,#4]
 2236 005e 1B68     	 ldr r3,[r3]
 2237 0060 DB69     	 ldr r3,[r3,#28]
 2238 0062 03F00403 	 and r3,r3,#4
 2239 0066 9B08     	 lsrs r3,r3,#2
 2240 0068 BB75     	 strb r3,[r7,#22]
 744:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2241              	 .loc 2 744 0 discriminator 3
 2242 006a 7B68     	 ldr r3,[r7,#4]
 2243 006c 1B68     	 ldr r3,[r3]
 2244 006e DB69     	 ldr r3,[r3,#28]
 2245 0070 03F00803 	 and r3,r3,#8
 2246 0074 DB08     	 lsrs r3,r3,#3
 2247 0076 7B75     	 strb r3,[r7,#21]
 745:../Libraries/XMCLib/src/xmc_can.c ****     }
 746:../Libraries/XMCLib/src/xmc_can.c ****     while ((rx_pnd != 0U) || (new_data != 0U));
 2248              	 .loc 2 746 0 discriminator 3
 2249 0078 BB7D     	 ldrb r3,[r7,#22]
 2250 007a 002B     	 cmp r3,#0
 2251 007c E4D1     	 bne .L103
 2252              	 .loc 2 746 0 is_stmt 0 discriminator 2
 2253 007e 7B7D     	 ldrb r3,[r7,#21]
 2254 0080 002B     	 cmp r3,#0
 2255 0082 E1D1     	 bne .L103
 747:../Libraries/XMCLib/src/xmc_can.c **** 
 748:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2256              	 .loc 2 748 0 is_stmt 1
 2257 0084 0023     	 movs r3,#0
 2258 0086 FB75     	 strb r3,[r7,#23]
 2259              	.L102:
 749:../Libraries/XMCLib/src/xmc_can.c ****   }
 750:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2260              	 .loc 2 750 0
 2261 0088 FB7D     	 ldrb r3,[r7,#23]
 751:../Libraries/XMCLib/src/xmc_can.c **** }
 2262              	 .loc 2 751 0
 2263 008a 1846     	 mov r0,r3
 2264 008c 1C37     	 adds r7,r7,#28
 2265              	.LCFI137:
 2266              	 .cfi_def_cfa_offset 4
 2267 008e BD46     	 mov sp,r7
 2268              	.LCFI138:
 2269              	 .cfi_def_cfa_register 13
 2270              	 
 2271 0090 5DF8047B 	 ldr r7,[sp],#4
 2272              	.LCFI139:
 2273              	 .cfi_restore 7
 2274              	 .cfi_def_cfa_offset 0
 2275 0094 7047     	 bx lr
 2276              	 .cfi_endproc
 2277              	.LFE249:
 2279 0096 00BF     	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 2280              	 .align 2
 2281              	 .global XMC_CAN_MO_Receive
 2282              	 .thumb
 2283              	 .thumb_func
 2285              	XMC_CAN_MO_Receive:
 2286              	.LFB250:
 752:../Libraries/XMCLib/src/xmc_can.c **** 
 753:../Libraries/XMCLib/src/xmc_can.c **** 
 754:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 755:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 756:../Libraries/XMCLib/src/xmc_can.c **** {
 2287              	 .loc 2 756 0
 2288              	 .cfi_startproc
 2289              	 
 2290              	 
 2291              	 
 2292 0000 80B4     	 push {r7}
 2293              	.LCFI140:
 2294              	 .cfi_def_cfa_offset 4
 2295              	 .cfi_offset 7,-4
 2296 0002 87B0     	 sub sp,sp,#28
 2297              	.LCFI141:
 2298              	 .cfi_def_cfa_offset 32
 2299 0004 00AF     	 add r7,sp,#0
 2300              	.LCFI142:
 2301              	 .cfi_def_cfa_register 7
 2302 0006 7860     	 str r0,[r7,#4]
 757:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2303              	 .loc 2 757 0
 2304 0008 0123     	 movs r3,#1
 2305 000a FB75     	 strb r3,[r7,#23]
 758:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2306              	 .loc 2 758 0
 2307 000c 0023     	 movs r3,#0
 2308 000e BB75     	 strb r3,[r7,#22]
 759:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2309              	 .loc 2 759 0
 2310 0010 0023     	 movs r3,#0
 2311 0012 7B75     	 strb r3,[r7,#21]
 760:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2312              	 .loc 2 760 0
 2313 0014 7B68     	 ldr r3,[r7,#4]
 2314 0016 1B68     	 ldr r3,[r3]
 2315 0018 DB69     	 ldr r3,[r3,#28]
 2316 001a 03F40063 	 and r3,r3,#2048
 2317 001e DB0A     	 lsrs r3,r3,#11
 2318 0020 3B61     	 str r3,[r7,#16]
 761:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2319              	 .loc 2 761 0
 2320 0022 7B68     	 ldr r3,[r7,#4]
 2321 0024 1B68     	 ldr r3,[r3]
 2322 0026 DB69     	 ldr r3,[r3,#28]
 2323 0028 03F00403 	 and r3,r3,#4
 2324 002c 9B08     	 lsrs r3,r3,#2
 2325 002e FB60     	 str r3,[r7,#12]
 762:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 763:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2326              	 .loc 2 763 0
 2327 0030 3B69     	 ldr r3,[r7,#16]
 2328 0032 002B     	 cmp r3,#0
 2329 0034 02D0     	 beq .L106
 764:../Libraries/XMCLib/src/xmc_can.c ****   {
 765:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2330              	 .loc 2 765 0
 2331 0036 0323     	 movs r3,#3
 2332 0038 FB75     	 strb r3,[r7,#23]
 2333 003a A7E0     	 b .L107
 2334              	.L106:
 766:../Libraries/XMCLib/src/xmc_can.c ****   }
 767:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 768:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2335              	 .loc 2 768 0
 2336 003c FB68     	 ldr r3,[r7,#12]
 2337 003e 012B     	 cmp r3,#1
 2338 0040 02D1     	 bne .L108
 769:../Libraries/XMCLib/src/xmc_can.c ****   {
 770:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2339              	 .loc 2 770 0
 2340 0042 0223     	 movs r3,#2
 2341 0044 FB75     	 strb r3,[r7,#23]
 2342 0046 A1E0     	 b .L107
 2343              	.L108:
 771:../Libraries/XMCLib/src/xmc_can.c ****   }
 772:../Libraries/XMCLib/src/xmc_can.c ****   else
 773:../Libraries/XMCLib/src/xmc_can.c ****   {
 774:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 775:../Libraries/XMCLib/src/xmc_can.c ****     do
 776:../Libraries/XMCLib/src/xmc_can.c ****     {
 777:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 2344              	 .loc 2 777 0
 2345 0048 7B68     	 ldr r3,[r7,#4]
 2346 004a 1B68     	 ldr r3,[r3]
 2347 004c 0822     	 movs r2,#8
 2348 004e DA61     	 str r2,[r3,#28]
 778:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 2349              	 .loc 2 778 0
 2350 0050 7B68     	 ldr r3,[r7,#4]
 2351 0052 1B68     	 ldr r3,[r3]
 2352 0054 9B69     	 ldr r3,[r3,#24]
 2353 0056 03F00053 	 and r3,r3,#536870912
 2354 005a 5B0F     	 lsrs r3,r3,#29
 2355 005c 002B     	 cmp r3,#0
 2356 005e 40D1     	 bne .L109
 779:../Libraries/XMCLib/src/xmc_can.c ****       {
 780:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 2357              	 .loc 2 780 0
 2358 0060 7A68     	 ldr r2,[r7,#4]
 2359 0062 D379     	 ldrb r3,[r2,#7]
 2360 0064 6FF34513 	 bfc r3,#5,#1
 2361 0068 D371     	 strb r3,[r2,#7]
 781:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 2362              	 .loc 2 781 0
 2363 006a 7B68     	 ldr r3,[r7,#4]
 2364 006c 1B68     	 ldr r3,[r3]
 2365 006e 9A69     	 ldr r2,[r3,#24]
 2366 0070 4A4B     	 ldr r3,.L115
 2367 0072 1340     	 ands r3,r3,r2
 2368 0074 9B0C     	 lsrs r3,r3,#18
 2369 0076 23F06041 	 bic r1,r3,#-536870912
 2370 007a 7A68     	 ldr r2,[r7,#4]
 2371 007c 5368     	 ldr r3,[r2,#4]
 2372 007e 61F31C03 	 bfi r3,r1,#0,#29
 2373 0082 5360     	 str r3,[r2,#4]
 782:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2374              	 .loc 2 782 0
 2375 0084 7B68     	 ldr r3,[r7,#4]
 2376 0086 1B68     	 ldr r3,[r3]
 2377 0088 DB68     	 ldr r3,[r3,#12]
 2378 008a 03F00053 	 and r3,r3,#536870912
 2379 008e 5B0F     	 lsrs r3,r3,#29
 2380 0090 DBB2     	 uxtb r3,r3
 2381 0092 03F00103 	 and r3,r3,#1
 2382 0096 D9B2     	 uxtb r1,r3
 2383 0098 7A68     	 ldr r2,[r7,#4]
 2384 009a D37A     	 ldrb r3,[r2,#11]
 2385 009c 61F34513 	 bfi r3,r1,#5,#1
 2386 00a0 D372     	 strb r3,[r2,#11]
 783:../Libraries/XMCLib/src/xmc_can.c ****         if (can_mo->can_ide_mask == 1U)
 2387              	 .loc 2 783 0
 2388 00a2 7B68     	 ldr r3,[r7,#4]
 2389 00a4 DB7A     	 ldrb r3,[r3,#11]
 2390 00a6 03F02003 	 and r3,r3,#32
 2391 00aa DBB2     	 uxtb r3,r3
 2392 00ac 002B     	 cmp r3,#0
 2393 00ae 0DD0     	 beq .L110
 784:../Libraries/XMCLib/src/xmc_can.c ****         {
 785:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 2394              	 .loc 2 785 0
 2395 00b0 7B68     	 ldr r3,[r7,#4]
 2396 00b2 1B68     	 ldr r3,[r3]
 2397 00b4 DA68     	 ldr r2,[r3,#12]
 2398 00b6 394B     	 ldr r3,.L115
 2399 00b8 1340     	 ands r3,r3,r2
 2400 00ba 9B0C     	 lsrs r3,r3,#18
 2401 00bc 23F06041 	 bic r1,r3,#-536870912
 2402 00c0 7A68     	 ldr r2,[r7,#4]
 2403 00c2 9368     	 ldr r3,[r2,#8]
 2404 00c4 61F31C03 	 bfi r3,r1,#0,#29
 2405 00c8 9360     	 str r3,[r2,#8]
 2406 00ca 32E0     	 b .L112
 2407              	.L110:
 786:../Libraries/XMCLib/src/xmc_can.c ****         }
 787:../Libraries/XMCLib/src/xmc_can.c ****         else
 788:../Libraries/XMCLib/src/xmc_can.c ****         {
 789:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2408              	 .loc 2 789 0
 2409 00cc 7B68     	 ldr r3,[r7,#4]
 2410 00ce 1B68     	 ldr r3,[r3]
 2411 00d0 DB68     	 ldr r3,[r3,#12]
 2412 00d2 23F06041 	 bic r1,r3,#-536870912
 2413 00d6 7A68     	 ldr r2,[r7,#4]
 2414 00d8 9368     	 ldr r3,[r2,#8]
 2415 00da 61F31C03 	 bfi r3,r1,#0,#29
 2416 00de 9360     	 str r3,[r2,#8]
 2417 00e0 27E0     	 b .L112
 2418              	.L109:
 790:../Libraries/XMCLib/src/xmc_can.c ****         }
 791:../Libraries/XMCLib/src/xmc_can.c ****       }
 792:../Libraries/XMCLib/src/xmc_can.c ****       else
 793:../Libraries/XMCLib/src/xmc_can.c ****       {
 794:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 2419              	 .loc 2 794 0
 2420 00e2 7A68     	 ldr r2,[r7,#4]
 2421 00e4 D379     	 ldrb r3,[r2,#7]
 2422 00e6 43F02003 	 orr r3,r3,#32
 2423 00ea D371     	 strb r3,[r2,#7]
 795:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 2424              	 .loc 2 795 0
 2425 00ec 7B68     	 ldr r3,[r7,#4]
 2426 00ee 1B68     	 ldr r3,[r3]
 2427 00f0 9B69     	 ldr r3,[r3,#24]
 2428 00f2 23F06041 	 bic r1,r3,#-536870912
 2429 00f6 7A68     	 ldr r2,[r7,#4]
 2430 00f8 5368     	 ldr r3,[r2,#4]
 2431 00fa 61F31C03 	 bfi r3,r1,#0,#29
 2432 00fe 5360     	 str r3,[r2,#4]
 796:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2433              	 .loc 2 796 0
 2434 0100 7B68     	 ldr r3,[r7,#4]
 2435 0102 1B68     	 ldr r3,[r3]
 2436 0104 DB68     	 ldr r3,[r3,#12]
 2437 0106 23F06041 	 bic r1,r3,#-536870912
 2438 010a 7A68     	 ldr r2,[r7,#4]
 2439 010c 9368     	 ldr r3,[r2,#8]
 2440 010e 61F31C03 	 bfi r3,r1,#0,#29
 2441 0112 9360     	 str r3,[r2,#8]
 797:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2442              	 .loc 2 797 0
 2443 0114 7B68     	 ldr r3,[r7,#4]
 2444 0116 1B68     	 ldr r3,[r3]
 2445 0118 DB68     	 ldr r3,[r3,#12]
 2446 011a 03F00053 	 and r3,r3,#536870912
 2447 011e 5B0F     	 lsrs r3,r3,#29
 2448 0120 DBB2     	 uxtb r3,r3
 2449 0122 03F00103 	 and r3,r3,#1
 2450 0126 D9B2     	 uxtb r1,r3
 2451 0128 7A68     	 ldr r2,[r7,#4]
 2452 012a D37A     	 ldrb r3,[r2,#11]
 2453 012c 61F34513 	 bfi r3,r1,#5,#1
 2454 0130 D372     	 strb r3,[r2,#11]
 2455              	.L112:
 798:../Libraries/XMCLib/src/xmc_can.c ****       }
 799:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 2456              	 .loc 2 799 0
 2457 0132 7B68     	 ldr r3,[r7,#4]
 2458 0134 1B68     	 ldr r3,[r3]
 2459 0136 1B68     	 ldr r3,[r3]
 2460 0138 03F07063 	 and r3,r3,#251658240
 2461 013c 1B0E     	 lsrs r3,r3,#24
 2462 013e DAB2     	 uxtb r2,r3
 2463 0140 7B68     	 ldr r3,[r7,#4]
 2464 0142 1A73     	 strb r2,[r3,#12]
 800:../Libraries/XMCLib/src/xmc_can.c **** 
 801:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2465              	 .loc 2 801 0
 2466 0144 7B68     	 ldr r3,[r7,#4]
 2467 0146 1B68     	 ldr r3,[r3]
 2468 0148 1A69     	 ldr r2,[r3,#16]
 2469 014a 7B68     	 ldr r3,[r7,#4]
 2470 014c 1A61     	 str r2,[r3,#16]
 802:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2471              	 .loc 2 802 0
 2472 014e 7B68     	 ldr r3,[r7,#4]
 2473 0150 1B68     	 ldr r3,[r3]
 2474 0152 5A69     	 ldr r2,[r3,#20]
 2475 0154 7B68     	 ldr r3,[r7,#4]
 2476 0156 5A61     	 str r2,[r3,#20]
 803:../Libraries/XMCLib/src/xmc_can.c **** 
 804:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2477              	 .loc 2 804 0
 2478 0158 7B68     	 ldr r3,[r7,#4]
 2479 015a 1B68     	 ldr r3,[r3]
 2480 015c DB69     	 ldr r3,[r3,#28]
 2481 015e 03F00403 	 and r3,r3,#4
 2482 0162 9B08     	 lsrs r3,r3,#2
 2483 0164 BB75     	 strb r3,[r7,#22]
 805:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2484              	 .loc 2 805 0
 2485 0166 7B68     	 ldr r3,[r7,#4]
 2486 0168 1B68     	 ldr r3,[r3]
 2487 016a DB69     	 ldr r3,[r3,#28]
 2488 016c 03F00803 	 and r3,r3,#8
 2489 0170 DB08     	 lsrs r3,r3,#3
 2490 0172 7B75     	 strb r3,[r7,#21]
 806:../Libraries/XMCLib/src/xmc_can.c ****     }
 807:../Libraries/XMCLib/src/xmc_can.c ****     while ((rx_pnd != 0U) && (new_data != 0U));
 2491              	 .loc 2 807 0
 2492 0174 BB7D     	 ldrb r3,[r7,#22]
 2493 0176 002B     	 cmp r3,#0
 2494 0178 03D0     	 beq .L113
 2495              	 .loc 2 807 0 is_stmt 0 discriminator 1
 2496 017a 7B7D     	 ldrb r3,[r7,#21]
 2497 017c 002B     	 cmp r3,#0
 2498 017e 7FF463AF 	 bne .L108
 2499              	.L113:
 808:../Libraries/XMCLib/src/xmc_can.c **** 
 809:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 2500              	 .loc 2 809 0 is_stmt 1
 2501 0182 7B68     	 ldr r3,[r7,#4]
 2502 0184 0022     	 movs r2,#0
 2503 0186 1A76     	 strb r2,[r3,#24]
 810:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2504              	 .loc 2 810 0
 2505 0188 0023     	 movs r3,#0
 2506 018a FB75     	 strb r3,[r7,#23]
 2507              	.L107:
 811:../Libraries/XMCLib/src/xmc_can.c ****   }
 812:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2508              	 .loc 2 812 0
 2509 018c FB7D     	 ldrb r3,[r7,#23]
 813:../Libraries/XMCLib/src/xmc_can.c **** }
 2510              	 .loc 2 813 0
 2511 018e 1846     	 mov r0,r3
 2512 0190 1C37     	 adds r7,r7,#28
 2513              	.LCFI143:
 2514              	 .cfi_def_cfa_offset 4
 2515 0192 BD46     	 mov sp,r7
 2516              	.LCFI144:
 2517              	 .cfi_def_cfa_register 13
 2518              	 
 2519 0194 5DF8047B 	 ldr r7,[sp],#4
 2520              	.LCFI145:
 2521              	 .cfi_restore 7
 2522              	 .cfi_def_cfa_offset 0
 2523 0198 7047     	 bx lr
 2524              	.L116:
 2525 019a 00BF     	 .align 2
 2526              	.L115:
 2527 019c 0000FC1F 	 .word 536608768
 2528              	 .cfi_endproc
 2529              	.LFE250:
 2531              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 2532              	 .align 2
 2533              	 .global XMC_CAN_NODE_EnableEvent
 2534              	 .thumb
 2535              	 .thumb_func
 2537              	XMC_CAN_NODE_EnableEvent:
 2538              	.LFB251:
 814:../Libraries/XMCLib/src/xmc_can.c **** 
 815:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 816:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 817:../Libraries/XMCLib/src/xmc_can.c **** {
 2539              	 .loc 2 817 0
 2540              	 .cfi_startproc
 2541              	 
 2542              	 
 2543              	 
 2544 0000 80B4     	 push {r7}
 2545              	.LCFI146:
 2546              	 .cfi_def_cfa_offset 4
 2547              	 .cfi_offset 7,-4
 2548 0002 83B0     	 sub sp,sp,#12
 2549              	.LCFI147:
 2550              	 .cfi_def_cfa_offset 16
 2551 0004 00AF     	 add r7,sp,#0
 2552              	.LCFI148:
 2553              	 .cfi_def_cfa_register 7
 2554 0006 7860     	 str r0,[r7,#4]
 2555 0008 3960     	 str r1,[r7]
 818:../Libraries/XMCLib/src/xmc_can.c ****   if (event != XMC_CAN_NODE_EVENT_CFCIE)
 2556              	 .loc 2 818 0
 2557 000a 3B68     	 ldr r3,[r7]
 2558 000c B3F5800F 	 cmp r3,#4194304
 2559 0010 06D0     	 beq .L118
 819:../Libraries/XMCLib/src/xmc_can.c ****   {
 820:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 2560              	 .loc 2 820 0
 2561 0012 7B68     	 ldr r3,[r7,#4]
 2562 0014 1A68     	 ldr r2,[r3]
 2563 0016 3B68     	 ldr r3,[r7]
 2564 0018 1A43     	 orrs r2,r2,r3
 2565 001a 7B68     	 ldr r3,[r7,#4]
 2566 001c 1A60     	 str r2,[r3]
 2567 001e 05E0     	 b .L117
 2568              	.L118:
 821:../Libraries/XMCLib/src/xmc_can.c ****   }
 822:../Libraries/XMCLib/src/xmc_can.c ****   else
 823:../Libraries/XMCLib/src/xmc_can.c ****   {
 824:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 2569              	 .loc 2 824 0
 2570 0020 7B68     	 ldr r3,[r7,#4]
 2571 0022 9A69     	 ldr r2,[r3,#24]
 2572 0024 3B68     	 ldr r3,[r7]
 2573 0026 1A43     	 orrs r2,r2,r3
 2574 0028 7B68     	 ldr r3,[r7,#4]
 2575 002a 9A61     	 str r2,[r3,#24]
 2576              	.L117:
 825:../Libraries/XMCLib/src/xmc_can.c ****   }
 826:../Libraries/XMCLib/src/xmc_can.c **** }
 2577              	 .loc 2 826 0
 2578 002c 0C37     	 adds r7,r7,#12
 2579              	.LCFI149:
 2580              	 .cfi_def_cfa_offset 4
 2581 002e BD46     	 mov sp,r7
 2582              	.LCFI150:
 2583              	 .cfi_def_cfa_register 13
 2584              	 
 2585 0030 5DF8047B 	 ldr r7,[sp],#4
 2586              	.LCFI151:
 2587              	 .cfi_restore 7
 2588              	 .cfi_def_cfa_offset 0
 2589 0034 7047     	 bx lr
 2590              	 .cfi_endproc
 2591              	.LFE251:
 2593 0036 00BF     	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 2594              	 .align 2
 2595              	 .global XMC_CAN_NODE_DisableEvent
 2596              	 .thumb
 2597              	 .thumb_func
 2599              	XMC_CAN_NODE_DisableEvent:
 2600              	.LFB252:
 827:../Libraries/XMCLib/src/xmc_can.c **** 
 828:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 829:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 830:../Libraries/XMCLib/src/xmc_can.c **** {
 2601              	 .loc 2 830 0
 2602              	 .cfi_startproc
 2603              	 
 2604              	 
 2605              	 
 2606 0000 80B4     	 push {r7}
 2607              	.LCFI152:
 2608              	 .cfi_def_cfa_offset 4
 2609              	 .cfi_offset 7,-4
 2610 0002 83B0     	 sub sp,sp,#12
 2611              	.LCFI153:
 2612              	 .cfi_def_cfa_offset 16
 2613 0004 00AF     	 add r7,sp,#0
 2614              	.LCFI154:
 2615              	 .cfi_def_cfa_register 7
 2616 0006 7860     	 str r0,[r7,#4]
 2617 0008 3960     	 str r1,[r7]
 831:../Libraries/XMCLib/src/xmc_can.c ****   if (event != XMC_CAN_NODE_EVENT_CFCIE)
 2618              	 .loc 2 831 0
 2619 000a 3B68     	 ldr r3,[r7]
 2620 000c B3F5800F 	 cmp r3,#4194304
 2621 0010 07D0     	 beq .L121
 832:../Libraries/XMCLib/src/xmc_can.c ****   {
 833:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 2622              	 .loc 2 833 0
 2623 0012 7B68     	 ldr r3,[r7,#4]
 2624 0014 1A68     	 ldr r2,[r3]
 2625 0016 3B68     	 ldr r3,[r7]
 2626 0018 DB43     	 mvns r3,r3
 2627 001a 1A40     	 ands r2,r2,r3
 2628 001c 7B68     	 ldr r3,[r7,#4]
 2629 001e 1A60     	 str r2,[r3]
 2630 0020 06E0     	 b .L120
 2631              	.L121:
 834:../Libraries/XMCLib/src/xmc_can.c ****   }
 835:../Libraries/XMCLib/src/xmc_can.c ****   else
 836:../Libraries/XMCLib/src/xmc_can.c ****   {
 837:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 2632              	 .loc 2 837 0
 2633 0022 7B68     	 ldr r3,[r7,#4]
 2634 0024 9A69     	 ldr r2,[r3,#24]
 2635 0026 3B68     	 ldr r3,[r7]
 2636 0028 DB43     	 mvns r3,r3
 2637 002a 1A40     	 ands r2,r2,r3
 2638 002c 7B68     	 ldr r3,[r7,#4]
 2639 002e 9A61     	 str r2,[r3,#24]
 2640              	.L120:
 838:../Libraries/XMCLib/src/xmc_can.c ****   }
 839:../Libraries/XMCLib/src/xmc_can.c **** }
 2641              	 .loc 2 839 0
 2642 0030 0C37     	 adds r7,r7,#12
 2643              	.LCFI155:
 2644              	 .cfi_def_cfa_offset 4
 2645 0032 BD46     	 mov sp,r7
 2646              	.LCFI156:
 2647              	 .cfi_def_cfa_register 13
 2648              	 
 2649 0034 5DF8047B 	 ldr r7,[sp],#4
 2650              	.LCFI157:
 2651              	 .cfi_restore 7
 2652              	 .cfi_def_cfa_offset 0
 2653 0038 7047     	 bx lr
 2654              	 .cfi_endproc
 2655              	.LFE252:
 2657 003a 00BF     	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 2658              	 .align 2
 2659              	 .global XMC_CAN_TXFIFO_Transmit
 2660              	 .thumb
 2661              	 .thumb_func
 2663              	XMC_CAN_TXFIFO_Transmit:
 2664              	.LFB253:
 840:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 841:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 842:../Libraries/XMCLib/src/xmc_can.c **** {
 2665              	 .loc 2 842 0
 2666              	 .cfi_startproc
 2667              	 
 2668              	 
 2669              	 
 2670 0000 80B4     	 push {r7}
 2671              	.LCFI158:
 2672              	 .cfi_def_cfa_offset 4
 2673              	 .cfi_offset 7,-4
 2674 0002 89B0     	 sub sp,sp,#36
 2675              	.LCFI159:
 2676              	 .cfi_def_cfa_offset 40
 2677 0004 00AF     	 add r7,sp,#0
 2678              	.LCFI160:
 2679              	 .cfi_def_cfa_register 7
 2680 0006 7860     	 str r0,[r7,#4]
 843:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2681              	 .loc 2 843 0
 2682 0008 0123     	 movs r3,#1
 2683 000a FB77     	 strb r3,[r7,#31]
 844:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2684              	 .loc 2 844 0
 2685 000c 7B68     	 ldr r3,[r7,#4]
 2686 000e 1B68     	 ldr r3,[r3]
 2687 0010 DB69     	 ldr r3,[r3,#28]
 2688 0012 03F02003 	 and r3,r3,#32
 2689 0016 5B09     	 lsrs r3,r3,#5
 2690 0018 BB61     	 str r3,[r7,#24]
 845:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 2691              	 .loc 2 845 0
 2692 001a 7B68     	 ldr r3,[r7,#4]
 2693 001c 1B68     	 ldr r3,[r3]
 2694 001e DB69     	 ldr r3,[r3,#28]
 2695 0020 03F48073 	 and r3,r3,#256
 2696 0024 1B0A     	 lsrs r3,r3,#8
 2697 0026 7B61     	 str r3,[r7,#20]
 846:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 2698              	 .loc 2 846 0
 2699 0028 7B68     	 ldr r3,[r7,#4]
 2700 002a 1B68     	 ldr r3,[r3]
 2701 002c 5B68     	 ldr r3,[r3,#4]
 2702 002e 03F47F03 	 and r3,r3,#16711680
 2703 0032 1B0C     	 lsrs r3,r3,#16
 2704 0034 3B61     	 str r3,[r7,#16]
 847:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef  *mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 2705              	 .loc 2 847 0
 2706 0036 3B69     	 ldr r3,[r7,#16]
 2707 0038 03F11073 	 add r3,r3,#37748736
 2708 003c 03F52863 	 add r3,r3,#2688
 2709 0040 5B01     	 lsls r3,r3,#5
 2710 0042 FB60     	 str r3,[r7,#12]
 848:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 849:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2711              	 .loc 2 849 0
 2712 0044 BB69     	 ldr r3,[r7,#24]
 2713 0046 002B     	 cmp r3,#0
 2714 0048 02D1     	 bne .L124
 850:../Libraries/XMCLib/src/xmc_can.c ****   {
 851:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2715              	 .loc 2 851 0
 2716 004a 0423     	 movs r3,#4
 2717 004c FB77     	 strb r3,[r7,#31]
 2718 004e 0BE0     	 b .L125
 2719              	.L124:
 852:../Libraries/XMCLib/src/xmc_can.c ****   }
 853:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 854:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2720              	 .loc 2 854 0
 2721 0050 7B69     	 ldr r3,[r7,#20]
 2722 0052 012B     	 cmp r3,#1
 2723 0054 02D1     	 bne .L126
 855:../Libraries/XMCLib/src/xmc_can.c ****   {
 856:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2724              	 .loc 2 856 0
 2725 0056 0223     	 movs r3,#2
 2726 0058 FB77     	 strb r3,[r7,#31]
 2727 005a 05E0     	 b .L125
 2728              	.L126:
 857:../Libraries/XMCLib/src/xmc_can.c ****   }
 858:../Libraries/XMCLib/src/xmc_can.c ****   else
 859:../Libraries/XMCLib/src/xmc_can.c ****   {
 860:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 2729              	 .loc 2 860 0
 2730 005c FB68     	 ldr r3,[r7,#12]
 2731 005e 4FF0E062 	 mov r2,#117440512
 2732 0062 DA61     	 str r2,[r3,#28]
 861:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2733              	 .loc 2 861 0
 2734 0064 0023     	 movs r3,#0
 2735 0066 FB77     	 strb r3,[r7,#31]
 2736              	.L125:
 862:../Libraries/XMCLib/src/xmc_can.c ****   }
 863:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2737              	 .loc 2 863 0
 2738 0068 FB7F     	 ldrb r3,[r7,#31]
 864:../Libraries/XMCLib/src/xmc_can.c **** }
 2739              	 .loc 2 864 0
 2740 006a 1846     	 mov r0,r3
 2741 006c 2437     	 adds r7,r7,#36
 2742              	.LCFI161:
 2743              	 .cfi_def_cfa_offset 4
 2744 006e BD46     	 mov sp,r7
 2745              	.LCFI162:
 2746              	 .cfi_def_cfa_register 13
 2747              	 
 2748 0070 5DF8047B 	 ldr r7,[sp],#4
 2749              	.LCFI163:
 2750              	 .cfi_restore 7
 2751              	 .cfi_def_cfa_offset 0
 2752 0074 7047     	 bx lr
 2753              	 .cfi_endproc
 2754              	.LFE253:
 2756 0076 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 2757              	 .align 2
 2758              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 2759              	 .thumb
 2760              	 .thumb_func
 2762              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 2763              	.LFB254:
 865:../Libraries/XMCLib/src/xmc_can.c **** 
 866:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 867:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo, const XMC_CAN_FIFO_CONFIG_
 868:../Libraries/XMCLib/src/xmc_can.c **** {
 2764              	 .loc 2 868 0
 2765              	 .cfi_startproc
 2766              	 
 2767              	 
 2768              	 
 2769 0000 80B4     	 push {r7}
 2770              	.LCFI164:
 2771              	 .cfi_def_cfa_offset 4
 2772              	 .cfi_offset 7,-4
 2773 0002 83B0     	 sub sp,sp,#12
 2774              	.LCFI165:
 2775              	 .cfi_def_cfa_offset 16
 2776 0004 00AF     	 add r7,sp,#0
 2777              	.LCFI166:
 2778              	 .cfi_def_cfa_register 7
 2779 0006 7860     	 str r0,[r7,#4]
 2780 0008 3960     	 str r1,[r7]
 869:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2781              	 .loc 2 869 0
 2782 000a 7B68     	 ldr r3,[r7,#4]
 2783 000c 1B68     	 ldr r3,[r3]
 2784 000e 7A68     	 ldr r2,[r7,#4]
 2785 0010 1268     	 ldr r2,[r2]
 2786 0012 1268     	 ldr r2,[r2]
 2787 0014 22F00F02 	 bic r2,r2,#15
 2788 0018 42F00202 	 orr r2,r2,#2
 2789 001c 1A60     	 str r2,[r3]
 870:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 871:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 2790              	 .loc 2 871 0
 2791 001e 7B68     	 ldr r3,[r7,#4]
 2792 0020 1B68     	 ldr r3,[r3]
 2793 0022 7A68     	 ldr r2,[r7,#4]
 2794 0024 1268     	 ldr r2,[r2]
 2795 0026 5268     	 ldr r2,[r2,#4]
 2796 0028 02F07F42 	 and r2,r2,#-16777216
 872:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_TOP_Msk |
 873:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_CUR_Msk)) |
 874:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2797              	 .loc 2 874 0
 2798 002c 3978     	 ldrb r1,[r7]
 873:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2799              	 .loc 2 873 0
 2800 002e 1143     	 orrs r1,r1,r2
 875:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2801              	 .loc 2 875 0
 2802 0030 BA78     	 ldrb r2,[r7,#2]
 2803 0032 1204     	 lsls r2,r2,#16
 2804 0034 02F47F02 	 and r2,r2,#16711680
 874:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2805              	 .loc 2 874 0
 2806 0038 1143     	 orrs r1,r1,r2
 876:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2807              	 .loc 2 876 0
 2808 003a 7A78     	 ldrb r2,[r7,#1]
 2809 003c 1202     	 lsls r2,r2,#8
 2810 003e 92B2     	 uxth r2,r2
 875:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2811              	 .loc 2 875 0
 2812 0040 0A43     	 orrs r2,r2,r1
 871:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_TOP_Msk |
 2813              	 .loc 2 871 0
 2814 0042 5A60     	 str r2,[r3,#4]
 877:../Libraries/XMCLib/src/xmc_can.c **** }
 2815              	 .loc 2 877 0
 2816 0044 0C37     	 adds r7,r7,#12
 2817              	.LCFI167:
 2818              	 .cfi_def_cfa_offset 4
 2819 0046 BD46     	 mov sp,r7
 2820              	.LCFI168:
 2821              	 .cfi_def_cfa_register 13
 2822              	 
 2823 0048 5DF8047B 	 ldr r7,[sp],#4
 2824              	.LCFI169:
 2825              	 .cfi_restore 7
 2826              	 .cfi_def_cfa_offset 0
 2827 004c 7047     	 bx lr
 2828              	 .cfi_endproc
 2829              	.LFE254:
 2831 004e 00BF     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 2832              	 .align 2
 2833              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 2834              	 .thumb
 2835              	 .thumb_func
 2837              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 2838              	.LFB255:
 878:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 879:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo, const XMC_CAN_FIFO_CONFIG_
 880:../Libraries/XMCLib/src/xmc_can.c **** {
 2839              	 .loc 2 880 0
 2840              	 .cfi_startproc
 2841              	 
 2842              	 
 2843              	 
 2844 0000 80B4     	 push {r7}
 2845              	.LCFI170:
 2846              	 .cfi_def_cfa_offset 4
 2847              	 .cfi_offset 7,-4
 2848 0002 83B0     	 sub sp,sp,#12
 2849              	.LCFI171:
 2850              	 .cfi_def_cfa_offset 16
 2851 0004 00AF     	 add r7,sp,#0
 2852              	.LCFI172:
 2853              	 .cfi_def_cfa_register 7
 2854 0006 7860     	 str r0,[r7,#4]
 2855 0008 3960     	 str r1,[r7]
 881:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2856              	 .loc 2 881 0
 2857 000a 7B68     	 ldr r3,[r7,#4]
 2858 000c 1B68     	 ldr r3,[r3]
 2859 000e 7A68     	 ldr r2,[r7,#4]
 2860 0010 1268     	 ldr r2,[r2]
 2861 0012 1268     	 ldr r2,[r2]
 2862 0014 22F00F02 	 bic r2,r2,#15
 2863 0018 42F00102 	 orr r2,r2,#1
 2864 001c 1A60     	 str r2,[r3]
 882:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 883:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 2865              	 .loc 2 883 0
 2866 001e 7B68     	 ldr r3,[r7,#4]
 2867 0020 1B68     	 ldr r3,[r3]
 2868 0022 7A68     	 ldr r2,[r7,#4]
 2869 0024 1268     	 ldr r2,[r2]
 2870 0026 5268     	 ldr r2,[r2,#4]
 2871 0028 02F07F42 	 and r2,r2,#-16777216
 884:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_TOP_Msk |
 885:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_CUR_Msk)) |
 886:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2872              	 .loc 2 886 0
 2873 002c 3978     	 ldrb r1,[r7]
 885:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2874              	 .loc 2 885 0
 2875 002e 1143     	 orrs r1,r1,r2
 887:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2876              	 .loc 2 887 0
 2877 0030 BA78     	 ldrb r2,[r7,#2]
 2878 0032 1204     	 lsls r2,r2,#16
 2879 0034 02F47F02 	 and r2,r2,#16711680
 886:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2880              	 .loc 2 886 0
 2881 0038 1143     	 orrs r1,r1,r2
 888:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2882              	 .loc 2 888 0
 2883 003a 7A78     	 ldrb r2,[r7,#1]
 2884 003c 1202     	 lsls r2,r2,#8
 2885 003e 92B2     	 uxth r2,r2
 887:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2886              	 .loc 2 887 0
 2887 0040 0A43     	 orrs r2,r2,r1
 883:../Libraries/XMCLib/src/xmc_can.c ****                                 CAN_MO_MOFGPR_TOP_Msk |
 2888              	 .loc 2 883 0
 2889 0042 5A60     	 str r2,[r3,#4]
 889:../Libraries/XMCLib/src/xmc_can.c **** }
 2890              	 .loc 2 889 0
 2891 0044 0C37     	 adds r7,r7,#12
 2892              	.LCFI173:
 2893              	 .cfi_def_cfa_offset 4
 2894 0046 BD46     	 mov sp,r7
 2895              	.LCFI174:
 2896              	 .cfi_def_cfa_register 13
 2897              	 
 2898 0048 5DF8047B 	 ldr r7,[sp],#4
 2899              	.LCFI175:
 2900              	 .cfi_restore 7
 2901              	 .cfi_def_cfa_offset 0
 2902 004c 7047     	 bx lr
 2903              	 .cfi_endproc
 2904              	.LFE255:
 2906 004e 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 2907              	 .align 2
 2908              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 2909              	 .thumb
 2910              	 .thumb_func
 2912              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 2913              	.LFB256:
 890:../Libraries/XMCLib/src/xmc_can.c **** 
 891:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 892:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo, const XMC_CAN_FIFO_CONFIG
 893:../Libraries/XMCLib/src/xmc_can.c **** {
 2914              	 .loc 2 893 0
 2915              	 .cfi_startproc
 2916              	 
 2917              	 
 2918              	 
 2919 0000 80B4     	 push {r7}
 2920              	.LCFI176:
 2921              	 .cfi_def_cfa_offset 4
 2922              	 .cfi_offset 7,-4
 2923 0002 83B0     	 sub sp,sp,#12
 2924              	.LCFI177:
 2925              	 .cfi_def_cfa_offset 16
 2926 0004 00AF     	 add r7,sp,#0
 2927              	.LCFI178:
 2928              	 .cfi_def_cfa_register 7
 2929 0006 7860     	 str r0,[r7,#4]
 2930 0008 3960     	 str r1,[r7]
 894:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2931              	 .loc 2 894 0
 2932 000a 7B68     	 ldr r3,[r7,#4]
 2933 000c 1B68     	 ldr r3,[r3]
 2934 000e 7A68     	 ldr r2,[r7,#4]
 2935 0010 1268     	 ldr r2,[r2]
 2936 0012 1268     	 ldr r2,[r2]
 2937 0014 22F00F02 	 bic r2,r2,#15
 2938 0018 42F00302 	 orr r2,r2,#3
 2939 001c 1A60     	 str r2,[r3]
 895:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 896:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 2940              	 .loc 2 896 0
 2941 001e 7B68     	 ldr r3,[r7,#4]
 2942 0020 1B68     	 ldr r3,[r3]
 2943 0022 7A68     	 ldr r2,[r7,#4]
 2944 0024 1268     	 ldr r2,[r2]
 2945 0026 5268     	 ldr r2,[r2,#4]
 2946 0028 22F47F01 	 bic r1,r2,#16711680
 897:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2947              	 .loc 2 897 0
 2948 002c BA78     	 ldrb r2,[r7,#2]
 2949 002e 1204     	 lsls r2,r2,#16
 2950 0030 02F47F02 	 and r2,r2,#16711680
 896:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2951              	 .loc 2 896 0
 2952 0034 0A43     	 orrs r2,r2,r1
 2953 0036 5A60     	 str r2,[r3,#4]
 898:../Libraries/XMCLib/src/xmc_can.c **** 
 899:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk |
 2954              	 .loc 2 899 0
 2955 0038 7B68     	 ldr r3,[r7,#4]
 2956 003a 1B68     	 ldr r3,[r3]
 2957 003c 034A     	 ldr r2,.L131
 2958 003e DA61     	 str r2,[r3,#28]
 900:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 901:../Libraries/XMCLib/src/xmc_can.c **** }
 2959              	 .loc 2 901 0
 2960 0040 0C37     	 adds r7,r7,#12
 2961              	.LCFI179:
 2962              	 .cfi_def_cfa_offset 4
 2963 0042 BD46     	 mov sp,r7
 2964              	.LCFI180:
 2965              	 .cfi_def_cfa_register 13
 2966              	 
 2967 0044 5DF8047B 	 ldr r7,[sp],#4
 2968              	.LCFI181:
 2969              	 .cfi_restore 7
 2970              	 .cfi_def_cfa_offset 0
 2971 0048 7047     	 bx lr
 2972              	.L132:
 2973 004a 00BF     	 .align 2
 2974              	.L131:
 2975 004c 00040002 	 .word 33555456
 2976              	 .cfi_endproc
 2977              	.LFE256:
 2979              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 2980              	 .align 2
 2981              	 .global XMC_CAN_GATEWAY_InitSourceObject
 2982              	 .thumb
 2983              	 .thumb_func
 2985              	XMC_CAN_GATEWAY_InitSourceObject:
 2986              	.LFB257:
 902:../Libraries/XMCLib/src/xmc_can.c **** 
 903:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 904:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo, const XMC_CAN_GATEWAY_CONFI
 905:../Libraries/XMCLib/src/xmc_can.c **** {
 2987              	 .loc 2 905 0
 2988              	 .cfi_startproc
 2989              	 
 2990              	 
 2991              	 
 2992 0000 80B4     	 push {r7}
 2993              	.LCFI182:
 2994              	 .cfi_def_cfa_offset 4
 2995              	 .cfi_offset 7,-4
 2996 0002 85B0     	 sub sp,sp,#20
 2997              	.LCFI183:
 2998              	 .cfi_def_cfa_offset 24
 2999 0004 00AF     	 add r7,sp,#0
 3000              	.LCFI184:
 3001              	 .cfi_def_cfa_register 7
 3002 0006 F860     	 str r0,[r7,#12]
 3003 0008 3B1D     	 adds r3,r7,#4
 3004 000a 83E80600 	 stmia r3,{r1,r2}
 906:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 3005              	 .loc 2 906 0
 3006 000e FB68     	 ldr r3,[r7,#12]
 3007 0010 1B68     	 ldr r3,[r3]
 907:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3008              	 .loc 2 907 0
 3009 0012 FA79     	 ldrb r2,[r7,#7]
 3010 0014 1202     	 lsls r2,r2,#8
 3011 0016 02F48071 	 and r1,r2,#256
 908:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3012              	 .loc 2 908 0
 3013 001a 7A7A     	 ldrb r2,[r7,#9]
 3014 001c 9202     	 lsls r2,r2,#10
 3015 001e 02F48062 	 and r2,r2,#1024
 907:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3016              	 .loc 2 907 0
 3017 0022 1143     	 orrs r1,r1,r2
 909:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3018              	 .loc 2 909 0
 3019 0024 3A7A     	 ldrb r2,[r7,#8]
 3020 0026 5202     	 lsls r2,r2,#9
 3021 0028 02F40072 	 and r2,r2,#512
 908:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3022              	 .loc 2 908 0
 3023 002c 1143     	 orrs r1,r1,r2
 910:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 3024              	 .loc 2 910 0
 3025 002e BA7A     	 ldrb r2,[r7,#10]
 3026 0030 D202     	 lsls r2,r2,#11
 3027 0032 02F40062 	 and r2,r2,#2048
 909:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3028              	 .loc 2 909 0
 3029 0036 0A43     	 orrs r2,r2,r1
 3030 0038 42F00402 	 orr r2,r2,#4
 906:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3031              	 .loc 2 906 0
 3032 003c 1A60     	 str r2,[r3]
 911:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3033              	 .loc 2 911 0
 3034 003e FB68     	 ldr r3,[r7,#12]
 3035 0040 1B68     	 ldr r3,[r3]
 3036 0042 3A79     	 ldrb r2,[r7,#4]
 3037 0044 1146     	 mov r1,r2
 912:../Libraries/XMCLib/src/xmc_can.c ****                                           (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR
 3038              	 .loc 2 912 0
 3039 0046 BA79     	 ldrb r2,[r7,#6]
 3040 0048 1204     	 lsls r2,r2,#16
 3041 004a 02F47F02 	 and r2,r2,#16711680
 911:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3042              	 .loc 2 911 0
 3043 004e 1143     	 orrs r1,r1,r2
 913:../Libraries/XMCLib/src/xmc_can.c ****                                           (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_
 3044              	 .loc 2 913 0
 3045 0050 7A79     	 ldrb r2,[r7,#5]
 3046 0052 1202     	 lsls r2,r2,#8
 3047 0054 92B2     	 uxth r2,r2
 911:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3048              	 .loc 2 911 0
 3049 0056 0A43     	 orrs r2,r2,r1
 3050 0058 5A60     	 str r2,[r3,#4]
 914:../Libraries/XMCLib/src/xmc_can.c **** }
 3051              	 .loc 2 914 0
 3052 005a 1437     	 adds r7,r7,#20
 3053              	.LCFI185:
 3054              	 .cfi_def_cfa_offset 4
 3055 005c BD46     	 mov sp,r7
 3056              	.LCFI186:
 3057              	 .cfi_def_cfa_register 13
 3058              	 
 3059 005e 5DF8047B 	 ldr r7,[sp],#4
 3060              	.LCFI187:
 3061              	 .cfi_restore 7
 3062              	 .cfi_def_cfa_offset 0
 3063 0062 7047     	 bx lr
 3064              	 .cfi_endproc
 3065              	.LFE257:
 3067              	 .text
 3068              	.Letext0:
 3069              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3070              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3071              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3072              	 .file 6 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc/xmc4_scu.h"
 3073              	 .file 7 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
 3074              	 .file 8 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/core_cm4.h"
 3075              	 .file 9 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:20     .text.XMC_CAN_IsPanelControlReady:00000000 $t
    {standard input}:24     .text.XMC_CAN_IsPanelControlReady:00000000 XMC_CAN_IsPanelControlReady
    {standard input}:70     .text.XMC_CAN_PanelControl:00000000 $t
    {standard input}:74     .text.XMC_CAN_PanelControl:00000000 XMC_CAN_PanelControl
    {standard input}:134    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:138    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:179    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:183    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:224    .text.max:00000000 $t
    {standard input}:228    .text.max:00000000 max
    {standard input}:272    .text.min:00000000 $t
    {standard input}:276    .text.min:00000000 min
    {standard input}:319    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:324    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:548    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:0000014c $d
    {standard input}:553    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:558    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:861    .text.XMC_CAN_NODE_NominalBitTimeConfigure:000001c0 $d
    {standard input}:866    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:871    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:925    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:930    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:967    .text.XMC_CAN_Disable:0000001c $d
    {standard input}:972    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:977    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:1025   .text.XMC_CAN_Enable:00000030 $d
    {standard input}:1030   .text.XMC_CAN_Init:00000000 $t
    {standard input}:1035   .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:1174   .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:1179   .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:1216   .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:1221   .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:1259   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:1264   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:1304   .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:1309   .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:1392   .text.XMC_CAN_GetClockFrequency:00000000 $t
    {standard input}:1397   .text.XMC_CAN_GetClockFrequency:00000000 XMC_CAN_GetClockFrequency
    {standard input}:1441   .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:1446   .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:1526   .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:1531   .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:1592   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:1597   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:1665   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1670   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1757   .text.XMC_CAN_MO_SetAcceptanceMask:00000074 $d
    {standard input}:1762   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1767   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:1975   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:1964   .text.XMC_CAN_MO_Config:00000130 $d
    {standard input}:1970   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:2066   .text.XMC_CAN_MO_UpdateData:0000006c $d
    {standard input}:2071   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:2076   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:2158   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:2163   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:2280   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:2285   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:2527   .text.XMC_CAN_MO_Receive:0000019c $d
    {standard input}:2532   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:2537   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:2594   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:2599   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:2658   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:2663   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:2757   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2762   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:2832   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2837   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:2907   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:2912   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:2975   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:0000004c $d
    {standard input}:2980   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:2985   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GetPeripheralClockFrequency
