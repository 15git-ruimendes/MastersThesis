   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dma.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DMA_GetEventStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_DMA_GetEventStatus:
  25              	.LFB133:
  26              	 .file 1 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc/xmc_dma.h"
   1:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
   2:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @date 2018-09-18
   4:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
   5:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @cond
   6:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *****************************************************************************
   7:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
   9:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * All rights reserved.
  11:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  12:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  14:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * do so, all subject to the following:
  20:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  21:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * a source language processor.
  27:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  28:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  36:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * at XMCSupport@infineon.com.
  39:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *****************************************************************************
  40:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  41:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Change History
  42:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * --------------
  43:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  44:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  45:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  46:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  47:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  48:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  49:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  50:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  51:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  52:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  53:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  54:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  55:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  56:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  57:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  58:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  59:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  60:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  61:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * 2018-09-18:
  62:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Added XMC_DMA_CH_GetTransferredData()
  63:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  64:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @endcond
  65:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
  66:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
  67:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  68:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  69:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
  70:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  71:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  72:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  73:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
  74:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  75:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
  76:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  77:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
  78:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  79:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
  80:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
  81:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  82:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  83:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
  84:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
  85:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
  86:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  87:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  88:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  89:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  90:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  91:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  92:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  93:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  94:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  95:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  96:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
  97:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  98:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  99:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
 100:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 101:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 102:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 103:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * MACROS
 104:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 105:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 106:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
 107:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 108:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 109:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 110:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 111:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 112:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 113:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 114:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 115:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 116:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 117:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * ENUMS
 118:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 119:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 120:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 121:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 122:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 123:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 124:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 125:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 126:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 127:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 128:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 129:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 130:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 131:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 132:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 133:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 134:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 135:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 136:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 137:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 138:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 139:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 140:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 141:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 142:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 143:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 144:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 145:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 146:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 147:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 148:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 149:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 150:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 151:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 152:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 153:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 154:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 155:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 156:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 157:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 158:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 159:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 160:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 161:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 162:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 163:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 164:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 165:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 166:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 167:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 168:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 169:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 170:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 171:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 172:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 173:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 174:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 175:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 176:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 177:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 178:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 179:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 180:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 181:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 182:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 183:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 184:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 185:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 186:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 187:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 188:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 189:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 190:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 191:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 192:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 193:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 194:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 195:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 196:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 197:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 198:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 199:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 200:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 201:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 202:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 203:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 204:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 205:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 206:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 207:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 208:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 209:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 210:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 211:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 212:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 213:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 214:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 215:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 216:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 217:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 218:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 219:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 220:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 221:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 222:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 223:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 224:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 225:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 226:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 227:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 228:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 229:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 230:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 231:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA events
 232:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 233:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 234:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 235:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 236:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 237:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 238:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 239:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 240:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 241:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 242:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 243:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Transaction types
 244:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 245:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 246:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 247:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 248:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 249:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 250:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 251:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 252:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 253:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 254:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 255:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 256:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 257:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 258:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 259:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 260:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 261:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 262:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 263:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 264:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 265:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 266:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 267:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 268:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 269:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 270:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 271:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 272:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 273:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 274:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 275:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct GPDMA_CH
 276:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 277:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 278:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 279:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 280:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 281:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 282:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 283:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 284:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 285:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 286:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 287:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 288:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 289:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 290:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 291:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 292:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 293:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 294:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 295:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 296:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 297:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 298:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 299:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 300:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 301:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 302:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 303:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 304:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 305:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 306:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 307:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 308:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA
 309:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 310:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 311:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 312:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 313:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 314:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 315:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 316:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 317:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 318:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 319:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 320:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 321:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 322:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 323:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 324:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 325:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 326:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 327:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 328:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 329:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 330:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 331:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 332:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 333:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 334:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 335:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 336:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 337:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 338:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 339:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 340:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 341:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 342:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #pragma push
 343:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #pragma anon_unions
 344:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 345:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #pragma warning 586
 346:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 347:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 348:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 349:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 350:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 351:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 352:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 353:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 354:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 355:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 356:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 357:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   union
 358:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   {
 359:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 360:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     {
 361:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 362:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 363:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 364:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 365:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 366:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 367:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 368:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 369:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 370:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 371:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 372:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 373:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 374:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 375:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 376:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     };
 377:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 378:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   };
 379:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 380:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 381:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 382:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 383:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 384:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 385:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 386:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 387:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 388:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 389:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 390:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 391:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   union
 392:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   {
 393:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 394:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 395:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     {
 396:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 397:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 398:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 399:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 400:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 401:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 402:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 403:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 404:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 405:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;
 406:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 407:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;
 408:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     };
 409:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   };
 410:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 411:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 412:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 413:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 414:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 415:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   union
 416:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   {
 417:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 418:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 419:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     {
 420:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 421:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 422:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     };
 423:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   };
 424:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 425:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   union
 426:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   {
 427:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 428:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 429:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     {
 430:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 431:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 432:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****     };
 433:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   };
 434:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 435:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 436:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 437:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 438:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 439:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 440:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 441:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 442:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 443:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 444:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 445:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 446:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #pragma pop
 447:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 448:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #pragma warning restore
 449:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 450:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 451:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 452:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 453:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 454:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 455:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 456:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 457:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 458:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 459:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 460:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 461:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** extern "C" {
 462:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 463:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 464:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 465:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 466:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 467:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 468:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 469:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 470:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 471:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 472:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 473:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral.
 474:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 475:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 476:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 477:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 478:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 479:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 480:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 481:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 482:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 483:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 484:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 485:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 486:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 487:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 488:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 489:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 490:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 491:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 492:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 493:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 494:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 495:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 496:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 497:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 498:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 499:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 500:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 501:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 502:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 503:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 504:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 505:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 506:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 507:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return bool
 508:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 509:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 510:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 511:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 512:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 513:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 514:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 515:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 516:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * is enabled.
 517:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 518:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 519:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 520:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 521:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 522:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 523:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 524:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 525:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 526:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 527:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 528:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 529:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 530:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 531:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 532:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 533:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 534:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 535:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 536:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 537:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 538:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 539:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 540:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 541:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
  27              	 .loc 1 541 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 542:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
  43              	 .loc 1 542 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F86033 	 ldr r3,[r3,#864]
 543:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** }
  46              	 .loc 1 543 0
  47 000e 1846     	 mov r0,r3
  48 0010 0C37     	 adds r7,r7,#12
  49              	.LCFI3:
  50              	 .cfi_def_cfa_offset 4
  51 0012 BD46     	 mov sp,r7
  52              	.LCFI4:
  53              	 .cfi_def_cfa_register 13
  54              	 
  55 0014 5DF8047B 	 ldr r7,[sp],#4
  56              	.LCFI5:
  57              	 .cfi_restore 7
  58              	 .cfi_def_cfa_offset 0
  59 0018 7047     	 bx lr
  60              	 .cfi_endproc
  61              	.LFE133:
  63 001a 00BF     	 .section .text.XMC_DMA_GetChannelsTransferCompleteStatus,"ax",%progbits
  64              	 .align 2
  65              	 .thumb
  66              	 .thumb_func
  68              	XMC_DMA_GetChannelsTransferCompleteStatus:
  69              	.LFB134:
 544:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 545:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 546:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 547:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 548:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 549:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 550:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 551:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 552:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 553:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 554:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 555:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 556:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
  70              	 .loc 1 556 0
  71              	 .cfi_startproc
  72              	 
  73              	 
  74              	 
  75 0000 80B4     	 push {r7}
  76              	.LCFI6:
  77              	 .cfi_def_cfa_offset 4
  78              	 .cfi_offset 7,-4
  79 0002 83B0     	 sub sp,sp,#12
  80              	.LCFI7:
  81              	 .cfi_def_cfa_offset 16
  82 0004 00AF     	 add r7,sp,#0
  83              	.LCFI8:
  84              	 .cfi_def_cfa_register 7
  85 0006 7860     	 str r0,[r7,#4]
 557:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
  86              	 .loc 1 557 0
  87 0008 7B68     	 ldr r3,[r7,#4]
  88 000a D3F8E832 	 ldr r3,[r3,#744]
 558:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** }
  89              	 .loc 1 558 0
  90 000e 1846     	 mov r0,r3
  91 0010 0C37     	 adds r7,r7,#12
  92              	.LCFI9:
  93              	 .cfi_def_cfa_offset 4
  94 0012 BD46     	 mov sp,r7
  95              	.LCFI10:
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 0014 5DF8047B 	 ldr r7,[sp],#4
  99              	.LCFI11:
 100              	 .cfi_restore 7
 101              	 .cfi_def_cfa_offset 0
 102 0018 7047     	 bx lr
 103              	 .cfi_endproc
 104              	.LFE134:
 106 001a 00BF     	 .section .text.XMC_DMA_GetChannelsBlockCompleteStatus,"ax",%progbits
 107              	 .align 2
 108              	 .thumb
 109              	 .thumb_func
 111              	XMC_DMA_GetChannelsBlockCompleteStatus:
 112              	.LFB135:
 559:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 560:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 561:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 562:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 563:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 564:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 565:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 566:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 567:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 568:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 569:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 570:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 571:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 113              	 .loc 1 571 0
 114              	 .cfi_startproc
 115              	 
 116              	 
 117              	 
 118 0000 80B4     	 push {r7}
 119              	.LCFI12:
 120              	 .cfi_def_cfa_offset 4
 121              	 .cfi_offset 7,-4
 122 0002 83B0     	 sub sp,sp,#12
 123              	.LCFI13:
 124              	 .cfi_def_cfa_offset 16
 125 0004 00AF     	 add r7,sp,#0
 126              	.LCFI14:
 127              	 .cfi_def_cfa_register 7
 128 0006 7860     	 str r0,[r7,#4]
 572:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 129              	 .loc 1 572 0
 130 0008 7B68     	 ldr r3,[r7,#4]
 131 000a D3F8F032 	 ldr r3,[r3,#752]
 573:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** }
 132              	 .loc 1 573 0
 133 000e 1846     	 mov r0,r3
 134 0010 0C37     	 adds r7,r7,#12
 135              	.LCFI15:
 136              	 .cfi_def_cfa_offset 4
 137 0012 BD46     	 mov sp,r7
 138              	.LCFI16:
 139              	 .cfi_def_cfa_register 13
 140              	 
 141 0014 5DF8047B 	 ldr r7,[sp],#4
 142              	.LCFI17:
 143              	 .cfi_restore 7
 144              	 .cfi_def_cfa_offset 0
 145 0018 7047     	 bx lr
 146              	 .cfi_endproc
 147              	.LFE135:
 149 001a 00BF     	 .section .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus,"ax",%progbits
 150              	 .align 2
 151              	 .thumb
 152              	 .thumb_func
 154              	XMC_DMA_GetChannelsSourceTransactionCompleteStatus:
 155              	.LFB136:
 574:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 575:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 576:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 577:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 578:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 579:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 580:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 581:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 582:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 583:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 584:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 585:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 586:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 587:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * ignored.
 588:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 589:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 590:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 156              	 .loc 1 590 0
 157              	 .cfi_startproc
 158              	 
 159              	 
 160              	 
 161 0000 80B4     	 push {r7}
 162              	.LCFI18:
 163              	 .cfi_def_cfa_offset 4
 164              	 .cfi_offset 7,-4
 165 0002 83B0     	 sub sp,sp,#12
 166              	.LCFI19:
 167              	 .cfi_def_cfa_offset 16
 168 0004 00AF     	 add r7,sp,#0
 169              	.LCFI20:
 170              	 .cfi_def_cfa_register 7
 171 0006 7860     	 str r0,[r7,#4]
 591:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 172              	 .loc 1 591 0
 173 0008 7B68     	 ldr r3,[r7,#4]
 174 000a D3F8F832 	 ldr r3,[r3,#760]
 592:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** }
 175              	 .loc 1 592 0
 176 000e 1846     	 mov r0,r3
 177 0010 0C37     	 adds r7,r7,#12
 178              	.LCFI21:
 179              	 .cfi_def_cfa_offset 4
 180 0012 BD46     	 mov sp,r7
 181              	.LCFI22:
 182              	 .cfi_def_cfa_register 13
 183              	 
 184 0014 5DF8047B 	 ldr r7,[sp],#4
 185              	.LCFI23:
 186              	 .cfi_restore 7
 187              	 .cfi_def_cfa_offset 0
 188 0018 7047     	 bx lr
 189              	 .cfi_endproc
 190              	.LFE136:
 192 001a 00BF     	 .section .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus,"ax",%progbits
 193              	 .align 2
 194              	 .thumb
 195              	 .thumb_func
 197              	XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:
 198              	.LFB137:
 593:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 594:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 595:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 596:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 597:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 598:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 599:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 600:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 601:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 602:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 603:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 604:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 605:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 606:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 607:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 608:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 609:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 199              	 .loc 1 609 0
 200              	 .cfi_startproc
 201              	 
 202              	 
 203              	 
 204 0000 80B4     	 push {r7}
 205              	.LCFI24:
 206              	 .cfi_def_cfa_offset 4
 207              	 .cfi_offset 7,-4
 208 0002 83B0     	 sub sp,sp,#12
 209              	.LCFI25:
 210              	 .cfi_def_cfa_offset 16
 211 0004 00AF     	 add r7,sp,#0
 212              	.LCFI26:
 213              	 .cfi_def_cfa_register 7
 214 0006 7860     	 str r0,[r7,#4]
 610:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 215              	 .loc 1 610 0
 216 0008 7B68     	 ldr r3,[r7,#4]
 217 000a D3F80033 	 ldr r3,[r3,#768]
 611:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** }
 218              	 .loc 1 611 0
 219 000e 1846     	 mov r0,r3
 220 0010 0C37     	 adds r7,r7,#12
 221              	.LCFI27:
 222              	 .cfi_def_cfa_offset 4
 223 0012 BD46     	 mov sp,r7
 224              	.LCFI28:
 225              	 .cfi_def_cfa_register 13
 226              	 
 227 0014 5DF8047B 	 ldr r7,[sp],#4
 228              	.LCFI29:
 229              	 .cfi_restore 7
 230              	 .cfi_def_cfa_offset 0
 231 0018 7047     	 bx lr
 232              	 .cfi_endproc
 233              	.LFE137:
 235 001a 00BF     	 .section .text.XMC_DMA_GetChannelsErrorStatus,"ax",%progbits
 236              	 .align 2
 237              	 .thumb
 238              	 .thumb_func
 240              	XMC_DMA_GetChannelsErrorStatus:
 241              	.LFB138:
 612:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** 
 613:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** /**
 614:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 615:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 616:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 617:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 618:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 619:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  *
 620:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 621:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 622:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****  */
 623:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 624:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** {
 242              	 .loc 1 624 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	 
 247 0000 80B4     	 push {r7}
 248              	.LCFI30:
 249              	 .cfi_def_cfa_offset 4
 250              	 .cfi_offset 7,-4
 251 0002 83B0     	 sub sp,sp,#12
 252              	.LCFI31:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI32:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 625:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 258              	 .loc 1 625 0
 259 0008 7B68     	 ldr r3,[r7,#4]
 260 000a D3F80833 	 ldr r3,[r3,#776]
 626:C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc\xmc_dma.h **** }
 261              	 .loc 1 626 0
 262 000e 1846     	 mov r0,r3
 263 0010 0C37     	 adds r7,r7,#12
 264              	.LCFI33:
 265              	 .cfi_def_cfa_offset 4
 266 0012 BD46     	 mov sp,r7
 267              	.LCFI34:
 268              	 .cfi_def_cfa_register 13
 269              	 
 270 0014 5DF8047B 	 ldr r7,[sp],#4
 271              	.LCFI35:
 272              	 .cfi_restore 7
 273              	 .cfi_def_cfa_offset 0
 274 0018 7047     	 bx lr
 275              	 .cfi_endproc
 276              	.LFE138:
 278 001a 00BF     	 .section .bss.dma0_event_handlers,"aw",%nobits
 279              	 .align 2
 282              	dma0_event_handlers:
 283 0000 00000000 	 .space 32
 283      00000000 
 283      00000000 
 283      00000000 
 283      00000000 
 284              	 .section .bss.dma1_event_handlers,"aw",%nobits
 285              	 .align 2
 288              	dma1_event_handlers:
 289 0000 00000000 	 .space 16
 289      00000000 
 289      00000000 
 289      00000000 
 290              	 .section .text.XMC_DMA_Init,"ax",%progbits
 291              	 .align 2
 292              	 .global XMC_DMA_Init
 293              	 .thumb
 294              	 .thumb_func
 296              	XMC_DMA_Init:
 297              	.LFB185:
 298              	 .file 2 "../Libraries/XMCLib/src/xmc_dma.c"
   1:../Libraries/XMCLib/src/xmc_dma.c **** 
   2:../Libraries/XMCLib/src/xmc_dma.c **** /**
   3:../Libraries/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../Libraries/XMCLib/src/xmc_dma.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_dma.c ****  *
   6:../Libraries/XMCLib/src/xmc_dma.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_dma.c ****  *****************************************************************************
   8:../Libraries/XMCLib/src/xmc_dma.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   9:../Libraries/XMCLib/src/xmc_dma.c ****  *
  10:../Libraries/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_dma.c ****  * All rights reserved.
  12:../Libraries/XMCLib/src/xmc_dma.c ****  *
  13:../Libraries/XMCLib/src/xmc_dma.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  14:../Libraries/XMCLib/src/xmc_dma.c ****  *
  15:../Libraries/XMCLib/src/xmc_dma.c ****  * Permission is hereby granted, free of charge, to any person or organization
  16:../Libraries/XMCLib/src/xmc_dma.c ****  * obtaining a copy of the software and accompanying documentation covered by
  17:../Libraries/XMCLib/src/xmc_dma.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  18:../Libraries/XMCLib/src/xmc_dma.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  19:../Libraries/XMCLib/src/xmc_dma.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  20:../Libraries/XMCLib/src/xmc_dma.c ****  * do so, all subject to the following:
  21:../Libraries/XMCLib/src/xmc_dma.c ****  *
  22:../Libraries/XMCLib/src/xmc_dma.c ****  * The copyright notices in the Software and this entire statement, including
  23:../Libraries/XMCLib/src/xmc_dma.c ****  * the above license grant, this restriction and the following disclaimer,
  24:../Libraries/XMCLib/src/xmc_dma.c ****  * must be included in all copies of the Software, in whole or in part, and
  25:../Libraries/XMCLib/src/xmc_dma.c ****  * all derivative works of the Software, unless such copies or derivative
  26:../Libraries/XMCLib/src/xmc_dma.c ****  * works are solely in the form of machine-executable object code generated by
  27:../Libraries/XMCLib/src/xmc_dma.c ****  * a source language processor.
  28:../Libraries/XMCLib/src/xmc_dma.c ****  *
  29:../Libraries/XMCLib/src/xmc_dma.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30:../Libraries/XMCLib/src/xmc_dma.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31:../Libraries/XMCLib/src/xmc_dma.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  32:../Libraries/XMCLib/src/xmc_dma.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  33:../Libraries/XMCLib/src/xmc_dma.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  34:../Libraries/XMCLib/src/xmc_dma.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  35:../Libraries/XMCLib/src/xmc_dma.c ****  * DEALINGS IN THE SOFTWARE.
  36:../Libraries/XMCLib/src/xmc_dma.c ****  *
  37:../Libraries/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share
  38:../Libraries/XMCLib/src/xmc_dma.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  39:../Libraries/XMCLib/src/xmc_dma.c ****  * at XMCSupport@infineon.com.
  40:../Libraries/XMCLib/src/xmc_dma.c ****  *****************************************************************************
  41:../Libraries/XMCLib/src/xmc_dma.c ****  *
  42:../Libraries/XMCLib/src/xmc_dma.c ****  * Change History
  43:../Libraries/XMCLib/src/xmc_dma.c ****  * --------------
  44:../Libraries/XMCLib/src/xmc_dma.c ****  *
  45:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  46:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  47:../Libraries/XMCLib/src/xmc_dma.c ****  *
  48:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  49:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  50:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  51:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  52:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  53:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  54:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  55:../Libraries/XMCLib/src/xmc_dma.c ****  *
  56:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  57:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  58:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  59:../Libraries/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  60:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  61:../Libraries/XMCLib/src/xmc_dma.c ****  *
  62:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-03-09:
  63:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Optimize write only registers
  64:../Libraries/XMCLib/src/xmc_dma.c ****  *
  65:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-04-08:
  66:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Update XMC_DMA_CH_EnableEvent and XMC_DMA_CH_DisableEvent.
  67:../Libraries/XMCLib/src/xmc_dma.c ****  *       Write optimization of MASKCHEV
  68:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_IRQHandler, clear channel event status before processing the event handler.
  69:../Libraries/XMCLib/src/xmc_dma.c ****  *       It corrects event losses if the DMA triggered in the event handler finished before returni
  70:../Libraries/XMCLib/src/xmc_dma.c ****  *
  71:../Libraries/XMCLib/src/xmc_dma.c ****  * 2018-02-08:
  72:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_CH_RequestLastMultiblockTransfer() clearing CTLL_LLP_SRC_EN and CTLL_LLP_DST_E
  73:../Libraries/XMCLib/src/xmc_dma.c ****  *
  74:../Libraries/XMCLib/src/xmc_dma.c ****  * 2019-05-07:
  75:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fixed compilation warnings
  76:../Libraries/XMCLib/src/xmc_dma.c ****  *
  77:../Libraries/XMCLib/src/xmc_dma.c ****  * @endcond
  78:../Libraries/XMCLib/src/xmc_dma.c ****  */
  79:../Libraries/XMCLib/src/xmc_dma.c **** 
  80:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  81:../Libraries/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  82:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  83:../Libraries/XMCLib/src/xmc_dma.c **** 
  84:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  85:../Libraries/XMCLib/src/xmc_dma.c **** 
  86:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  87:../Libraries/XMCLib/src/xmc_dma.c **** 
  88:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  89:../Libraries/XMCLib/src/xmc_dma.c **** 
  90:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  91:../Libraries/XMCLib/src/xmc_dma.c ****  * MACROS
  92:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  93:../Libraries/XMCLib/src/xmc_dma.c **** 
  94:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  95:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  96:../Libraries/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  97:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  98:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  99:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
 100:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
 101:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
 102:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
 103:../Libraries/XMCLib/src/xmc_dma.c **** 
 104:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 105:../Libraries/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
 106:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 107:../Libraries/XMCLib/src/xmc_dma.c **** 
 108:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
 109:../Libraries/XMCLib/src/xmc_dma.c **** static XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
 110:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 111:../Libraries/XMCLib/src/xmc_dma.c **** 
 112:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
 113:../Libraries/XMCLib/src/xmc_dma.c **** static XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
 114:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 115:../Libraries/XMCLib/src/xmc_dma.c **** 
 116:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 117:../Libraries/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
 118:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 119:../Libraries/XMCLib/src/xmc_dma.c **** 
 120:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 121:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 122:../Libraries/XMCLib/src/xmc_dma.c **** {
 299              	 .loc 2 122 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303 0000 80B5     	 push {r7,lr}
 304              	.LCFI36:
 305              	 .cfi_def_cfa_offset 8
 306              	 .cfi_offset 7,-8
 307              	 .cfi_offset 14,-4
 308 0002 82B0     	 sub sp,sp,#8
 309              	.LCFI37:
 310              	 .cfi_def_cfa_offset 16
 311 0004 00AF     	 add r7,sp,#0
 312              	.LCFI38:
 313              	 .cfi_def_cfa_register 7
 314 0006 7860     	 str r0,[r7,#4]
 123:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 315              	 .loc 2 123 0
 316 0008 7868     	 ldr r0,[r7,#4]
 317 000a FFF7FEFF 	 bl XMC_DMA_Enable
 124:../Libraries/XMCLib/src/xmc_dma.c **** }
 318              	 .loc 2 124 0
 319 000e 0837     	 adds r7,r7,#8
 320              	.LCFI39:
 321              	 .cfi_def_cfa_offset 8
 322 0010 BD46     	 mov sp,r7
 323              	.LCFI40:
 324              	 .cfi_def_cfa_register 13
 325              	 
 326 0012 80BD     	 pop {r7,pc}
 327              	 .cfi_endproc
 328              	.LFE185:
 330              	 .section .text.XMC_DMA_Enable,"ax",%progbits
 331              	 .align 2
 332              	 .global XMC_DMA_Enable
 333              	 .thumb
 334              	 .thumb_func
 336              	XMC_DMA_Enable:
 337              	.LFB186:
 125:../Libraries/XMCLib/src/xmc_dma.c **** 
 126:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 127:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 128:../Libraries/XMCLib/src/xmc_dma.c **** {
 338              	 .loc 2 128 0
 339              	 .cfi_startproc
 340              	 
 341              	 
 342 0000 80B5     	 push {r7,lr}
 343              	.LCFI41:
 344              	 .cfi_def_cfa_offset 8
 345              	 .cfi_offset 7,-8
 346              	 .cfi_offset 14,-4
 347 0002 82B0     	 sub sp,sp,#8
 348              	.LCFI42:
 349              	 .cfi_def_cfa_offset 16
 350 0004 00AF     	 add r7,sp,#0
 351              	.LCFI43:
 352              	 .cfi_def_cfa_register 7
 353 0006 7860     	 str r0,[r7,#4]
 129:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 130:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 354              	 .loc 2 130 0
 355 0008 7B68     	 ldr r3,[r7,#4]
 356 000a 084A     	 ldr r2,.L17
 357 000c 9342     	 cmp r3,r2
 358 000e 03D1     	 bne .L15
 131:../Libraries/XMCLib/src/xmc_dma.c ****   {
 132:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 133:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 134:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 135:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 136:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 359              	 .loc 2 136 0
 360 0010 0748     	 ldr r0,.L17+4
 361 0012 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 362 0016 02E0     	 b .L16
 363              	.L15:
 137:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 138:../Libraries/XMCLib/src/xmc_dma.c ****   }
 139:../Libraries/XMCLib/src/xmc_dma.c ****   else
 140:../Libraries/XMCLib/src/xmc_dma.c ****   {
 141:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 142:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 143:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 144:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 364              	 .loc 2 144 0
 365 0018 0648     	 ldr r0,.L17+8
 366 001a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 367              	.L16:
 145:../Libraries/XMCLib/src/xmc_dma.c ****   }
 146:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 147:../Libraries/XMCLib/src/xmc_dma.c **** 
 148:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
 368              	 .loc 2 148 0
 369 001e 7B68     	 ldr r3,[r7,#4]
 370 0020 0122     	 movs r2,#1
 371 0022 C3F89823 	 str r2,[r3,#920]
 149:../Libraries/XMCLib/src/xmc_dma.c **** }
 372              	 .loc 2 149 0
 373 0026 0837     	 adds r7,r7,#8
 374              	.LCFI44:
 375              	 .cfi_def_cfa_offset 8
 376 0028 BD46     	 mov sp,r7
 377              	.LCFI45:
 378              	 .cfi_def_cfa_register 13
 379              	 
 380 002a 80BD     	 pop {r7,pc}
 381              	.L18:
 382              	 .align 2
 383              	.L17:
 384 002c 00400150 	 .word 1342259200
 385 0030 10000020 	 .word 536870928
 386 0034 20000020 	 .word 536870944
 387              	 .cfi_endproc
 388              	.LFE186:
 390              	 .section .text.XMC_DMA_Disable,"ax",%progbits
 391              	 .align 2
 392              	 .global XMC_DMA_Disable
 393              	 .thumb
 394              	 .thumb_func
 396              	XMC_DMA_Disable:
 397              	.LFB187:
 150:../Libraries/XMCLib/src/xmc_dma.c **** 
 151:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 152:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 153:../Libraries/XMCLib/src/xmc_dma.c **** {
 398              	 .loc 2 153 0
 399              	 .cfi_startproc
 400              	 
 401              	 
 402 0000 80B5     	 push {r7,lr}
 403              	.LCFI46:
 404              	 .cfi_def_cfa_offset 8
 405              	 .cfi_offset 7,-8
 406              	 .cfi_offset 14,-4
 407 0002 82B0     	 sub sp,sp,#8
 408              	.LCFI47:
 409              	 .cfi_def_cfa_offset 16
 410 0004 00AF     	 add r7,sp,#0
 411              	.LCFI48:
 412              	 .cfi_def_cfa_register 7
 413 0006 7860     	 str r0,[r7,#4]
 154:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 414              	 .loc 2 154 0
 415 0008 7B68     	 ldr r3,[r7,#4]
 416 000a 0022     	 movs r2,#0
 417 000c C3F89823 	 str r2,[r3,#920]
 155:../Libraries/XMCLib/src/xmc_dma.c **** 
 156:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 157:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 418              	 .loc 2 157 0
 419 0010 7B68     	 ldr r3,[r7,#4]
 420 0012 064A     	 ldr r2,.L22
 421 0014 9342     	 cmp r3,r2
 422 0016 03D1     	 bne .L20
 158:../Libraries/XMCLib/src/xmc_dma.c ****   {
 159:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 160:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 423              	 .loc 2 160 0
 424 0018 0548     	 ldr r0,.L22+4
 425 001a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 426 001e 02E0     	 b .L19
 427              	.L20:
 161:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 162:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 163:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 164:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 165:../Libraries/XMCLib/src/xmc_dma.c ****   }
 166:../Libraries/XMCLib/src/xmc_dma.c ****   else
 167:../Libraries/XMCLib/src/xmc_dma.c ****   {
 168:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 428              	 .loc 2 168 0
 429 0020 0448     	 ldr r0,.L22+8
 430 0022 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 431              	.L19:
 169:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 170:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 171:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 172:../Libraries/XMCLib/src/xmc_dma.c ****   }
 173:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 174:../Libraries/XMCLib/src/xmc_dma.c **** }
 432              	 .loc 2 174 0
 433 0026 0837     	 adds r7,r7,#8
 434              	.LCFI49:
 435              	 .cfi_def_cfa_offset 8
 436 0028 BD46     	 mov sp,r7
 437              	.LCFI50:
 438              	 .cfi_def_cfa_register 13
 439              	 
 440 002a 80BD     	 pop {r7,pc}
 441              	.L23:
 442              	 .align 2
 443              	.L22:
 444 002c 00400150 	 .word 1342259200
 445 0030 10000020 	 .word 536870928
 446 0034 20000020 	 .word 536870944
 447              	 .cfi_endproc
 448              	.LFE187:
 450              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 451              	 .align 2
 452              	 .global XMC_DMA_IsEnabled
 453              	 .thumb
 454              	 .thumb_func
 456              	XMC_DMA_IsEnabled:
 457              	.LFB188:
 175:../Libraries/XMCLib/src/xmc_dma.c **** 
 176:../Libraries/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 177:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 178:../Libraries/XMCLib/src/xmc_dma.c **** {
 458              	 .loc 2 178 0
 459              	 .cfi_startproc
 460              	 
 461              	 
 462 0000 80B5     	 push {r7,lr}
 463              	.LCFI51:
 464              	 .cfi_def_cfa_offset 8
 465              	 .cfi_offset 7,-8
 466              	 .cfi_offset 14,-4
 467 0002 84B0     	 sub sp,sp,#16
 468              	.LCFI52:
 469              	 .cfi_def_cfa_offset 24
 470 0004 00AF     	 add r7,sp,#0
 471              	.LCFI53:
 472              	 .cfi_def_cfa_register 7
 473 0006 7860     	 str r0,[r7,#4]
 179:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 180:../Libraries/XMCLib/src/xmc_dma.c **** 
 181:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 182:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 474              	 .loc 2 182 0
 475 0008 7B68     	 ldr r3,[r7,#4]
 476 000a 1F4A     	 ldr r2,.L31
 477 000c 9342     	 cmp r3,r2
 478 000e 11D1     	 bne .L25
 183:../Libraries/XMCLib/src/xmc_dma.c ****   {
 184:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 185:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 479              	 .loc 2 185 0
 480 0010 1E48     	 ldr r0,.L31+4
 481 0012 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 482 0016 0346     	 mov r3,r0
 483 0018 002B     	 cmp r3,#0
 484 001a 14BF     	 ite ne
 485 001c 0123     	 movne r3,#1
 486 001e 0023     	 moveq r3,#0
 487 0020 DBB2     	 uxtb r3,r3
 488 0022 83F00103 	 eor r3,r3,#1
 489 0026 DBB2     	 uxtb r3,r3
 490 0028 FB73     	 strb r3,[r7,#15]
 491 002a FB7B     	 ldrb r3,[r7,#15]
 492 002c 03F00103 	 and r3,r3,#1
 493 0030 FB73     	 strb r3,[r7,#15]
 494 0032 10E0     	 b .L26
 495              	.L25:
 186:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 187:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 188:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 189:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 190:../Libraries/XMCLib/src/xmc_dma.c ****   }
 191:../Libraries/XMCLib/src/xmc_dma.c ****   else
 192:../Libraries/XMCLib/src/xmc_dma.c ****   {
 193:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 496              	 .loc 2 193 0
 497 0034 1648     	 ldr r0,.L31+8
 498 0036 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 499 003a 0346     	 mov r3,r0
 500 003c 002B     	 cmp r3,#0
 501 003e 14BF     	 ite ne
 502 0040 0123     	 movne r3,#1
 503 0042 0023     	 moveq r3,#0
 504 0044 DBB2     	 uxtb r3,r3
 505 0046 83F00103 	 eor r3,r3,#1
 506 004a DBB2     	 uxtb r3,r3
 507 004c FB73     	 strb r3,[r7,#15]
 508 004e FB7B     	 ldrb r3,[r7,#15]
 509 0050 03F00103 	 and r3,r3,#1
 510 0054 FB73     	 strb r3,[r7,#15]
 511              	.L26:
 194:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 195:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 196:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 197:../Libraries/XMCLib/src/xmc_dma.c ****   }
 198:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 199:../Libraries/XMCLib/src/xmc_dma.c **** 
 200:../Libraries/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 201:../Libraries/XMCLib/src/xmc_dma.c ****   if (status == true)
 512              	 .loc 2 201 0
 513 0056 FB7B     	 ldrb r3,[r7,#15]
 514 0058 002B     	 cmp r3,#0
 515 005a 0FD0     	 beq .L27
 202:../Libraries/XMCLib/src/xmc_dma.c ****   {
 203:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 516              	 .loc 2 203 0
 517 005c FB7B     	 ldrb r3,[r7,#15]
 518 005e 002B     	 cmp r3,#0
 519 0060 06D0     	 beq .L28
 520              	 .loc 2 203 0 is_stmt 0 discriminator 1
 521 0062 7B68     	 ldr r3,[r7,#4]
 522 0064 D3F89833 	 ldr r3,[r3,#920]
 523 0068 002B     	 cmp r3,#0
 524 006a 01D0     	 beq .L28
 525              	 .loc 2 203 0 discriminator 3
 526 006c 0123     	 movs r3,#1
 527 006e 00E0     	 b .L29
 528              	.L28:
 529              	 .loc 2 203 0 discriminator 4
 530 0070 0023     	 movs r3,#0
 531              	.L29:
 532              	 .loc 2 203 0 discriminator 6
 533 0072 FB73     	 strb r3,[r7,#15]
 534 0074 FB7B     	 ldrb r3,[r7,#15]
 535 0076 03F00103 	 and r3,r3,#1
 536 007a FB73     	 strb r3,[r7,#15]
 537              	.L27:
 204:../Libraries/XMCLib/src/xmc_dma.c ****   }
 205:../Libraries/XMCLib/src/xmc_dma.c **** 
 206:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 538              	 .loc 2 206 0 is_stmt 1
 539 007c FB7B     	 ldrb r3,[r7,#15]
 207:../Libraries/XMCLib/src/xmc_dma.c **** }
 540              	 .loc 2 207 0
 541 007e 1846     	 mov r0,r3
 542 0080 1037     	 adds r7,r7,#16
 543              	.LCFI54:
 544              	 .cfi_def_cfa_offset 8
 545 0082 BD46     	 mov sp,r7
 546              	.LCFI55:
 547              	 .cfi_def_cfa_register 13
 548              	 
 549 0084 80BD     	 pop {r7,pc}
 550              	.L32:
 551 0086 00BF     	 .align 2
 552              	.L31:
 553 0088 00400150 	 .word 1342259200
 554 008c 10000020 	 .word 536870928
 555 0090 20000020 	 .word 536870944
 556              	 .cfi_endproc
 557              	.LFE188:
 559              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 560              	 .align 2
 561              	 .global XMC_DMA_EnableRequestLine
 562              	 .thumb
 563              	 .thumb_func
 565              	XMC_DMA_EnableRequestLine:
 566              	.LFB189:
 208:../Libraries/XMCLib/src/xmc_dma.c **** 
 209:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable request line */
 210:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 211:../Libraries/XMCLib/src/xmc_dma.c **** {
 567              	 .loc 2 211 0
 568              	 .cfi_startproc
 569              	 
 570              	 
 571              	 
 572 0000 80B4     	 push {r7}
 573              	.LCFI56:
 574              	 .cfi_def_cfa_offset 4
 575              	 .cfi_offset 7,-4
 576 0002 83B0     	 sub sp,sp,#12
 577              	.LCFI57:
 578              	 .cfi_def_cfa_offset 16
 579 0004 00AF     	 add r7,sp,#0
 580              	.LCFI58:
 581              	 .cfi_def_cfa_register 7
 582 0006 7860     	 str r0,[r7,#4]
 583 0008 0B46     	 mov r3,r1
 584 000a FB70     	 strb r3,[r7,#3]
 585 000c 1346     	 mov r3,r2
 586 000e BB70     	 strb r3,[r7,#2]
 212:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 213:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 587              	 .loc 2 213 0
 588 0010 7B68     	 ldr r3,[r7,#4]
 589 0012 1F4A     	 ldr r2,.L36
 590 0014 9342     	 cmp r3,r2
 591 0016 1BD1     	 bne .L34
 214:../Libraries/XMCLib/src/xmc_dma.c ****   {
 215:../Libraries/XMCLib/src/xmc_dma.c **** #else
 216:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 217:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 218:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 592              	 .loc 2 218 0
 593 0018 1E48     	 ldr r0,.L36+4
 594 001a 1E4B     	 ldr r3,.L36+4
 595 001c 9A68     	 ldr r2,[r3,#8]
 596 001e FB78     	 ldrb r3,[r7,#3]
 597 0020 9B00     	 lsls r3,r3,#2
 598 0022 1946     	 mov r1,r3
 599 0024 0F23     	 movs r3,#15
 600 0026 8B40     	 lsls r3,r3,r1
 601 0028 DB43     	 mvns r3,r3
 602 002a 1A40     	 ands r2,r2,r3
 219:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 603              	 .loc 2 219 0
 604 002c BB78     	 ldrb r3,[r7,#2]
 605 002e F978     	 ldrb r1,[r7,#3]
 606 0030 8900     	 lsls r1,r1,#2
 607 0032 8B40     	 lsls r3,r3,r1
 218:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 608              	 .loc 2 218 0
 609 0034 1343     	 orrs r3,r3,r2
 610 0036 8360     	 str r3,[r0,#8]
 220:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 611              	 .loc 2 220 0
 612 0038 1649     	 ldr r1,.L36+4
 613 003a 164B     	 ldr r3,.L36+4
 614 003c 1A69     	 ldr r2,[r3,#16]
 615 003e FB78     	 ldrb r3,[r7,#3]
 616 0040 03F00703 	 and r3,r3,#7
 617 0044 0120     	 movs r0,#1
 618 0046 00FA03F3 	 lsl r3,r0,r3
 619 004a 1343     	 orrs r3,r3,r2
 620 004c 0B61     	 str r3,[r1,#16]
 621 004e 19E0     	 b .L33
 622              	.L34:
 221:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 222:../Libraries/XMCLib/src/xmc_dma.c ****   }
 223:../Libraries/XMCLib/src/xmc_dma.c ****   else
 224:../Libraries/XMCLib/src/xmc_dma.c ****   {
 225:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 623              	 .loc 2 225 0
 624 0050 1048     	 ldr r0,.L36+4
 625 0052 104B     	 ldr r3,.L36+4
 626 0054 DA68     	 ldr r2,[r3,#12]
 627 0056 FB78     	 ldrb r3,[r7,#3]
 628 0058 9B00     	 lsls r3,r3,#2
 629 005a 1946     	 mov r1,r3
 630 005c 0F23     	 movs r3,#15
 631 005e 8B40     	 lsls r3,r3,r1
 632 0060 DB43     	 mvns r3,r3
 633 0062 1A40     	 ands r2,r2,r3
 226:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 634              	 .loc 2 226 0
 635 0064 BB78     	 ldrb r3,[r7,#2]
 636 0066 F978     	 ldrb r1,[r7,#3]
 637 0068 8900     	 lsls r1,r1,#2
 638 006a 8B40     	 lsls r3,r3,r1
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 639              	 .loc 2 225 0
 640 006c 1343     	 orrs r3,r3,r2
 641 006e C360     	 str r3,[r0,#12]
 227:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 642              	 .loc 2 227 0
 643 0070 0849     	 ldr r1,.L36+4
 644 0072 084B     	 ldr r3,.L36+4
 645 0074 1A69     	 ldr r2,[r3,#16]
 646 0076 FB78     	 ldrb r3,[r7,#3]
 647 0078 4FF48070 	 mov r0,#256
 648 007c 00FA03F3 	 lsl r3,r0,r3
 649 0080 1343     	 orrs r3,r3,r2
 650 0082 0B61     	 str r3,[r1,#16]
 651              	.L33:
 228:../Libraries/XMCLib/src/xmc_dma.c ****   }
 229:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 230:../Libraries/XMCLib/src/xmc_dma.c **** }
 652              	 .loc 2 230 0
 653 0084 0C37     	 adds r7,r7,#12
 654              	.LCFI59:
 655              	 .cfi_def_cfa_offset 4
 656 0086 BD46     	 mov sp,r7
 657              	.LCFI60:
 658              	 .cfi_def_cfa_register 13
 659              	 
 660 0088 5DF8047B 	 ldr r7,[sp],#4
 661              	.LCFI61:
 662              	 .cfi_restore 7
 663              	 .cfi_def_cfa_offset 0
 664 008c 7047     	 bx lr
 665              	.L37:
 666 008e 00BF     	 .align 2
 667              	.L36:
 668 0090 00400150 	 .word 1342259200
 669 0094 00490050 	 .word 1342195968
 670              	 .cfi_endproc
 671              	.LFE189:
 673              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 674              	 .align 2
 675              	 .global XMC_DMA_DisableRequestLine
 676              	 .thumb
 677              	 .thumb_func
 679              	XMC_DMA_DisableRequestLine:
 680              	.LFB190:
 231:../Libraries/XMCLib/src/xmc_dma.c **** 
 232:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 233:../Libraries/XMCLib/src/xmc_dma.c **** {
 681              	 .loc 2 233 0
 682              	 .cfi_startproc
 683              	 
 684              	 
 685              	 
 686 0000 80B4     	 push {r7}
 687              	.LCFI62:
 688              	 .cfi_def_cfa_offset 4
 689              	 .cfi_offset 7,-4
 690 0002 83B0     	 sub sp,sp,#12
 691              	.LCFI63:
 692              	 .cfi_def_cfa_offset 16
 693 0004 00AF     	 add r7,sp,#0
 694              	.LCFI64:
 695              	 .cfi_def_cfa_register 7
 696 0006 7860     	 str r0,[r7,#4]
 697 0008 0B46     	 mov r3,r1
 698 000a FB70     	 strb r3,[r7,#3]
 234:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 235:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 699              	 .loc 2 235 0
 700 000c 7B68     	 ldr r3,[r7,#4]
 701 000e 0F4A     	 ldr r2,.L41
 702 0010 9342     	 cmp r3,r2
 703 0012 0AD1     	 bne .L39
 236:../Libraries/XMCLib/src/xmc_dma.c ****   {
 237:../Libraries/XMCLib/src/xmc_dma.c **** #else
 238:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 239:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 240:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 704              	 .loc 2 240 0
 705 0014 0E49     	 ldr r1,.L41+4
 706 0016 0E4B     	 ldr r3,.L41+4
 707 0018 1A69     	 ldr r2,[r3,#16]
 708 001a FB78     	 ldrb r3,[r7,#3]
 709 001c 0120     	 movs r0,#1
 710 001e 00FA03F3 	 lsl r3,r0,r3
 711 0022 DB43     	 mvns r3,r3
 712 0024 1340     	 ands r3,r3,r2
 713 0026 0B61     	 str r3,[r1,#16]
 714 0028 0AE0     	 b .L38
 715              	.L39:
 241:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 242:../Libraries/XMCLib/src/xmc_dma.c ****   }
 243:../Libraries/XMCLib/src/xmc_dma.c ****   else
 244:../Libraries/XMCLib/src/xmc_dma.c ****   {
 245:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 716              	 .loc 2 245 0
 717 002a 0949     	 ldr r1,.L41+4
 718 002c 084B     	 ldr r3,.L41+4
 719 002e 1A69     	 ldr r2,[r3,#16]
 720 0030 FB78     	 ldrb r3,[r7,#3]
 721 0032 4FF48070 	 mov r0,#256
 722 0036 00FA03F3 	 lsl r3,r0,r3
 723 003a DB43     	 mvns r3,r3
 724 003c 1340     	 ands r3,r3,r2
 725 003e 0B61     	 str r3,[r1,#16]
 726              	.L38:
 246:../Libraries/XMCLib/src/xmc_dma.c ****   }
 247:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 248:../Libraries/XMCLib/src/xmc_dma.c **** }
 727              	 .loc 2 248 0
 728 0040 0C37     	 adds r7,r7,#12
 729              	.LCFI65:
 730              	 .cfi_def_cfa_offset 4
 731 0042 BD46     	 mov sp,r7
 732              	.LCFI66:
 733              	 .cfi_def_cfa_register 13
 734              	 
 735 0044 5DF8047B 	 ldr r7,[sp],#4
 736              	.LCFI67:
 737              	 .cfi_restore 7
 738              	 .cfi_def_cfa_offset 0
 739 0048 7047     	 bx lr
 740              	.L42:
 741 004a 00BF     	 .align 2
 742              	.L41:
 743 004c 00400150 	 .word 1342259200
 744 0050 00490050 	 .word 1342195968
 745              	 .cfi_endproc
 746              	.LFE190:
 748              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 749              	 .align 2
 750              	 .global XMC_DMA_ClearRequestLine
 751              	 .thumb
 752              	 .thumb_func
 754              	XMC_DMA_ClearRequestLine:
 755              	.LFB191:
 249:../Libraries/XMCLib/src/xmc_dma.c **** 
 250:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 251:../Libraries/XMCLib/src/xmc_dma.c **** {
 756              	 .loc 2 251 0
 757              	 .cfi_startproc
 758              	 
 759              	 
 760              	 
 761 0000 80B4     	 push {r7}
 762              	.LCFI68:
 763              	 .cfi_def_cfa_offset 4
 764              	 .cfi_offset 7,-4
 765 0002 83B0     	 sub sp,sp,#12
 766              	.LCFI69:
 767              	 .cfi_def_cfa_offset 16
 768 0004 00AF     	 add r7,sp,#0
 769              	.LCFI70:
 770              	 .cfi_def_cfa_register 7
 771 0006 7860     	 str r0,[r7,#4]
 772 0008 0B46     	 mov r3,r1
 773 000a FB70     	 strb r3,[r7,#3]
 252:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 253:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 774              	 .loc 2 253 0
 775 000c 7B68     	 ldr r3,[r7,#4]
 776 000e 184A     	 ldr r2,.L46
 777 0010 9342     	 cmp r3,r2
 778 0012 13D1     	 bne .L44
 254:../Libraries/XMCLib/src/xmc_dma.c ****   {
 255:../Libraries/XMCLib/src/xmc_dma.c **** #else
 256:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 257:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 258:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 779              	 .loc 2 258 0
 780 0014 1749     	 ldr r1,.L46+4
 781 0016 174B     	 ldr r3,.L46+4
 782 0018 1A69     	 ldr r2,[r3,#16]
 783 001a FB78     	 ldrb r3,[r7,#3]
 784 001c 0120     	 movs r0,#1
 785 001e 00FA03F3 	 lsl r3,r0,r3
 786 0022 DB43     	 mvns r3,r3
 787 0024 1340     	 ands r3,r3,r2
 788 0026 0B61     	 str r3,[r1,#16]
 259:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x1UL << line;
 789              	 .loc 2 259 0
 790 0028 1249     	 ldr r1,.L46+4
 791 002a 124B     	 ldr r3,.L46+4
 792 002c 1A69     	 ldr r2,[r3,#16]
 793 002e FB78     	 ldrb r3,[r7,#3]
 794 0030 0120     	 movs r0,#1
 795 0032 00FA03F3 	 lsl r3,r0,r3
 796 0036 1343     	 orrs r3,r3,r2
 797 0038 0B61     	 str r3,[r1,#16]
 798 003a 14E0     	 b .L43
 799              	.L44:
 260:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 261:../Libraries/XMCLib/src/xmc_dma.c ****   }
 262:../Libraries/XMCLib/src/xmc_dma.c ****   else
 263:../Libraries/XMCLib/src/xmc_dma.c ****   {
 264:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 800              	 .loc 2 264 0
 801 003c 0D49     	 ldr r1,.L46+4
 802 003e 0D4B     	 ldr r3,.L46+4
 803 0040 1A69     	 ldr r2,[r3,#16]
 804 0042 FB78     	 ldrb r3,[r7,#3]
 805 0044 4FF48070 	 mov r0,#256
 806 0048 00FA03F3 	 lsl r3,r0,r3
 807 004c DB43     	 mvns r3,r3
 808 004e 1340     	 ands r3,r3,r2
 809 0050 0B61     	 str r3,[r1,#16]
 265:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x100UL << line;
 810              	 .loc 2 265 0
 811 0052 0849     	 ldr r1,.L46+4
 812 0054 074B     	 ldr r3,.L46+4
 813 0056 1A69     	 ldr r2,[r3,#16]
 814 0058 FB78     	 ldrb r3,[r7,#3]
 815 005a 4FF48070 	 mov r0,#256
 816 005e 00FA03F3 	 lsl r3,r0,r3
 817 0062 1343     	 orrs r3,r3,r2
 818 0064 0B61     	 str r3,[r1,#16]
 819              	.L43:
 266:../Libraries/XMCLib/src/xmc_dma.c ****   }
 267:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 268:../Libraries/XMCLib/src/xmc_dma.c **** }
 820              	 .loc 2 268 0
 821 0066 0C37     	 adds r7,r7,#12
 822              	.LCFI71:
 823              	 .cfi_def_cfa_offset 4
 824 0068 BD46     	 mov sp,r7
 825              	.LCFI72:
 826              	 .cfi_def_cfa_register 13
 827              	 
 828 006a 5DF8047B 	 ldr r7,[sp],#4
 829              	.LCFI73:
 830              	 .cfi_restore 7
 831              	 .cfi_def_cfa_offset 0
 832 006e 7047     	 bx lr
 833              	.L47:
 834              	 .align 2
 835              	.L46:
 836 0070 00400150 	 .word 1342259200
 837 0074 00490050 	 .word 1342195968
 838              	 .cfi_endproc
 839              	.LFE191:
 841              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 842              	 .align 2
 843              	 .global XMC_DMA_GetOverrunStatus
 844              	 .thumb
 845              	 .thumb_func
 847              	XMC_DMA_GetOverrunStatus:
 848              	.LFB192:
 269:../Libraries/XMCLib/src/xmc_dma.c **** 
 270:../Libraries/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 271:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 272:../Libraries/XMCLib/src/xmc_dma.c **** {
 849              	 .loc 2 272 0
 850              	 .cfi_startproc
 851              	 
 852              	 
 853              	 
 854 0000 80B4     	 push {r7}
 855              	.LCFI74:
 856              	 .cfi_def_cfa_offset 4
 857              	 .cfi_offset 7,-4
 858 0002 85B0     	 sub sp,sp,#20
 859              	.LCFI75:
 860              	 .cfi_def_cfa_offset 24
 861 0004 00AF     	 add r7,sp,#0
 862              	.LCFI76:
 863              	 .cfi_def_cfa_register 7
 864 0006 7860     	 str r0,[r7,#4]
 865 0008 0B46     	 mov r3,r1
 866 000a FB70     	 strb r3,[r7,#3]
 273:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 274:../Libraries/XMCLib/src/xmc_dma.c **** 
 275:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 276:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 867              	 .loc 2 276 0
 868 000c 7B68     	 ldr r3,[r7,#4]
 869 000e 124A     	 ldr r2,.L52
 870 0010 9342     	 cmp r3,r2
 871 0012 0CD1     	 bne .L49
 277:../Libraries/XMCLib/src/xmc_dma.c ****   {
 278:../Libraries/XMCLib/src/xmc_dma.c **** #else
 279:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 280:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 281:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 872              	 .loc 2 281 0
 873 0014 114B     	 ldr r3,.L52+4
 874 0016 1A68     	 ldr r2,[r3]
 875 0018 FB78     	 ldrb r3,[r7,#3]
 876 001a 22FA03F3 	 lsr r3,r2,r3
 877 001e 03F00103 	 and r3,r3,#1
 878 0022 002B     	 cmp r3,#0
 879 0024 14BF     	 ite ne
 880 0026 0123     	 movne r3,#1
 881 0028 0023     	 moveq r3,#0
 882 002a FB73     	 strb r3,[r7,#15]
 883 002c 0CE0     	 b .L50
 884              	.L49:
 282:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 283:../Libraries/XMCLib/src/xmc_dma.c ****   }
 284:../Libraries/XMCLib/src/xmc_dma.c ****   else
 285:../Libraries/XMCLib/src/xmc_dma.c ****   {
 286:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 885              	 .loc 2 286 0
 886 002e 0B4B     	 ldr r3,.L52+4
 887 0030 1A68     	 ldr r2,[r3]
 888 0032 FB78     	 ldrb r3,[r7,#3]
 889 0034 4FF48071 	 mov r1,#256
 890 0038 01FA03F3 	 lsl r3,r1,r3
 891 003c 1340     	 ands r3,r3,r2
 892 003e 002B     	 cmp r3,#0
 893 0040 14BF     	 ite ne
 894 0042 0123     	 movne r3,#1
 895 0044 0023     	 moveq r3,#0
 896 0046 FB73     	 strb r3,[r7,#15]
 897              	.L50:
 287:../Libraries/XMCLib/src/xmc_dma.c ****   }
 288:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 289:../Libraries/XMCLib/src/xmc_dma.c **** 
 290:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 898              	 .loc 2 290 0
 899 0048 FB7B     	 ldrb r3,[r7,#15]
 291:../Libraries/XMCLib/src/xmc_dma.c **** }
 900              	 .loc 2 291 0
 901 004a 1846     	 mov r0,r3
 902 004c 1437     	 adds r7,r7,#20
 903              	.LCFI77:
 904              	 .cfi_def_cfa_offset 4
 905 004e BD46     	 mov sp,r7
 906              	.LCFI78:
 907              	 .cfi_def_cfa_register 13
 908              	 
 909 0050 5DF8047B 	 ldr r7,[sp],#4
 910              	.LCFI79:
 911              	 .cfi_restore 7
 912              	 .cfi_def_cfa_offset 0
 913 0054 7047     	 bx lr
 914              	.L53:
 915 0056 00BF     	 .align 2
 916              	.L52:
 917 0058 00400150 	 .word 1342259200
 918 005c 00490050 	 .word 1342195968
 919              	 .cfi_endproc
 920              	.LFE192:
 922              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 923              	 .align 2
 924              	 .global XMC_DMA_ClearOverrunStatus
 925              	 .thumb
 926              	 .thumb_func
 928              	XMC_DMA_ClearOverrunStatus:
 929              	.LFB193:
 292:../Libraries/XMCLib/src/xmc_dma.c **** 
 293:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 294:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 295:../Libraries/XMCLib/src/xmc_dma.c **** {
 930              	 .loc 2 295 0
 931              	 .cfi_startproc
 932              	 
 933              	 
 934              	 
 935 0000 80B4     	 push {r7}
 936              	.LCFI80:
 937              	 .cfi_def_cfa_offset 4
 938              	 .cfi_offset 7,-4
 939 0002 83B0     	 sub sp,sp,#12
 940              	.LCFI81:
 941              	 .cfi_def_cfa_offset 16
 942 0004 00AF     	 add r7,sp,#0
 943              	.LCFI82:
 944              	 .cfi_def_cfa_register 7
 945 0006 7860     	 str r0,[r7,#4]
 946 0008 0B46     	 mov r3,r1
 947 000a FB70     	 strb r3,[r7,#3]
 296:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 297:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 948              	 .loc 2 297 0
 949 000c 7B68     	 ldr r3,[r7,#4]
 950 000e 0B4A     	 ldr r2,.L57
 951 0010 9342     	 cmp r3,r2
 952 0012 06D1     	 bne .L55
 298:../Libraries/XMCLib/src/xmc_dma.c ****   {
 299:../Libraries/XMCLib/src/xmc_dma.c **** #else
 300:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 301:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 302:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x1UL << line);
 953              	 .loc 2 302 0
 954 0014 0A4A     	 ldr r2,.L57+4
 955 0016 FB78     	 ldrb r3,[r7,#3]
 956 0018 0121     	 movs r1,#1
 957 001a 01FA03F3 	 lsl r3,r1,r3
 958 001e 5360     	 str r3,[r2,#4]
 959 0020 06E0     	 b .L54
 960              	.L55:
 303:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 304:../Libraries/XMCLib/src/xmc_dma.c ****   }
 305:../Libraries/XMCLib/src/xmc_dma.c ****   else
 306:../Libraries/XMCLib/src/xmc_dma.c ****   {
 307:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x100UL << line);
 961              	 .loc 2 307 0
 962 0022 074A     	 ldr r2,.L57+4
 963 0024 FB78     	 ldrb r3,[r7,#3]
 964 0026 4FF48071 	 mov r1,#256
 965 002a 01FA03F3 	 lsl r3,r1,r3
 966 002e 5360     	 str r3,[r2,#4]
 967              	.L54:
 308:../Libraries/XMCLib/src/xmc_dma.c ****   }
 309:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 310:../Libraries/XMCLib/src/xmc_dma.c **** }
 968              	 .loc 2 310 0
 969 0030 0C37     	 adds r7,r7,#12
 970              	.LCFI83:
 971              	 .cfi_def_cfa_offset 4
 972 0032 BD46     	 mov sp,r7
 973              	.LCFI84:
 974              	 .cfi_def_cfa_register 13
 975              	 
 976 0034 5DF8047B 	 ldr r7,[sp],#4
 977              	.LCFI85:
 978              	 .cfi_restore 7
 979              	 .cfi_def_cfa_offset 0
 980 0038 7047     	 bx lr
 981              	.L58:
 982 003a 00BF     	 .align 2
 983              	.L57:
 984 003c 00400150 	 .word 1342259200
 985 0040 00490050 	 .word 1342195968
 986              	 .cfi_endproc
 987              	.LFE193:
 989              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 990              	 .align 2
 991              	 .global XMC_DMA_CH_Disable
 992              	 .thumb
 993              	 .thumb_func
 995              	XMC_DMA_CH_Disable:
 996              	.LFB194:
 311:../Libraries/XMCLib/src/xmc_dma.c **** 
 312:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 313:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 314:../Libraries/XMCLib/src/xmc_dma.c **** {
 997              	 .loc 2 314 0
 998              	 .cfi_startproc
 999              	 
 1000              	 
 1001              	 
 1002 0000 80B4     	 push {r7}
 1003              	.LCFI86:
 1004              	 .cfi_def_cfa_offset 4
 1005              	 .cfi_offset 7,-4
 1006 0002 83B0     	 sub sp,sp,#12
 1007              	.LCFI87:
 1008              	 .cfi_def_cfa_offset 16
 1009 0004 00AF     	 add r7,sp,#0
 1010              	.LCFI88:
 1011              	 .cfi_def_cfa_register 7
 1012 0006 7860     	 str r0,[r7,#4]
 1013 0008 0B46     	 mov r3,r1
 1014 000a FB70     	 strb r3,[r7,#3]
 315:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 1015              	 .loc 2 315 0
 1016 000c FB78     	 ldrb r3,[r7,#3]
 1017 000e 4FF48072 	 mov r2,#256
 1018 0012 9A40     	 lsls r2,r2,r3
 1019 0014 7B68     	 ldr r3,[r7,#4]
 1020 0016 C3F8A023 	 str r2,[r3,#928]
 316:../Libraries/XMCLib/src/xmc_dma.c ****   while ((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 1021              	 .loc 2 316 0
 1022 001a 00BF     	 nop
 1023              	.L60:
 1024              	 .loc 2 316 0 is_stmt 0 discriminator 1
 1025 001c 7B68     	 ldr r3,[r7,#4]
 1026 001e D3F8A023 	 ldr r2,[r3,#928]
 1027 0022 FB78     	 ldrb r3,[r7,#3]
 1028 0024 22FA03F3 	 lsr r3,r2,r3
 1029 0028 03F00103 	 and r3,r3,#1
 1030 002c 002B     	 cmp r3,#0
 1031 002e F5D1     	 bne .L60
 317:../Libraries/XMCLib/src/xmc_dma.c ****   {
 318:../Libraries/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 319:../Libraries/XMCLib/src/xmc_dma.c ****   }
 320:../Libraries/XMCLib/src/xmc_dma.c **** }
 1032              	 .loc 2 320 0 is_stmt 1
 1033 0030 0C37     	 adds r7,r7,#12
 1034              	.LCFI89:
 1035              	 .cfi_def_cfa_offset 4
 1036 0032 BD46     	 mov sp,r7
 1037              	.LCFI90:
 1038              	 .cfi_def_cfa_register 13
 1039              	 
 1040 0034 5DF8047B 	 ldr r7,[sp],#4
 1041              	.LCFI91:
 1042              	 .cfi_restore 7
 1043              	 .cfi_def_cfa_offset 0
 1044 0038 7047     	 bx lr
 1045              	 .cfi_endproc
 1046              	.LFE194:
 1048 003a 00BF     	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 1049              	 .align 2
 1050              	 .global XMC_DMA_CH_IsEnabled
 1051              	 .thumb
 1052              	 .thumb_func
 1054              	XMC_DMA_CH_IsEnabled:
 1055              	.LFB195:
 321:../Libraries/XMCLib/src/xmc_dma.c **** 
 322:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 323:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 324:../Libraries/XMCLib/src/xmc_dma.c **** {
 1056              	 .loc 2 324 0
 1057              	 .cfi_startproc
 1058              	 
 1059              	 
 1060              	 
 1061 0000 80B4     	 push {r7}
 1062              	.LCFI92:
 1063              	 .cfi_def_cfa_offset 4
 1064              	 .cfi_offset 7,-4
 1065 0002 83B0     	 sub sp,sp,#12
 1066              	.LCFI93:
 1067              	 .cfi_def_cfa_offset 16
 1068 0004 00AF     	 add r7,sp,#0
 1069              	.LCFI94:
 1070              	 .cfi_def_cfa_register 7
 1071 0006 7860     	 str r0,[r7,#4]
 1072 0008 0B46     	 mov r3,r1
 1073 000a FB70     	 strb r3,[r7,#3]
 325:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 1074              	 .loc 2 325 0
 1075 000c 7B68     	 ldr r3,[r7,#4]
 1076 000e D3F8A023 	 ldr r2,[r3,#928]
 1077 0012 FB78     	 ldrb r3,[r7,#3]
 1078 0014 22FA03F3 	 lsr r3,r2,r3
 1079 0018 03F00103 	 and r3,r3,#1
 1080 001c 002B     	 cmp r3,#0
 1081 001e 14BF     	 ite ne
 1082 0020 0123     	 movne r3,#1
 1083 0022 0023     	 moveq r3,#0
 1084 0024 DBB2     	 uxtb r3,r3
 326:../Libraries/XMCLib/src/xmc_dma.c **** }
 1085              	 .loc 2 326 0
 1086 0026 1846     	 mov r0,r3
 1087 0028 0C37     	 adds r7,r7,#12
 1088              	.LCFI95:
 1089              	 .cfi_def_cfa_offset 4
 1090 002a BD46     	 mov sp,r7
 1091              	.LCFI96:
 1092              	 .cfi_def_cfa_register 13
 1093              	 
 1094 002c 5DF8047B 	 ldr r7,[sp],#4
 1095              	.LCFI97:
 1096              	 .cfi_restore 7
 1097              	 .cfi_def_cfa_offset 0
 1098 0030 7047     	 bx lr
 1099              	 .cfi_endproc
 1100              	.LFE195:
 1102 0032 00BF     	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 1103              	 .align 2
 1104              	 .global XMC_DMA_CH_Init
 1105              	 .thumb
 1106              	 .thumb_func
 1108              	XMC_DMA_CH_Init:
 1109              	.LFB196:
 327:../Libraries/XMCLib/src/xmc_dma.c **** 
 328:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 329:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 330:../Libraries/XMCLib/src/xmc_dma.c **** {
 1110              	 .loc 2 330 0
 1111              	 .cfi_startproc
 1112              	 
 1113              	 
 1114 0000 80B5     	 push {r7,lr}
 1115              	.LCFI98:
 1116              	 .cfi_def_cfa_offset 8
 1117              	 .cfi_offset 7,-8
 1118              	 .cfi_offset 14,-4
 1119 0002 86B0     	 sub sp,sp,#24
 1120              	.LCFI99:
 1121              	 .cfi_def_cfa_offset 32
 1122 0004 00AF     	 add r7,sp,#0
 1123              	.LCFI100:
 1124              	 .cfi_def_cfa_register 7
 1125 0006 F860     	 str r0,[r7,#12]
 1126 0008 0B46     	 mov r3,r1
 1127 000a 7A60     	 str r2,[r7,#4]
 1128 000c FB72     	 strb r3,[r7,#11]
 331:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 332:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t line;
 333:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 334:../Libraries/XMCLib/src/xmc_dma.c **** 
 335:../Libraries/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 1129              	 .loc 2 335 0
 1130 000e F868     	 ldr r0,[r7,#12]
 1131 0010 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 1132 0014 0346     	 mov r3,r0
 1133 0016 002B     	 cmp r3,#0
 1134 0018 00F0F181 	 beq .L64
 336:../Libraries/XMCLib/src/xmc_dma.c ****   {
 337:../Libraries/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 1135              	 .loc 2 337 0
 1136 001c FB7A     	 ldrb r3,[r7,#11]
 1137 001e F868     	 ldr r0,[r7,#12]
 1138 0020 1946     	 mov r1,r3
 1139 0022 FFF7FEFF 	 bl XMC_DMA_CH_IsEnabled
 1140 0026 0346     	 mov r3,r0
 1141 0028 83F00103 	 eor r3,r3,#1
 1142 002c DBB2     	 uxtb r3,r3
 1143 002e 002B     	 cmp r3,#0
 1144 0030 00F0E281 	 beq .L65
 338:../Libraries/XMCLib/src/xmc_dma.c ****     {
 339:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 1145              	 .loc 2 339 0
 1146 0034 FB7A     	 ldrb r3,[r7,#11]
 1147 0036 7A68     	 ldr r2,[r7,#4]
 1148 0038 5268     	 ldr r2,[r2,#4]
 1149 003a F968     	 ldr r1,[r7,#12]
 1150 003c 5820     	 movs r0,#88
 1151 003e 00FB03F3 	 mul r3,r0,r3
 1152 0042 0B44     	 add r3,r3,r1
 1153 0044 1A60     	 str r2,[r3]
 340:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 1154              	 .loc 2 340 0
 1155 0046 FB7A     	 ldrb r3,[r7,#11]
 1156 0048 7A68     	 ldr r2,[r7,#4]
 1157 004a 9268     	 ldr r2,[r2,#8]
 1158 004c F968     	 ldr r1,[r7,#12]
 1159 004e 5820     	 movs r0,#88
 1160 0050 00FB03F3 	 mul r3,r0,r3
 1161 0054 0B44     	 add r3,r3,r1
 1162 0056 0833     	 adds r3,r3,#8
 1163 0058 1A60     	 str r2,[r3]
 341:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 1164              	 .loc 2 341 0
 1165 005a FB7A     	 ldrb r3,[r7,#11]
 1166 005c 7A68     	 ldr r2,[r7,#4]
 1167 005e D268     	 ldr r2,[r2,#12]
 1168 0060 1046     	 mov r0,r2
 1169 0062 FA68     	 ldr r2,[r7,#12]
 1170 0064 5821     	 movs r1,#88
 1171 0066 01FB03F3 	 mul r3,r1,r3
 1172 006a 1344     	 add r3,r3,r2
 1173 006c 1033     	 adds r3,r3,#16
 1174 006e 1860     	 str r0,[r3]
 342:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 1175              	 .loc 2 342 0
 1176 0070 FB7A     	 ldrb r3,[r7,#11]
 1177 0072 7A68     	 ldr r2,[r7,#4]
 1178 0074 128B     	 ldrh r2,[r2,#24]
 1179 0076 1046     	 mov r0,r2
 1180 0078 FA68     	 ldr r2,[r7,#12]
 1181 007a 5821     	 movs r1,#88
 1182 007c 01FB03F3 	 mul r3,r1,r3
 1183 0080 1344     	 add r3,r3,r2
 1184 0082 1833     	 adds r3,r3,#24
 1185 0084 5860     	 str r0,[r3,#4]
 343:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 1186              	 .loc 2 343 0
 1187 0086 FB7A     	 ldrb r3,[r7,#11]
 1188 0088 7A68     	 ldr r2,[r7,#4]
 1189 008a 1268     	 ldr r2,[r2]
 1190 008c F968     	 ldr r1,[r7,#12]
 1191 008e 5820     	 movs r0,#88
 1192 0090 00FB03F3 	 mul r3,r0,r3
 1193 0094 0B44     	 add r3,r3,r1
 1194 0096 1833     	 adds r3,r3,#24
 1195 0098 1A60     	 str r2,[r3]
 344:../Libraries/XMCLib/src/xmc_dma.c **** 
 345:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 1196              	 .loc 2 345 0
 1197 009a FB7A     	 ldrb r3,[r7,#11]
 1198 009c 7A68     	 ldr r2,[r7,#4]
 1199 009e D27E     	 ldrb r2,[r2,#27]
 1200 00a0 42F44062 	 orr r2,r2,#3072
 1201 00a4 F968     	 ldr r1,[r7,#12]
 1202 00a6 5820     	 movs r0,#88
 1203 00a8 00FB03F3 	 mul r3,r0,r3
 1204 00ac 0B44     	 add r3,r3,r1
 1205 00ae 4033     	 adds r3,r3,#64
 1206 00b0 1A60     	 str r2,[r3]
 346:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 347:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 348:../Libraries/XMCLib/src/xmc_dma.c **** 
 349:../Libraries/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 1207              	 .loc 2 349 0
 1208 00b2 FB68     	 ldr r3,[r7,#12]
 1209 00b4 B14A     	 ldr r2,.L91
 1210 00b6 9342     	 cmp r3,r2
 1211 00b8 16D1     	 bne .L66
 1212              	 .loc 2 349 0 is_stmt 0 discriminator 1
 1213 00ba FB7A     	 ldrb r3,[r7,#11]
 1214 00bc 012B     	 cmp r3,#1
 1215 00be 13D8     	 bhi .L66
 350:../Libraries/XMCLib/src/xmc_dma.c ****       {
 351:../Libraries/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 352:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 1216              	 .loc 2 352 0 is_stmt 1
 1217 00c0 FB7A     	 ldrb r3,[r7,#11]
 1218 00c2 7A68     	 ldr r2,[r7,#4]
 1219 00c4 1269     	 ldr r2,[r2,#16]
 1220 00c6 F968     	 ldr r1,[r7,#12]
 1221 00c8 5820     	 movs r0,#88
 1222 00ca 00FB03F3 	 mul r3,r0,r3
 1223 00ce 0B44     	 add r3,r3,r1
 1224 00d0 4833     	 adds r3,r3,#72
 1225 00d2 1A60     	 str r2,[r3]
 353:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 1226              	 .loc 2 353 0
 1227 00d4 FB7A     	 ldrb r3,[r7,#11]
 1228 00d6 7A68     	 ldr r2,[r7,#4]
 1229 00d8 5269     	 ldr r2,[r2,#20]
 1230 00da F968     	 ldr r1,[r7,#12]
 1231 00dc 5820     	 movs r0,#88
 1232 00de 00FB03F3 	 mul r3,r0,r3
 1233 00e2 0B44     	 add r3,r3,r1
 1234 00e4 5033     	 adds r3,r3,#80
 1235 00e6 1A60     	 str r2,[r3]
 1236              	.L66:
 354:../Libraries/XMCLib/src/xmc_dma.c ****       }
 355:../Libraries/XMCLib/src/xmc_dma.c **** 
 356:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 1237              	 .loc 2 356 0
 1238 00e8 7B68     	 ldr r3,[r7,#4]
 1239 00ea 1B8C     	 ldrh r3,[r3,#32]
 1240 00ec 002B     	 cmp r3,#0
 1241 00ee 4FD1     	 bne .L67
 357:../Libraries/XMCLib/src/xmc_dma.c ****       {
 358:../Libraries/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 359:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 1242              	 .loc 2 359 0
 1243 00f0 7B68     	 ldr r3,[r7,#4]
 1244 00f2 9B78     	 ldrb r3,[r3,#2]
 1245 00f4 03F07003 	 and r3,r3,#112
 1246 00f8 DBB2     	 uxtb r3,r3
 1247 00fa 102B     	 cmp r3,#16
 1248 00fc 06D0     	 beq .L68
 360:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1249              	 .loc 2 360 0 discriminator 1
 1250 00fe 7B68     	 ldr r3,[r7,#4]
 1251 0100 9B78     	 ldrb r3,[r3,#2]
 1252 0102 03F07003 	 and r3,r3,#112
 1253 0106 DBB2     	 uxtb r3,r3
 359:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1254              	 .loc 2 359 0 discriminator 1
 1255 0108 302B     	 cmp r3,#48
 1256 010a 41D1     	 bne .L67
 1257              	.L68:
 361:../Libraries/XMCLib/src/xmc_dma.c ****         {
 362:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 363:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1258              	 .loc 2 363 0
 1259 010c FB68     	 ldr r3,[r7,#12]
 1260 010e 9B4A     	 ldr r2,.L91
 1261 0110 9342     	 cmp r3,r2
 1262 0112 06D1     	 bne .L69
 364:../Libraries/XMCLib/src/xmc_dma.c ****           {
 365:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 366:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1263              	 .loc 2 366 0
 1264 0114 7B68     	 ldr r3,[r7,#4]
 1265 0116 93F82230 	 ldrb r3,[r3,#34]
 1266 011a 03F00703 	 and r3,r3,#7
 1267 011e BB75     	 strb r3,[r7,#22]
 1268 0120 05E0     	 b .L70
 1269              	.L69:
 367:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 368:../Libraries/XMCLib/src/xmc_dma.c ****           }
 369:../Libraries/XMCLib/src/xmc_dma.c ****           else
 370:../Libraries/XMCLib/src/xmc_dma.c ****           {
 371:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1270              	 .loc 2 371 0
 1271 0122 7B68     	 ldr r3,[r7,#4]
 1272 0124 93F82230 	 ldrb r3,[r3,#34]
 1273 0128 03F00303 	 and r3,r3,#3
 1274 012c BB75     	 strb r3,[r7,#22]
 1275              	.L70:
 372:../Libraries/XMCLib/src/xmc_dma.c ****           }
 373:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 374:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1276              	 .loc 2 374 0
 1277 012e 7B68     	 ldr r3,[r7,#4]
 1278 0130 93F82230 	 ldrb r3,[r3,#34]
 1279 0134 1B09     	 lsrs r3,r3,#4
 1280 0136 7B75     	 strb r3,[r7,#21]
 375:../Libraries/XMCLib/src/xmc_dma.c **** 
 376:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 1281              	 .loc 2 376 0
 1282 0138 FB7A     	 ldrb r3,[r7,#11]
 1283 013a FA7A     	 ldrb r2,[r7,#11]
 1284 013c F968     	 ldr r1,[r7,#12]
 1285 013e 5820     	 movs r0,#88
 1286 0140 00FB02F2 	 mul r2,r0,r2
 1287 0144 0A44     	 add r2,r2,r1
 1288 0146 4032     	 adds r2,r2,#64
 1289 0148 5168     	 ldr r1,[r2,#4]
 1290 014a BA7D     	 ldrb r2,[r7,#22]
 1291 014c D202     	 lsls r2,r2,#11
 1292 014e 0A43     	 orrs r2,r2,r1
 1293 0150 F968     	 ldr r1,[r7,#12]
 1294 0152 5820     	 movs r0,#88
 1295 0154 00FB03F3 	 mul r3,r0,r3
 1296 0158 0B44     	 add r3,r3,r1
 1297 015a 4033     	 adds r3,r3,#64
 1298 015c 5A60     	 str r2,[r3,#4]
 377:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1299              	 .loc 2 377 0
 1300 015e BA7D     	 ldrb r2,[r7,#22]
 1301 0160 7B7D     	 ldrb r3,[r7,#21]
 1302 0162 F868     	 ldr r0,[r7,#12]
 1303 0164 1146     	 mov r1,r2
 1304 0166 1A46     	 mov r2,r3
 1305 0168 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 378:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 1306              	 .loc 2 378 0
 1307 016c FB7A     	 ldrb r3,[r7,#11]
 1308 016e FA7A     	 ldrb r2,[r7,#11]
 1309 0170 F968     	 ldr r1,[r7,#12]
 1310 0172 5820     	 movs r0,#88
 1311 0174 00FB02F2 	 mul r2,r0,r2
 1312 0178 0A44     	 add r2,r2,r1
 1313 017a 4032     	 adds r2,r2,#64
 1314 017c 1268     	 ldr r2,[r2]
 1315 017e 22F48062 	 bic r2,r2,#1024
 1316 0182 F968     	 ldr r1,[r7,#12]
 1317 0184 5820     	 movs r0,#88
 1318 0186 00FB03F3 	 mul r3,r0,r3
 1319 018a 0B44     	 add r3,r3,r1
 1320 018c 4033     	 adds r3,r3,#64
 1321 018e 1A60     	 str r2,[r3]
 1322              	.L67:
 379:../Libraries/XMCLib/src/xmc_dma.c ****         }
 380:../Libraries/XMCLib/src/xmc_dma.c ****       }
 381:../Libraries/XMCLib/src/xmc_dma.c **** 
 382:../Libraries/XMCLib/src/xmc_dma.c **** 
 383:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 1323              	 .loc 2 383 0
 1324 0190 7B68     	 ldr r3,[r7,#4]
 1325 0192 9B8B     	 ldrh r3,[r3,#28]
 1326 0194 002B     	 cmp r3,#0
 1327 0196 4CD1     	 bne .L71
 384:../Libraries/XMCLib/src/xmc_dma.c ****       {
 385:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 1328              	 .loc 2 385 0
 1329 0198 7B68     	 ldr r3,[r7,#4]
 1330 019a 9B78     	 ldrb r3,[r3,#2]
 1331 019c 03F07003 	 and r3,r3,#112
 1332 01a0 DBB2     	 uxtb r3,r3
 1333 01a2 202B     	 cmp r3,#32
 1334 01a4 06D0     	 beq .L72
 386:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1335              	 .loc 2 386 0 discriminator 1
 1336 01a6 7B68     	 ldr r3,[r7,#4]
 1337 01a8 9B78     	 ldrb r3,[r3,#2]
 1338 01aa 03F07003 	 and r3,r3,#112
 1339 01ae DBB2     	 uxtb r3,r3
 385:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1340              	 .loc 2 385 0 discriminator 1
 1341 01b0 302B     	 cmp r3,#48
 1342 01b2 3ED1     	 bne .L71
 1343              	.L72:
 387:../Libraries/XMCLib/src/xmc_dma.c ****         {
 388:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 389:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1344              	 .loc 2 389 0
 1345 01b4 FB68     	 ldr r3,[r7,#12]
 1346 01b6 714A     	 ldr r2,.L91
 1347 01b8 9342     	 cmp r3,r2
 1348 01ba 05D1     	 bne .L73
 390:../Libraries/XMCLib/src/xmc_dma.c ****           {
 391:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 392:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1349              	 .loc 2 392 0
 1350 01bc 7B68     	 ldr r3,[r7,#4]
 1351 01be 9B7F     	 ldrb r3,[r3,#30]
 1352 01c0 03F00703 	 and r3,r3,#7
 1353 01c4 BB75     	 strb r3,[r7,#22]
 1354 01c6 04E0     	 b .L74
 1355              	.L73:
 393:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 394:../Libraries/XMCLib/src/xmc_dma.c ****           }
 395:../Libraries/XMCLib/src/xmc_dma.c ****           else
 396:../Libraries/XMCLib/src/xmc_dma.c ****           {
 397:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1356              	 .loc 2 397 0
 1357 01c8 7B68     	 ldr r3,[r7,#4]
 1358 01ca 9B7F     	 ldrb r3,[r3,#30]
 1359 01cc 03F00303 	 and r3,r3,#3
 1360 01d0 BB75     	 strb r3,[r7,#22]
 1361              	.L74:
 398:../Libraries/XMCLib/src/xmc_dma.c ****           }
 399:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 400:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1362              	 .loc 2 400 0
 1363 01d2 7B68     	 ldr r3,[r7,#4]
 1364 01d4 9B7F     	 ldrb r3,[r3,#30]
 1365 01d6 1B09     	 lsrs r3,r3,#4
 1366 01d8 7B75     	 strb r3,[r7,#21]
 401:../Libraries/XMCLib/src/xmc_dma.c **** 
 402:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 1367              	 .loc 2 402 0
 1368 01da FB7A     	 ldrb r3,[r7,#11]
 1369 01dc FA7A     	 ldrb r2,[r7,#11]
 1370 01de F968     	 ldr r1,[r7,#12]
 1371 01e0 5820     	 movs r0,#88
 1372 01e2 00FB02F2 	 mul r2,r0,r2
 1373 01e6 0A44     	 add r2,r2,r1
 1374 01e8 4032     	 adds r2,r2,#64
 1375 01ea 5168     	 ldr r1,[r2,#4]
 1376 01ec BA7D     	 ldrb r2,[r7,#22]
 1377 01ee D201     	 lsls r2,r2,#7
 1378 01f0 0A43     	 orrs r2,r2,r1
 1379 01f2 F968     	 ldr r1,[r7,#12]
 1380 01f4 5820     	 movs r0,#88
 1381 01f6 00FB03F3 	 mul r3,r0,r3
 1382 01fa 0B44     	 add r3,r3,r1
 1383 01fc 4033     	 adds r3,r3,#64
 1384 01fe 5A60     	 str r2,[r3,#4]
 403:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1385              	 .loc 2 403 0
 1386 0200 BA7D     	 ldrb r2,[r7,#22]
 1387 0202 7B7D     	 ldrb r3,[r7,#21]
 1388 0204 F868     	 ldr r0,[r7,#12]
 1389 0206 1146     	 mov r1,r2
 1390 0208 1A46     	 mov r2,r3
 1391 020a FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 404:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 1392              	 .loc 2 404 0
 1393 020e FB7A     	 ldrb r3,[r7,#11]
 1394 0210 FA7A     	 ldrb r2,[r7,#11]
 1395 0212 F968     	 ldr r1,[r7,#12]
 1396 0214 5820     	 movs r0,#88
 1397 0216 00FB02F2 	 mul r2,r0,r2
 1398 021a 0A44     	 add r2,r2,r1
 1399 021c 4032     	 adds r2,r2,#64
 1400 021e 1268     	 ldr r2,[r2]
 1401 0220 22F40062 	 bic r2,r2,#2048
 1402 0224 F968     	 ldr r1,[r7,#12]
 1403 0226 5820     	 movs r0,#88
 1404 0228 00FB03F3 	 mul r3,r0,r3
 1405 022c 0B44     	 add r3,r3,r1
 1406 022e 4033     	 adds r3,r3,#64
 1407 0230 1A60     	 str r2,[r3]
 1408              	.L71:
 405:../Libraries/XMCLib/src/xmc_dma.c ****         }
 406:../Libraries/XMCLib/src/xmc_dma.c ****       }
 407:../Libraries/XMCLib/src/xmc_dma.c **** 
 408:../Libraries/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 1409              	 .loc 2 408 0
 1410 0232 FB7A     	 ldrb r3,[r7,#11]
 1411 0234 F868     	 ldr r0,[r7,#12]
 1412 0236 1946     	 mov r1,r3
 1413 0238 1F22     	 movs r2,#31
 1414 023a FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 409:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 410:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 411:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
 412:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 413:../Libraries/XMCLib/src/xmc_dma.c **** 
 414:../Libraries/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 1415              	 .loc 2 414 0
 1416 023e 7B68     	 ldr r3,[r7,#4]
 1417 0240 9B7E     	 ldrb r3,[r3,#26]
 1418 0242 082B     	 cmp r3,#8
 1419 0244 00F2D480 	 bhi .L90
 1420 0248 01A2     	 adr r2,.L77
 1421 024a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1422 024e 00BF     	 .p2align 2
 1423              	.L77:
 1424 0250 F1030000 	 .word .L90+1
 1425 0254 75020000 	 .word .L78+1
 1426 0258 9B020000 	 .word .L79+1
 1427 025c C1020000 	 .word .L80+1
 1428 0260 E7020000 	 .word .L81+1
 1429 0264 0D030000 	 .word .L82+1
 1430 0268 57030000 	 .word .L83+1
 1431 026c 81030000 	 .word .L84+1
 1432 0270 CB030000 	 .word .L85+1
 1433              	 .p2align 1
 1434              	.L78:
 415:../Libraries/XMCLib/src/xmc_dma.c ****       {
 416:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 417:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 418:../Libraries/XMCLib/src/xmc_dma.c **** 
 419:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 420:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1435              	 .loc 2 420 0
 1436 0274 FB7A     	 ldrb r3,[r7,#11]
 1437 0276 FA7A     	 ldrb r2,[r7,#11]
 1438 0278 F968     	 ldr r1,[r7,#12]
 1439 027a 5820     	 movs r0,#88
 1440 027c 00FB02F2 	 mul r2,r0,r2
 1441 0280 0A44     	 add r2,r2,r1
 1442 0282 4032     	 adds r2,r2,#64
 1443 0284 1268     	 ldr r2,[r2]
 1444 0286 42F00042 	 orr r2,r2,#-2147483648
 1445 028a F968     	 ldr r1,[r7,#12]
 1446 028c 5820     	 movs r0,#88
 1447 028e 00FB03F3 	 mul r3,r0,r3
 1448 0292 0B44     	 add r3,r3,r1
 1449 0294 4033     	 adds r3,r3,#64
 1450 0296 1A60     	 str r2,[r3]
 421:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1451              	 .loc 2 421 0
 1452 0298 ABE0     	 b .L86
 1453              	.L79:
 422:../Libraries/XMCLib/src/xmc_dma.c **** 
 423:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 424:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1454              	 .loc 2 424 0
 1455 029a FB7A     	 ldrb r3,[r7,#11]
 1456 029c FA7A     	 ldrb r2,[r7,#11]
 1457 029e F968     	 ldr r1,[r7,#12]
 1458 02a0 5820     	 movs r0,#88
 1459 02a2 00FB02F2 	 mul r2,r0,r2
 1460 02a6 0A44     	 add r2,r2,r1
 1461 02a8 4032     	 adds r2,r2,#64
 1462 02aa 1268     	 ldr r2,[r2]
 1463 02ac 42F08042 	 orr r2,r2,#1073741824
 1464 02b0 F968     	 ldr r1,[r7,#12]
 1465 02b2 5820     	 movs r0,#88
 1466 02b4 00FB03F3 	 mul r3,r0,r3
 1467 02b8 0B44     	 add r3,r3,r1
 1468 02ba 4033     	 adds r3,r3,#64
 1469 02bc 1A60     	 str r2,[r3]
 425:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1470              	 .loc 2 425 0
 1471 02be 98E0     	 b .L86
 1472              	.L80:
 426:../Libraries/XMCLib/src/xmc_dma.c **** 
 427:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 428:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 1473              	 .loc 2 428 0
 1474 02c0 FB7A     	 ldrb r3,[r7,#11]
 1475 02c2 FA7A     	 ldrb r2,[r7,#11]
 1476 02c4 F968     	 ldr r1,[r7,#12]
 1477 02c6 5820     	 movs r0,#88
 1478 02c8 00FB02F2 	 mul r2,r0,r2
 1479 02cc 0A44     	 add r2,r2,r1
 1480 02ce 4032     	 adds r2,r2,#64
 1481 02d0 1268     	 ldr r2,[r2]
 1482 02d2 42F04042 	 orr r2,r2,#-1073741824
 1483 02d6 F968     	 ldr r1,[r7,#12]
 1484 02d8 5820     	 movs r0,#88
 1485 02da 00FB03F3 	 mul r3,r0,r3
 1486 02de 0B44     	 add r3,r3,r1
 1487 02e0 4033     	 adds r3,r3,#64
 1488 02e2 1A60     	 str r2,[r3]
 429:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 430:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1489              	 .loc 2 430 0
 1490 02e4 85E0     	 b .L86
 1491              	.L81:
 431:../Libraries/XMCLib/src/xmc_dma.c **** 
 432:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 433:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1492              	 .loc 2 433 0
 1493 02e6 FB7A     	 ldrb r3,[r7,#11]
 1494 02e8 FA7A     	 ldrb r2,[r7,#11]
 1495 02ea F968     	 ldr r1,[r7,#12]
 1496 02ec 5820     	 movs r0,#88
 1497 02ee 00FB02F2 	 mul r2,r0,r2
 1498 02f2 0A44     	 add r2,r2,r1
 1499 02f4 1832     	 adds r2,r2,#24
 1500 02f6 1268     	 ldr r2,[r2]
 1501 02f8 42F00062 	 orr r2,r2,#134217728
 1502 02fc F968     	 ldr r1,[r7,#12]
 1503 02fe 5820     	 movs r0,#88
 1504 0300 00FB03F3 	 mul r3,r0,r3
 1505 0304 0B44     	 add r3,r3,r1
 1506 0306 1833     	 adds r3,r3,#24
 1507 0308 1A60     	 str r2,[r3]
 434:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1508              	 .loc 2 434 0
 1509 030a 72E0     	 b .L86
 1510              	.L82:
 435:../Libraries/XMCLib/src/xmc_dma.c **** 
 436:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 437:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1511              	 .loc 2 437 0
 1512 030c FB7A     	 ldrb r3,[r7,#11]
 1513 030e FA7A     	 ldrb r2,[r7,#11]
 1514 0310 F968     	 ldr r1,[r7,#12]
 1515 0312 5820     	 movs r0,#88
 1516 0314 00FB02F2 	 mul r2,r0,r2
 1517 0318 0A44     	 add r2,r2,r1
 1518 031a 4032     	 adds r2,r2,#64
 1519 031c 1268     	 ldr r2,[r2]
 1520 031e 42F08042 	 orr r2,r2,#1073741824
 1521 0322 F968     	 ldr r1,[r7,#12]
 1522 0324 5820     	 movs r0,#88
 1523 0326 00FB03F3 	 mul r3,r0,r3
 1524 032a 0B44     	 add r3,r3,r1
 1525 032c 4033     	 adds r3,r3,#64
 1526 032e 1A60     	 str r2,[r3]
 438:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1527              	 .loc 2 438 0
 1528 0330 FB7A     	 ldrb r3,[r7,#11]
 1529 0332 FA7A     	 ldrb r2,[r7,#11]
 1530 0334 F968     	 ldr r1,[r7,#12]
 1531 0336 5820     	 movs r0,#88
 1532 0338 00FB02F2 	 mul r2,r0,r2
 1533 033c 0A44     	 add r2,r2,r1
 1534 033e 1832     	 adds r2,r2,#24
 1535 0340 1268     	 ldr r2,[r2]
 1536 0342 42F00062 	 orr r2,r2,#134217728
 1537 0346 F968     	 ldr r1,[r7,#12]
 1538 0348 5820     	 movs r0,#88
 1539 034a 00FB03F3 	 mul r3,r0,r3
 1540 034e 0B44     	 add r3,r3,r1
 1541 0350 1833     	 adds r3,r3,#24
 1542 0352 1A60     	 str r2,[r3]
 439:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1543              	 .loc 2 439 0
 1544 0354 4DE0     	 b .L86
 1545              	.L83:
 440:../Libraries/XMCLib/src/xmc_dma.c **** 
 441:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 442:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1546              	 .loc 2 442 0
 1547 0356 FB7A     	 ldrb r3,[r7,#11]
 1548 0358 FA7A     	 ldrb r2,[r7,#11]
 1549 035a F968     	 ldr r1,[r7,#12]
 1550 035c 5820     	 movs r0,#88
 1551 035e 00FB02F2 	 mul r2,r0,r2
 1552 0362 0A44     	 add r2,r2,r1
 1553 0364 1832     	 adds r2,r2,#24
 1554 0366 1268     	 ldr r2,[r2]
 1555 0368 42F08052 	 orr r2,r2,#268435456
 1556 036c F968     	 ldr r1,[r7,#12]
 1557 036e 5820     	 movs r0,#88
 1558 0370 00FB03F3 	 mul r3,r0,r3
 1559 0374 0B44     	 add r3,r3,r1
 1560 0376 1833     	 adds r3,r3,#24
 1561 0378 1A60     	 str r2,[r3]
 443:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1562              	 .loc 2 443 0
 1563 037a 3AE0     	 b .L86
 1564              	.L92:
 1565              	 .align 2
 1566              	.L91:
 1567 037c 00400150 	 .word 1342259200
 1568              	.L84:
 444:../Libraries/XMCLib/src/xmc_dma.c **** 
 445:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 446:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1569              	 .loc 2 446 0
 1570 0380 FB7A     	 ldrb r3,[r7,#11]
 1571 0382 FA7A     	 ldrb r2,[r7,#11]
 1572 0384 F968     	 ldr r1,[r7,#12]
 1573 0386 5820     	 movs r0,#88
 1574 0388 00FB02F2 	 mul r2,r0,r2
 1575 038c 0A44     	 add r2,r2,r1
 1576 038e 4032     	 adds r2,r2,#64
 1577 0390 1268     	 ldr r2,[r2]
 1578 0392 42F00042 	 orr r2,r2,#-2147483648
 1579 0396 F968     	 ldr r1,[r7,#12]
 1580 0398 5820     	 movs r0,#88
 1581 039a 00FB03F3 	 mul r3,r0,r3
 1582 039e 0B44     	 add r3,r3,r1
 1583 03a0 4033     	 adds r3,r3,#64
 1584 03a2 1A60     	 str r2,[r3]
 447:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1585              	 .loc 2 447 0
 1586 03a4 FB7A     	 ldrb r3,[r7,#11]
 1587 03a6 FA7A     	 ldrb r2,[r7,#11]
 1588 03a8 F968     	 ldr r1,[r7,#12]
 1589 03aa 5820     	 movs r0,#88
 1590 03ac 00FB02F2 	 mul r2,r0,r2
 1591 03b0 0A44     	 add r2,r2,r1
 1592 03b2 1832     	 adds r2,r2,#24
 1593 03b4 1268     	 ldr r2,[r2]
 1594 03b6 42F08052 	 orr r2,r2,#268435456
 1595 03ba F968     	 ldr r1,[r7,#12]
 1596 03bc 5820     	 movs r0,#88
 1597 03be 00FB03F3 	 mul r3,r0,r3
 1598 03c2 0B44     	 add r3,r3,r1
 1599 03c4 1833     	 adds r3,r3,#24
 1600 03c6 1A60     	 str r2,[r3]
 448:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1601              	 .loc 2 448 0
 1602 03c8 13E0     	 b .L86
 1603              	.L85:
 449:../Libraries/XMCLib/src/xmc_dma.c **** 
 450:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 451:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 1604              	 .loc 2 451 0
 1605 03ca FB7A     	 ldrb r3,[r7,#11]
 1606 03cc FA7A     	 ldrb r2,[r7,#11]
 1607 03ce F968     	 ldr r1,[r7,#12]
 1608 03d0 5820     	 movs r0,#88
 1609 03d2 00FB02F2 	 mul r2,r0,r2
 1610 03d6 0A44     	 add r2,r2,r1
 1611 03d8 1832     	 adds r2,r2,#24
 1612 03da 1268     	 ldr r2,[r2]
 1613 03dc 42F0C052 	 orr r2,r2,#402653184
 1614 03e0 F968     	 ldr r1,[r7,#12]
 1615 03e2 5820     	 movs r0,#88
 1616 03e4 00FB03F3 	 mul r3,r0,r3
 1617 03e8 0B44     	 add r3,r3,r1
 1618 03ea 1833     	 adds r3,r3,#24
 1619 03ec 1A60     	 str r2,[r3]
 452:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 453:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1620              	 .loc 2 453 0
 1621 03ee 00E0     	 b .L86
 1622              	.L90:
 454:../Libraries/XMCLib/src/xmc_dma.c **** 
 455:../Libraries/XMCLib/src/xmc_dma.c ****         default:
 456:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1623              	 .loc 2 456 0
 1624 03f0 00BF     	 nop
 1625              	.L86:
 457:../Libraries/XMCLib/src/xmc_dma.c ****       }
 458:../Libraries/XMCLib/src/xmc_dma.c **** 
 459:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 1626              	 .loc 2 459 0
 1627 03f2 0023     	 movs r3,#0
 1628 03f4 FB75     	 strb r3,[r7,#23]
 1629 03f6 04E0     	 b .L88
 1630              	.L65:
 460:../Libraries/XMCLib/src/xmc_dma.c **** 
 461:../Libraries/XMCLib/src/xmc_dma.c ****     }
 462:../Libraries/XMCLib/src/xmc_dma.c ****     else
 463:../Libraries/XMCLib/src/xmc_dma.c ****     {
 464:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 1631              	 .loc 2 464 0
 1632 03f8 0223     	 movs r3,#2
 1633 03fa FB75     	 strb r3,[r7,#23]
 1634 03fc 01E0     	 b .L88
 1635              	.L64:
 465:../Libraries/XMCLib/src/xmc_dma.c ****     }
 466:../Libraries/XMCLib/src/xmc_dma.c ****   }
 467:../Libraries/XMCLib/src/xmc_dma.c ****   else
 468:../Libraries/XMCLib/src/xmc_dma.c ****   {
 469:../Libraries/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 1636              	 .loc 2 469 0
 1637 03fe 0123     	 movs r3,#1
 1638 0400 FB75     	 strb r3,[r7,#23]
 1639              	.L88:
 470:../Libraries/XMCLib/src/xmc_dma.c ****   }
 471:../Libraries/XMCLib/src/xmc_dma.c **** 
 472:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 1640              	 .loc 2 472 0
 1641 0402 FB7D     	 ldrb r3,[r7,#23]
 473:../Libraries/XMCLib/src/xmc_dma.c **** }
 1642              	 .loc 2 473 0
 1643 0404 1846     	 mov r0,r3
 1644 0406 1837     	 adds r7,r7,#24
 1645              	.LCFI101:
 1646              	 .cfi_def_cfa_offset 8
 1647 0408 BD46     	 mov sp,r7
 1648              	.LCFI102:
 1649              	 .cfi_def_cfa_register 13
 1650              	 
 1651 040a 80BD     	 pop {r7,pc}
 1652              	 .cfi_endproc
 1653              	.LFE196:
 1655              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 1656              	 .align 2
 1657              	 .global XMC_DMA_CH_Suspend
 1658              	 .thumb
 1659              	 .thumb_func
 1661              	XMC_DMA_CH_Suspend:
 1662              	.LFB197:
 474:../Libraries/XMCLib/src/xmc_dma.c **** 
 475:../Libraries/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 476:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 477:../Libraries/XMCLib/src/xmc_dma.c **** {
 1663              	 .loc 2 477 0
 1664              	 .cfi_startproc
 1665              	 
 1666              	 
 1667              	 
 1668 0000 80B4     	 push {r7}
 1669              	.LCFI103:
 1670              	 .cfi_def_cfa_offset 4
 1671              	 .cfi_offset 7,-4
 1672 0002 83B0     	 sub sp,sp,#12
 1673              	.LCFI104:
 1674              	 .cfi_def_cfa_offset 16
 1675 0004 00AF     	 add r7,sp,#0
 1676              	.LCFI105:
 1677              	 .cfi_def_cfa_register 7
 1678 0006 7860     	 str r0,[r7,#4]
 1679 0008 0B46     	 mov r3,r1
 1680 000a FB70     	 strb r3,[r7,#3]
 478:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1681              	 .loc 2 478 0
 1682 000c FB78     	 ldrb r3,[r7,#3]
 1683 000e FA78     	 ldrb r2,[r7,#3]
 1684 0010 7968     	 ldr r1,[r7,#4]
 1685 0012 5820     	 movs r0,#88
 1686 0014 00FB02F2 	 mul r2,r0,r2
 1687 0018 0A44     	 add r2,r2,r1
 1688 001a 4032     	 adds r2,r2,#64
 1689 001c 1268     	 ldr r2,[r2]
 1690 001e 42F48072 	 orr r2,r2,#256
 1691 0022 7968     	 ldr r1,[r7,#4]
 1692 0024 5820     	 movs r0,#88
 1693 0026 00FB03F3 	 mul r3,r0,r3
 1694 002a 0B44     	 add r3,r3,r1
 1695 002c 4033     	 adds r3,r3,#64
 1696 002e 1A60     	 str r2,[r3]
 479:../Libraries/XMCLib/src/xmc_dma.c **** }
 1697              	 .loc 2 479 0
 1698 0030 0C37     	 adds r7,r7,#12
 1699              	.LCFI106:
 1700              	 .cfi_def_cfa_offset 4
 1701 0032 BD46     	 mov sp,r7
 1702              	.LCFI107:
 1703              	 .cfi_def_cfa_register 13
 1704              	 
 1705 0034 5DF8047B 	 ldr r7,[sp],#4
 1706              	.LCFI108:
 1707              	 .cfi_restore 7
 1708              	 .cfi_def_cfa_offset 0
 1709 0038 7047     	 bx lr
 1710              	 .cfi_endproc
 1711              	.LFE197:
 1713 003a 00BF     	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 1714              	 .align 2
 1715              	 .global XMC_DMA_CH_Resume
 1716              	 .thumb
 1717              	 .thumb_func
 1719              	XMC_DMA_CH_Resume:
 1720              	.LFB198:
 480:../Libraries/XMCLib/src/xmc_dma.c **** 
 481:../Libraries/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 482:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 483:../Libraries/XMCLib/src/xmc_dma.c **** {
 1721              	 .loc 2 483 0
 1722              	 .cfi_startproc
 1723              	 
 1724              	 
 1725              	 
 1726 0000 80B4     	 push {r7}
 1727              	.LCFI109:
 1728              	 .cfi_def_cfa_offset 4
 1729              	 .cfi_offset 7,-4
 1730 0002 83B0     	 sub sp,sp,#12
 1731              	.LCFI110:
 1732              	 .cfi_def_cfa_offset 16
 1733 0004 00AF     	 add r7,sp,#0
 1734              	.LCFI111:
 1735              	 .cfi_def_cfa_register 7
 1736 0006 7860     	 str r0,[r7,#4]
 1737 0008 0B46     	 mov r3,r1
 1738 000a FB70     	 strb r3,[r7,#3]
 484:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1739              	 .loc 2 484 0
 1740 000c FB78     	 ldrb r3,[r7,#3]
 1741 000e FA78     	 ldrb r2,[r7,#3]
 1742 0010 7968     	 ldr r1,[r7,#4]
 1743 0012 5820     	 movs r0,#88
 1744 0014 00FB02F2 	 mul r2,r0,r2
 1745 0018 0A44     	 add r2,r2,r1
 1746 001a 4032     	 adds r2,r2,#64
 1747 001c 1268     	 ldr r2,[r2]
 1748 001e 22F48072 	 bic r2,r2,#256
 1749 0022 7968     	 ldr r1,[r7,#4]
 1750 0024 5820     	 movs r0,#88
 1751 0026 00FB03F3 	 mul r3,r0,r3
 1752 002a 0B44     	 add r3,r3,r1
 1753 002c 4033     	 adds r3,r3,#64
 1754 002e 1A60     	 str r2,[r3]
 485:../Libraries/XMCLib/src/xmc_dma.c **** }
 1755              	 .loc 2 485 0
 1756 0030 0C37     	 adds r7,r7,#12
 1757              	.LCFI112:
 1758              	 .cfi_def_cfa_offset 4
 1759 0032 BD46     	 mov sp,r7
 1760              	.LCFI113:
 1761              	 .cfi_def_cfa_register 13
 1762              	 
 1763 0034 5DF8047B 	 ldr r7,[sp],#4
 1764              	.LCFI114:
 1765              	 .cfi_restore 7
 1766              	 .cfi_def_cfa_offset 0
 1767 0038 7047     	 bx lr
 1768              	 .cfi_endproc
 1769              	.LFE198:
 1771 003a 00BF     	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 1772              	 .align 2
 1773              	 .global XMC_DMA_CH_IsSuspended
 1774              	 .thumb
 1775              	 .thumb_func
 1777              	XMC_DMA_CH_IsSuspended:
 1778              	.LFB199:
 486:../Libraries/XMCLib/src/xmc_dma.c **** 
 487:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 488:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 489:../Libraries/XMCLib/src/xmc_dma.c **** {
 1779              	 .loc 2 489 0
 1780              	 .cfi_startproc
 1781              	 
 1782              	 
 1783              	 
 1784 0000 80B4     	 push {r7}
 1785              	.LCFI115:
 1786              	 .cfi_def_cfa_offset 4
 1787              	 .cfi_offset 7,-4
 1788 0002 83B0     	 sub sp,sp,#12
 1789              	.LCFI116:
 1790              	 .cfi_def_cfa_offset 16
 1791 0004 00AF     	 add r7,sp,#0
 1792              	.LCFI117:
 1793              	 .cfi_def_cfa_register 7
 1794 0006 7860     	 str r0,[r7,#4]
 1795 0008 0B46     	 mov r3,r1
 1796 000a FB70     	 strb r3,[r7,#3]
 490:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 1797              	 .loc 2 490 0
 1798 000c FB78     	 ldrb r3,[r7,#3]
 1799 000e 7A68     	 ldr r2,[r7,#4]
 1800 0010 5821     	 movs r1,#88
 1801 0012 01FB03F3 	 mul r3,r1,r3
 1802 0016 1344     	 add r3,r3,r2
 1803 0018 4033     	 adds r3,r3,#64
 1804 001a 1B68     	 ldr r3,[r3]
 1805 001c 03F48073 	 and r3,r3,#256
 1806 0020 002B     	 cmp r3,#0
 1807 0022 14BF     	 ite ne
 1808 0024 0123     	 movne r3,#1
 1809 0026 0023     	 moveq r3,#0
 1810 0028 DBB2     	 uxtb r3,r3
 491:../Libraries/XMCLib/src/xmc_dma.c **** }
 1811              	 .loc 2 491 0
 1812 002a 1846     	 mov r0,r3
 1813 002c 0C37     	 adds r7,r7,#12
 1814              	.LCFI118:
 1815              	 .cfi_def_cfa_offset 4
 1816 002e BD46     	 mov sp,r7
 1817              	.LCFI119:
 1818              	 .cfi_def_cfa_register 13
 1819              	 
 1820 0030 5DF8047B 	 ldr r7,[sp],#4
 1821              	.LCFI120:
 1822              	 .cfi_restore 7
 1823              	 .cfi_def_cfa_offset 0
 1824 0034 7047     	 bx lr
 1825              	 .cfi_endproc
 1826              	.LFE199:
 1828 0036 00BF     	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 1829              	 .align 2
 1830              	 .global XMC_DMA_CH_EnableEvent
 1831              	 .thumb
 1832              	 .thumb_func
 1834              	XMC_DMA_CH_EnableEvent:
 1835              	.LFB200:
 492:../Libraries/XMCLib/src/xmc_dma.c **** 
 493:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 494:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 495:../Libraries/XMCLib/src/xmc_dma.c **** {
 1836              	 .loc 2 495 0
 1837              	 .cfi_startproc
 1838              	 
 1839              	 
 1840              	 
 1841 0000 80B4     	 push {r7}
 1842              	.LCFI121:
 1843              	 .cfi_def_cfa_offset 4
 1844              	 .cfi_offset 7,-4
 1845 0002 87B0     	 sub sp,sp,#28
 1846              	.LCFI122:
 1847              	 .cfi_def_cfa_offset 32
 1848 0004 00AF     	 add r7,sp,#0
 1849              	.LCFI123:
 1850              	 .cfi_def_cfa_register 7
 1851 0006 F860     	 str r0,[r7,#12]
 1852 0008 0B46     	 mov r3,r1
 1853 000a 7A60     	 str r2,[r7,#4]
 1854 000c FB72     	 strb r3,[r7,#11]
 496:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 497:../Libraries/XMCLib/src/xmc_dma.c **** 
 498:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1855              	 .loc 2 498 0
 1856 000e 0023     	 movs r3,#0
 1857 0010 7B61     	 str r3,[r7,#20]
 1858 0012 14E0     	 b .L98
 1859              	.L100:
 499:../Libraries/XMCLib/src/xmc_dma.c ****   {
 500:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1860              	 .loc 2 500 0
 1861 0014 7B69     	 ldr r3,[r7,#20]
 1862 0016 7A68     	 ldr r2,[r7,#4]
 1863 0018 22FA03F3 	 lsr r3,r2,r3
 1864 001c 03F00103 	 and r3,r3,#1
 1865 0020 002B     	 cmp r3,#0
 1866 0022 09D0     	 beq .L99
 501:../Libraries/XMCLib/src/xmc_dma.c ****     {
 502:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 1867              	 .loc 2 502 0
 1868 0024 7B69     	 ldr r3,[r7,#20]
 1869 0026 5A00     	 lsls r2,r3,#1
 1870 0028 FB7A     	 ldrb r3,[r7,#11]
 1871 002a 40F20111 	 movw r1,#257
 1872 002e 9940     	 lsls r1,r1,r3
 1873 0030 FB68     	 ldr r3,[r7,#12]
 1874 0032 C432     	 adds r2,r2,#196
 1875 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 1876              	.L99:
 498:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1877              	 .loc 2 498 0 discriminator 2
 1878 0038 7B69     	 ldr r3,[r7,#20]
 1879 003a 0133     	 adds r3,r3,#1
 1880 003c 7B61     	 str r3,[r7,#20]
 1881              	.L98:
 498:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1882              	 .loc 2 498 0 is_stmt 0 discriminator 1
 1883 003e 7B69     	 ldr r3,[r7,#20]
 1884 0040 042B     	 cmp r3,#4
 1885 0042 E7D9     	 bls .L100
 503:../Libraries/XMCLib/src/xmc_dma.c ****     }
 504:../Libraries/XMCLib/src/xmc_dma.c ****   }
 505:../Libraries/XMCLib/src/xmc_dma.c **** }
 1886              	 .loc 2 505 0 is_stmt 1
 1887 0044 1C37     	 adds r7,r7,#28
 1888              	.LCFI124:
 1889              	 .cfi_def_cfa_offset 4
 1890 0046 BD46     	 mov sp,r7
 1891              	.LCFI125:
 1892              	 .cfi_def_cfa_register 13
 1893              	 
 1894 0048 5DF8047B 	 ldr r7,[sp],#4
 1895              	.LCFI126:
 1896              	 .cfi_restore 7
 1897              	 .cfi_def_cfa_offset 0
 1898 004c 7047     	 bx lr
 1899              	 .cfi_endproc
 1900              	.LFE200:
 1902 004e 00BF     	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 1903              	 .align 2
 1904              	 .global XMC_DMA_CH_DisableEvent
 1905              	 .thumb
 1906              	 .thumb_func
 1908              	XMC_DMA_CH_DisableEvent:
 1909              	.LFB201:
 506:../Libraries/XMCLib/src/xmc_dma.c **** 
 507:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 508:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 509:../Libraries/XMCLib/src/xmc_dma.c **** {
 1910              	 .loc 2 509 0
 1911              	 .cfi_startproc
 1912              	 
 1913              	 
 1914              	 
 1915 0000 80B4     	 push {r7}
 1916              	.LCFI127:
 1917              	 .cfi_def_cfa_offset 4
 1918              	 .cfi_offset 7,-4
 1919 0002 87B0     	 sub sp,sp,#28
 1920              	.LCFI128:
 1921              	 .cfi_def_cfa_offset 32
 1922 0004 00AF     	 add r7,sp,#0
 1923              	.LCFI129:
 1924              	 .cfi_def_cfa_register 7
 1925 0006 F860     	 str r0,[r7,#12]
 1926 0008 0B46     	 mov r3,r1
 1927 000a 7A60     	 str r2,[r7,#4]
 1928 000c FB72     	 strb r3,[r7,#11]
 510:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 511:../Libraries/XMCLib/src/xmc_dma.c **** 
 512:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1929              	 .loc 2 512 0
 1930 000e 0023     	 movs r3,#0
 1931 0010 7B61     	 str r3,[r7,#20]
 1932 0012 14E0     	 b .L102
 1933              	.L104:
 513:../Libraries/XMCLib/src/xmc_dma.c ****   {
 514:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1934              	 .loc 2 514 0
 1935 0014 7B69     	 ldr r3,[r7,#20]
 1936 0016 7A68     	 ldr r2,[r7,#4]
 1937 0018 22FA03F3 	 lsr r3,r2,r3
 1938 001c 03F00103 	 and r3,r3,#1
 1939 0020 002B     	 cmp r3,#0
 1940 0022 09D0     	 beq .L103
 515:../Libraries/XMCLib/src/xmc_dma.c ****     {
 516:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 1941              	 .loc 2 516 0
 1942 0024 7B69     	 ldr r3,[r7,#20]
 1943 0026 5A00     	 lsls r2,r3,#1
 1944 0028 FB7A     	 ldrb r3,[r7,#11]
 1945 002a 4FF48071 	 mov r1,#256
 1946 002e 9940     	 lsls r1,r1,r3
 1947 0030 FB68     	 ldr r3,[r7,#12]
 1948 0032 C432     	 adds r2,r2,#196
 1949 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 1950              	.L103:
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1951              	 .loc 2 512 0 discriminator 2
 1952 0038 7B69     	 ldr r3,[r7,#20]
 1953 003a 0133     	 adds r3,r3,#1
 1954 003c 7B61     	 str r3,[r7,#20]
 1955              	.L102:
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1956              	 .loc 2 512 0 is_stmt 0 discriminator 1
 1957 003e 7B69     	 ldr r3,[r7,#20]
 1958 0040 042B     	 cmp r3,#4
 1959 0042 E7D9     	 bls .L104
 517:../Libraries/XMCLib/src/xmc_dma.c ****     }
 518:../Libraries/XMCLib/src/xmc_dma.c ****   }
 519:../Libraries/XMCLib/src/xmc_dma.c **** }
 1960              	 .loc 2 519 0 is_stmt 1
 1961 0044 1C37     	 adds r7,r7,#28
 1962              	.LCFI130:
 1963              	 .cfi_def_cfa_offset 4
 1964 0046 BD46     	 mov sp,r7
 1965              	.LCFI131:
 1966              	 .cfi_def_cfa_register 13
 1967              	 
 1968 0048 5DF8047B 	 ldr r7,[sp],#4
 1969              	.LCFI132:
 1970              	 .cfi_restore 7
 1971              	 .cfi_def_cfa_offset 0
 1972 004c 7047     	 bx lr
 1973              	 .cfi_endproc
 1974              	.LFE201:
 1976 004e 00BF     	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 1977              	 .align 2
 1978              	 .global XMC_DMA_CH_ClearEventStatus
 1979              	 .thumb
 1980              	 .thumb_func
 1982              	XMC_DMA_CH_ClearEventStatus:
 1983              	.LFB202:
 520:../Libraries/XMCLib/src/xmc_dma.c **** 
 521:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 522:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 523:../Libraries/XMCLib/src/xmc_dma.c **** {
 1984              	 .loc 2 523 0
 1985              	 .cfi_startproc
 1986              	 
 1987              	 
 1988              	 
 1989 0000 80B4     	 push {r7}
 1990              	.LCFI133:
 1991              	 .cfi_def_cfa_offset 4
 1992              	 .cfi_offset 7,-4
 1993 0002 87B0     	 sub sp,sp,#28
 1994              	.LCFI134:
 1995              	 .cfi_def_cfa_offset 32
 1996 0004 00AF     	 add r7,sp,#0
 1997              	.LCFI135:
 1998              	 .cfi_def_cfa_register 7
 1999 0006 F860     	 str r0,[r7,#12]
 2000 0008 0B46     	 mov r3,r1
 2001 000a 7A60     	 str r2,[r7,#4]
 2002 000c FB72     	 strb r3,[r7,#11]
 524:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 525:../Libraries/XMCLib/src/xmc_dma.c **** 
 526:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2003              	 .loc 2 526 0
 2004 000e 0023     	 movs r3,#0
 2005 0010 7B61     	 str r3,[r7,#20]
 2006 0012 13E0     	 b .L106
 2007              	.L108:
 527:../Libraries/XMCLib/src/xmc_dma.c ****   {
 528:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 2008              	 .loc 2 528 0
 2009 0014 7B69     	 ldr r3,[r7,#20]
 2010 0016 7A68     	 ldr r2,[r7,#4]
 2011 0018 22FA03F3 	 lsr r3,r2,r3
 2012 001c 03F00103 	 and r3,r3,#1
 2013 0020 002B     	 cmp r3,#0
 2014 0022 08D0     	 beq .L107
 529:../Libraries/XMCLib/src/xmc_dma.c ****     {
 530:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 2015              	 .loc 2 530 0
 2016 0024 7B69     	 ldr r3,[r7,#20]
 2017 0026 5A00     	 lsls r2,r3,#1
 2018 0028 FB7A     	 ldrb r3,[r7,#11]
 2019 002a 0121     	 movs r1,#1
 2020 002c 9940     	 lsls r1,r1,r3
 2021 002e FB68     	 ldr r3,[r7,#12]
 2022 0030 CE32     	 adds r2,r2,#206
 2023 0032 43F82210 	 str r1,[r3,r2,lsl#2]
 2024              	.L107:
 526:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2025              	 .loc 2 526 0 discriminator 2
 2026 0036 7B69     	 ldr r3,[r7,#20]
 2027 0038 0133     	 adds r3,r3,#1
 2028 003a 7B61     	 str r3,[r7,#20]
 2029              	.L106:
 526:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2030              	 .loc 2 526 0 is_stmt 0 discriminator 1
 2031 003c 7B69     	 ldr r3,[r7,#20]
 2032 003e 042B     	 cmp r3,#4
 2033 0040 E8D9     	 bls .L108
 531:../Libraries/XMCLib/src/xmc_dma.c ****     }
 532:../Libraries/XMCLib/src/xmc_dma.c ****   }
 533:../Libraries/XMCLib/src/xmc_dma.c **** 
 534:../Libraries/XMCLib/src/xmc_dma.c **** }
 2034              	 .loc 2 534 0 is_stmt 1
 2035 0042 1C37     	 adds r7,r7,#28
 2036              	.LCFI136:
 2037              	 .cfi_def_cfa_offset 4
 2038 0044 BD46     	 mov sp,r7
 2039              	.LCFI137:
 2040              	 .cfi_def_cfa_register 13
 2041              	 
 2042 0046 5DF8047B 	 ldr r7,[sp],#4
 2043              	.LCFI138:
 2044              	 .cfi_restore 7
 2045              	 .cfi_def_cfa_offset 0
 2046 004a 7047     	 bx lr
 2047              	 .cfi_endproc
 2048              	.LFE202:
 2050              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 2051              	 .align 2
 2052              	 .global XMC_DMA_CH_GetEventStatus
 2053              	 .thumb
 2054              	 .thumb_func
 2056              	XMC_DMA_CH_GetEventStatus:
 2057              	.LFB203:
 535:../Libraries/XMCLib/src/xmc_dma.c **** 
 536:../Libraries/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 537:../Libraries/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 538:../Libraries/XMCLib/src/xmc_dma.c **** {
 2058              	 .loc 2 538 0
 2059              	 .cfi_startproc
 2060              	 
 2061              	 
 2062              	 
 2063 0000 80B4     	 push {r7}
 2064              	.LCFI139:
 2065              	 .cfi_def_cfa_offset 4
 2066              	 .cfi_offset 7,-4
 2067 0002 85B0     	 sub sp,sp,#20
 2068              	.LCFI140:
 2069              	 .cfi_def_cfa_offset 24
 2070 0004 00AF     	 add r7,sp,#0
 2071              	.LCFI141:
 2072              	 .cfi_def_cfa_register 7
 2073 0006 7860     	 str r0,[r7,#4]
 2074 0008 0B46     	 mov r3,r1
 2075 000a FB70     	 strb r3,[r7,#3]
 539:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 540:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 2076              	 .loc 2 540 0
 2077 000c 0023     	 movs r3,#0
 2078 000e BB60     	 str r3,[r7,#8]
 541:../Libraries/XMCLib/src/xmc_dma.c **** 
 542:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2079              	 .loc 2 542 0
 2080 0010 0023     	 movs r3,#0
 2081 0012 FB60     	 str r3,[r7,#12]
 2082 0014 18E0     	 b .L110
 2083              	.L113:
 543:../Libraries/XMCLib/src/xmc_dma.c ****   {
 544:../Libraries/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 2084              	 .loc 2 544 0
 2085 0016 FB68     	 ldr r3,[r7,#12]
 2086 0018 5A00     	 lsls r2,r3,#1
 2087 001a 7B68     	 ldr r3,[r7,#4]
 2088 001c BA32     	 adds r2,r2,#186
 2089 001e 53F82220 	 ldr r2,[r3,r2,lsl#2]
 2090 0022 FB78     	 ldrb r3,[r7,#3]
 2091 0024 22FA03F3 	 lsr r3,r2,r3
 2092 0028 03F00103 	 and r3,r3,#1
 2093 002c 002B     	 cmp r3,#0
 2094 002e 04D0     	 beq .L111
 2095              	 .loc 2 544 0 is_stmt 0 discriminator 1
 2096 0030 FB68     	 ldr r3,[r7,#12]
 2097 0032 0122     	 movs r2,#1
 2098 0034 02FA03F3 	 lsl r3,r2,r3
 2099 0038 00E0     	 b .L112
 2100              	.L111:
 2101              	 .loc 2 544 0 discriminator 2
 2102 003a 0023     	 movs r3,#0
 2103              	.L112:
 2104              	 .loc 2 544 0 discriminator 4
 2105 003c BA68     	 ldr r2,[r7,#8]
 2106 003e 1343     	 orrs r3,r3,r2
 2107 0040 BB60     	 str r3,[r7,#8]
 542:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2108              	 .loc 2 542 0 is_stmt 1 discriminator 4
 2109 0042 FB68     	 ldr r3,[r7,#12]
 2110 0044 0133     	 adds r3,r3,#1
 2111 0046 FB60     	 str r3,[r7,#12]
 2112              	.L110:
 542:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2113              	 .loc 2 542 0 is_stmt 0 discriminator 2
 2114 0048 FB68     	 ldr r3,[r7,#12]
 2115 004a 042B     	 cmp r3,#4
 2116 004c E3D9     	 bls .L113
 545:../Libraries/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 546:../Libraries/XMCLib/src/xmc_dma.c ****   }
 547:../Libraries/XMCLib/src/xmc_dma.c **** 
 548:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 2117              	 .loc 2 548 0 is_stmt 1
 2118 004e BB68     	 ldr r3,[r7,#8]
 549:../Libraries/XMCLib/src/xmc_dma.c **** }
 2119              	 .loc 2 549 0
 2120 0050 1846     	 mov r0,r3
 2121 0052 1437     	 adds r7,r7,#20
 2122              	.LCFI142:
 2123              	 .cfi_def_cfa_offset 4
 2124 0054 BD46     	 mov sp,r7
 2125              	.LCFI143:
 2126              	 .cfi_def_cfa_register 13
 2127              	 
 2128 0056 5DF8047B 	 ldr r7,[sp],#4
 2129              	.LCFI144:
 2130              	 .cfi_restore 7
 2131              	 .cfi_def_cfa_offset 0
 2132 005a 7047     	 bx lr
 2133              	 .cfi_endproc
 2134              	.LFE203:
 2136              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 2137              	 .align 2
 2138              	 .global XMC_DMA_CH_EnableSourceGather
 2139              	 .thumb
 2140              	 .thumb_func
 2142              	XMC_DMA_CH_EnableSourceGather:
 2143              	.LFB204:
 550:../Libraries/XMCLib/src/xmc_dma.c **** 
 551:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 552:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 553:../Libraries/XMCLib/src/xmc_dma.c **** {
 2144              	 .loc 2 553 0
 2145              	 .cfi_startproc
 2146              	 
 2147              	 
 2148              	 
 2149 0000 80B4     	 push {r7}
 2150              	.LCFI145:
 2151              	 .cfi_def_cfa_offset 4
 2152              	 .cfi_offset 7,-4
 2153 0002 85B0     	 sub sp,sp,#20
 2154              	.LCFI146:
 2155              	 .cfi_def_cfa_offset 24
 2156 0004 00AF     	 add r7,sp,#0
 2157              	.LCFI147:
 2158              	 .cfi_def_cfa_register 7
 2159 0006 F860     	 str r0,[r7,#12]
 2160 0008 7A60     	 str r2,[r7,#4]
 2161 000a 1A46     	 mov r2,r3
 2162 000c 0B46     	 mov r3,r1
 2163 000e FB72     	 strb r3,[r7,#11]
 2164 0010 1346     	 mov r3,r2
 2165 0012 3B81     	 strh r3,[r7,#8]
 554:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2166              	 .loc 2 554 0
 2167 0014 FB7A     	 ldrb r3,[r7,#11]
 2168 0016 FA7A     	 ldrb r2,[r7,#11]
 2169 0018 F968     	 ldr r1,[r7,#12]
 2170 001a 5820     	 movs r0,#88
 2171 001c 00FB02F2 	 mul r2,r0,r2
 2172 0020 0A44     	 add r2,r2,r1
 2173 0022 1832     	 adds r2,r2,#24
 2174 0024 1268     	 ldr r2,[r2]
 2175 0026 42F40032 	 orr r2,r2,#131072
 2176 002a F968     	 ldr r1,[r7,#12]
 2177 002c 5820     	 movs r0,#88
 2178 002e 00FB03F3 	 mul r3,r0,r3
 2179 0032 0B44     	 add r3,r3,r1
 2180 0034 1833     	 adds r3,r3,#24
 2181 0036 1A60     	 str r2,[r3]
 555:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 2182              	 .loc 2 555 0
 2183 0038 FB7A     	 ldrb r3,[r7,#11]
 2184 003a 3A89     	 ldrh r2,[r7,#8]
 2185 003c 1105     	 lsls r1,r2,#20
 2186 003e 7A68     	 ldr r2,[r7,#4]
 2187 0040 0A43     	 orrs r2,r2,r1
 2188 0042 F968     	 ldr r1,[r7,#12]
 2189 0044 5820     	 movs r0,#88
 2190 0046 00FB03F3 	 mul r3,r0,r3
 2191 004a 0B44     	 add r3,r3,r1
 2192 004c 4833     	 adds r3,r3,#72
 2193 004e 1A60     	 str r2,[r3]
 556:../Libraries/XMCLib/src/xmc_dma.c **** }
 2194              	 .loc 2 556 0
 2195 0050 1437     	 adds r7,r7,#20
 2196              	.LCFI148:
 2197              	 .cfi_def_cfa_offset 4
 2198 0052 BD46     	 mov sp,r7
 2199              	.LCFI149:
 2200              	 .cfi_def_cfa_register 13
 2201              	 
 2202 0054 5DF8047B 	 ldr r7,[sp],#4
 2203              	.LCFI150:
 2204              	 .cfi_restore 7
 2205              	 .cfi_def_cfa_offset 0
 2206 0058 7047     	 bx lr
 2207              	 .cfi_endproc
 2208              	.LFE204:
 2210 005a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 2211              	 .align 2
 2212              	 .global XMC_DMA_CH_DisableSourceGather
 2213              	 .thumb
 2214              	 .thumb_func
 2216              	XMC_DMA_CH_DisableSourceGather:
 2217              	.LFB205:
 557:../Libraries/XMCLib/src/xmc_dma.c **** 
 558:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 559:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 560:../Libraries/XMCLib/src/xmc_dma.c **** {
 2218              	 .loc 2 560 0
 2219              	 .cfi_startproc
 2220              	 
 2221              	 
 2222              	 
 2223 0000 80B4     	 push {r7}
 2224              	.LCFI151:
 2225              	 .cfi_def_cfa_offset 4
 2226              	 .cfi_offset 7,-4
 2227 0002 83B0     	 sub sp,sp,#12
 2228              	.LCFI152:
 2229              	 .cfi_def_cfa_offset 16
 2230 0004 00AF     	 add r7,sp,#0
 2231              	.LCFI153:
 2232              	 .cfi_def_cfa_register 7
 2233 0006 7860     	 str r0,[r7,#4]
 2234 0008 0B46     	 mov r3,r1
 2235 000a FB70     	 strb r3,[r7,#3]
 561:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2236              	 .loc 2 561 0
 2237 000c FB78     	 ldrb r3,[r7,#3]
 2238 000e FA78     	 ldrb r2,[r7,#3]
 2239 0010 7968     	 ldr r1,[r7,#4]
 2240 0012 5820     	 movs r0,#88
 2241 0014 00FB02F2 	 mul r2,r0,r2
 2242 0018 0A44     	 add r2,r2,r1
 2243 001a 1832     	 adds r2,r2,#24
 2244 001c 1268     	 ldr r2,[r2]
 2245 001e 22F40032 	 bic r2,r2,#131072
 2246 0022 7968     	 ldr r1,[r7,#4]
 2247 0024 5820     	 movs r0,#88
 2248 0026 00FB03F3 	 mul r3,r0,r3
 2249 002a 0B44     	 add r3,r3,r1
 2250 002c 1833     	 adds r3,r3,#24
 2251 002e 1A60     	 str r2,[r3]
 562:../Libraries/XMCLib/src/xmc_dma.c **** }
 2252              	 .loc 2 562 0
 2253 0030 0C37     	 adds r7,r7,#12
 2254              	.LCFI154:
 2255              	 .cfi_def_cfa_offset 4
 2256 0032 BD46     	 mov sp,r7
 2257              	.LCFI155:
 2258              	 .cfi_def_cfa_register 13
 2259              	 
 2260 0034 5DF8047B 	 ldr r7,[sp],#4
 2261              	.LCFI156:
 2262              	 .cfi_restore 7
 2263              	 .cfi_def_cfa_offset 0
 2264 0038 7047     	 bx lr
 2265              	 .cfi_endproc
 2266              	.LFE205:
 2268 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 2269              	 .align 2
 2270              	 .global XMC_DMA_CH_EnableDestinationScatter
 2271              	 .thumb
 2272              	 .thumb_func
 2274              	XMC_DMA_CH_EnableDestinationScatter:
 2275              	.LFB206:
 563:../Libraries/XMCLib/src/xmc_dma.c **** 
 564:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 565:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 566:../Libraries/XMCLib/src/xmc_dma.c **** {
 2276              	 .loc 2 566 0
 2277              	 .cfi_startproc
 2278              	 
 2279              	 
 2280              	 
 2281 0000 80B4     	 push {r7}
 2282              	.LCFI157:
 2283              	 .cfi_def_cfa_offset 4
 2284              	 .cfi_offset 7,-4
 2285 0002 85B0     	 sub sp,sp,#20
 2286              	.LCFI158:
 2287              	 .cfi_def_cfa_offset 24
 2288 0004 00AF     	 add r7,sp,#0
 2289              	.LCFI159:
 2290              	 .cfi_def_cfa_register 7
 2291 0006 F860     	 str r0,[r7,#12]
 2292 0008 7A60     	 str r2,[r7,#4]
 2293 000a 1A46     	 mov r2,r3
 2294 000c 0B46     	 mov r3,r1
 2295 000e FB72     	 strb r3,[r7,#11]
 2296 0010 1346     	 mov r3,r2
 2297 0012 3B81     	 strh r3,[r7,#8]
 567:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2298              	 .loc 2 567 0
 2299 0014 FB7A     	 ldrb r3,[r7,#11]
 2300 0016 FA7A     	 ldrb r2,[r7,#11]
 2301 0018 F968     	 ldr r1,[r7,#12]
 2302 001a 5820     	 movs r0,#88
 2303 001c 00FB02F2 	 mul r2,r0,r2
 2304 0020 0A44     	 add r2,r2,r1
 2305 0022 1832     	 adds r2,r2,#24
 2306 0024 1268     	 ldr r2,[r2]
 2307 0026 42F48022 	 orr r2,r2,#262144
 2308 002a F968     	 ldr r1,[r7,#12]
 2309 002c 5820     	 movs r0,#88
 2310 002e 00FB03F3 	 mul r3,r0,r3
 2311 0032 0B44     	 add r3,r3,r1
 2312 0034 1833     	 adds r3,r3,#24
 2313 0036 1A60     	 str r2,[r3]
 568:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 2314              	 .loc 2 568 0
 2315 0038 FB7A     	 ldrb r3,[r7,#11]
 2316 003a 3A89     	 ldrh r2,[r7,#8]
 2317 003c 1105     	 lsls r1,r2,#20
 2318 003e 7A68     	 ldr r2,[r7,#4]
 2319 0040 0A43     	 orrs r2,r2,r1
 2320 0042 F968     	 ldr r1,[r7,#12]
 2321 0044 5820     	 movs r0,#88
 2322 0046 00FB03F3 	 mul r3,r0,r3
 2323 004a 0B44     	 add r3,r3,r1
 2324 004c 5033     	 adds r3,r3,#80
 2325 004e 1A60     	 str r2,[r3]
 569:../Libraries/XMCLib/src/xmc_dma.c **** }
 2326              	 .loc 2 569 0
 2327 0050 1437     	 adds r7,r7,#20
 2328              	.LCFI160:
 2329              	 .cfi_def_cfa_offset 4
 2330 0052 BD46     	 mov sp,r7
 2331              	.LCFI161:
 2332              	 .cfi_def_cfa_register 13
 2333              	 
 2334 0054 5DF8047B 	 ldr r7,[sp],#4
 2335              	.LCFI162:
 2336              	 .cfi_restore 7
 2337              	 .cfi_def_cfa_offset 0
 2338 0058 7047     	 bx lr
 2339              	 .cfi_endproc
 2340              	.LFE206:
 2342 005a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 2343              	 .align 2
 2344              	 .global XMC_DMA_CH_DisableDestinationScatter
 2345              	 .thumb
 2346              	 .thumb_func
 2348              	XMC_DMA_CH_DisableDestinationScatter:
 2349              	.LFB207:
 570:../Libraries/XMCLib/src/xmc_dma.c **** 
 571:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 572:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 573:../Libraries/XMCLib/src/xmc_dma.c **** {
 2350              	 .loc 2 573 0
 2351              	 .cfi_startproc
 2352              	 
 2353              	 
 2354              	 
 2355 0000 80B4     	 push {r7}
 2356              	.LCFI163:
 2357              	 .cfi_def_cfa_offset 4
 2358              	 .cfi_offset 7,-4
 2359 0002 83B0     	 sub sp,sp,#12
 2360              	.LCFI164:
 2361              	 .cfi_def_cfa_offset 16
 2362 0004 00AF     	 add r7,sp,#0
 2363              	.LCFI165:
 2364              	 .cfi_def_cfa_register 7
 2365 0006 7860     	 str r0,[r7,#4]
 2366 0008 0B46     	 mov r3,r1
 2367 000a FB70     	 strb r3,[r7,#3]
 574:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2368              	 .loc 2 574 0
 2369 000c FB78     	 ldrb r3,[r7,#3]
 2370 000e FA78     	 ldrb r2,[r7,#3]
 2371 0010 7968     	 ldr r1,[r7,#4]
 2372 0012 5820     	 movs r0,#88
 2373 0014 00FB02F2 	 mul r2,r0,r2
 2374 0018 0A44     	 add r2,r2,r1
 2375 001a 1832     	 adds r2,r2,#24
 2376 001c 1268     	 ldr r2,[r2]
 2377 001e 22F48022 	 bic r2,r2,#262144
 2378 0022 7968     	 ldr r1,[r7,#4]
 2379 0024 5820     	 movs r0,#88
 2380 0026 00FB03F3 	 mul r3,r0,r3
 2381 002a 0B44     	 add r3,r3,r1
 2382 002c 1833     	 adds r3,r3,#24
 2383 002e 1A60     	 str r2,[r3]
 575:../Libraries/XMCLib/src/xmc_dma.c **** }
 2384              	 .loc 2 575 0
 2385 0030 0C37     	 adds r7,r7,#12
 2386              	.LCFI166:
 2387              	 .cfi_def_cfa_offset 4
 2388 0032 BD46     	 mov sp,r7
 2389              	.LCFI167:
 2390              	 .cfi_def_cfa_register 13
 2391              	 
 2392 0034 5DF8047B 	 ldr r7,[sp],#4
 2393              	.LCFI168:
 2394              	 .cfi_restore 7
 2395              	 .cfi_def_cfa_offset 0
 2396 0038 7047     	 bx lr
 2397              	 .cfi_endproc
 2398              	.LFE207:
 2400 003a 00BF     	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 2401              	 .align 2
 2402              	 .global XMC_DMA_CH_TriggerSourceRequest
 2403              	 .thumb
 2404              	 .thumb_func
 2406              	XMC_DMA_CH_TriggerSourceRequest:
 2407              	.LFB208:
 576:../Libraries/XMCLib/src/xmc_dma.c **** 
 577:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 578:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 579:../Libraries/XMCLib/src/xmc_dma.c **** {
 2408              	 .loc 2 579 0
 2409              	 .cfi_startproc
 2410              	 
 2411              	 
 2412              	 
 2413 0000 80B4     	 push {r7}
 2414              	.LCFI169:
 2415              	 .cfi_def_cfa_offset 4
 2416              	 .cfi_offset 7,-4
 2417 0002 83B0     	 sub sp,sp,#12
 2418              	.LCFI170:
 2419              	 .cfi_def_cfa_offset 16
 2420 0004 00AF     	 add r7,sp,#0
 2421              	.LCFI171:
 2422              	 .cfi_def_cfa_register 7
 2423 0006 7860     	 str r0,[r7,#4]
 2424 0008 0846     	 mov r0,r1
 2425 000a 1146     	 mov r1,r2
 2426 000c 1A46     	 mov r2,r3
 2427 000e 0346     	 mov r3,r0
 2428 0010 FB70     	 strb r3,[r7,#3]
 2429 0012 0B46     	 mov r3,r1
 2430 0014 BB70     	 strb r3,[r7,#2]
 2431 0016 1346     	 mov r3,r2
 2432 0018 7B70     	 strb r3,[r7,#1]
 580:../Libraries/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2433              	 .loc 2 580 0
 2434 001a BB78     	 ldrb r3,[r7,#2]
 2435 001c 002B     	 cmp r3,#0
 2436 001e 06D1     	 bne .L120
 581:../Libraries/XMCLib/src/xmc_dma.c ****   {
 582:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 2437              	 .loc 2 582 0
 2438 0020 FB78     	 ldrb r3,[r7,#3]
 2439 0022 40F20112 	 movw r2,#257
 2440 0026 9A40     	 lsls r2,r2,r3
 2441 0028 7B68     	 ldr r3,[r7,#4]
 2442 002a C3F87823 	 str r2,[r3,#888]
 2443              	.L120:
 583:../Libraries/XMCLib/src/xmc_dma.c ****   }
 584:../Libraries/XMCLib/src/xmc_dma.c **** 
 585:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2444              	 .loc 2 585 0
 2445 002e 7B78     	 ldrb r3,[r7,#1]
 2446 0030 002B     	 cmp r3,#0
 2447 0032 06D0     	 beq .L121
 586:../Libraries/XMCLib/src/xmc_dma.c ****   {
 587:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 2448              	 .loc 2 587 0
 2449 0034 FB78     	 ldrb r3,[r7,#3]
 2450 0036 40F20112 	 movw r2,#257
 2451 003a 9A40     	 lsls r2,r2,r3
 2452 003c 7B68     	 ldr r3,[r7,#4]
 2453 003e C3F88823 	 str r2,[r3,#904]
 2454              	.L121:
 588:../Libraries/XMCLib/src/xmc_dma.c ****   }
 589:../Libraries/XMCLib/src/xmc_dma.c **** 
 590:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 2455              	 .loc 2 590 0
 2456 0042 FB78     	 ldrb r3,[r7,#3]
 2457 0044 40F20112 	 movw r2,#257
 2458 0048 9A40     	 lsls r2,r2,r3
 2459 004a 7B68     	 ldr r3,[r7,#4]
 2460 004c C3F86823 	 str r2,[r3,#872]
 591:../Libraries/XMCLib/src/xmc_dma.c **** }
 2461              	 .loc 2 591 0
 2462 0050 0C37     	 adds r7,r7,#12
 2463              	.LCFI172:
 2464              	 .cfi_def_cfa_offset 4
 2465 0052 BD46     	 mov sp,r7
 2466              	.LCFI173:
 2467              	 .cfi_def_cfa_register 13
 2468              	 
 2469 0054 5DF8047B 	 ldr r7,[sp],#4
 2470              	.LCFI174:
 2471              	 .cfi_restore 7
 2472              	 .cfi_def_cfa_offset 0
 2473 0058 7047     	 bx lr
 2474              	 .cfi_endproc
 2475              	.LFE208:
 2477 005a 00BF     	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 2478              	 .align 2
 2479              	 .global XMC_DMA_CH_TriggerDestinationRequest
 2480              	 .thumb
 2481              	 .thumb_func
 2483              	XMC_DMA_CH_TriggerDestinationRequest:
 2484              	.LFB209:
 592:../Libraries/XMCLib/src/xmc_dma.c **** 
 593:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 594:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 595:../Libraries/XMCLib/src/xmc_dma.c **** {
 2485              	 .loc 2 595 0
 2486              	 .cfi_startproc
 2487              	 
 2488              	 
 2489              	 
 2490 0000 80B4     	 push {r7}
 2491              	.LCFI175:
 2492              	 .cfi_def_cfa_offset 4
 2493              	 .cfi_offset 7,-4
 2494 0002 83B0     	 sub sp,sp,#12
 2495              	.LCFI176:
 2496              	 .cfi_def_cfa_offset 16
 2497 0004 00AF     	 add r7,sp,#0
 2498              	.LCFI177:
 2499              	 .cfi_def_cfa_register 7
 2500 0006 7860     	 str r0,[r7,#4]
 2501 0008 0846     	 mov r0,r1
 2502 000a 1146     	 mov r1,r2
 2503 000c 1A46     	 mov r2,r3
 2504 000e 0346     	 mov r3,r0
 2505 0010 FB70     	 strb r3,[r7,#3]
 2506 0012 0B46     	 mov r3,r1
 2507 0014 BB70     	 strb r3,[r7,#2]
 2508 0016 1346     	 mov r3,r2
 2509 0018 7B70     	 strb r3,[r7,#1]
 596:../Libraries/XMCLib/src/xmc_dma.c ****   if (type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2510              	 .loc 2 596 0
 2511 001a BB78     	 ldrb r3,[r7,#2]
 2512 001c 002B     	 cmp r3,#0
 2513 001e 06D1     	 bne .L123
 597:../Libraries/XMCLib/src/xmc_dma.c ****   {
 598:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 2514              	 .loc 2 598 0
 2515 0020 FB78     	 ldrb r3,[r7,#3]
 2516 0022 40F20112 	 movw r2,#257
 2517 0026 9A40     	 lsls r2,r2,r3
 2518 0028 7B68     	 ldr r3,[r7,#4]
 2519 002a C3F88023 	 str r2,[r3,#896]
 2520              	.L123:
 599:../Libraries/XMCLib/src/xmc_dma.c ****   }
 600:../Libraries/XMCLib/src/xmc_dma.c **** 
 601:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2521              	 .loc 2 601 0
 2522 002e 7B78     	 ldrb r3,[r7,#1]
 2523 0030 002B     	 cmp r3,#0
 2524 0032 06D0     	 beq .L124
 602:../Libraries/XMCLib/src/xmc_dma.c ****   {
 603:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 2525              	 .loc 2 603 0
 2526 0034 FB78     	 ldrb r3,[r7,#3]
 2527 0036 40F20112 	 movw r2,#257
 2528 003a 9A40     	 lsls r2,r2,r3
 2529 003c 7B68     	 ldr r3,[r7,#4]
 2530 003e C3F89023 	 str r2,[r3,#912]
 2531              	.L124:
 604:../Libraries/XMCLib/src/xmc_dma.c ****   }
 605:../Libraries/XMCLib/src/xmc_dma.c **** 
 606:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 2532              	 .loc 2 606 0
 2533 0042 FB78     	 ldrb r3,[r7,#3]
 2534 0044 40F20112 	 movw r2,#257
 2535 0048 9A40     	 lsls r2,r2,r3
 2536 004a 7B68     	 ldr r3,[r7,#4]
 2537 004c C3F87023 	 str r2,[r3,#880]
 607:../Libraries/XMCLib/src/xmc_dma.c **** }
 2538              	 .loc 2 607 0
 2539 0050 0C37     	 adds r7,r7,#12
 2540              	.LCFI178:
 2541              	 .cfi_def_cfa_offset 4
 2542 0052 BD46     	 mov sp,r7
 2543              	.LCFI179:
 2544              	 .cfi_def_cfa_register 13
 2545              	 
 2546 0054 5DF8047B 	 ldr r7,[sp],#4
 2547              	.LCFI180:
 2548              	 .cfi_restore 7
 2549              	 .cfi_def_cfa_offset 0
 2550 0058 7047     	 bx lr
 2551              	 .cfi_endproc
 2552              	.LFE209:
 2554 005a 00BF     	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 2555              	 .align 2
 2556              	 .global XMC_DMA_CH_EnableSourceAddressReload
 2557              	 .thumb
 2558              	 .thumb_func
 2560              	XMC_DMA_CH_EnableSourceAddressReload:
 2561              	.LFB210:
 608:../Libraries/XMCLib/src/xmc_dma.c **** 
 609:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 610:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 611:../Libraries/XMCLib/src/xmc_dma.c **** {
 2562              	 .loc 2 611 0
 2563              	 .cfi_startproc
 2564              	 
 2565              	 
 2566              	 
 2567 0000 80B4     	 push {r7}
 2568              	.LCFI181:
 2569              	 .cfi_def_cfa_offset 4
 2570              	 .cfi_offset 7,-4
 2571 0002 83B0     	 sub sp,sp,#12
 2572              	.LCFI182:
 2573              	 .cfi_def_cfa_offset 16
 2574 0004 00AF     	 add r7,sp,#0
 2575              	.LCFI183:
 2576              	 .cfi_def_cfa_register 7
 2577 0006 7860     	 str r0,[r7,#4]
 2578 0008 0B46     	 mov r3,r1
 2579 000a FB70     	 strb r3,[r7,#3]
 612:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2580              	 .loc 2 612 0
 2581 000c FB78     	 ldrb r3,[r7,#3]
 2582 000e FA78     	 ldrb r2,[r7,#3]
 2583 0010 7968     	 ldr r1,[r7,#4]
 2584 0012 5820     	 movs r0,#88
 2585 0014 00FB02F2 	 mul r2,r0,r2
 2586 0018 0A44     	 add r2,r2,r1
 2587 001a 4032     	 adds r2,r2,#64
 2588 001c 1268     	 ldr r2,[r2]
 2589 001e 42F08042 	 orr r2,r2,#1073741824
 2590 0022 7968     	 ldr r1,[r7,#4]
 2591 0024 5820     	 movs r0,#88
 2592 0026 00FB03F3 	 mul r3,r0,r3
 2593 002a 0B44     	 add r3,r3,r1
 2594 002c 4033     	 adds r3,r3,#64
 2595 002e 1A60     	 str r2,[r3]
 613:../Libraries/XMCLib/src/xmc_dma.c **** }
 2596              	 .loc 2 613 0
 2597 0030 0C37     	 adds r7,r7,#12
 2598              	.LCFI184:
 2599              	 .cfi_def_cfa_offset 4
 2600 0032 BD46     	 mov sp,r7
 2601              	.LCFI185:
 2602              	 .cfi_def_cfa_register 13
 2603              	 
 2604 0034 5DF8047B 	 ldr r7,[sp],#4
 2605              	.LCFI186:
 2606              	 .cfi_restore 7
 2607              	 .cfi_def_cfa_offset 0
 2608 0038 7047     	 bx lr
 2609              	 .cfi_endproc
 2610              	.LFE210:
 2612 003a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 2613              	 .align 2
 2614              	 .global XMC_DMA_CH_DisableSourceAddressReload
 2615              	 .thumb
 2616              	 .thumb_func
 2618              	XMC_DMA_CH_DisableSourceAddressReload:
 2619              	.LFB211:
 614:../Libraries/XMCLib/src/xmc_dma.c **** 
 615:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 616:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 617:../Libraries/XMCLib/src/xmc_dma.c **** {
 2620              	 .loc 2 617 0
 2621              	 .cfi_startproc
 2622              	 
 2623              	 
 2624              	 
 2625 0000 80B4     	 push {r7}
 2626              	.LCFI187:
 2627              	 .cfi_def_cfa_offset 4
 2628              	 .cfi_offset 7,-4
 2629 0002 83B0     	 sub sp,sp,#12
 2630              	.LCFI188:
 2631              	 .cfi_def_cfa_offset 16
 2632 0004 00AF     	 add r7,sp,#0
 2633              	.LCFI189:
 2634              	 .cfi_def_cfa_register 7
 2635 0006 7860     	 str r0,[r7,#4]
 2636 0008 0B46     	 mov r3,r1
 2637 000a FB70     	 strb r3,[r7,#3]
 618:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2638              	 .loc 2 618 0
 2639 000c FB78     	 ldrb r3,[r7,#3]
 2640 000e FA78     	 ldrb r2,[r7,#3]
 2641 0010 7968     	 ldr r1,[r7,#4]
 2642 0012 5820     	 movs r0,#88
 2643 0014 00FB02F2 	 mul r2,r0,r2
 2644 0018 0A44     	 add r2,r2,r1
 2645 001a 4032     	 adds r2,r2,#64
 2646 001c 1268     	 ldr r2,[r2]
 2647 001e 22F08042 	 bic r2,r2,#1073741824
 2648 0022 7968     	 ldr r1,[r7,#4]
 2649 0024 5820     	 movs r0,#88
 2650 0026 00FB03F3 	 mul r3,r0,r3
 2651 002a 0B44     	 add r3,r3,r1
 2652 002c 4033     	 adds r3,r3,#64
 2653 002e 1A60     	 str r2,[r3]
 619:../Libraries/XMCLib/src/xmc_dma.c **** }
 2654              	 .loc 2 619 0
 2655 0030 0C37     	 adds r7,r7,#12
 2656              	.LCFI190:
 2657              	 .cfi_def_cfa_offset 4
 2658 0032 BD46     	 mov sp,r7
 2659              	.LCFI191:
 2660              	 .cfi_def_cfa_register 13
 2661              	 
 2662 0034 5DF8047B 	 ldr r7,[sp],#4
 2663              	.LCFI192:
 2664              	 .cfi_restore 7
 2665              	 .cfi_def_cfa_offset 0
 2666 0038 7047     	 bx lr
 2667              	 .cfi_endproc
 2668              	.LFE211:
 2670 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 2671              	 .align 2
 2672              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 2673              	 .thumb
 2674              	 .thumb_func
 2676              	XMC_DMA_CH_EnableDestinationAddressReload:
 2677              	.LFB212:
 620:../Libraries/XMCLib/src/xmc_dma.c **** 
 621:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 622:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 623:../Libraries/XMCLib/src/xmc_dma.c **** {
 2678              	 .loc 2 623 0
 2679              	 .cfi_startproc
 2680              	 
 2681              	 
 2682              	 
 2683 0000 80B4     	 push {r7}
 2684              	.LCFI193:
 2685              	 .cfi_def_cfa_offset 4
 2686              	 .cfi_offset 7,-4
 2687 0002 83B0     	 sub sp,sp,#12
 2688              	.LCFI194:
 2689              	 .cfi_def_cfa_offset 16
 2690 0004 00AF     	 add r7,sp,#0
 2691              	.LCFI195:
 2692              	 .cfi_def_cfa_register 7
 2693 0006 7860     	 str r0,[r7,#4]
 2694 0008 0B46     	 mov r3,r1
 2695 000a FB70     	 strb r3,[r7,#3]
 624:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2696              	 .loc 2 624 0
 2697 000c FB78     	 ldrb r3,[r7,#3]
 2698 000e FA78     	 ldrb r2,[r7,#3]
 2699 0010 7968     	 ldr r1,[r7,#4]
 2700 0012 5820     	 movs r0,#88
 2701 0014 00FB02F2 	 mul r2,r0,r2
 2702 0018 0A44     	 add r2,r2,r1
 2703 001a 4032     	 adds r2,r2,#64
 2704 001c 1268     	 ldr r2,[r2]
 2705 001e 42F00042 	 orr r2,r2,#-2147483648
 2706 0022 7968     	 ldr r1,[r7,#4]
 2707 0024 5820     	 movs r0,#88
 2708 0026 00FB03F3 	 mul r3,r0,r3
 2709 002a 0B44     	 add r3,r3,r1
 2710 002c 4033     	 adds r3,r3,#64
 2711 002e 1A60     	 str r2,[r3]
 625:../Libraries/XMCLib/src/xmc_dma.c **** }
 2712              	 .loc 2 625 0
 2713 0030 0C37     	 adds r7,r7,#12
 2714              	.LCFI196:
 2715              	 .cfi_def_cfa_offset 4
 2716 0032 BD46     	 mov sp,r7
 2717              	.LCFI197:
 2718              	 .cfi_def_cfa_register 13
 2719              	 
 2720 0034 5DF8047B 	 ldr r7,[sp],#4
 2721              	.LCFI198:
 2722              	 .cfi_restore 7
 2723              	 .cfi_def_cfa_offset 0
 2724 0038 7047     	 bx lr
 2725              	 .cfi_endproc
 2726              	.LFE212:
 2728 003a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 2729              	 .align 2
 2730              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 2731              	 .thumb
 2732              	 .thumb_func
 2734              	XMC_DMA_CH_DisableDestinationAddressReload:
 2735              	.LFB213:
 626:../Libraries/XMCLib/src/xmc_dma.c **** 
 627:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 628:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 629:../Libraries/XMCLib/src/xmc_dma.c **** {
 2736              	 .loc 2 629 0
 2737              	 .cfi_startproc
 2738              	 
 2739              	 
 2740              	 
 2741 0000 80B4     	 push {r7}
 2742              	.LCFI199:
 2743              	 .cfi_def_cfa_offset 4
 2744              	 .cfi_offset 7,-4
 2745 0002 83B0     	 sub sp,sp,#12
 2746              	.LCFI200:
 2747              	 .cfi_def_cfa_offset 16
 2748 0004 00AF     	 add r7,sp,#0
 2749              	.LCFI201:
 2750              	 .cfi_def_cfa_register 7
 2751 0006 7860     	 str r0,[r7,#4]
 2752 0008 0B46     	 mov r3,r1
 2753 000a FB70     	 strb r3,[r7,#3]
 630:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2754              	 .loc 2 630 0
 2755 000c FB78     	 ldrb r3,[r7,#3]
 2756 000e FA78     	 ldrb r2,[r7,#3]
 2757 0010 7968     	 ldr r1,[r7,#4]
 2758 0012 5820     	 movs r0,#88
 2759 0014 00FB02F2 	 mul r2,r0,r2
 2760 0018 0A44     	 add r2,r2,r1
 2761 001a 4032     	 adds r2,r2,#64
 2762 001c 1268     	 ldr r2,[r2]
 2763 001e 22F00042 	 bic r2,r2,#-2147483648
 2764 0022 7968     	 ldr r1,[r7,#4]
 2765 0024 5820     	 movs r0,#88
 2766 0026 00FB03F3 	 mul r3,r0,r3
 2767 002a 0B44     	 add r3,r3,r1
 2768 002c 4033     	 adds r3,r3,#64
 2769 002e 1A60     	 str r2,[r3]
 631:../Libraries/XMCLib/src/xmc_dma.c **** }
 2770              	 .loc 2 631 0
 2771 0030 0C37     	 adds r7,r7,#12
 2772              	.LCFI202:
 2773              	 .cfi_def_cfa_offset 4
 2774 0032 BD46     	 mov sp,r7
 2775              	.LCFI203:
 2776              	 .cfi_def_cfa_register 13
 2777              	 
 2778 0034 5DF8047B 	 ldr r7,[sp],#4
 2779              	.LCFI204:
 2780              	 .cfi_restore 7
 2781              	 .cfi_def_cfa_offset 0
 2782 0038 7047     	 bx lr
 2783              	 .cfi_endproc
 2784              	.LFE213:
 2786 003a 00BF     	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 2787              	 .align 2
 2788              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 2789              	 .thumb
 2790              	 .thumb_func
 2792              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 2793              	.LFB214:
 632:../Libraries/XMCLib/src/xmc_dma.c **** 
 633:../Libraries/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 634:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 635:../Libraries/XMCLib/src/xmc_dma.c **** {
 2794              	 .loc 2 635 0
 2795              	 .cfi_startproc
 2796              	 
 2797              	 
 2798              	 
 2799 0000 80B4     	 push {r7}
 2800              	.LCFI205:
 2801              	 .cfi_def_cfa_offset 4
 2802              	 .cfi_offset 7,-4
 2803 0002 83B0     	 sub sp,sp,#12
 2804              	.LCFI206:
 2805              	 .cfi_def_cfa_offset 16
 2806 0004 00AF     	 add r7,sp,#0
 2807              	.LCFI207:
 2808              	 .cfi_def_cfa_register 7
 2809 0006 7860     	 str r0,[r7,#4]
 2810 0008 0B46     	 mov r3,r1
 2811 000a FB70     	 strb r3,[r7,#3]
 636:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 2812              	 .loc 2 636 0
 2813 000c FB78     	 ldrb r3,[r7,#3]
 2814 000e FA78     	 ldrb r2,[r7,#3]
 2815 0010 7968     	 ldr r1,[r7,#4]
 2816 0012 5820     	 movs r0,#88
 2817 0014 00FB02F2 	 mul r2,r0,r2
 2818 0018 0A44     	 add r2,r2,r1
 2819 001a 4032     	 adds r2,r2,#64
 2820 001c 1268     	 ldr r2,[r2]
 2821 001e 22F04042 	 bic r2,r2,#-1073741824
 2822 0022 7968     	 ldr r1,[r7,#4]
 2823 0024 5820     	 movs r0,#88
 2824 0026 00FB03F3 	 mul r3,r0,r3
 2825 002a 0B44     	 add r3,r3,r1
 2826 002c 4033     	 adds r3,r3,#64
 2827 002e 1A60     	 str r2,[r3]
 637:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Ms
 2828              	 .loc 2 637 0
 2829 0030 FB78     	 ldrb r3,[r7,#3]
 2830 0032 FA78     	 ldrb r2,[r7,#3]
 2831 0034 7968     	 ldr r1,[r7,#4]
 2832 0036 5820     	 movs r0,#88
 2833 0038 00FB02F2 	 mul r2,r0,r2
 2834 003c 0A44     	 add r2,r2,r1
 2835 003e 1832     	 adds r2,r2,#24
 2836 0040 1268     	 ldr r2,[r2]
 2837 0042 22F0C052 	 bic r2,r2,#402653184
 2838 0046 7968     	 ldr r1,[r7,#4]
 2839 0048 5820     	 movs r0,#88
 2840 004a 00FB03F3 	 mul r3,r0,r3
 2841 004e 0B44     	 add r3,r3,r1
 2842 0050 1833     	 adds r3,r3,#24
 2843 0052 1A60     	 str r2,[r3]
 638:../Libraries/XMCLib/src/xmc_dma.c **** }
 2844              	 .loc 2 638 0
 2845 0054 0C37     	 adds r7,r7,#12
 2846              	.LCFI208:
 2847              	 .cfi_def_cfa_offset 4
 2848 0056 BD46     	 mov sp,r7
 2849              	.LCFI209:
 2850              	 .cfi_def_cfa_register 13
 2851              	 
 2852 0058 5DF8047B 	 ldr r7,[sp],#4
 2853              	.LCFI210:
 2854              	 .cfi_restore 7
 2855              	 .cfi_def_cfa_offset 0
 2856 005c 7047     	 bx lr
 2857              	 .cfi_endproc
 2858              	.LFE214:
 2860 005e 00BF     	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 2861              	 .align 2
 2862              	 .global XMC_DMA_CH_SetEventHandler
 2863              	 .thumb
 2864              	 .thumb_func
 2866              	XMC_DMA_CH_SetEventHandler:
 2867              	.LFB215:
 639:../Libraries/XMCLib/src/xmc_dma.c **** 
 640:../Libraries/XMCLib/src/xmc_dma.c **** /* Set event handler */
 641:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 642:../Libraries/XMCLib/src/xmc_dma.c **** {
 2868              	 .loc 2 642 0
 2869              	 .cfi_startproc
 2870              	 
 2871              	 
 2872              	 
 2873 0000 80B4     	 push {r7}
 2874              	.LCFI211:
 2875              	 .cfi_def_cfa_offset 4
 2876              	 .cfi_offset 7,-4
 2877 0002 85B0     	 sub sp,sp,#20
 2878              	.LCFI212:
 2879              	 .cfi_def_cfa_offset 24
 2880 0004 00AF     	 add r7,sp,#0
 2881              	.LCFI213:
 2882              	 .cfi_def_cfa_register 7
 2883 0006 F860     	 str r0,[r7,#12]
 2884 0008 0B46     	 mov r3,r1
 2885 000a 7A60     	 str r2,[r7,#4]
 2886 000c FB72     	 strb r3,[r7,#11]
 643:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 644:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 2887              	 .loc 2 644 0
 2888 000e FB68     	 ldr r3,[r7,#12]
 2889 0010 094A     	 ldr r2,.L133
 2890 0012 9342     	 cmp r3,r2
 2891 0014 05D1     	 bne .L131
 645:../Libraries/XMCLib/src/xmc_dma.c ****   {
 646:../Libraries/XMCLib/src/xmc_dma.c **** #else
 647:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 648:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 649:../Libraries/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 2892              	 .loc 2 649 0
 2893 0016 FB7A     	 ldrb r3,[r7,#11]
 2894 0018 0849     	 ldr r1,.L133+4
 2895 001a 7A68     	 ldr r2,[r7,#4]
 2896 001c 41F82320 	 str r2,[r1,r3,lsl#2]
 2897 0020 04E0     	 b .L130
 2898              	.L131:
 650:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 651:../Libraries/XMCLib/src/xmc_dma.c ****   }
 652:../Libraries/XMCLib/src/xmc_dma.c ****   else
 653:../Libraries/XMCLib/src/xmc_dma.c ****   {
 654:../Libraries/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 2899              	 .loc 2 654 0
 2900 0022 FB7A     	 ldrb r3,[r7,#11]
 2901 0024 0649     	 ldr r1,.L133+8
 2902 0026 7A68     	 ldr r2,[r7,#4]
 2903 0028 41F82320 	 str r2,[r1,r3,lsl#2]
 2904              	.L130:
 655:../Libraries/XMCLib/src/xmc_dma.c ****   }
 656:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 657:../Libraries/XMCLib/src/xmc_dma.c **** }
 2905              	 .loc 2 657 0
 2906 002c 1437     	 adds r7,r7,#20
 2907              	.LCFI214:
 2908              	 .cfi_def_cfa_offset 4
 2909 002e BD46     	 mov sp,r7
 2910              	.LCFI215:
 2911              	 .cfi_def_cfa_register 13
 2912              	 
 2913 0030 5DF8047B 	 ldr r7,[sp],#4
 2914              	.LCFI216:
 2915              	 .cfi_restore 7
 2916              	 .cfi_def_cfa_offset 0
 2917 0034 7047     	 bx lr
 2918              	.L134:
 2919 0036 00BF     	 .align 2
 2920              	.L133:
 2921 0038 00400150 	 .word 1342259200
 2922 003c 00000000 	 .word dma0_event_handlers
 2923 0040 00000000 	 .word dma1_event_handlers
 2924              	 .cfi_endproc
 2925              	.LFE215:
 2927              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 2928              	 .align 2
 2929              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 2930              	 .thumb
 2931              	 .thumb_func
 2933              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 2934              	.LFB216:
 658:../Libraries/XMCLib/src/xmc_dma.c **** 
 659:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 660:../Libraries/XMCLib/src/xmc_dma.c **** {
 2935              	 .loc 2 660 0
 2936              	 .cfi_startproc
 2937              	 
 2938              	 
 2939 0000 80B5     	 push {r7,lr}
 2940              	.LCFI217:
 2941              	 .cfi_def_cfa_offset 8
 2942              	 .cfi_offset 7,-8
 2943              	 .cfi_offset 14,-4
 2944 0002 84B0     	 sub sp,sp,#16
 2945              	.LCFI218:
 2946              	 .cfi_def_cfa_offset 24
 2947 0004 00AF     	 add r7,sp,#0
 2948              	.LCFI219:
 2949              	 .cfi_def_cfa_register 7
 2950 0006 7860     	 str r0,[r7,#4]
 2951 0008 0B46     	 mov r3,r1
 2952 000a FB70     	 strb r3,[r7,#3]
 661:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 662:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 2953              	 .loc 2 662 0
 2954 000c FB78     	 ldrb r3,[r7,#3]
 2955 000e 7A68     	 ldr r2,[r7,#4]
 2956 0010 5821     	 movs r1,#88
 2957 0012 01FB03F3 	 mul r3,r1,r3
 2958 0016 1344     	 add r3,r3,r2
 2959 0018 4033     	 adds r3,r3,#64
 2960 001a 5B68     	 ldr r3,[r3,#4]
 2961 001c 03F4F063 	 and r3,r3,#1920
 2962 0020 DB09     	 lsrs r3,r3,#7
 2963 0022 FB60     	 str r3,[r7,#12]
 663:../Libraries/XMCLib/src/xmc_dma.c **** 
 664:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 2964              	 .loc 2 664 0
 2965 0024 FB68     	 ldr r3,[r7,#12]
 2966 0026 DBB2     	 uxtb r3,r3
 2967 0028 7868     	 ldr r0,[r7,#4]
 2968 002a 1946     	 mov r1,r3
 2969 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 665:../Libraries/XMCLib/src/xmc_dma.c **** }
 2970              	 .loc 2 665 0
 2971 0030 1037     	 adds r7,r7,#16
 2972              	.LCFI220:
 2973              	 .cfi_def_cfa_offset 8
 2974 0032 BD46     	 mov sp,r7
 2975              	.LCFI221:
 2976              	 .cfi_def_cfa_register 13
 2977              	 
 2978 0034 80BD     	 pop {r7,pc}
 2979              	 .cfi_endproc
 2980              	.LFE216:
 2982 0036 00BF     	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 2983              	 .align 2
 2984              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 2985              	 .thumb
 2986              	 .thumb_func
 2988              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 2989              	.LFB217:
 666:../Libraries/XMCLib/src/xmc_dma.c **** 
 667:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 668:../Libraries/XMCLib/src/xmc_dma.c **** {
 2990              	 .loc 2 668 0
 2991              	 .cfi_startproc
 2992              	 
 2993              	 
 2994 0000 80B5     	 push {r7,lr}
 2995              	.LCFI222:
 2996              	 .cfi_def_cfa_offset 8
 2997              	 .cfi_offset 7,-8
 2998              	 .cfi_offset 14,-4
 2999 0002 84B0     	 sub sp,sp,#16
 3000              	.LCFI223:
 3001              	 .cfi_def_cfa_offset 24
 3002 0004 00AF     	 add r7,sp,#0
 3003              	.LCFI224:
 3004              	 .cfi_def_cfa_register 7
 3005 0006 7860     	 str r0,[r7,#4]
 3006 0008 0B46     	 mov r3,r1
 3007 000a FB70     	 strb r3,[r7,#3]
 669:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 670:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 3008              	 .loc 2 670 0
 3009 000c FB78     	 ldrb r3,[r7,#3]
 3010 000e 7A68     	 ldr r2,[r7,#4]
 3011 0010 5821     	 movs r1,#88
 3012 0012 01FB03F3 	 mul r3,r1,r3
 3013 0016 1344     	 add r3,r3,r2
 3014 0018 4033     	 adds r3,r3,#64
 3015 001a 5B68     	 ldr r3,[r3,#4]
 3016 001c 03F4F043 	 and r3,r3,#30720
 3017 0020 DB0A     	 lsrs r3,r3,#11
 3018 0022 FB60     	 str r3,[r7,#12]
 671:../Libraries/XMCLib/src/xmc_dma.c **** 
 672:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3019              	 .loc 2 672 0
 3020 0024 FB68     	 ldr r3,[r7,#12]
 3021 0026 DBB2     	 uxtb r3,r3
 3022 0028 7868     	 ldr r0,[r7,#4]
 3023 002a 1946     	 mov r1,r3
 3024 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 673:../Libraries/XMCLib/src/xmc_dma.c **** }
 3025              	 .loc 2 673 0
 3026 0030 1037     	 adds r7,r7,#16
 3027              	.LCFI225:
 3028              	 .cfi_def_cfa_offset 8
 3029 0032 BD46     	 mov sp,r7
 3030              	.LCFI226:
 3031              	 .cfi_def_cfa_register 13
 3032              	 
 3033 0034 80BD     	 pop {r7,pc}
 3034              	 .cfi_endproc
 3035              	.LFE217:
 3037 0036 00BF     	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 3038              	 .align 2
 3039              	 .global XMC_DMA_IRQHandler
 3040              	 .thumb
 3041              	 .thumb_func
 3043              	XMC_DMA_IRQHandler:
 3044              	.LFB218:
 674:../Libraries/XMCLib/src/xmc_dma.c **** 
 675:../Libraries/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 676:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 677:../Libraries/XMCLib/src/xmc_dma.c **** {
 3045              	 .loc 2 677 0
 3046              	 .cfi_startproc
 3047              	 
 3048              	 
 3049 0000 80B5     	 push {r7,lr}
 3050              	.LCFI227:
 3051              	 .cfi_def_cfa_offset 8
 3052              	 .cfi_offset 7,-8
 3053              	 .cfi_offset 14,-4
 3054 0002 88B0     	 sub sp,sp,#32
 3055              	.LCFI228:
 3056              	 .cfi_def_cfa_offset 40
 3057 0004 00AF     	 add r7,sp,#0
 3058              	.LCFI229:
 3059              	 .cfi_def_cfa_register 7
 3060 0006 7860     	 str r0,[r7,#4]
 678:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 679:../Libraries/XMCLib/src/xmc_dma.c ****   int32_t channel;
 680:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 681:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 682:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 683:../Libraries/XMCLib/src/xmc_dma.c **** 
 684:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 685:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 3061              	 .loc 2 685 0
 3062 0008 7B68     	 ldr r3,[r7,#4]
 3063 000a 824A     	 ldr r2,.L170
 3064 000c 9342     	 cmp r3,r2
 3065 000e 02D1     	 bne .L138
 686:../Libraries/XMCLib/src/xmc_dma.c ****   {
 687:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 688:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 3066              	 .loc 2 688 0
 3067 0010 814B     	 ldr r3,.L170+4
 3068 0012 BB61     	 str r3,[r7,#24]
 3069 0014 01E0     	 b .L139
 3070              	.L138:
 689:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 690:../Libraries/XMCLib/src/xmc_dma.c ****   }
 691:../Libraries/XMCLib/src/xmc_dma.c ****   else
 692:../Libraries/XMCLib/src/xmc_dma.c ****   {
 693:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 3071              	 .loc 2 693 0
 3072 0016 814B     	 ldr r3,.L170+8
 3073 0018 BB61     	 str r3,[r7,#24]
 3074              	.L139:
 694:../Libraries/XMCLib/src/xmc_dma.c ****   }
 695:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 696:../Libraries/XMCLib/src/xmc_dma.c **** 
 697:../Libraries/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 3075              	 .loc 2 697 0
 3076 001a 7868     	 ldr r0,[r7,#4]
 3077 001c FFF7FEFF 	 bl XMC_DMA_GetEventStatus
 3078 0020 7861     	 str r0,[r7,#20]
 698:../Libraries/XMCLib/src/xmc_dma.c ****   channel = 0;
 3079              	 .loc 2 698 0
 3080 0022 0023     	 movs r3,#0
 3081 0024 FB61     	 str r3,[r7,#28]
 699:../Libraries/XMCLib/src/xmc_dma.c **** 
 700:../Libraries/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 3082              	 .loc 2 700 0
 3083 0026 7B69     	 ldr r3,[r7,#20]
 3084 0028 03F01003 	 and r3,r3,#16
 3085 002c 002B     	 cmp r3,#0
 3086 002e 2BD0     	 beq .L140
 701:../Libraries/XMCLib/src/xmc_dma.c ****   {
 702:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 3087              	 .loc 2 702 0
 3088 0030 7868     	 ldr r0,[r7,#4]
 3089 0032 FFF7FEFF 	 bl XMC_DMA_GetChannelsErrorStatus
 3090 0036 7861     	 str r0,[r7,#20]
 703:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3091              	 .loc 2 703 0
 3092 0038 21E0     	 b .L141
 3093              	.L145:
 704:../Libraries/XMCLib/src/xmc_dma.c ****     {
 705:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3094              	 .loc 2 705 0
 3095 003a 0122     	 movs r2,#1
 3096 003c FB69     	 ldr r3,[r7,#28]
 3097 003e 02FA03F3 	 lsl r3,r2,r3
 3098 0042 3B61     	 str r3,[r7,#16]
 706:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 3099              	 .loc 2 706 0
 3100 0044 7A69     	 ldr r2,[r7,#20]
 3101 0046 3B69     	 ldr r3,[r7,#16]
 3102 0048 1340     	 ands r3,r3,r2
 3103 004a 002B     	 cmp r3,#0
 3104 004c 14D0     	 beq .L142
 707:../Libraries/XMCLib/src/xmc_dma.c ****       {
 708:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 3105              	 .loc 2 708 0
 3106 004e FB69     	 ldr r3,[r7,#28]
 3107 0050 DBB2     	 uxtb r3,r3
 3108 0052 7868     	 ldr r0,[r7,#4]
 3109 0054 1946     	 mov r1,r3
 3110 0056 1022     	 movs r2,#16
 3111 0058 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 709:../Libraries/XMCLib/src/xmc_dma.c **** 
 710:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 711:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3112              	 .loc 2 711 0
 3113 005c FB69     	 ldr r3,[r7,#28]
 3114 005e 9B00     	 lsls r3,r3,#2
 3115 0060 BA69     	 ldr r2,[r7,#24]
 3116 0062 1344     	 add r3,r3,r2
 3117 0064 1B68     	 ldr r3,[r3]
 3118 0066 FB60     	 str r3,[r7,#12]
 712:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3119              	 .loc 2 712 0
 3120 0068 FB68     	 ldr r3,[r7,#12]
 3121 006a 002B     	 cmp r3,#0
 3122 006c 03D0     	 beq .L143
 713:../Libraries/XMCLib/src/xmc_dma.c ****         {
 714:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 3123              	 .loc 2 714 0
 3124 006e FB68     	 ldr r3,[r7,#12]
 3125 0070 1020     	 movs r0,#16
 3126 0072 9847     	 blx r3
 715:../Libraries/XMCLib/src/xmc_dma.c ****         }
 716:../Libraries/XMCLib/src/xmc_dma.c **** 
 717:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3127              	 .loc 2 717 0
 3128 0074 07E0     	 b .L144
 3129              	.L143:
 3130 0076 06E0     	 b .L144
 3131              	.L142:
 718:../Libraries/XMCLib/src/xmc_dma.c ****       }
 719:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3132              	 .loc 2 719 0
 3133 0078 FB69     	 ldr r3,[r7,#28]
 3134 007a 0133     	 adds r3,r3,#1
 3135 007c FB61     	 str r3,[r7,#28]
 3136              	.L141:
 703:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3137              	 .loc 2 703 0
 3138 007e 7B69     	 ldr r3,[r7,#20]
 3139 0080 002B     	 cmp r3,#0
 3140 0082 DAD1     	 bne .L145
 3141 0084 C3E0     	 b .L137
 3142              	.L144:
 3143 0086 C2E0     	 b .L137
 3144              	.L140:
 720:../Libraries/XMCLib/src/xmc_dma.c ****     }
 721:../Libraries/XMCLib/src/xmc_dma.c ****   }
 722:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3145              	 .loc 2 722 0
 3146 0088 7B69     	 ldr r3,[r7,#20]
 3147 008a 03F00103 	 and r3,r3,#1
 3148 008e 002B     	 cmp r3,#0
 3149 0090 2BD0     	 beq .L147
 723:../Libraries/XMCLib/src/xmc_dma.c ****   {
 724:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 3150              	 .loc 2 724 0
 3151 0092 7868     	 ldr r0,[r7,#4]
 3152 0094 FFF7FEFF 	 bl XMC_DMA_GetChannelsTransferCompleteStatus
 3153 0098 7861     	 str r0,[r7,#20]
 725:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3154              	 .loc 2 725 0
 3155 009a 21E0     	 b .L148
 3156              	.L152:
 726:../Libraries/XMCLib/src/xmc_dma.c ****     {
 727:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3157              	 .loc 2 727 0
 3158 009c 0122     	 movs r2,#1
 3159 009e FB69     	 ldr r3,[r7,#28]
 3160 00a0 02FA03F3 	 lsl r3,r2,r3
 3161 00a4 3B61     	 str r3,[r7,#16]
 728:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3162              	 .loc 2 728 0
 3163 00a6 7A69     	 ldr r2,[r7,#20]
 3164 00a8 3B69     	 ldr r3,[r7,#16]
 3165 00aa 1340     	 ands r3,r3,r2
 3166 00ac 002B     	 cmp r3,#0
 3167 00ae 14D0     	 beq .L149
 729:../Libraries/XMCLib/src/xmc_dma.c ****       {
 730:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 3168              	 .loc 2 730 0
 3169 00b0 FB69     	 ldr r3,[r7,#28]
 3170 00b2 DBB2     	 uxtb r3,r3
 3171 00b4 7868     	 ldr r0,[r7,#4]
 3172 00b6 1946     	 mov r1,r3
 3173 00b8 0F22     	 movs r2,#15
 3174 00ba FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 731:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 732:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 733:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));
 734:../Libraries/XMCLib/src/xmc_dma.c **** 
 735:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 736:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3175              	 .loc 2 736 0
 3176 00be FB69     	 ldr r3,[r7,#28]
 3177 00c0 9B00     	 lsls r3,r3,#2
 3178 00c2 BA69     	 ldr r2,[r7,#24]
 3179 00c4 1344     	 add r3,r3,r2
 3180 00c6 1B68     	 ldr r3,[r3]
 3181 00c8 FB60     	 str r3,[r7,#12]
 737:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3182              	 .loc 2 737 0
 3183 00ca FB68     	 ldr r3,[r7,#12]
 3184 00cc 002B     	 cmp r3,#0
 3185 00ce 03D0     	 beq .L150
 738:../Libraries/XMCLib/src/xmc_dma.c ****         {
 739:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 3186              	 .loc 2 739 0
 3187 00d0 FB68     	 ldr r3,[r7,#12]
 3188 00d2 0120     	 movs r0,#1
 3189 00d4 9847     	 blx r3
 740:../Libraries/XMCLib/src/xmc_dma.c ****         }
 741:../Libraries/XMCLib/src/xmc_dma.c **** 
 742:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3190              	 .loc 2 742 0
 3191 00d6 07E0     	 b .L151
 3192              	.L150:
 3193 00d8 06E0     	 b .L151
 3194              	.L149:
 743:../Libraries/XMCLib/src/xmc_dma.c ****       }
 744:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3195              	 .loc 2 744 0
 3196 00da FB69     	 ldr r3,[r7,#28]
 3197 00dc 0133     	 adds r3,r3,#1
 3198 00de FB61     	 str r3,[r7,#28]
 3199              	.L148:
 725:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3200              	 .loc 2 725 0
 3201 00e0 7B69     	 ldr r3,[r7,#20]
 3202 00e2 002B     	 cmp r3,#0
 3203 00e4 DAD1     	 bne .L152
 3204 00e6 92E0     	 b .L137
 3205              	.L151:
 3206 00e8 91E0     	 b .L137
 3207              	.L147:
 745:../Libraries/XMCLib/src/xmc_dma.c ****     }
 746:../Libraries/XMCLib/src/xmc_dma.c ****   }
 747:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3208              	 .loc 2 747 0
 3209 00ea 7B69     	 ldr r3,[r7,#20]
 3210 00ec 03F00203 	 and r3,r3,#2
 3211 00f0 002B     	 cmp r3,#0
 3212 00f2 2BD0     	 beq .L153
 748:../Libraries/XMCLib/src/xmc_dma.c ****   {
 749:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 3213              	 .loc 2 749 0
 3214 00f4 7868     	 ldr r0,[r7,#4]
 3215 00f6 FFF7FEFF 	 bl XMC_DMA_GetChannelsBlockCompleteStatus
 3216 00fa 7861     	 str r0,[r7,#20]
 750:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3217              	 .loc 2 750 0
 3218 00fc 21E0     	 b .L154
 3219              	.L158:
 751:../Libraries/XMCLib/src/xmc_dma.c ****     {
 752:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3220              	 .loc 2 752 0
 3221 00fe 0122     	 movs r2,#1
 3222 0100 FB69     	 ldr r3,[r7,#28]
 3223 0102 02FA03F3 	 lsl r3,r2,r3
 3224 0106 3B61     	 str r3,[r7,#16]
 753:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3225              	 .loc 2 753 0
 3226 0108 7A69     	 ldr r2,[r7,#20]
 3227 010a 3B69     	 ldr r3,[r7,#16]
 3228 010c 1340     	 ands r3,r3,r2
 3229 010e 002B     	 cmp r3,#0
 3230 0110 14D0     	 beq .L155
 754:../Libraries/XMCLib/src/xmc_dma.c ****       {
 755:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 3231              	 .loc 2 755 0
 3232 0112 FB69     	 ldr r3,[r7,#28]
 3233 0114 DBB2     	 uxtb r3,r3
 3234 0116 7868     	 ldr r0,[r7,#4]
 3235 0118 1946     	 mov r1,r3
 3236 011a 0E22     	 movs r2,#14
 3237 011c FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 756:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 757:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));
 758:../Libraries/XMCLib/src/xmc_dma.c **** 
 759:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 760:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3238              	 .loc 2 760 0
 3239 0120 FB69     	 ldr r3,[r7,#28]
 3240 0122 9B00     	 lsls r3,r3,#2
 3241 0124 BA69     	 ldr r2,[r7,#24]
 3242 0126 1344     	 add r3,r3,r2
 3243 0128 1B68     	 ldr r3,[r3]
 3244 012a FB60     	 str r3,[r7,#12]
 761:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3245              	 .loc 2 761 0
 3246 012c FB68     	 ldr r3,[r7,#12]
 3247 012e 002B     	 cmp r3,#0
 3248 0130 03D0     	 beq .L156
 762:../Libraries/XMCLib/src/xmc_dma.c ****         {
 763:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 3249              	 .loc 2 763 0
 3250 0132 FB68     	 ldr r3,[r7,#12]
 3251 0134 0220     	 movs r0,#2
 3252 0136 9847     	 blx r3
 764:../Libraries/XMCLib/src/xmc_dma.c ****         }
 765:../Libraries/XMCLib/src/xmc_dma.c **** 
 766:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3253              	 .loc 2 766 0
 3254 0138 07E0     	 b .L157
 3255              	.L156:
 3256 013a 06E0     	 b .L157
 3257              	.L155:
 767:../Libraries/XMCLib/src/xmc_dma.c ****       }
 768:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3258              	 .loc 2 768 0
 3259 013c FB69     	 ldr r3,[r7,#28]
 3260 013e 0133     	 adds r3,r3,#1
 3261 0140 FB61     	 str r3,[r7,#28]
 3262              	.L154:
 750:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3263              	 .loc 2 750 0
 3264 0142 7B69     	 ldr r3,[r7,#20]
 3265 0144 002B     	 cmp r3,#0
 3266 0146 DAD1     	 bne .L158
 3267 0148 61E0     	 b .L137
 3268              	.L157:
 3269 014a 60E0     	 b .L137
 3270              	.L153:
 769:../Libraries/XMCLib/src/xmc_dma.c ****     }
 770:../Libraries/XMCLib/src/xmc_dma.c ****   }
 771:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3271              	 .loc 2 771 0
 3272 014c 7B69     	 ldr r3,[r7,#20]
 3273 014e 03F00403 	 and r3,r3,#4
 3274 0152 002B     	 cmp r3,#0
 3275 0154 2BD0     	 beq .L159
 772:../Libraries/XMCLib/src/xmc_dma.c ****   {
 773:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 3276              	 .loc 2 773 0
 3277 0156 7868     	 ldr r0,[r7,#4]
 3278 0158 FFF7FEFF 	 bl XMC_DMA_GetChannelsSourceTransactionCompleteStatus
 3279 015c 7861     	 str r0,[r7,#20]
 774:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3280              	 .loc 2 774 0
 3281 015e 21E0     	 b .L160
 3282              	.L164:
 775:../Libraries/XMCLib/src/xmc_dma.c ****     {
 776:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3283              	 .loc 2 776 0
 3284 0160 0122     	 movs r2,#1
 3285 0162 FB69     	 ldr r3,[r7,#28]
 3286 0164 02FA03F3 	 lsl r3,r2,r3
 3287 0168 3B61     	 str r3,[r7,#16]
 777:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3288              	 .loc 2 777 0
 3289 016a 7A69     	 ldr r2,[r7,#20]
 3290 016c 3B69     	 ldr r3,[r7,#16]
 3291 016e 1340     	 ands r3,r3,r2
 3292 0170 002B     	 cmp r3,#0
 3293 0172 14D0     	 beq .L161
 778:../Libraries/XMCLib/src/xmc_dma.c ****       {
 779:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 3294              	 .loc 2 779 0
 3295 0174 FB69     	 ldr r3,[r7,#28]
 3296 0176 DBB2     	 uxtb r3,r3
 3297 0178 7868     	 ldr r0,[r7,#4]
 3298 017a 1946     	 mov r1,r3
 3299 017c 0422     	 movs r2,#4
 3300 017e FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 780:../Libraries/XMCLib/src/xmc_dma.c **** 
 781:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 782:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3301              	 .loc 2 782 0
 3302 0182 FB69     	 ldr r3,[r7,#28]
 3303 0184 9B00     	 lsls r3,r3,#2
 3304 0186 BA69     	 ldr r2,[r7,#24]
 3305 0188 1344     	 add r3,r3,r2
 3306 018a 1B68     	 ldr r3,[r3]
 3307 018c FB60     	 str r3,[r7,#12]
 783:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3308              	 .loc 2 783 0
 3309 018e FB68     	 ldr r3,[r7,#12]
 3310 0190 002B     	 cmp r3,#0
 3311 0192 03D0     	 beq .L162
 784:../Libraries/XMCLib/src/xmc_dma.c ****         {
 785:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 3312              	 .loc 2 785 0
 3313 0194 FB68     	 ldr r3,[r7,#12]
 3314 0196 0420     	 movs r0,#4
 3315 0198 9847     	 blx r3
 786:../Libraries/XMCLib/src/xmc_dma.c ****         }
 787:../Libraries/XMCLib/src/xmc_dma.c **** 
 788:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3316              	 .loc 2 788 0
 3317 019a 07E0     	 b .L163
 3318              	.L162:
 3319 019c 06E0     	 b .L163
 3320              	.L161:
 789:../Libraries/XMCLib/src/xmc_dma.c ****       }
 790:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3321              	 .loc 2 790 0
 3322 019e FB69     	 ldr r3,[r7,#28]
 3323 01a0 0133     	 adds r3,r3,#1
 3324 01a2 FB61     	 str r3,[r7,#28]
 3325              	.L160:
 774:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3326              	 .loc 2 774 0
 3327 01a4 7B69     	 ldr r3,[r7,#20]
 3328 01a6 002B     	 cmp r3,#0
 3329 01a8 DAD1     	 bne .L164
 3330 01aa 30E0     	 b .L137
 3331              	.L163:
 3332 01ac 2FE0     	 b .L137
 3333              	.L159:
 791:../Libraries/XMCLib/src/xmc_dma.c ****     }
 792:../Libraries/XMCLib/src/xmc_dma.c ****   }
 793:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3334              	 .loc 2 793 0
 3335 01ae 7B69     	 ldr r3,[r7,#20]
 3336 01b0 03F00803 	 and r3,r3,#8
 3337 01b4 002B     	 cmp r3,#0
 3338 01b6 2AD0     	 beq .L137
 794:../Libraries/XMCLib/src/xmc_dma.c ****   {
 795:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 3339              	 .loc 2 795 0
 3340 01b8 7868     	 ldr r0,[r7,#4]
 3341 01ba FFF7FEFF 	 bl XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
 3342 01be 7861     	 str r0,[r7,#20]
 796:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3343              	 .loc 2 796 0
 3344 01c0 21E0     	 b .L165
 3345              	.L169:
 797:../Libraries/XMCLib/src/xmc_dma.c ****     {
 798:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3346              	 .loc 2 798 0
 3347 01c2 0122     	 movs r2,#1
 3348 01c4 FB69     	 ldr r3,[r7,#28]
 3349 01c6 02FA03F3 	 lsl r3,r2,r3
 3350 01ca 3B61     	 str r3,[r7,#16]
 799:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3351              	 .loc 2 799 0
 3352 01cc 7A69     	 ldr r2,[r7,#20]
 3353 01ce 3B69     	 ldr r3,[r7,#16]
 3354 01d0 1340     	 ands r3,r3,r2
 3355 01d2 002B     	 cmp r3,#0
 3356 01d4 14D0     	 beq .L166
 800:../Libraries/XMCLib/src/xmc_dma.c ****       {
 801:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 3357              	 .loc 2 801 0
 3358 01d6 FB69     	 ldr r3,[r7,#28]
 3359 01d8 DBB2     	 uxtb r3,r3
 3360 01da 7868     	 ldr r0,[r7,#4]
 3361 01dc 1946     	 mov r1,r3
 3362 01de 0822     	 movs r2,#8
 3363 01e0 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 802:../Libraries/XMCLib/src/xmc_dma.c **** 
 803:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 804:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3364              	 .loc 2 804 0
 3365 01e4 FB69     	 ldr r3,[r7,#28]
 3366 01e6 9B00     	 lsls r3,r3,#2
 3367 01e8 BA69     	 ldr r2,[r7,#24]
 3368 01ea 1344     	 add r3,r3,r2
 3369 01ec 1B68     	 ldr r3,[r3]
 3370 01ee FB60     	 str r3,[r7,#12]
 805:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3371              	 .loc 2 805 0
 3372 01f0 FB68     	 ldr r3,[r7,#12]
 3373 01f2 002B     	 cmp r3,#0
 3374 01f4 03D0     	 beq .L167
 806:../Libraries/XMCLib/src/xmc_dma.c ****         {
 807:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 3375              	 .loc 2 807 0
 3376 01f6 FB68     	 ldr r3,[r7,#12]
 3377 01f8 0820     	 movs r0,#8
 3378 01fa 9847     	 blx r3
 808:../Libraries/XMCLib/src/xmc_dma.c ****         }
 809:../Libraries/XMCLib/src/xmc_dma.c **** 
 810:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3379              	 .loc 2 810 0
 3380 01fc 07E0     	 b .L168
 3381              	.L167:
 3382 01fe 06E0     	 b .L168
 3383              	.L166:
 811:../Libraries/XMCLib/src/xmc_dma.c ****       }
 812:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3384              	 .loc 2 812 0
 3385 0200 FB69     	 ldr r3,[r7,#28]
 3386 0202 0133     	 adds r3,r3,#1
 3387 0204 FB61     	 str r3,[r7,#28]
 3388              	.L165:
 796:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3389              	 .loc 2 796 0
 3390 0206 7B69     	 ldr r3,[r7,#20]
 3391 0208 002B     	 cmp r3,#0
 3392 020a DAD1     	 bne .L169
 3393 020c FFE7     	 b .L137
 3394              	.L168:
 3395              	.L137:
 813:../Libraries/XMCLib/src/xmc_dma.c ****     }
 814:../Libraries/XMCLib/src/xmc_dma.c ****   }
 815:../Libraries/XMCLib/src/xmc_dma.c ****   else
 816:../Libraries/XMCLib/src/xmc_dma.c ****   {
 817:../Libraries/XMCLib/src/xmc_dma.c ****     /* no active interrupt was found? */
 818:../Libraries/XMCLib/src/xmc_dma.c ****   }
 819:../Libraries/XMCLib/src/xmc_dma.c **** 
 820:../Libraries/XMCLib/src/xmc_dma.c **** }
 3396              	 .loc 2 820 0
 3397 020e 2037     	 adds r7,r7,#32
 3398              	.LCFI230:
 3399              	 .cfi_def_cfa_offset 8
 3400 0210 BD46     	 mov sp,r7
 3401              	.LCFI231:
 3402              	 .cfi_def_cfa_register 13
 3403              	 
 3404 0212 80BD     	 pop {r7,pc}
 3405              	.L171:
 3406              	 .align 2
 3407              	.L170:
 3408 0214 00400150 	 .word 1342259200
 3409 0218 00000000 	 .word dma0_event_handlers
 3410 021c 00000000 	 .word dma1_event_handlers
 3411              	 .cfi_endproc
 3412              	.LFE218:
 3414              	 .text
 3415              	.Letext0:
 3416              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3417              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3418              	 .file 5 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3419              	 .file 6 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/XMCLib/inc/xmc4_scu.h"
 3420              	 .file 7 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/cmsis_gcc.h"
 3421              	 .file 8 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Include/core_cm4.h"
 3422              	 .file 9 "C:/Users/Rui Mendes/Desktop/DAVE/_Naive/_ForTesting/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:20     .text.XMC_DMA_GetEventStatus:00000000 $t
    {standard input}:24     .text.XMC_DMA_GetEventStatus:00000000 XMC_DMA_GetEventStatus
    {standard input}:64     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 $t
    {standard input}:68     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 XMC_DMA_GetChannelsTransferCompleteStatus
    {standard input}:107    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 $t
    {standard input}:111    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 XMC_DMA_GetChannelsBlockCompleteStatus
    {standard input}:150    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 $t
    {standard input}:154    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsSourceTransactionCompleteStatus
    {standard input}:193    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 $t
    {standard input}:197    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
    {standard input}:236    .text.XMC_DMA_GetChannelsErrorStatus:00000000 $t
    {standard input}:240    .text.XMC_DMA_GetChannelsErrorStatus:00000000 XMC_DMA_GetChannelsErrorStatus
    {standard input}:279    .bss.dma0_event_handlers:00000000 $d
    {standard input}:282    .bss.dma0_event_handlers:00000000 dma0_event_handlers
    {standard input}:285    .bss.dma1_event_handlers:00000000 $d
    {standard input}:288    .bss.dma1_event_handlers:00000000 dma1_event_handlers
    {standard input}:291    .text.XMC_DMA_Init:00000000 $t
    {standard input}:296    .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:336    .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:331    .text.XMC_DMA_Enable:00000000 $t
    {standard input}:384    .text.XMC_DMA_Enable:0000002c $d
    {standard input}:391    .text.XMC_DMA_Disable:00000000 $t
    {standard input}:396    .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:444    .text.XMC_DMA_Disable:0000002c $d
    {standard input}:451    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:456    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:553    .text.XMC_DMA_IsEnabled:00000088 $d
    {standard input}:560    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:565    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:668    .text.XMC_DMA_EnableRequestLine:00000090 $d
    {standard input}:674    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:679    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:743    .text.XMC_DMA_DisableRequestLine:0000004c $d
    {standard input}:749    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:754    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:836    .text.XMC_DMA_ClearRequestLine:00000070 $d
    {standard input}:842    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:847    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:917    .text.XMC_DMA_GetOverrunStatus:00000058 $d
    {standard input}:923    .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:928    .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:984    .text.XMC_DMA_ClearOverrunStatus:0000003c $d
    {standard input}:990    .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:995    .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:1049   .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:1054   .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:1103   .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:1108   .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:1982   .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:1424   .text.XMC_DMA_CH_Init:00000250 $d
    {standard input}:1433   .text.XMC_DMA_CH_Init:00000274 $t
    {standard input}:1567   .text.XMC_DMA_CH_Init:0000037c $d
    {standard input}:1570   .text.XMC_DMA_CH_Init:00000380 $t
    {standard input}:1656   .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:1661   .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:1714   .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:1719   .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:1772   .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:1777   .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:1829   .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:1834   .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:1903   .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:1908   .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:1977   .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:2051   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:2056   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:2137   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:2142   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:2211   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:2216   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:2269   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:2274   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:2343   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:2348   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:2401   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:2406   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:2478   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:2483   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:2555   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:2560   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:2613   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:2618   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:2671   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:2676   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:2729   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:2734   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:2787   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:2792   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:2861   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:2866   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:2921   .text.XMC_DMA_CH_SetEventHandler:00000038 $d
    {standard input}:2928   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:2933   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:2983   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:2988   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:3038   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:3043   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:3408   .text.XMC_DMA_IRQHandler:00000214 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_IsPeripheralResetAsserted
